
CubeMC Configuration.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bbec  080000c0  080000c0  000080c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000938  0800bcb0  0800bcb0  00013cb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c5e8  0800c5e8  000145e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c5f0  0800c5f0  000145f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800c5f4  0800c5f4  000145f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000548  20000000  0800c5f8  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000500  20000548  0800cb40  00018548  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000a48  0800cb40  00018a48  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  00018548  2**0
                  CONTENTS, READONLY
 10 .debug_info   00012faf  00000000  00000000  00018570  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002a8e  00000000  00000000  0002b51f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000e20  00000000  00000000  0002dfb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001180  00000000  00000000  0002edd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00006e72  00000000  00000000  0002ff50  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00004256  00000000  00000000  00036dc2  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      00000082  00000000  00000000  0003b018  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000035d8  00000000  00000000  0003b09c  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    00009af1  00000000  00000000  0003e674  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000548 	.word	0x20000548
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800bc94 	.word	0x0800bc94

080000e8 <frame_dummy>:
 80000e8:	b508      	push	{r3, lr}
 80000ea:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4803      	ldr	r0, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4904      	ldr	r1, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd08      	pop	{r3, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	0800bc94 	.word	0x0800bc94
 8000104:	2000054c 	.word	0x2000054c

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	2a00      	cmp	r2, #0
 8000112:	d001      	beq.n	8000118 <strcmp+0x10>
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <__gnu_thumb1_case_uqi>:
 800011c:	b402      	push	{r1}
 800011e:	4671      	mov	r1, lr
 8000120:	0849      	lsrs	r1, r1, #1
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	5c09      	ldrb	r1, [r1, r0]
 8000126:	0049      	lsls	r1, r1, #1
 8000128:	448e      	add	lr, r1
 800012a:	bc02      	pop	{r1}
 800012c:	4770      	bx	lr
 800012e:	46c0      	nop			; (mov r8, r8)

08000130 <__gnu_thumb1_case_uhi>:
 8000130:	b403      	push	{r0, r1}
 8000132:	4671      	mov	r1, lr
 8000134:	0849      	lsrs	r1, r1, #1
 8000136:	0040      	lsls	r0, r0, #1
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	5a09      	ldrh	r1, [r1, r0]
 800013c:	0049      	lsls	r1, r1, #1
 800013e:	448e      	add	lr, r1
 8000140:	bc03      	pop	{r0, r1}
 8000142:	4770      	bx	lr

08000144 <__aeabi_uidiv>:
 8000144:	2900      	cmp	r1, #0
 8000146:	d034      	beq.n	80001b2 <.udivsi3_skip_div0_test+0x6a>

08000148 <.udivsi3_skip_div0_test>:
 8000148:	2301      	movs	r3, #1
 800014a:	2200      	movs	r2, #0
 800014c:	b410      	push	{r4}
 800014e:	4288      	cmp	r0, r1
 8000150:	d32c      	bcc.n	80001ac <.udivsi3_skip_div0_test+0x64>
 8000152:	2401      	movs	r4, #1
 8000154:	0724      	lsls	r4, r4, #28
 8000156:	42a1      	cmp	r1, r4
 8000158:	d204      	bcs.n	8000164 <.udivsi3_skip_div0_test+0x1c>
 800015a:	4281      	cmp	r1, r0
 800015c:	d202      	bcs.n	8000164 <.udivsi3_skip_div0_test+0x1c>
 800015e:	0109      	lsls	r1, r1, #4
 8000160:	011b      	lsls	r3, r3, #4
 8000162:	e7f8      	b.n	8000156 <.udivsi3_skip_div0_test+0xe>
 8000164:	00e4      	lsls	r4, r4, #3
 8000166:	42a1      	cmp	r1, r4
 8000168:	d204      	bcs.n	8000174 <.udivsi3_skip_div0_test+0x2c>
 800016a:	4281      	cmp	r1, r0
 800016c:	d202      	bcs.n	8000174 <.udivsi3_skip_div0_test+0x2c>
 800016e:	0049      	lsls	r1, r1, #1
 8000170:	005b      	lsls	r3, r3, #1
 8000172:	e7f8      	b.n	8000166 <.udivsi3_skip_div0_test+0x1e>
 8000174:	4288      	cmp	r0, r1
 8000176:	d301      	bcc.n	800017c <.udivsi3_skip_div0_test+0x34>
 8000178:	1a40      	subs	r0, r0, r1
 800017a:	431a      	orrs	r2, r3
 800017c:	084c      	lsrs	r4, r1, #1
 800017e:	42a0      	cmp	r0, r4
 8000180:	d302      	bcc.n	8000188 <.udivsi3_skip_div0_test+0x40>
 8000182:	1b00      	subs	r0, r0, r4
 8000184:	085c      	lsrs	r4, r3, #1
 8000186:	4322      	orrs	r2, r4
 8000188:	088c      	lsrs	r4, r1, #2
 800018a:	42a0      	cmp	r0, r4
 800018c:	d302      	bcc.n	8000194 <.udivsi3_skip_div0_test+0x4c>
 800018e:	1b00      	subs	r0, r0, r4
 8000190:	089c      	lsrs	r4, r3, #2
 8000192:	4322      	orrs	r2, r4
 8000194:	08cc      	lsrs	r4, r1, #3
 8000196:	42a0      	cmp	r0, r4
 8000198:	d302      	bcc.n	80001a0 <.udivsi3_skip_div0_test+0x58>
 800019a:	1b00      	subs	r0, r0, r4
 800019c:	08dc      	lsrs	r4, r3, #3
 800019e:	4322      	orrs	r2, r4
 80001a0:	2800      	cmp	r0, #0
 80001a2:	d003      	beq.n	80001ac <.udivsi3_skip_div0_test+0x64>
 80001a4:	091b      	lsrs	r3, r3, #4
 80001a6:	d001      	beq.n	80001ac <.udivsi3_skip_div0_test+0x64>
 80001a8:	0909      	lsrs	r1, r1, #4
 80001aa:	e7e3      	b.n	8000174 <.udivsi3_skip_div0_test+0x2c>
 80001ac:	1c10      	adds	r0, r2, #0
 80001ae:	bc10      	pop	{r4}
 80001b0:	4770      	bx	lr
 80001b2:	2800      	cmp	r0, #0
 80001b4:	d001      	beq.n	80001ba <.udivsi3_skip_div0_test+0x72>
 80001b6:	2000      	movs	r0, #0
 80001b8:	43c0      	mvns	r0, r0
 80001ba:	b407      	push	{r0, r1, r2}
 80001bc:	4802      	ldr	r0, [pc, #8]	; (80001c8 <.udivsi3_skip_div0_test+0x80>)
 80001be:	a102      	add	r1, pc, #8	; (adr r1, 80001c8 <.udivsi3_skip_div0_test+0x80>)
 80001c0:	1840      	adds	r0, r0, r1
 80001c2:	9002      	str	r0, [sp, #8]
 80001c4:	bd03      	pop	{r0, r1, pc}
 80001c6:	46c0      	nop			; (mov r8, r8)
 80001c8:	000000d9 	.word	0x000000d9

080001cc <__aeabi_uidivmod>:
 80001cc:	2900      	cmp	r1, #0
 80001ce:	d0f0      	beq.n	80001b2 <.udivsi3_skip_div0_test+0x6a>
 80001d0:	b503      	push	{r0, r1, lr}
 80001d2:	f7ff ffb9 	bl	8000148 <.udivsi3_skip_div0_test>
 80001d6:	bc0e      	pop	{r1, r2, r3}
 80001d8:	4342      	muls	r2, r0
 80001da:	1a89      	subs	r1, r1, r2
 80001dc:	4718      	bx	r3
 80001de:	46c0      	nop			; (mov r8, r8)

080001e0 <__aeabi_idiv>:
 80001e0:	2900      	cmp	r1, #0
 80001e2:	d041      	beq.n	8000268 <.divsi3_skip_div0_test+0x84>

080001e4 <.divsi3_skip_div0_test>:
 80001e4:	b410      	push	{r4}
 80001e6:	1c04      	adds	r4, r0, #0
 80001e8:	404c      	eors	r4, r1
 80001ea:	46a4      	mov	ip, r4
 80001ec:	2301      	movs	r3, #1
 80001ee:	2200      	movs	r2, #0
 80001f0:	2900      	cmp	r1, #0
 80001f2:	d500      	bpl.n	80001f6 <.divsi3_skip_div0_test+0x12>
 80001f4:	4249      	negs	r1, r1
 80001f6:	2800      	cmp	r0, #0
 80001f8:	d500      	bpl.n	80001fc <.divsi3_skip_div0_test+0x18>
 80001fa:	4240      	negs	r0, r0
 80001fc:	4288      	cmp	r0, r1
 80001fe:	d32c      	bcc.n	800025a <.divsi3_skip_div0_test+0x76>
 8000200:	2401      	movs	r4, #1
 8000202:	0724      	lsls	r4, r4, #28
 8000204:	42a1      	cmp	r1, r4
 8000206:	d204      	bcs.n	8000212 <.divsi3_skip_div0_test+0x2e>
 8000208:	4281      	cmp	r1, r0
 800020a:	d202      	bcs.n	8000212 <.divsi3_skip_div0_test+0x2e>
 800020c:	0109      	lsls	r1, r1, #4
 800020e:	011b      	lsls	r3, r3, #4
 8000210:	e7f8      	b.n	8000204 <.divsi3_skip_div0_test+0x20>
 8000212:	00e4      	lsls	r4, r4, #3
 8000214:	42a1      	cmp	r1, r4
 8000216:	d204      	bcs.n	8000222 <.divsi3_skip_div0_test+0x3e>
 8000218:	4281      	cmp	r1, r0
 800021a:	d202      	bcs.n	8000222 <.divsi3_skip_div0_test+0x3e>
 800021c:	0049      	lsls	r1, r1, #1
 800021e:	005b      	lsls	r3, r3, #1
 8000220:	e7f8      	b.n	8000214 <.divsi3_skip_div0_test+0x30>
 8000222:	4288      	cmp	r0, r1
 8000224:	d301      	bcc.n	800022a <.divsi3_skip_div0_test+0x46>
 8000226:	1a40      	subs	r0, r0, r1
 8000228:	431a      	orrs	r2, r3
 800022a:	084c      	lsrs	r4, r1, #1
 800022c:	42a0      	cmp	r0, r4
 800022e:	d302      	bcc.n	8000236 <.divsi3_skip_div0_test+0x52>
 8000230:	1b00      	subs	r0, r0, r4
 8000232:	085c      	lsrs	r4, r3, #1
 8000234:	4322      	orrs	r2, r4
 8000236:	088c      	lsrs	r4, r1, #2
 8000238:	42a0      	cmp	r0, r4
 800023a:	d302      	bcc.n	8000242 <.divsi3_skip_div0_test+0x5e>
 800023c:	1b00      	subs	r0, r0, r4
 800023e:	089c      	lsrs	r4, r3, #2
 8000240:	4322      	orrs	r2, r4
 8000242:	08cc      	lsrs	r4, r1, #3
 8000244:	42a0      	cmp	r0, r4
 8000246:	d302      	bcc.n	800024e <.divsi3_skip_div0_test+0x6a>
 8000248:	1b00      	subs	r0, r0, r4
 800024a:	08dc      	lsrs	r4, r3, #3
 800024c:	4322      	orrs	r2, r4
 800024e:	2800      	cmp	r0, #0
 8000250:	d003      	beq.n	800025a <.divsi3_skip_div0_test+0x76>
 8000252:	091b      	lsrs	r3, r3, #4
 8000254:	d001      	beq.n	800025a <.divsi3_skip_div0_test+0x76>
 8000256:	0909      	lsrs	r1, r1, #4
 8000258:	e7e3      	b.n	8000222 <.divsi3_skip_div0_test+0x3e>
 800025a:	1c10      	adds	r0, r2, #0
 800025c:	4664      	mov	r4, ip
 800025e:	2c00      	cmp	r4, #0
 8000260:	d500      	bpl.n	8000264 <.divsi3_skip_div0_test+0x80>
 8000262:	4240      	negs	r0, r0
 8000264:	bc10      	pop	{r4}
 8000266:	4770      	bx	lr
 8000268:	2800      	cmp	r0, #0
 800026a:	d006      	beq.n	800027a <.divsi3_skip_div0_test+0x96>
 800026c:	db03      	blt.n	8000276 <.divsi3_skip_div0_test+0x92>
 800026e:	2000      	movs	r0, #0
 8000270:	43c0      	mvns	r0, r0
 8000272:	0840      	lsrs	r0, r0, #1
 8000274:	e001      	b.n	800027a <.divsi3_skip_div0_test+0x96>
 8000276:	2080      	movs	r0, #128	; 0x80
 8000278:	0600      	lsls	r0, r0, #24
 800027a:	b407      	push	{r0, r1, r2}
 800027c:	4802      	ldr	r0, [pc, #8]	; (8000288 <.divsi3_skip_div0_test+0xa4>)
 800027e:	a102      	add	r1, pc, #8	; (adr r1, 8000288 <.divsi3_skip_div0_test+0xa4>)
 8000280:	1840      	adds	r0, r0, r1
 8000282:	9002      	str	r0, [sp, #8]
 8000284:	bd03      	pop	{r0, r1, pc}
 8000286:	46c0      	nop			; (mov r8, r8)
 8000288:	00000019 	.word	0x00000019

0800028c <__aeabi_idivmod>:
 800028c:	2900      	cmp	r1, #0
 800028e:	d0eb      	beq.n	8000268 <.divsi3_skip_div0_test+0x84>
 8000290:	b503      	push	{r0, r1, lr}
 8000292:	f7ff ffa7 	bl	80001e4 <.divsi3_skip_div0_test>
 8000296:	bc0e      	pop	{r1, r2, r3}
 8000298:	4342      	muls	r2, r0
 800029a:	1a89      	subs	r1, r1, r2
 800029c:	4718      	bx	r3
 800029e:	46c0      	nop			; (mov r8, r8)

080002a0 <__aeabi_idiv0>:
 80002a0:	4770      	bx	lr
 80002a2:	46c0      	nop			; (mov r8, r8)

080002a4 <__aeabi_cdrcmple>:
 80002a4:	4684      	mov	ip, r0
 80002a6:	1c10      	adds	r0, r2, #0
 80002a8:	4662      	mov	r2, ip
 80002aa:	468c      	mov	ip, r1
 80002ac:	1c19      	adds	r1, r3, #0
 80002ae:	4663      	mov	r3, ip
 80002b0:	e000      	b.n	80002b4 <__aeabi_cdcmpeq>
 80002b2:	46c0      	nop			; (mov r8, r8)

080002b4 <__aeabi_cdcmpeq>:
 80002b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80002b6:	f001 fd37 	bl	8001d28 <__ledf2>
 80002ba:	2800      	cmp	r0, #0
 80002bc:	d401      	bmi.n	80002c2 <__aeabi_cdcmpeq+0xe>
 80002be:	2100      	movs	r1, #0
 80002c0:	42c8      	cmn	r0, r1
 80002c2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080002c4 <__aeabi_dcmpeq>:
 80002c4:	b510      	push	{r4, lr}
 80002c6:	f001 fc67 	bl	8001b98 <__eqdf2>
 80002ca:	4240      	negs	r0, r0
 80002cc:	3001      	adds	r0, #1
 80002ce:	bd10      	pop	{r4, pc}

080002d0 <__aeabi_dcmplt>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	f001 fd29 	bl	8001d28 <__ledf2>
 80002d6:	2800      	cmp	r0, #0
 80002d8:	db01      	blt.n	80002de <__aeabi_dcmplt+0xe>
 80002da:	2000      	movs	r0, #0
 80002dc:	bd10      	pop	{r4, pc}
 80002de:	2001      	movs	r0, #1
 80002e0:	bd10      	pop	{r4, pc}
 80002e2:	46c0      	nop			; (mov r8, r8)

080002e4 <__aeabi_dcmple>:
 80002e4:	b510      	push	{r4, lr}
 80002e6:	f001 fd1f 	bl	8001d28 <__ledf2>
 80002ea:	2800      	cmp	r0, #0
 80002ec:	dd01      	ble.n	80002f2 <__aeabi_dcmple+0xe>
 80002ee:	2000      	movs	r0, #0
 80002f0:	bd10      	pop	{r4, pc}
 80002f2:	2001      	movs	r0, #1
 80002f4:	bd10      	pop	{r4, pc}
 80002f6:	46c0      	nop			; (mov r8, r8)

080002f8 <__aeabi_dcmpgt>:
 80002f8:	b510      	push	{r4, lr}
 80002fa:	f001 fc97 	bl	8001c2c <__gedf2>
 80002fe:	2800      	cmp	r0, #0
 8000300:	dc01      	bgt.n	8000306 <__aeabi_dcmpgt+0xe>
 8000302:	2000      	movs	r0, #0
 8000304:	bd10      	pop	{r4, pc}
 8000306:	2001      	movs	r0, #1
 8000308:	bd10      	pop	{r4, pc}
 800030a:	46c0      	nop			; (mov r8, r8)

0800030c <__aeabi_dcmpge>:
 800030c:	b510      	push	{r4, lr}
 800030e:	f001 fc8d 	bl	8001c2c <__gedf2>
 8000312:	2800      	cmp	r0, #0
 8000314:	da01      	bge.n	800031a <__aeabi_dcmpge+0xe>
 8000316:	2000      	movs	r0, #0
 8000318:	bd10      	pop	{r4, pc}
 800031a:	2001      	movs	r0, #1
 800031c:	bd10      	pop	{r4, pc}
 800031e:	46c0      	nop			; (mov r8, r8)

08000320 <__aeabi_cfrcmple>:
 8000320:	4684      	mov	ip, r0
 8000322:	1c08      	adds	r0, r1, #0
 8000324:	4661      	mov	r1, ip
 8000326:	e7ff      	b.n	8000328 <__aeabi_cfcmpeq>

08000328 <__aeabi_cfcmpeq>:
 8000328:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800032a:	f000 fa43 	bl	80007b4 <__lesf2>
 800032e:	2800      	cmp	r0, #0
 8000330:	d401      	bmi.n	8000336 <__aeabi_cfcmpeq+0xe>
 8000332:	2100      	movs	r1, #0
 8000334:	42c8      	cmn	r0, r1
 8000336:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000338 <__aeabi_fcmpeq>:
 8000338:	b510      	push	{r4, lr}
 800033a:	f000 f9c9 	bl	80006d0 <__eqsf2>
 800033e:	4240      	negs	r0, r0
 8000340:	3001      	adds	r0, #1
 8000342:	bd10      	pop	{r4, pc}

08000344 <__aeabi_fcmplt>:
 8000344:	b510      	push	{r4, lr}
 8000346:	f000 fa35 	bl	80007b4 <__lesf2>
 800034a:	2800      	cmp	r0, #0
 800034c:	db01      	blt.n	8000352 <__aeabi_fcmplt+0xe>
 800034e:	2000      	movs	r0, #0
 8000350:	bd10      	pop	{r4, pc}
 8000352:	2001      	movs	r0, #1
 8000354:	bd10      	pop	{r4, pc}
 8000356:	46c0      	nop			; (mov r8, r8)

08000358 <__aeabi_fcmple>:
 8000358:	b510      	push	{r4, lr}
 800035a:	f000 fa2b 	bl	80007b4 <__lesf2>
 800035e:	2800      	cmp	r0, #0
 8000360:	dd01      	ble.n	8000366 <__aeabi_fcmple+0xe>
 8000362:	2000      	movs	r0, #0
 8000364:	bd10      	pop	{r4, pc}
 8000366:	2001      	movs	r0, #1
 8000368:	bd10      	pop	{r4, pc}
 800036a:	46c0      	nop			; (mov r8, r8)

0800036c <__aeabi_fcmpgt>:
 800036c:	b510      	push	{r4, lr}
 800036e:	f000 f9d9 	bl	8000724 <__gesf2>
 8000372:	2800      	cmp	r0, #0
 8000374:	dc01      	bgt.n	800037a <__aeabi_fcmpgt+0xe>
 8000376:	2000      	movs	r0, #0
 8000378:	bd10      	pop	{r4, pc}
 800037a:	2001      	movs	r0, #1
 800037c:	bd10      	pop	{r4, pc}
 800037e:	46c0      	nop			; (mov r8, r8)

08000380 <__aeabi_fcmpge>:
 8000380:	b510      	push	{r4, lr}
 8000382:	f000 f9cf 	bl	8000724 <__gesf2>
 8000386:	2800      	cmp	r0, #0
 8000388:	da01      	bge.n	800038e <__aeabi_fcmpge+0xe>
 800038a:	2000      	movs	r0, #0
 800038c:	bd10      	pop	{r4, pc}
 800038e:	2001      	movs	r0, #1
 8000390:	bd10      	pop	{r4, pc}
 8000392:	46c0      	nop			; (mov r8, r8)

08000394 <__aeabi_uldivmod>:
 8000394:	2b00      	cmp	r3, #0
 8000396:	d111      	bne.n	80003bc <__aeabi_uldivmod+0x28>
 8000398:	2a00      	cmp	r2, #0
 800039a:	d10f      	bne.n	80003bc <__aeabi_uldivmod+0x28>
 800039c:	2900      	cmp	r1, #0
 800039e:	d100      	bne.n	80003a2 <__aeabi_uldivmod+0xe>
 80003a0:	2800      	cmp	r0, #0
 80003a2:	d002      	beq.n	80003aa <__aeabi_uldivmod+0x16>
 80003a4:	2100      	movs	r1, #0
 80003a6:	43c9      	mvns	r1, r1
 80003a8:	1c08      	adds	r0, r1, #0
 80003aa:	b407      	push	{r0, r1, r2}
 80003ac:	4802      	ldr	r0, [pc, #8]	; (80003b8 <__aeabi_uldivmod+0x24>)
 80003ae:	a102      	add	r1, pc, #8	; (adr r1, 80003b8 <__aeabi_uldivmod+0x24>)
 80003b0:	1840      	adds	r0, r0, r1
 80003b2:	9002      	str	r0, [sp, #8]
 80003b4:	bd03      	pop	{r0, r1, pc}
 80003b6:	46c0      	nop			; (mov r8, r8)
 80003b8:	fffffee9 	.word	0xfffffee9
 80003bc:	b403      	push	{r0, r1}
 80003be:	4668      	mov	r0, sp
 80003c0:	b501      	push	{r0, lr}
 80003c2:	9802      	ldr	r0, [sp, #8]
 80003c4:	f000 f844 	bl	8000450 <__gnu_uldivmod_helper>
 80003c8:	9b01      	ldr	r3, [sp, #4]
 80003ca:	469e      	mov	lr, r3
 80003cc:	b002      	add	sp, #8
 80003ce:	bc0c      	pop	{r2, r3}
 80003d0:	4770      	bx	lr
 80003d2:	46c0      	nop			; (mov r8, r8)
 80003d4:	0000      	movs	r0, r0
	...

080003d8 <__aeabi_d2uiz>:
 80003d8:	b538      	push	{r3, r4, r5, lr}
 80003da:	4b0e      	ldr	r3, [pc, #56]	; (8000414 <__aeabi_d2uiz+0x3c>)
 80003dc:	4a0c      	ldr	r2, [pc, #48]	; (8000410 <__aeabi_d2uiz+0x38>)
 80003de:	1c04      	adds	r4, r0, #0
 80003e0:	1c0d      	adds	r5, r1, #0
 80003e2:	f7ff ff93 	bl	800030c <__aeabi_dcmpge>
 80003e6:	2800      	cmp	r0, #0
 80003e8:	d104      	bne.n	80003f4 <__aeabi_d2uiz+0x1c>
 80003ea:	1c20      	adds	r0, r4, #0
 80003ec:	1c29      	adds	r1, r5, #0
 80003ee:	f002 fad3 	bl	8002998 <__aeabi_d2iz>
 80003f2:	bd38      	pop	{r3, r4, r5, pc}
 80003f4:	4b07      	ldr	r3, [pc, #28]	; (8000414 <__aeabi_d2uiz+0x3c>)
 80003f6:	4a06      	ldr	r2, [pc, #24]	; (8000410 <__aeabi_d2uiz+0x38>)
 80003f8:	1c20      	adds	r0, r4, #0
 80003fa:	1c29      	adds	r1, r5, #0
 80003fc:	f001 ffa2 	bl	8002344 <__aeabi_dsub>
 8000400:	f002 faca 	bl	8002998 <__aeabi_d2iz>
 8000404:	2380      	movs	r3, #128	; 0x80
 8000406:	061b      	lsls	r3, r3, #24
 8000408:	18c0      	adds	r0, r0, r3
 800040a:	e7f2      	b.n	80003f2 <__aeabi_d2uiz+0x1a>
 800040c:	46c0      	nop			; (mov r8, r8)
 800040e:	46c0      	nop			; (mov r8, r8)
 8000410:	00000000 	.word	0x00000000
 8000414:	41e00000 	.word	0x41e00000

08000418 <__gnu_ldivmod_helper>:
 8000418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800041a:	b083      	sub	sp, #12
 800041c:	1c16      	adds	r6, r2, #0
 800041e:	1c1f      	adds	r7, r3, #0
 8000420:	9000      	str	r0, [sp, #0]
 8000422:	9101      	str	r1, [sp, #4]
 8000424:	f002 fc7c 	bl	8002d20 <__divdi3>
 8000428:	1c04      	adds	r4, r0, #0
 800042a:	1c0d      	adds	r5, r1, #0
 800042c:	1c22      	adds	r2, r4, #0
 800042e:	1c2b      	adds	r3, r5, #0
 8000430:	1c30      	adds	r0, r6, #0
 8000432:	1c39      	adds	r1, r7, #0
 8000434:	f002 fc52 	bl	8002cdc <__aeabi_lmul>
 8000438:	9a00      	ldr	r2, [sp, #0]
 800043a:	9b01      	ldr	r3, [sp, #4]
 800043c:	1a12      	subs	r2, r2, r0
 800043e:	418b      	sbcs	r3, r1
 8000440:	9908      	ldr	r1, [sp, #32]
 8000442:	1c20      	adds	r0, r4, #0
 8000444:	600a      	str	r2, [r1, #0]
 8000446:	604b      	str	r3, [r1, #4]
 8000448:	1c29      	adds	r1, r5, #0
 800044a:	b003      	add	sp, #12
 800044c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800044e:	46c0      	nop			; (mov r8, r8)

08000450 <__gnu_uldivmod_helper>:
 8000450:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000452:	b083      	sub	sp, #12
 8000454:	1c14      	adds	r4, r2, #0
 8000456:	1c1d      	adds	r5, r3, #0
 8000458:	9000      	str	r0, [sp, #0]
 800045a:	9101      	str	r1, [sp, #4]
 800045c:	f002 fe3c 	bl	80030d8 <__udivdi3>
 8000460:	1c22      	adds	r2, r4, #0
 8000462:	1c2b      	adds	r3, r5, #0
 8000464:	1c06      	adds	r6, r0, #0
 8000466:	1c0f      	adds	r7, r1, #0
 8000468:	f002 fc38 	bl	8002cdc <__aeabi_lmul>
 800046c:	9a00      	ldr	r2, [sp, #0]
 800046e:	9b01      	ldr	r3, [sp, #4]
 8000470:	1a12      	subs	r2, r2, r0
 8000472:	418b      	sbcs	r3, r1
 8000474:	9908      	ldr	r1, [sp, #32]
 8000476:	1c30      	adds	r0, r6, #0
 8000478:	600a      	str	r2, [r1, #0]
 800047a:	604b      	str	r3, [r1, #4]
 800047c:	1c39      	adds	r1, r7, #0
 800047e:	b003      	add	sp, #12
 8000480:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000482:	46c0      	nop			; (mov r8, r8)

08000484 <__aeabi_fdiv>:
 8000484:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000486:	465f      	mov	r7, fp
 8000488:	4656      	mov	r6, sl
 800048a:	464d      	mov	r5, r9
 800048c:	4644      	mov	r4, r8
 800048e:	b4f0      	push	{r4, r5, r6, r7}
 8000490:	0246      	lsls	r6, r0, #9
 8000492:	0045      	lsls	r5, r0, #1
 8000494:	0fc0      	lsrs	r0, r0, #31
 8000496:	b085      	sub	sp, #20
 8000498:	1c0f      	adds	r7, r1, #0
 800049a:	0a76      	lsrs	r6, r6, #9
 800049c:	0e2d      	lsrs	r5, r5, #24
 800049e:	4680      	mov	r8, r0
 80004a0:	d041      	beq.n	8000526 <__aeabi_fdiv+0xa2>
 80004a2:	2dff      	cmp	r5, #255	; 0xff
 80004a4:	d026      	beq.n	80004f4 <__aeabi_fdiv+0x70>
 80004a6:	2480      	movs	r4, #128	; 0x80
 80004a8:	0424      	lsls	r4, r4, #16
 80004aa:	2100      	movs	r1, #0
 80004ac:	4326      	orrs	r6, r4
 80004ae:	00f6      	lsls	r6, r6, #3
 80004b0:	3d7f      	subs	r5, #127	; 0x7f
 80004b2:	4689      	mov	r9, r1
 80004b4:	468b      	mov	fp, r1
 80004b6:	0ff9      	lsrs	r1, r7, #31
 80004b8:	027c      	lsls	r4, r7, #9
 80004ba:	0078      	lsls	r0, r7, #1
 80004bc:	0a64      	lsrs	r4, r4, #9
 80004be:	0e00      	lsrs	r0, r0, #24
 80004c0:	9100      	str	r1, [sp, #0]
 80004c2:	468a      	mov	sl, r1
 80004c4:	d03c      	beq.n	8000540 <__aeabi_fdiv+0xbc>
 80004c6:	28ff      	cmp	r0, #255	; 0xff
 80004c8:	d034      	beq.n	8000534 <__aeabi_fdiv+0xb0>
 80004ca:	2380      	movs	r3, #128	; 0x80
 80004cc:	041b      	lsls	r3, r3, #16
 80004ce:	431c      	orrs	r4, r3
 80004d0:	2300      	movs	r3, #0
 80004d2:	00e4      	lsls	r4, r4, #3
 80004d4:	387f      	subs	r0, #127	; 0x7f
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	9f00      	ldr	r7, [sp, #0]
 80004da:	4643      	mov	r3, r8
 80004dc:	9a01      	ldr	r2, [sp, #4]
 80004de:	407b      	eors	r3, r7
 80004e0:	4649      	mov	r1, r9
 80004e2:	469c      	mov	ip, r3
 80004e4:	4311      	orrs	r1, r2
 80004e6:	290f      	cmp	r1, #15
 80004e8:	d900      	bls.n	80004ec <__aeabi_fdiv+0x68>
 80004ea:	e071      	b.n	80005d0 <__aeabi_fdiv+0x14c>
 80004ec:	4f76      	ldr	r7, [pc, #472]	; (80006c8 <__aeabi_fdiv+0x244>)
 80004ee:	0089      	lsls	r1, r1, #2
 80004f0:	587f      	ldr	r7, [r7, r1]
 80004f2:	46bf      	mov	pc, r7
 80004f4:	2e00      	cmp	r6, #0
 80004f6:	d13e      	bne.n	8000576 <__aeabi_fdiv+0xf2>
 80004f8:	2208      	movs	r2, #8
 80004fa:	2302      	movs	r3, #2
 80004fc:	4691      	mov	r9, r2
 80004fe:	469b      	mov	fp, r3
 8000500:	e7d9      	b.n	80004b6 <__aeabi_fdiv+0x32>
 8000502:	465a      	mov	r2, fp
 8000504:	1c34      	adds	r4, r6, #0
 8000506:	46c2      	mov	sl, r8
 8000508:	9201      	str	r2, [sp, #4]
 800050a:	9901      	ldr	r1, [sp, #4]
 800050c:	2902      	cmp	r1, #2
 800050e:	d037      	beq.n	8000580 <__aeabi_fdiv+0xfc>
 8000510:	2903      	cmp	r1, #3
 8000512:	d100      	bne.n	8000516 <__aeabi_fdiv+0x92>
 8000514:	e0cf      	b.n	80006b6 <__aeabi_fdiv+0x232>
 8000516:	2901      	cmp	r1, #1
 8000518:	d000      	beq.n	800051c <__aeabi_fdiv+0x98>
 800051a:	e0ab      	b.n	8000674 <__aeabi_fdiv+0x1f0>
 800051c:	4653      	mov	r3, sl
 800051e:	400b      	ands	r3, r1
 8000520:	2200      	movs	r2, #0
 8000522:	2600      	movs	r6, #0
 8000524:	e032      	b.n	800058c <__aeabi_fdiv+0x108>
 8000526:	2e00      	cmp	r6, #0
 8000528:	d119      	bne.n	800055e <__aeabi_fdiv+0xda>
 800052a:	2104      	movs	r1, #4
 800052c:	2201      	movs	r2, #1
 800052e:	4689      	mov	r9, r1
 8000530:	4693      	mov	fp, r2
 8000532:	e7c0      	b.n	80004b6 <__aeabi_fdiv+0x32>
 8000534:	1c22      	adds	r2, r4, #0
 8000536:	1e53      	subs	r3, r2, #1
 8000538:	419a      	sbcs	r2, r3
 800053a:	3202      	adds	r2, #2
 800053c:	9201      	str	r2, [sp, #4]
 800053e:	e7cb      	b.n	80004d8 <__aeabi_fdiv+0x54>
 8000540:	2701      	movs	r7, #1
 8000542:	9701      	str	r7, [sp, #4]
 8000544:	2c00      	cmp	r4, #0
 8000546:	d0c7      	beq.n	80004d8 <__aeabi_fdiv+0x54>
 8000548:	1c20      	adds	r0, r4, #0
 800054a:	f002 fba9 	bl	8002ca0 <__clzsi2>
 800054e:	1f43      	subs	r3, r0, #5
 8000550:	409c      	lsls	r4, r3
 8000552:	2376      	movs	r3, #118	; 0x76
 8000554:	425b      	negs	r3, r3
 8000556:	2100      	movs	r1, #0
 8000558:	1a18      	subs	r0, r3, r0
 800055a:	9101      	str	r1, [sp, #4]
 800055c:	e7bc      	b.n	80004d8 <__aeabi_fdiv+0x54>
 800055e:	1c30      	adds	r0, r6, #0
 8000560:	f002 fb9e 	bl	8002ca0 <__clzsi2>
 8000564:	2576      	movs	r5, #118	; 0x76
 8000566:	1f43      	subs	r3, r0, #5
 8000568:	409e      	lsls	r6, r3
 800056a:	426d      	negs	r5, r5
 800056c:	2300      	movs	r3, #0
 800056e:	1a2d      	subs	r5, r5, r0
 8000570:	4699      	mov	r9, r3
 8000572:	469b      	mov	fp, r3
 8000574:	e79f      	b.n	80004b6 <__aeabi_fdiv+0x32>
 8000576:	230c      	movs	r3, #12
 8000578:	2103      	movs	r1, #3
 800057a:	4699      	mov	r9, r3
 800057c:	468b      	mov	fp, r1
 800057e:	e79a      	b.n	80004b6 <__aeabi_fdiv+0x32>
 8000580:	46d4      	mov	ip, sl
 8000582:	2301      	movs	r3, #1
 8000584:	4667      	mov	r7, ip
 8000586:	403b      	ands	r3, r7
 8000588:	22ff      	movs	r2, #255	; 0xff
 800058a:	2600      	movs	r6, #0
 800058c:	0276      	lsls	r6, r6, #9
 800058e:	05d2      	lsls	r2, r2, #23
 8000590:	0a70      	lsrs	r0, r6, #9
 8000592:	07db      	lsls	r3, r3, #31
 8000594:	4310      	orrs	r0, r2
 8000596:	4318      	orrs	r0, r3
 8000598:	b005      	add	sp, #20
 800059a:	bc3c      	pop	{r2, r3, r4, r5}
 800059c:	4690      	mov	r8, r2
 800059e:	4699      	mov	r9, r3
 80005a0:	46a2      	mov	sl, r4
 80005a2:	46ab      	mov	fp, r5
 80005a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005a6:	2680      	movs	r6, #128	; 0x80
 80005a8:	2300      	movs	r3, #0
 80005aa:	03f6      	lsls	r6, r6, #15
 80005ac:	22ff      	movs	r2, #255	; 0xff
 80005ae:	e7ed      	b.n	800058c <__aeabi_fdiv+0x108>
 80005b0:	2200      	movs	r2, #0
 80005b2:	2600      	movs	r6, #0
 80005b4:	e7ea      	b.n	800058c <__aeabi_fdiv+0x108>
 80005b6:	2080      	movs	r0, #128	; 0x80
 80005b8:	03c0      	lsls	r0, r0, #15
 80005ba:	4206      	tst	r6, r0
 80005bc:	d03b      	beq.n	8000636 <__aeabi_fdiv+0x1b2>
 80005be:	4204      	tst	r4, r0
 80005c0:	d139      	bne.n	8000636 <__aeabi_fdiv+0x1b2>
 80005c2:	1c06      	adds	r6, r0, #0
 80005c4:	4326      	orrs	r6, r4
 80005c6:	0276      	lsls	r6, r6, #9
 80005c8:	0a76      	lsrs	r6, r6, #9
 80005ca:	9b00      	ldr	r3, [sp, #0]
 80005cc:	22ff      	movs	r2, #255	; 0xff
 80005ce:	e7dd      	b.n	800058c <__aeabi_fdiv+0x108>
 80005d0:	1a28      	subs	r0, r5, r0
 80005d2:	9003      	str	r0, [sp, #12]
 80005d4:	0176      	lsls	r6, r6, #5
 80005d6:	0164      	lsls	r4, r4, #5
 80005d8:	42a6      	cmp	r6, r4
 80005da:	d339      	bcc.n	8000650 <__aeabi_fdiv+0x1cc>
 80005dc:	1b36      	subs	r6, r6, r4
 80005de:	221a      	movs	r2, #26
 80005e0:	2301      	movs	r3, #1
 80005e2:	2001      	movs	r0, #1
 80005e4:	1c31      	adds	r1, r6, #0
 80005e6:	005b      	lsls	r3, r3, #1
 80005e8:	0076      	lsls	r6, r6, #1
 80005ea:	2900      	cmp	r1, #0
 80005ec:	db01      	blt.n	80005f2 <__aeabi_fdiv+0x16e>
 80005ee:	42b4      	cmp	r4, r6
 80005f0:	d801      	bhi.n	80005f6 <__aeabi_fdiv+0x172>
 80005f2:	1b36      	subs	r6, r6, r4
 80005f4:	4303      	orrs	r3, r0
 80005f6:	3a01      	subs	r2, #1
 80005f8:	2a00      	cmp	r2, #0
 80005fa:	dcf3      	bgt.n	80005e4 <__aeabi_fdiv+0x160>
 80005fc:	1e74      	subs	r4, r6, #1
 80005fe:	41a6      	sbcs	r6, r4
 8000600:	1c34      	adds	r4, r6, #0
 8000602:	431c      	orrs	r4, r3
 8000604:	9a03      	ldr	r2, [sp, #12]
 8000606:	327f      	adds	r2, #127	; 0x7f
 8000608:	2a00      	cmp	r2, #0
 800060a:	dd27      	ble.n	800065c <__aeabi_fdiv+0x1d8>
 800060c:	0763      	lsls	r3, r4, #29
 800060e:	d004      	beq.n	800061a <__aeabi_fdiv+0x196>
 8000610:	230f      	movs	r3, #15
 8000612:	4023      	ands	r3, r4
 8000614:	2b04      	cmp	r3, #4
 8000616:	d000      	beq.n	800061a <__aeabi_fdiv+0x196>
 8000618:	3404      	adds	r4, #4
 800061a:	0127      	lsls	r7, r4, #4
 800061c:	d503      	bpl.n	8000626 <__aeabi_fdiv+0x1a2>
 800061e:	4b2b      	ldr	r3, [pc, #172]	; (80006cc <__aeabi_fdiv+0x248>)
 8000620:	9a03      	ldr	r2, [sp, #12]
 8000622:	401c      	ands	r4, r3
 8000624:	3280      	adds	r2, #128	; 0x80
 8000626:	2afe      	cmp	r2, #254	; 0xfe
 8000628:	dd0b      	ble.n	8000642 <__aeabi_fdiv+0x1be>
 800062a:	2301      	movs	r3, #1
 800062c:	4661      	mov	r1, ip
 800062e:	400b      	ands	r3, r1
 8000630:	22ff      	movs	r2, #255	; 0xff
 8000632:	2600      	movs	r6, #0
 8000634:	e7aa      	b.n	800058c <__aeabi_fdiv+0x108>
 8000636:	4306      	orrs	r6, r0
 8000638:	0276      	lsls	r6, r6, #9
 800063a:	0a76      	lsrs	r6, r6, #9
 800063c:	4643      	mov	r3, r8
 800063e:	22ff      	movs	r2, #255	; 0xff
 8000640:	e7a4      	b.n	800058c <__aeabi_fdiv+0x108>
 8000642:	01a4      	lsls	r4, r4, #6
 8000644:	2301      	movs	r3, #1
 8000646:	4667      	mov	r7, ip
 8000648:	0a66      	lsrs	r6, r4, #9
 800064a:	b2d2      	uxtb	r2, r2
 800064c:	403b      	ands	r3, r7
 800064e:	e79d      	b.n	800058c <__aeabi_fdiv+0x108>
 8000650:	9f03      	ldr	r7, [sp, #12]
 8000652:	221b      	movs	r2, #27
 8000654:	3f01      	subs	r7, #1
 8000656:	9703      	str	r7, [sp, #12]
 8000658:	2300      	movs	r3, #0
 800065a:	e7c2      	b.n	80005e2 <__aeabi_fdiv+0x15e>
 800065c:	237e      	movs	r3, #126	; 0x7e
 800065e:	9f03      	ldr	r7, [sp, #12]
 8000660:	425b      	negs	r3, r3
 8000662:	1bdb      	subs	r3, r3, r7
 8000664:	2b1b      	cmp	r3, #27
 8000666:	dd07      	ble.n	8000678 <__aeabi_fdiv+0x1f4>
 8000668:	2301      	movs	r3, #1
 800066a:	4661      	mov	r1, ip
 800066c:	400b      	ands	r3, r1
 800066e:	2200      	movs	r2, #0
 8000670:	2600      	movs	r6, #0
 8000672:	e78b      	b.n	800058c <__aeabi_fdiv+0x108>
 8000674:	46d4      	mov	ip, sl
 8000676:	e7c5      	b.n	8000604 <__aeabi_fdiv+0x180>
 8000678:	1c22      	adds	r2, r4, #0
 800067a:	40da      	lsrs	r2, r3
 800067c:	9b03      	ldr	r3, [sp, #12]
 800067e:	339e      	adds	r3, #158	; 0x9e
 8000680:	409c      	lsls	r4, r3
 8000682:	1c23      	adds	r3, r4, #0
 8000684:	1e5c      	subs	r4, r3, #1
 8000686:	41a3      	sbcs	r3, r4
 8000688:	4313      	orrs	r3, r2
 800068a:	075a      	lsls	r2, r3, #29
 800068c:	d004      	beq.n	8000698 <__aeabi_fdiv+0x214>
 800068e:	220f      	movs	r2, #15
 8000690:	401a      	ands	r2, r3
 8000692:	2a04      	cmp	r2, #4
 8000694:	d000      	beq.n	8000698 <__aeabi_fdiv+0x214>
 8000696:	3304      	adds	r3, #4
 8000698:	015f      	lsls	r7, r3, #5
 800069a:	d505      	bpl.n	80006a8 <__aeabi_fdiv+0x224>
 800069c:	2301      	movs	r3, #1
 800069e:	4661      	mov	r1, ip
 80006a0:	400b      	ands	r3, r1
 80006a2:	2201      	movs	r2, #1
 80006a4:	2600      	movs	r6, #0
 80006a6:	e771      	b.n	800058c <__aeabi_fdiv+0x108>
 80006a8:	019e      	lsls	r6, r3, #6
 80006aa:	4662      	mov	r2, ip
 80006ac:	2301      	movs	r3, #1
 80006ae:	4013      	ands	r3, r2
 80006b0:	0a76      	lsrs	r6, r6, #9
 80006b2:	2200      	movs	r2, #0
 80006b4:	e76a      	b.n	800058c <__aeabi_fdiv+0x108>
 80006b6:	2680      	movs	r6, #128	; 0x80
 80006b8:	03f6      	lsls	r6, r6, #15
 80006ba:	4326      	orrs	r6, r4
 80006bc:	0276      	lsls	r6, r6, #9
 80006be:	0a76      	lsrs	r6, r6, #9
 80006c0:	4653      	mov	r3, sl
 80006c2:	22ff      	movs	r2, #255	; 0xff
 80006c4:	e762      	b.n	800058c <__aeabi_fdiv+0x108>
 80006c6:	46c0      	nop			; (mov r8, r8)
 80006c8:	0800bcb0 	.word	0x0800bcb0
 80006cc:	f7ffffff 	.word	0xf7ffffff

080006d0 <__eqsf2>:
 80006d0:	024a      	lsls	r2, r1, #9
 80006d2:	0243      	lsls	r3, r0, #9
 80006d4:	b570      	push	{r4, r5, r6, lr}
 80006d6:	0a5c      	lsrs	r4, r3, #9
 80006d8:	0a55      	lsrs	r5, r2, #9
 80006da:	0043      	lsls	r3, r0, #1
 80006dc:	004a      	lsls	r2, r1, #1
 80006de:	0e1b      	lsrs	r3, r3, #24
 80006e0:	0fc6      	lsrs	r6, r0, #31
 80006e2:	0e12      	lsrs	r2, r2, #24
 80006e4:	0fc9      	lsrs	r1, r1, #31
 80006e6:	2bff      	cmp	r3, #255	; 0xff
 80006e8:	d005      	beq.n	80006f6 <__eqsf2+0x26>
 80006ea:	2aff      	cmp	r2, #255	; 0xff
 80006ec:	d008      	beq.n	8000700 <__eqsf2+0x30>
 80006ee:	2001      	movs	r0, #1
 80006f0:	4293      	cmp	r3, r2
 80006f2:	d00b      	beq.n	800070c <__eqsf2+0x3c>
 80006f4:	bd70      	pop	{r4, r5, r6, pc}
 80006f6:	2001      	movs	r0, #1
 80006f8:	2c00      	cmp	r4, #0
 80006fa:	d1fb      	bne.n	80006f4 <__eqsf2+0x24>
 80006fc:	2aff      	cmp	r2, #255	; 0xff
 80006fe:	d1f6      	bne.n	80006ee <__eqsf2+0x1e>
 8000700:	2001      	movs	r0, #1
 8000702:	2d00      	cmp	r5, #0
 8000704:	d1f6      	bne.n	80006f4 <__eqsf2+0x24>
 8000706:	2001      	movs	r0, #1
 8000708:	4293      	cmp	r3, r2
 800070a:	d1f3      	bne.n	80006f4 <__eqsf2+0x24>
 800070c:	42ac      	cmp	r4, r5
 800070e:	d1f1      	bne.n	80006f4 <__eqsf2+0x24>
 8000710:	428e      	cmp	r6, r1
 8000712:	d005      	beq.n	8000720 <__eqsf2+0x50>
 8000714:	2b00      	cmp	r3, #0
 8000716:	d1ed      	bne.n	80006f4 <__eqsf2+0x24>
 8000718:	1c20      	adds	r0, r4, #0
 800071a:	1e44      	subs	r4, r0, #1
 800071c:	41a0      	sbcs	r0, r4
 800071e:	e7e9      	b.n	80006f4 <__eqsf2+0x24>
 8000720:	2000      	movs	r0, #0
 8000722:	e7e7      	b.n	80006f4 <__eqsf2+0x24>

08000724 <__gesf2>:
 8000724:	024a      	lsls	r2, r1, #9
 8000726:	0243      	lsls	r3, r0, #9
 8000728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800072a:	0a5c      	lsrs	r4, r3, #9
 800072c:	0a55      	lsrs	r5, r2, #9
 800072e:	0043      	lsls	r3, r0, #1
 8000730:	004a      	lsls	r2, r1, #1
 8000732:	0e1b      	lsrs	r3, r3, #24
 8000734:	0fc6      	lsrs	r6, r0, #31
 8000736:	0e12      	lsrs	r2, r2, #24
 8000738:	0fc9      	lsrs	r1, r1, #31
 800073a:	2bff      	cmp	r3, #255	; 0xff
 800073c:	d031      	beq.n	80007a2 <__gesf2+0x7e>
 800073e:	2aff      	cmp	r2, #255	; 0xff
 8000740:	d034      	beq.n	80007ac <__gesf2+0x88>
 8000742:	2b00      	cmp	r3, #0
 8000744:	d116      	bne.n	8000774 <__gesf2+0x50>
 8000746:	4260      	negs	r0, r4
 8000748:	4160      	adcs	r0, r4
 800074a:	4684      	mov	ip, r0
 800074c:	2a00      	cmp	r2, #0
 800074e:	d014      	beq.n	800077a <__gesf2+0x56>
 8000750:	2800      	cmp	r0, #0
 8000752:	d120      	bne.n	8000796 <__gesf2+0x72>
 8000754:	428e      	cmp	r6, r1
 8000756:	d117      	bne.n	8000788 <__gesf2+0x64>
 8000758:	4293      	cmp	r3, r2
 800075a:	dc15      	bgt.n	8000788 <__gesf2+0x64>
 800075c:	db04      	blt.n	8000768 <__gesf2+0x44>
 800075e:	42ac      	cmp	r4, r5
 8000760:	d812      	bhi.n	8000788 <__gesf2+0x64>
 8000762:	2000      	movs	r0, #0
 8000764:	42ac      	cmp	r4, r5
 8000766:	d212      	bcs.n	800078e <__gesf2+0x6a>
 8000768:	4270      	negs	r0, r6
 800076a:	4170      	adcs	r0, r6
 800076c:	4240      	negs	r0, r0
 800076e:	2301      	movs	r3, #1
 8000770:	4318      	orrs	r0, r3
 8000772:	e00c      	b.n	800078e <__gesf2+0x6a>
 8000774:	2a00      	cmp	r2, #0
 8000776:	d1ed      	bne.n	8000754 <__gesf2+0x30>
 8000778:	4694      	mov	ip, r2
 800077a:	426f      	negs	r7, r5
 800077c:	416f      	adcs	r7, r5
 800077e:	4660      	mov	r0, ip
 8000780:	2800      	cmp	r0, #0
 8000782:	d105      	bne.n	8000790 <__gesf2+0x6c>
 8000784:	2f00      	cmp	r7, #0
 8000786:	d0e5      	beq.n	8000754 <__gesf2+0x30>
 8000788:	4270      	negs	r0, r6
 800078a:	2301      	movs	r3, #1
 800078c:	4318      	orrs	r0, r3
 800078e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000790:	2000      	movs	r0, #0
 8000792:	2f00      	cmp	r7, #0
 8000794:	d1fb      	bne.n	800078e <__gesf2+0x6a>
 8000796:	4248      	negs	r0, r1
 8000798:	4148      	adcs	r0, r1
 800079a:	4240      	negs	r0, r0
 800079c:	2301      	movs	r3, #1
 800079e:	4318      	orrs	r0, r3
 80007a0:	e7f5      	b.n	800078e <__gesf2+0x6a>
 80007a2:	2c00      	cmp	r4, #0
 80007a4:	d0cb      	beq.n	800073e <__gesf2+0x1a>
 80007a6:	2002      	movs	r0, #2
 80007a8:	4240      	negs	r0, r0
 80007aa:	e7f0      	b.n	800078e <__gesf2+0x6a>
 80007ac:	2d00      	cmp	r5, #0
 80007ae:	d0c8      	beq.n	8000742 <__gesf2+0x1e>
 80007b0:	e7f9      	b.n	80007a6 <__gesf2+0x82>
 80007b2:	46c0      	nop			; (mov r8, r8)

080007b4 <__lesf2>:
 80007b4:	024a      	lsls	r2, r1, #9
 80007b6:	0243      	lsls	r3, r0, #9
 80007b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ba:	0a5c      	lsrs	r4, r3, #9
 80007bc:	0a55      	lsrs	r5, r2, #9
 80007be:	0043      	lsls	r3, r0, #1
 80007c0:	004a      	lsls	r2, r1, #1
 80007c2:	0e1b      	lsrs	r3, r3, #24
 80007c4:	0fc6      	lsrs	r6, r0, #31
 80007c6:	0e12      	lsrs	r2, r2, #24
 80007c8:	0fc9      	lsrs	r1, r1, #31
 80007ca:	2bff      	cmp	r3, #255	; 0xff
 80007cc:	d027      	beq.n	800081e <__lesf2+0x6a>
 80007ce:	2aff      	cmp	r2, #255	; 0xff
 80007d0:	d029      	beq.n	8000826 <__lesf2+0x72>
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d010      	beq.n	80007f8 <__lesf2+0x44>
 80007d6:	2a00      	cmp	r2, #0
 80007d8:	d115      	bne.n	8000806 <__lesf2+0x52>
 80007da:	4694      	mov	ip, r2
 80007dc:	426f      	negs	r7, r5
 80007de:	416f      	adcs	r7, r5
 80007e0:	4660      	mov	r0, ip
 80007e2:	2800      	cmp	r0, #0
 80007e4:	d015      	beq.n	8000812 <__lesf2+0x5e>
 80007e6:	2000      	movs	r0, #0
 80007e8:	2f00      	cmp	r7, #0
 80007ea:	d104      	bne.n	80007f6 <__lesf2+0x42>
 80007ec:	4248      	negs	r0, r1
 80007ee:	4148      	adcs	r0, r1
 80007f0:	4240      	negs	r0, r0
 80007f2:	2301      	movs	r3, #1
 80007f4:	4318      	orrs	r0, r3
 80007f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007f8:	4260      	negs	r0, r4
 80007fa:	4160      	adcs	r0, r4
 80007fc:	4684      	mov	ip, r0
 80007fe:	2a00      	cmp	r2, #0
 8000800:	d0ec      	beq.n	80007dc <__lesf2+0x28>
 8000802:	2800      	cmp	r0, #0
 8000804:	d1f2      	bne.n	80007ec <__lesf2+0x38>
 8000806:	428e      	cmp	r6, r1
 8000808:	d011      	beq.n	800082e <__lesf2+0x7a>
 800080a:	4270      	negs	r0, r6
 800080c:	2301      	movs	r3, #1
 800080e:	4318      	orrs	r0, r3
 8000810:	e7f1      	b.n	80007f6 <__lesf2+0x42>
 8000812:	2f00      	cmp	r7, #0
 8000814:	d0f7      	beq.n	8000806 <__lesf2+0x52>
 8000816:	4270      	negs	r0, r6
 8000818:	2301      	movs	r3, #1
 800081a:	4318      	orrs	r0, r3
 800081c:	e7eb      	b.n	80007f6 <__lesf2+0x42>
 800081e:	2002      	movs	r0, #2
 8000820:	2c00      	cmp	r4, #0
 8000822:	d1e8      	bne.n	80007f6 <__lesf2+0x42>
 8000824:	e7d3      	b.n	80007ce <__lesf2+0x1a>
 8000826:	2002      	movs	r0, #2
 8000828:	2d00      	cmp	r5, #0
 800082a:	d1e4      	bne.n	80007f6 <__lesf2+0x42>
 800082c:	e7d1      	b.n	80007d2 <__lesf2+0x1e>
 800082e:	4293      	cmp	r3, r2
 8000830:	dceb      	bgt.n	800080a <__lesf2+0x56>
 8000832:	db04      	blt.n	800083e <__lesf2+0x8a>
 8000834:	42ac      	cmp	r4, r5
 8000836:	d8e8      	bhi.n	800080a <__lesf2+0x56>
 8000838:	2000      	movs	r0, #0
 800083a:	42ac      	cmp	r4, r5
 800083c:	d2db      	bcs.n	80007f6 <__lesf2+0x42>
 800083e:	4270      	negs	r0, r6
 8000840:	4170      	adcs	r0, r6
 8000842:	4240      	negs	r0, r0
 8000844:	2301      	movs	r3, #1
 8000846:	4318      	orrs	r0, r3
 8000848:	e7d5      	b.n	80007f6 <__lesf2+0x42>
 800084a:	46c0      	nop			; (mov r8, r8)

0800084c <__aeabi_fmul>:
 800084c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800084e:	465f      	mov	r7, fp
 8000850:	4656      	mov	r6, sl
 8000852:	464d      	mov	r5, r9
 8000854:	4644      	mov	r4, r8
 8000856:	b4f0      	push	{r4, r5, r6, r7}
 8000858:	0244      	lsls	r4, r0, #9
 800085a:	0046      	lsls	r6, r0, #1
 800085c:	b083      	sub	sp, #12
 800085e:	1c0f      	adds	r7, r1, #0
 8000860:	0a64      	lsrs	r4, r4, #9
 8000862:	0e36      	lsrs	r6, r6, #24
 8000864:	0fc5      	lsrs	r5, r0, #31
 8000866:	2e00      	cmp	r6, #0
 8000868:	d041      	beq.n	80008ee <__aeabi_fmul+0xa2>
 800086a:	2eff      	cmp	r6, #255	; 0xff
 800086c:	d022      	beq.n	80008b4 <__aeabi_fmul+0x68>
 800086e:	2380      	movs	r3, #128	; 0x80
 8000870:	041b      	lsls	r3, r3, #16
 8000872:	2000      	movs	r0, #0
 8000874:	431c      	orrs	r4, r3
 8000876:	00e4      	lsls	r4, r4, #3
 8000878:	3e7f      	subs	r6, #127	; 0x7f
 800087a:	4682      	mov	sl, r0
 800087c:	4680      	mov	r8, r0
 800087e:	1c39      	adds	r1, r7, #0
 8000880:	004b      	lsls	r3, r1, #1
 8000882:	027f      	lsls	r7, r7, #9
 8000884:	0fc9      	lsrs	r1, r1, #31
 8000886:	0a7f      	lsrs	r7, r7, #9
 8000888:	0e1b      	lsrs	r3, r3, #24
 800088a:	468b      	mov	fp, r1
 800088c:	d03b      	beq.n	8000906 <__aeabi_fmul+0xba>
 800088e:	2bff      	cmp	r3, #255	; 0xff
 8000890:	d034      	beq.n	80008fc <__aeabi_fmul+0xb0>
 8000892:	2280      	movs	r2, #128	; 0x80
 8000894:	0412      	lsls	r2, r2, #16
 8000896:	4317      	orrs	r7, r2
 8000898:	00ff      	lsls	r7, r7, #3
 800089a:	3b7f      	subs	r3, #127	; 0x7f
 800089c:	2100      	movs	r1, #0
 800089e:	465a      	mov	r2, fp
 80008a0:	406a      	eors	r2, r5
 80008a2:	9201      	str	r2, [sp, #4]
 80008a4:	4652      	mov	r2, sl
 80008a6:	430a      	orrs	r2, r1
 80008a8:	2a0f      	cmp	r2, #15
 80008aa:	d863      	bhi.n	8000974 <__aeabi_fmul+0x128>
 80008ac:	487a      	ldr	r0, [pc, #488]	; (8000a98 <__aeabi_fmul+0x24c>)
 80008ae:	0092      	lsls	r2, r2, #2
 80008b0:	5882      	ldr	r2, [r0, r2]
 80008b2:	4697      	mov	pc, r2
 80008b4:	2c00      	cmp	r4, #0
 80008b6:	d13f      	bne.n	8000938 <__aeabi_fmul+0xec>
 80008b8:	2208      	movs	r2, #8
 80008ba:	2302      	movs	r3, #2
 80008bc:	4692      	mov	sl, r2
 80008be:	4698      	mov	r8, r3
 80008c0:	e7dd      	b.n	800087e <__aeabi_fmul+0x32>
 80008c2:	9501      	str	r5, [sp, #4]
 80008c4:	4640      	mov	r0, r8
 80008c6:	2802      	cmp	r0, #2
 80008c8:	d12a      	bne.n	8000920 <__aeabi_fmul+0xd4>
 80008ca:	9a01      	ldr	r2, [sp, #4]
 80008cc:	2501      	movs	r5, #1
 80008ce:	4015      	ands	r5, r2
 80008d0:	23ff      	movs	r3, #255	; 0xff
 80008d2:	2400      	movs	r4, #0
 80008d4:	0264      	lsls	r4, r4, #9
 80008d6:	05db      	lsls	r3, r3, #23
 80008d8:	0a60      	lsrs	r0, r4, #9
 80008da:	07ed      	lsls	r5, r5, #31
 80008dc:	4318      	orrs	r0, r3
 80008de:	4328      	orrs	r0, r5
 80008e0:	b003      	add	sp, #12
 80008e2:	bc3c      	pop	{r2, r3, r4, r5}
 80008e4:	4690      	mov	r8, r2
 80008e6:	4699      	mov	r9, r3
 80008e8:	46a2      	mov	sl, r4
 80008ea:	46ab      	mov	fp, r5
 80008ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008ee:	2c00      	cmp	r4, #0
 80008f0:	d127      	bne.n	8000942 <__aeabi_fmul+0xf6>
 80008f2:	2004      	movs	r0, #4
 80008f4:	2201      	movs	r2, #1
 80008f6:	4682      	mov	sl, r0
 80008f8:	4690      	mov	r8, r2
 80008fa:	e7c0      	b.n	800087e <__aeabi_fmul+0x32>
 80008fc:	1c39      	adds	r1, r7, #0
 80008fe:	1e4a      	subs	r2, r1, #1
 8000900:	4191      	sbcs	r1, r2
 8000902:	3102      	adds	r1, #2
 8000904:	e7cb      	b.n	800089e <__aeabi_fmul+0x52>
 8000906:	2101      	movs	r1, #1
 8000908:	2f00      	cmp	r7, #0
 800090a:	d0c8      	beq.n	800089e <__aeabi_fmul+0x52>
 800090c:	1c38      	adds	r0, r7, #0
 800090e:	f002 f9c7 	bl	8002ca0 <__clzsi2>
 8000912:	1f43      	subs	r3, r0, #5
 8000914:	409f      	lsls	r7, r3
 8000916:	2376      	movs	r3, #118	; 0x76
 8000918:	425b      	negs	r3, r3
 800091a:	1a1b      	subs	r3, r3, r0
 800091c:	2100      	movs	r1, #0
 800091e:	e7be      	b.n	800089e <__aeabi_fmul+0x52>
 8000920:	2803      	cmp	r0, #3
 8000922:	d100      	bne.n	8000926 <__aeabi_fmul+0xda>
 8000924:	e0ae      	b.n	8000a84 <__aeabi_fmul+0x238>
 8000926:	2801      	cmp	r0, #1
 8000928:	d14f      	bne.n	80009ca <__aeabi_fmul+0x17e>
 800092a:	9801      	ldr	r0, [sp, #4]
 800092c:	4642      	mov	r2, r8
 800092e:	4010      	ands	r0, r2
 8000930:	b2c5      	uxtb	r5, r0
 8000932:	2300      	movs	r3, #0
 8000934:	2400      	movs	r4, #0
 8000936:	e7cd      	b.n	80008d4 <__aeabi_fmul+0x88>
 8000938:	230c      	movs	r3, #12
 800093a:	2003      	movs	r0, #3
 800093c:	469a      	mov	sl, r3
 800093e:	4680      	mov	r8, r0
 8000940:	e79d      	b.n	800087e <__aeabi_fmul+0x32>
 8000942:	1c20      	adds	r0, r4, #0
 8000944:	f002 f9ac 	bl	8002ca0 <__clzsi2>
 8000948:	2676      	movs	r6, #118	; 0x76
 800094a:	1f43      	subs	r3, r0, #5
 800094c:	409c      	lsls	r4, r3
 800094e:	4276      	negs	r6, r6
 8000950:	2300      	movs	r3, #0
 8000952:	1a36      	subs	r6, r6, r0
 8000954:	469a      	mov	sl, r3
 8000956:	4698      	mov	r8, r3
 8000958:	e791      	b.n	800087e <__aeabi_fmul+0x32>
 800095a:	2480      	movs	r4, #128	; 0x80
 800095c:	2500      	movs	r5, #0
 800095e:	03e4      	lsls	r4, r4, #15
 8000960:	23ff      	movs	r3, #255	; 0xff
 8000962:	e7b7      	b.n	80008d4 <__aeabi_fmul+0x88>
 8000964:	465b      	mov	r3, fp
 8000966:	1c3c      	adds	r4, r7, #0
 8000968:	9301      	str	r3, [sp, #4]
 800096a:	4688      	mov	r8, r1
 800096c:	e7aa      	b.n	80008c4 <__aeabi_fmul+0x78>
 800096e:	1c3c      	adds	r4, r7, #0
 8000970:	4688      	mov	r8, r1
 8000972:	e7a7      	b.n	80008c4 <__aeabi_fmul+0x78>
 8000974:	0c25      	lsrs	r5, r4, #16
 8000976:	0424      	lsls	r4, r4, #16
 8000978:	0c3a      	lsrs	r2, r7, #16
 800097a:	0c24      	lsrs	r4, r4, #16
 800097c:	043f      	lsls	r7, r7, #16
 800097e:	18f6      	adds	r6, r6, r3
 8000980:	0c3f      	lsrs	r7, r7, #16
 8000982:	1c21      	adds	r1, r4, #0
 8000984:	1c23      	adds	r3, r4, #0
 8000986:	4379      	muls	r1, r7
 8000988:	4353      	muls	r3, r2
 800098a:	436f      	muls	r7, r5
 800098c:	4355      	muls	r5, r2
 800098e:	18fb      	adds	r3, r7, r3
 8000990:	0c0a      	lsrs	r2, r1, #16
 8000992:	189b      	adds	r3, r3, r2
 8000994:	46b1      	mov	r9, r6
 8000996:	429f      	cmp	r7, r3
 8000998:	d902      	bls.n	80009a0 <__aeabi_fmul+0x154>
 800099a:	2280      	movs	r2, #128	; 0x80
 800099c:	0252      	lsls	r2, r2, #9
 800099e:	18ad      	adds	r5, r5, r2
 80009a0:	0409      	lsls	r1, r1, #16
 80009a2:	041a      	lsls	r2, r3, #16
 80009a4:	0c09      	lsrs	r1, r1, #16
 80009a6:	1852      	adds	r2, r2, r1
 80009a8:	0194      	lsls	r4, r2, #6
 80009aa:	0c1b      	lsrs	r3, r3, #16
 80009ac:	1e61      	subs	r1, r4, #1
 80009ae:	418c      	sbcs	r4, r1
 80009b0:	0e92      	lsrs	r2, r2, #26
 80009b2:	18ed      	adds	r5, r5, r3
 80009b4:	4314      	orrs	r4, r2
 80009b6:	01ad      	lsls	r5, r5, #6
 80009b8:	432c      	orrs	r4, r5
 80009ba:	0123      	lsls	r3, r4, #4
 80009bc:	d505      	bpl.n	80009ca <__aeabi_fmul+0x17e>
 80009be:	2201      	movs	r2, #1
 80009c0:	0863      	lsrs	r3, r4, #1
 80009c2:	2001      	movs	r0, #1
 80009c4:	4014      	ands	r4, r2
 80009c6:	4481      	add	r9, r0
 80009c8:	431c      	orrs	r4, r3
 80009ca:	464b      	mov	r3, r9
 80009cc:	337f      	adds	r3, #127	; 0x7f
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	dd2d      	ble.n	8000a2e <__aeabi_fmul+0x1e2>
 80009d2:	0760      	lsls	r0, r4, #29
 80009d4:	d004      	beq.n	80009e0 <__aeabi_fmul+0x194>
 80009d6:	220f      	movs	r2, #15
 80009d8:	4022      	ands	r2, r4
 80009da:	2a04      	cmp	r2, #4
 80009dc:	d000      	beq.n	80009e0 <__aeabi_fmul+0x194>
 80009de:	3404      	adds	r4, #4
 80009e0:	0122      	lsls	r2, r4, #4
 80009e2:	d503      	bpl.n	80009ec <__aeabi_fmul+0x1a0>
 80009e4:	4b2d      	ldr	r3, [pc, #180]	; (8000a9c <__aeabi_fmul+0x250>)
 80009e6:	401c      	ands	r4, r3
 80009e8:	464b      	mov	r3, r9
 80009ea:	3380      	adds	r3, #128	; 0x80
 80009ec:	2bfe      	cmp	r3, #254	; 0xfe
 80009ee:	dd17      	ble.n	8000a20 <__aeabi_fmul+0x1d4>
 80009f0:	9b01      	ldr	r3, [sp, #4]
 80009f2:	2501      	movs	r5, #1
 80009f4:	401d      	ands	r5, r3
 80009f6:	2400      	movs	r4, #0
 80009f8:	23ff      	movs	r3, #255	; 0xff
 80009fa:	e76b      	b.n	80008d4 <__aeabi_fmul+0x88>
 80009fc:	2080      	movs	r0, #128	; 0x80
 80009fe:	03c0      	lsls	r0, r0, #15
 8000a00:	4204      	tst	r4, r0
 8000a02:	d008      	beq.n	8000a16 <__aeabi_fmul+0x1ca>
 8000a04:	4207      	tst	r7, r0
 8000a06:	d106      	bne.n	8000a16 <__aeabi_fmul+0x1ca>
 8000a08:	1c04      	adds	r4, r0, #0
 8000a0a:	433c      	orrs	r4, r7
 8000a0c:	0264      	lsls	r4, r4, #9
 8000a0e:	0a64      	lsrs	r4, r4, #9
 8000a10:	465d      	mov	r5, fp
 8000a12:	23ff      	movs	r3, #255	; 0xff
 8000a14:	e75e      	b.n	80008d4 <__aeabi_fmul+0x88>
 8000a16:	4304      	orrs	r4, r0
 8000a18:	0264      	lsls	r4, r4, #9
 8000a1a:	0a64      	lsrs	r4, r4, #9
 8000a1c:	23ff      	movs	r3, #255	; 0xff
 8000a1e:	e759      	b.n	80008d4 <__aeabi_fmul+0x88>
 8000a20:	9801      	ldr	r0, [sp, #4]
 8000a22:	01a4      	lsls	r4, r4, #6
 8000a24:	2501      	movs	r5, #1
 8000a26:	0a64      	lsrs	r4, r4, #9
 8000a28:	b2db      	uxtb	r3, r3
 8000a2a:	4005      	ands	r5, r0
 8000a2c:	e752      	b.n	80008d4 <__aeabi_fmul+0x88>
 8000a2e:	237e      	movs	r3, #126	; 0x7e
 8000a30:	425b      	negs	r3, r3
 8000a32:	464a      	mov	r2, r9
 8000a34:	1a9b      	subs	r3, r3, r2
 8000a36:	2b1b      	cmp	r3, #27
 8000a38:	dd05      	ble.n	8000a46 <__aeabi_fmul+0x1fa>
 8000a3a:	9b01      	ldr	r3, [sp, #4]
 8000a3c:	2501      	movs	r5, #1
 8000a3e:	401d      	ands	r5, r3
 8000a40:	2400      	movs	r4, #0
 8000a42:	2300      	movs	r3, #0
 8000a44:	e746      	b.n	80008d4 <__aeabi_fmul+0x88>
 8000a46:	1c22      	adds	r2, r4, #0
 8000a48:	40da      	lsrs	r2, r3
 8000a4a:	464b      	mov	r3, r9
 8000a4c:	339e      	adds	r3, #158	; 0x9e
 8000a4e:	409c      	lsls	r4, r3
 8000a50:	1c23      	adds	r3, r4, #0
 8000a52:	1e5c      	subs	r4, r3, #1
 8000a54:	41a3      	sbcs	r3, r4
 8000a56:	4313      	orrs	r3, r2
 8000a58:	0758      	lsls	r0, r3, #29
 8000a5a:	d004      	beq.n	8000a66 <__aeabi_fmul+0x21a>
 8000a5c:	220f      	movs	r2, #15
 8000a5e:	401a      	ands	r2, r3
 8000a60:	2a04      	cmp	r2, #4
 8000a62:	d000      	beq.n	8000a66 <__aeabi_fmul+0x21a>
 8000a64:	3304      	adds	r3, #4
 8000a66:	015a      	lsls	r2, r3, #5
 8000a68:	d505      	bpl.n	8000a76 <__aeabi_fmul+0x22a>
 8000a6a:	9b01      	ldr	r3, [sp, #4]
 8000a6c:	2501      	movs	r5, #1
 8000a6e:	401d      	ands	r5, r3
 8000a70:	2400      	movs	r4, #0
 8000a72:	2301      	movs	r3, #1
 8000a74:	e72e      	b.n	80008d4 <__aeabi_fmul+0x88>
 8000a76:	9801      	ldr	r0, [sp, #4]
 8000a78:	019c      	lsls	r4, r3, #6
 8000a7a:	2501      	movs	r5, #1
 8000a7c:	0a64      	lsrs	r4, r4, #9
 8000a7e:	4005      	ands	r5, r0
 8000a80:	2300      	movs	r3, #0
 8000a82:	e727      	b.n	80008d4 <__aeabi_fmul+0x88>
 8000a84:	2780      	movs	r7, #128	; 0x80
 8000a86:	03ff      	lsls	r7, r7, #15
 8000a88:	9b01      	ldr	r3, [sp, #4]
 8000a8a:	433c      	orrs	r4, r7
 8000a8c:	0264      	lsls	r4, r4, #9
 8000a8e:	2501      	movs	r5, #1
 8000a90:	401d      	ands	r5, r3
 8000a92:	0a64      	lsrs	r4, r4, #9
 8000a94:	23ff      	movs	r3, #255	; 0xff
 8000a96:	e71d      	b.n	80008d4 <__aeabi_fmul+0x88>
 8000a98:	0800bcf0 	.word	0x0800bcf0
 8000a9c:	f7ffffff 	.word	0xf7ffffff

08000aa0 <__aeabi_fsub>:
 8000aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000aa2:	0fc2      	lsrs	r2, r0, #31
 8000aa4:	0243      	lsls	r3, r0, #9
 8000aa6:	0044      	lsls	r4, r0, #1
 8000aa8:	024d      	lsls	r5, r1, #9
 8000aaa:	0048      	lsls	r0, r1, #1
 8000aac:	0e24      	lsrs	r4, r4, #24
 8000aae:	1c16      	adds	r6, r2, #0
 8000ab0:	099b      	lsrs	r3, r3, #6
 8000ab2:	0e00      	lsrs	r0, r0, #24
 8000ab4:	0fc9      	lsrs	r1, r1, #31
 8000ab6:	09ad      	lsrs	r5, r5, #6
 8000ab8:	28ff      	cmp	r0, #255	; 0xff
 8000aba:	d100      	bne.n	8000abe <__aeabi_fsub+0x1e>
 8000abc:	e07e      	b.n	8000bbc <__aeabi_fsub+0x11c>
 8000abe:	2701      	movs	r7, #1
 8000ac0:	4079      	eors	r1, r7
 8000ac2:	428a      	cmp	r2, r1
 8000ac4:	d058      	beq.n	8000b78 <__aeabi_fsub+0xd8>
 8000ac6:	1a22      	subs	r2, r4, r0
 8000ac8:	2a00      	cmp	r2, #0
 8000aca:	dc00      	bgt.n	8000ace <__aeabi_fsub+0x2e>
 8000acc:	e089      	b.n	8000be2 <__aeabi_fsub+0x142>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	d11b      	bne.n	8000b0a <__aeabi_fsub+0x6a>
 8000ad2:	2d00      	cmp	r5, #0
 8000ad4:	d000      	beq.n	8000ad8 <__aeabi_fsub+0x38>
 8000ad6:	e075      	b.n	8000bc4 <__aeabi_fsub+0x124>
 8000ad8:	0758      	lsls	r0, r3, #29
 8000ada:	d004      	beq.n	8000ae6 <__aeabi_fsub+0x46>
 8000adc:	220f      	movs	r2, #15
 8000ade:	401a      	ands	r2, r3
 8000ae0:	2a04      	cmp	r2, #4
 8000ae2:	d000      	beq.n	8000ae6 <__aeabi_fsub+0x46>
 8000ae4:	3304      	adds	r3, #4
 8000ae6:	0159      	lsls	r1, r3, #5
 8000ae8:	d538      	bpl.n	8000b5c <__aeabi_fsub+0xbc>
 8000aea:	3401      	adds	r4, #1
 8000aec:	2cff      	cmp	r4, #255	; 0xff
 8000aee:	d100      	bne.n	8000af2 <__aeabi_fsub+0x52>
 8000af0:	e083      	b.n	8000bfa <__aeabi_fsub+0x15a>
 8000af2:	019b      	lsls	r3, r3, #6
 8000af4:	2201      	movs	r2, #1
 8000af6:	0a5b      	lsrs	r3, r3, #9
 8000af8:	b2e0      	uxtb	r0, r4
 8000afa:	4032      	ands	r2, r6
 8000afc:	025b      	lsls	r3, r3, #9
 8000afe:	05c4      	lsls	r4, r0, #23
 8000b00:	0a58      	lsrs	r0, r3, #9
 8000b02:	07d2      	lsls	r2, r2, #31
 8000b04:	4320      	orrs	r0, r4
 8000b06:	4310      	orrs	r0, r2
 8000b08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b0a:	2cff      	cmp	r4, #255	; 0xff
 8000b0c:	d0e4      	beq.n	8000ad8 <__aeabi_fsub+0x38>
 8000b0e:	2180      	movs	r1, #128	; 0x80
 8000b10:	04c9      	lsls	r1, r1, #19
 8000b12:	430d      	orrs	r5, r1
 8000b14:	2a1b      	cmp	r2, #27
 8000b16:	dd00      	ble.n	8000b1a <__aeabi_fsub+0x7a>
 8000b18:	e12d      	b.n	8000d76 <__aeabi_fsub+0x2d6>
 8000b1a:	1c29      	adds	r1, r5, #0
 8000b1c:	2020      	movs	r0, #32
 8000b1e:	40d1      	lsrs	r1, r2
 8000b20:	1a82      	subs	r2, r0, r2
 8000b22:	4095      	lsls	r5, r2
 8000b24:	1e6a      	subs	r2, r5, #1
 8000b26:	4195      	sbcs	r5, r2
 8000b28:	430d      	orrs	r5, r1
 8000b2a:	1b5b      	subs	r3, r3, r5
 8000b2c:	0158      	lsls	r0, r3, #5
 8000b2e:	d5d3      	bpl.n	8000ad8 <__aeabi_fsub+0x38>
 8000b30:	019b      	lsls	r3, r3, #6
 8000b32:	099f      	lsrs	r7, r3, #6
 8000b34:	1c38      	adds	r0, r7, #0
 8000b36:	f002 f8b3 	bl	8002ca0 <__clzsi2>
 8000b3a:	1f42      	subs	r2, r0, #5
 8000b3c:	4097      	lsls	r7, r2
 8000b3e:	4294      	cmp	r4, r2
 8000b40:	dc60      	bgt.n	8000c04 <__aeabi_fsub+0x164>
 8000b42:	1b14      	subs	r4, r2, r4
 8000b44:	231f      	movs	r3, #31
 8000b46:	1b1b      	subs	r3, r3, r4
 8000b48:	1c3a      	adds	r2, r7, #0
 8000b4a:	409f      	lsls	r7, r3
 8000b4c:	1c61      	adds	r1, r4, #1
 8000b4e:	1c3b      	adds	r3, r7, #0
 8000b50:	40ca      	lsrs	r2, r1
 8000b52:	1e5f      	subs	r7, r3, #1
 8000b54:	41bb      	sbcs	r3, r7
 8000b56:	4313      	orrs	r3, r2
 8000b58:	2400      	movs	r4, #0
 8000b5a:	e7bd      	b.n	8000ad8 <__aeabi_fsub+0x38>
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	08db      	lsrs	r3, r3, #3
 8000b60:	b2e0      	uxtb	r0, r4
 8000b62:	4032      	ands	r2, r6
 8000b64:	2cff      	cmp	r4, #255	; 0xff
 8000b66:	d104      	bne.n	8000b72 <__aeabi_fsub+0xd2>
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d07e      	beq.n	8000c6a <__aeabi_fsub+0x1ca>
 8000b6c:	2180      	movs	r1, #128	; 0x80
 8000b6e:	03c9      	lsls	r1, r1, #15
 8000b70:	430b      	orrs	r3, r1
 8000b72:	025b      	lsls	r3, r3, #9
 8000b74:	0a5b      	lsrs	r3, r3, #9
 8000b76:	e7c1      	b.n	8000afc <__aeabi_fsub+0x5c>
 8000b78:	1a21      	subs	r1, r4, r0
 8000b7a:	2900      	cmp	r1, #0
 8000b7c:	dd46      	ble.n	8000c0c <__aeabi_fsub+0x16c>
 8000b7e:	2800      	cmp	r0, #0
 8000b80:	d026      	beq.n	8000bd0 <__aeabi_fsub+0x130>
 8000b82:	2cff      	cmp	r4, #255	; 0xff
 8000b84:	d0a8      	beq.n	8000ad8 <__aeabi_fsub+0x38>
 8000b86:	2080      	movs	r0, #128	; 0x80
 8000b88:	04c0      	lsls	r0, r0, #19
 8000b8a:	4305      	orrs	r5, r0
 8000b8c:	291b      	cmp	r1, #27
 8000b8e:	dd00      	ble.n	8000b92 <__aeabi_fsub+0xf2>
 8000b90:	e0ef      	b.n	8000d72 <__aeabi_fsub+0x2d2>
 8000b92:	1c28      	adds	r0, r5, #0
 8000b94:	2720      	movs	r7, #32
 8000b96:	40c8      	lsrs	r0, r1
 8000b98:	1a79      	subs	r1, r7, r1
 8000b9a:	408d      	lsls	r5, r1
 8000b9c:	1e69      	subs	r1, r5, #1
 8000b9e:	418d      	sbcs	r5, r1
 8000ba0:	4305      	orrs	r5, r0
 8000ba2:	195b      	adds	r3, r3, r5
 8000ba4:	0159      	lsls	r1, r3, #5
 8000ba6:	d597      	bpl.n	8000ad8 <__aeabi_fsub+0x38>
 8000ba8:	3401      	adds	r4, #1
 8000baa:	2cff      	cmp	r4, #255	; 0xff
 8000bac:	d05c      	beq.n	8000c68 <__aeabi_fsub+0x1c8>
 8000bae:	4973      	ldr	r1, [pc, #460]	; (8000d7c <__aeabi_fsub+0x2dc>)
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	401a      	ands	r2, r3
 8000bb4:	400b      	ands	r3, r1
 8000bb6:	085b      	lsrs	r3, r3, #1
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	e78d      	b.n	8000ad8 <__aeabi_fsub+0x38>
 8000bbc:	2d00      	cmp	r5, #0
 8000bbe:	d000      	beq.n	8000bc2 <__aeabi_fsub+0x122>
 8000bc0:	e77f      	b.n	8000ac2 <__aeabi_fsub+0x22>
 8000bc2:	e77c      	b.n	8000abe <__aeabi_fsub+0x1e>
 8000bc4:	3a01      	subs	r2, #1
 8000bc6:	2a00      	cmp	r2, #0
 8000bc8:	d0af      	beq.n	8000b2a <__aeabi_fsub+0x8a>
 8000bca:	2cff      	cmp	r4, #255	; 0xff
 8000bcc:	d1a2      	bne.n	8000b14 <__aeabi_fsub+0x74>
 8000bce:	e783      	b.n	8000ad8 <__aeabi_fsub+0x38>
 8000bd0:	2d00      	cmp	r5, #0
 8000bd2:	d100      	bne.n	8000bd6 <__aeabi_fsub+0x136>
 8000bd4:	e780      	b.n	8000ad8 <__aeabi_fsub+0x38>
 8000bd6:	3901      	subs	r1, #1
 8000bd8:	2900      	cmp	r1, #0
 8000bda:	d0e2      	beq.n	8000ba2 <__aeabi_fsub+0x102>
 8000bdc:	2cff      	cmp	r4, #255	; 0xff
 8000bde:	d1d5      	bne.n	8000b8c <__aeabi_fsub+0xec>
 8000be0:	e77a      	b.n	8000ad8 <__aeabi_fsub+0x38>
 8000be2:	2a00      	cmp	r2, #0
 8000be4:	d11e      	bne.n	8000c24 <__aeabi_fsub+0x184>
 8000be6:	1c62      	adds	r2, r4, #1
 8000be8:	b2d2      	uxtb	r2, r2
 8000bea:	2a01      	cmp	r2, #1
 8000bec:	dd4e      	ble.n	8000c8c <__aeabi_fsub+0x1ec>
 8000bee:	1b5f      	subs	r7, r3, r5
 8000bf0:	017a      	lsls	r2, r7, #5
 8000bf2:	d526      	bpl.n	8000c42 <__aeabi_fsub+0x1a2>
 8000bf4:	1aef      	subs	r7, r5, r3
 8000bf6:	1c0e      	adds	r6, r1, #0
 8000bf8:	e79c      	b.n	8000b34 <__aeabi_fsub+0x94>
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	4032      	ands	r2, r6
 8000bfe:	20ff      	movs	r0, #255	; 0xff
 8000c00:	2300      	movs	r3, #0
 8000c02:	e77b      	b.n	8000afc <__aeabi_fsub+0x5c>
 8000c04:	4b5d      	ldr	r3, [pc, #372]	; (8000d7c <__aeabi_fsub+0x2dc>)
 8000c06:	1aa4      	subs	r4, r4, r2
 8000c08:	403b      	ands	r3, r7
 8000c0a:	e765      	b.n	8000ad8 <__aeabi_fsub+0x38>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	d146      	bne.n	8000c9e <__aeabi_fsub+0x1fe>
 8000c10:	1c61      	adds	r1, r4, #1
 8000c12:	b2c8      	uxtb	r0, r1
 8000c14:	2801      	cmp	r0, #1
 8000c16:	dd2a      	ble.n	8000c6e <__aeabi_fsub+0x1ce>
 8000c18:	29ff      	cmp	r1, #255	; 0xff
 8000c1a:	d025      	beq.n	8000c68 <__aeabi_fsub+0x1c8>
 8000c1c:	18eb      	adds	r3, r5, r3
 8000c1e:	085b      	lsrs	r3, r3, #1
 8000c20:	1c0c      	adds	r4, r1, #0
 8000c22:	e759      	b.n	8000ad8 <__aeabi_fsub+0x38>
 8000c24:	2c00      	cmp	r4, #0
 8000c26:	d013      	beq.n	8000c50 <__aeabi_fsub+0x1b0>
 8000c28:	28ff      	cmp	r0, #255	; 0xff
 8000c2a:	d018      	beq.n	8000c5e <__aeabi_fsub+0x1be>
 8000c2c:	2480      	movs	r4, #128	; 0x80
 8000c2e:	04e4      	lsls	r4, r4, #19
 8000c30:	4252      	negs	r2, r2
 8000c32:	4323      	orrs	r3, r4
 8000c34:	2a1b      	cmp	r2, #27
 8000c36:	dd4d      	ble.n	8000cd4 <__aeabi_fsub+0x234>
 8000c38:	2301      	movs	r3, #1
 8000c3a:	1aeb      	subs	r3, r5, r3
 8000c3c:	1c04      	adds	r4, r0, #0
 8000c3e:	1c0e      	adds	r6, r1, #0
 8000c40:	e774      	b.n	8000b2c <__aeabi_fsub+0x8c>
 8000c42:	2f00      	cmp	r7, #0
 8000c44:	d000      	beq.n	8000c48 <__aeabi_fsub+0x1a8>
 8000c46:	e775      	b.n	8000b34 <__aeabi_fsub+0x94>
 8000c48:	2200      	movs	r2, #0
 8000c4a:	2000      	movs	r0, #0
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	e790      	b.n	8000b72 <__aeabi_fsub+0xd2>
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d03b      	beq.n	8000ccc <__aeabi_fsub+0x22c>
 8000c54:	43d2      	mvns	r2, r2
 8000c56:	2a00      	cmp	r2, #0
 8000c58:	d0ef      	beq.n	8000c3a <__aeabi_fsub+0x19a>
 8000c5a:	28ff      	cmp	r0, #255	; 0xff
 8000c5c:	d1ea      	bne.n	8000c34 <__aeabi_fsub+0x194>
 8000c5e:	1c2b      	adds	r3, r5, #0
 8000c60:	24ff      	movs	r4, #255	; 0xff
 8000c62:	1c0e      	adds	r6, r1, #0
 8000c64:	e738      	b.n	8000ad8 <__aeabi_fsub+0x38>
 8000c66:	2200      	movs	r2, #0
 8000c68:	20ff      	movs	r0, #255	; 0xff
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	e746      	b.n	8000afc <__aeabi_fsub+0x5c>
 8000c6e:	2c00      	cmp	r4, #0
 8000c70:	d15a      	bne.n	8000d28 <__aeabi_fsub+0x288>
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d077      	beq.n	8000d66 <__aeabi_fsub+0x2c6>
 8000c76:	2d00      	cmp	r5, #0
 8000c78:	d100      	bne.n	8000c7c <__aeabi_fsub+0x1dc>
 8000c7a:	e72d      	b.n	8000ad8 <__aeabi_fsub+0x38>
 8000c7c:	195b      	adds	r3, r3, r5
 8000c7e:	0158      	lsls	r0, r3, #5
 8000c80:	d400      	bmi.n	8000c84 <__aeabi_fsub+0x1e4>
 8000c82:	e729      	b.n	8000ad8 <__aeabi_fsub+0x38>
 8000c84:	4a3d      	ldr	r2, [pc, #244]	; (8000d7c <__aeabi_fsub+0x2dc>)
 8000c86:	2401      	movs	r4, #1
 8000c88:	4013      	ands	r3, r2
 8000c8a:	e725      	b.n	8000ad8 <__aeabi_fsub+0x38>
 8000c8c:	2c00      	cmp	r4, #0
 8000c8e:	d115      	bne.n	8000cbc <__aeabi_fsub+0x21c>
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d12f      	bne.n	8000cf4 <__aeabi_fsub+0x254>
 8000c94:	2d00      	cmp	r5, #0
 8000c96:	d0d7      	beq.n	8000c48 <__aeabi_fsub+0x1a8>
 8000c98:	1c2b      	adds	r3, r5, #0
 8000c9a:	1c0e      	adds	r6, r1, #0
 8000c9c:	e71c      	b.n	8000ad8 <__aeabi_fsub+0x38>
 8000c9e:	2c00      	cmp	r4, #0
 8000ca0:	d121      	bne.n	8000ce6 <__aeabi_fsub+0x246>
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d053      	beq.n	8000d4e <__aeabi_fsub+0x2ae>
 8000ca6:	43c9      	mvns	r1, r1
 8000ca8:	2900      	cmp	r1, #0
 8000caa:	d004      	beq.n	8000cb6 <__aeabi_fsub+0x216>
 8000cac:	28ff      	cmp	r0, #255	; 0xff
 8000cae:	d04b      	beq.n	8000d48 <__aeabi_fsub+0x2a8>
 8000cb0:	291b      	cmp	r1, #27
 8000cb2:	dd4f      	ble.n	8000d54 <__aeabi_fsub+0x2b4>
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	195b      	adds	r3, r3, r5
 8000cb8:	1c04      	adds	r4, r0, #0
 8000cba:	e773      	b.n	8000ba4 <__aeabi_fsub+0x104>
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d122      	bne.n	8000d06 <__aeabi_fsub+0x266>
 8000cc0:	2d00      	cmp	r5, #0
 8000cc2:	d0d0      	beq.n	8000c66 <__aeabi_fsub+0x1c6>
 8000cc4:	1c2b      	adds	r3, r5, #0
 8000cc6:	1c0e      	adds	r6, r1, #0
 8000cc8:	24ff      	movs	r4, #255	; 0xff
 8000cca:	e705      	b.n	8000ad8 <__aeabi_fsub+0x38>
 8000ccc:	1c2b      	adds	r3, r5, #0
 8000cce:	1c04      	adds	r4, r0, #0
 8000cd0:	1c0e      	adds	r6, r1, #0
 8000cd2:	e701      	b.n	8000ad8 <__aeabi_fsub+0x38>
 8000cd4:	1c1c      	adds	r4, r3, #0
 8000cd6:	2620      	movs	r6, #32
 8000cd8:	40d4      	lsrs	r4, r2
 8000cda:	1ab2      	subs	r2, r6, r2
 8000cdc:	4093      	lsls	r3, r2
 8000cde:	1e5a      	subs	r2, r3, #1
 8000ce0:	4193      	sbcs	r3, r2
 8000ce2:	4323      	orrs	r3, r4
 8000ce4:	e7a9      	b.n	8000c3a <__aeabi_fsub+0x19a>
 8000ce6:	28ff      	cmp	r0, #255	; 0xff
 8000ce8:	d02e      	beq.n	8000d48 <__aeabi_fsub+0x2a8>
 8000cea:	2480      	movs	r4, #128	; 0x80
 8000cec:	04e4      	lsls	r4, r4, #19
 8000cee:	4249      	negs	r1, r1
 8000cf0:	4323      	orrs	r3, r4
 8000cf2:	e7dd      	b.n	8000cb0 <__aeabi_fsub+0x210>
 8000cf4:	2d00      	cmp	r5, #0
 8000cf6:	d100      	bne.n	8000cfa <__aeabi_fsub+0x25a>
 8000cf8:	e6ee      	b.n	8000ad8 <__aeabi_fsub+0x38>
 8000cfa:	1b5a      	subs	r2, r3, r5
 8000cfc:	0150      	lsls	r0, r2, #5
 8000cfe:	d534      	bpl.n	8000d6a <__aeabi_fsub+0x2ca>
 8000d00:	1aeb      	subs	r3, r5, r3
 8000d02:	1c0e      	adds	r6, r1, #0
 8000d04:	e6e8      	b.n	8000ad8 <__aeabi_fsub+0x38>
 8000d06:	24ff      	movs	r4, #255	; 0xff
 8000d08:	2d00      	cmp	r5, #0
 8000d0a:	d100      	bne.n	8000d0e <__aeabi_fsub+0x26e>
 8000d0c:	e6e4      	b.n	8000ad8 <__aeabi_fsub+0x38>
 8000d0e:	2280      	movs	r2, #128	; 0x80
 8000d10:	08db      	lsrs	r3, r3, #3
 8000d12:	03d2      	lsls	r2, r2, #15
 8000d14:	4213      	tst	r3, r2
 8000d16:	d004      	beq.n	8000d22 <__aeabi_fsub+0x282>
 8000d18:	08ed      	lsrs	r5, r5, #3
 8000d1a:	4215      	tst	r5, r2
 8000d1c:	d101      	bne.n	8000d22 <__aeabi_fsub+0x282>
 8000d1e:	1c2b      	adds	r3, r5, #0
 8000d20:	1c0e      	adds	r6, r1, #0
 8000d22:	00db      	lsls	r3, r3, #3
 8000d24:	24ff      	movs	r4, #255	; 0xff
 8000d26:	e6d7      	b.n	8000ad8 <__aeabi_fsub+0x38>
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d00d      	beq.n	8000d48 <__aeabi_fsub+0x2a8>
 8000d2c:	24ff      	movs	r4, #255	; 0xff
 8000d2e:	2d00      	cmp	r5, #0
 8000d30:	d100      	bne.n	8000d34 <__aeabi_fsub+0x294>
 8000d32:	e6d1      	b.n	8000ad8 <__aeabi_fsub+0x38>
 8000d34:	2280      	movs	r2, #128	; 0x80
 8000d36:	08db      	lsrs	r3, r3, #3
 8000d38:	03d2      	lsls	r2, r2, #15
 8000d3a:	4213      	tst	r3, r2
 8000d3c:	d0f1      	beq.n	8000d22 <__aeabi_fsub+0x282>
 8000d3e:	08ed      	lsrs	r5, r5, #3
 8000d40:	4215      	tst	r5, r2
 8000d42:	d1ee      	bne.n	8000d22 <__aeabi_fsub+0x282>
 8000d44:	1c2b      	adds	r3, r5, #0
 8000d46:	e7ec      	b.n	8000d22 <__aeabi_fsub+0x282>
 8000d48:	1c2b      	adds	r3, r5, #0
 8000d4a:	24ff      	movs	r4, #255	; 0xff
 8000d4c:	e6c4      	b.n	8000ad8 <__aeabi_fsub+0x38>
 8000d4e:	1c2b      	adds	r3, r5, #0
 8000d50:	1c04      	adds	r4, r0, #0
 8000d52:	e6c1      	b.n	8000ad8 <__aeabi_fsub+0x38>
 8000d54:	1c1c      	adds	r4, r3, #0
 8000d56:	2720      	movs	r7, #32
 8000d58:	40cc      	lsrs	r4, r1
 8000d5a:	1a79      	subs	r1, r7, r1
 8000d5c:	408b      	lsls	r3, r1
 8000d5e:	1e59      	subs	r1, r3, #1
 8000d60:	418b      	sbcs	r3, r1
 8000d62:	4323      	orrs	r3, r4
 8000d64:	e7a7      	b.n	8000cb6 <__aeabi_fsub+0x216>
 8000d66:	1c2b      	adds	r3, r5, #0
 8000d68:	e6b6      	b.n	8000ad8 <__aeabi_fsub+0x38>
 8000d6a:	1e13      	subs	r3, r2, #0
 8000d6c:	d000      	beq.n	8000d70 <__aeabi_fsub+0x2d0>
 8000d6e:	e6b3      	b.n	8000ad8 <__aeabi_fsub+0x38>
 8000d70:	e76a      	b.n	8000c48 <__aeabi_fsub+0x1a8>
 8000d72:	2501      	movs	r5, #1
 8000d74:	e715      	b.n	8000ba2 <__aeabi_fsub+0x102>
 8000d76:	2501      	movs	r5, #1
 8000d78:	e6d7      	b.n	8000b2a <__aeabi_fsub+0x8a>
 8000d7a:	46c0      	nop			; (mov r8, r8)
 8000d7c:	fbffffff 	.word	0xfbffffff

08000d80 <__aeabi_f2iz>:
 8000d80:	0243      	lsls	r3, r0, #9
 8000d82:	0a59      	lsrs	r1, r3, #9
 8000d84:	0043      	lsls	r3, r0, #1
 8000d86:	0fc2      	lsrs	r2, r0, #31
 8000d88:	0e1b      	lsrs	r3, r3, #24
 8000d8a:	2000      	movs	r0, #0
 8000d8c:	2b7e      	cmp	r3, #126	; 0x7e
 8000d8e:	dd0d      	ble.n	8000dac <__aeabi_f2iz+0x2c>
 8000d90:	2b9d      	cmp	r3, #157	; 0x9d
 8000d92:	dc0c      	bgt.n	8000dae <__aeabi_f2iz+0x2e>
 8000d94:	2080      	movs	r0, #128	; 0x80
 8000d96:	0400      	lsls	r0, r0, #16
 8000d98:	4301      	orrs	r1, r0
 8000d9a:	2b95      	cmp	r3, #149	; 0x95
 8000d9c:	dc0a      	bgt.n	8000db4 <__aeabi_f2iz+0x34>
 8000d9e:	2096      	movs	r0, #150	; 0x96
 8000da0:	1ac3      	subs	r3, r0, r3
 8000da2:	40d9      	lsrs	r1, r3
 8000da4:	4248      	negs	r0, r1
 8000da6:	2a00      	cmp	r2, #0
 8000da8:	d100      	bne.n	8000dac <__aeabi_f2iz+0x2c>
 8000daa:	1c08      	adds	r0, r1, #0
 8000dac:	4770      	bx	lr
 8000dae:	4b03      	ldr	r3, [pc, #12]	; (8000dbc <__aeabi_f2iz+0x3c>)
 8000db0:	18d0      	adds	r0, r2, r3
 8000db2:	e7fb      	b.n	8000dac <__aeabi_f2iz+0x2c>
 8000db4:	3b96      	subs	r3, #150	; 0x96
 8000db6:	4099      	lsls	r1, r3
 8000db8:	e7f4      	b.n	8000da4 <__aeabi_f2iz+0x24>
 8000dba:	46c0      	nop			; (mov r8, r8)
 8000dbc:	7fffffff 	.word	0x7fffffff

08000dc0 <__aeabi_i2f>:
 8000dc0:	b570      	push	{r4, r5, r6, lr}
 8000dc2:	1e04      	subs	r4, r0, #0
 8000dc4:	d03c      	beq.n	8000e40 <__aeabi_i2f+0x80>
 8000dc6:	0fc6      	lsrs	r6, r0, #31
 8000dc8:	d000      	beq.n	8000dcc <__aeabi_i2f+0xc>
 8000dca:	4244      	negs	r4, r0
 8000dcc:	1c20      	adds	r0, r4, #0
 8000dce:	f001 ff67 	bl	8002ca0 <__clzsi2>
 8000dd2:	239e      	movs	r3, #158	; 0x9e
 8000dd4:	1c25      	adds	r5, r4, #0
 8000dd6:	1a1b      	subs	r3, r3, r0
 8000dd8:	2b96      	cmp	r3, #150	; 0x96
 8000dda:	dc0c      	bgt.n	8000df6 <__aeabi_i2f+0x36>
 8000ddc:	3808      	subs	r0, #8
 8000dde:	4084      	lsls	r4, r0
 8000de0:	0264      	lsls	r4, r4, #9
 8000de2:	0a64      	lsrs	r4, r4, #9
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	1c32      	adds	r2, r6, #0
 8000de8:	0264      	lsls	r4, r4, #9
 8000dea:	05db      	lsls	r3, r3, #23
 8000dec:	0a60      	lsrs	r0, r4, #9
 8000dee:	07d2      	lsls	r2, r2, #31
 8000df0:	4318      	orrs	r0, r3
 8000df2:	4310      	orrs	r0, r2
 8000df4:	bd70      	pop	{r4, r5, r6, pc}
 8000df6:	2b99      	cmp	r3, #153	; 0x99
 8000df8:	dd0a      	ble.n	8000e10 <__aeabi_i2f+0x50>
 8000dfa:	2205      	movs	r2, #5
 8000dfc:	1a12      	subs	r2, r2, r0
 8000dfe:	1c21      	adds	r1, r4, #0
 8000e00:	40d1      	lsrs	r1, r2
 8000e02:	1c0a      	adds	r2, r1, #0
 8000e04:	1c01      	adds	r1, r0, #0
 8000e06:	311b      	adds	r1, #27
 8000e08:	408d      	lsls	r5, r1
 8000e0a:	1e69      	subs	r1, r5, #1
 8000e0c:	418d      	sbcs	r5, r1
 8000e0e:	4315      	orrs	r5, r2
 8000e10:	2805      	cmp	r0, #5
 8000e12:	dd01      	ble.n	8000e18 <__aeabi_i2f+0x58>
 8000e14:	1f42      	subs	r2, r0, #5
 8000e16:	4095      	lsls	r5, r2
 8000e18:	4c16      	ldr	r4, [pc, #88]	; (8000e74 <__aeabi_i2f+0xb4>)
 8000e1a:	402c      	ands	r4, r5
 8000e1c:	076a      	lsls	r2, r5, #29
 8000e1e:	d004      	beq.n	8000e2a <__aeabi_i2f+0x6a>
 8000e20:	220f      	movs	r2, #15
 8000e22:	4015      	ands	r5, r2
 8000e24:	2d04      	cmp	r5, #4
 8000e26:	d000      	beq.n	8000e2a <__aeabi_i2f+0x6a>
 8000e28:	3404      	adds	r4, #4
 8000e2a:	0161      	lsls	r1, r4, #5
 8000e2c:	d50c      	bpl.n	8000e48 <__aeabi_i2f+0x88>
 8000e2e:	239f      	movs	r3, #159	; 0x9f
 8000e30:	1a18      	subs	r0, r3, r0
 8000e32:	28ff      	cmp	r0, #255	; 0xff
 8000e34:	d01a      	beq.n	8000e6c <__aeabi_i2f+0xac>
 8000e36:	01a4      	lsls	r4, r4, #6
 8000e38:	0a64      	lsrs	r4, r4, #9
 8000e3a:	b2c3      	uxtb	r3, r0
 8000e3c:	1c32      	adds	r2, r6, #0
 8000e3e:	e7d3      	b.n	8000de8 <__aeabi_i2f+0x28>
 8000e40:	2200      	movs	r2, #0
 8000e42:	2300      	movs	r3, #0
 8000e44:	2400      	movs	r4, #0
 8000e46:	e7cf      	b.n	8000de8 <__aeabi_i2f+0x28>
 8000e48:	08e4      	lsrs	r4, r4, #3
 8000e4a:	2bff      	cmp	r3, #255	; 0xff
 8000e4c:	d004      	beq.n	8000e58 <__aeabi_i2f+0x98>
 8000e4e:	0264      	lsls	r4, r4, #9
 8000e50:	0a64      	lsrs	r4, r4, #9
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	1c32      	adds	r2, r6, #0
 8000e56:	e7c7      	b.n	8000de8 <__aeabi_i2f+0x28>
 8000e58:	2c00      	cmp	r4, #0
 8000e5a:	d004      	beq.n	8000e66 <__aeabi_i2f+0xa6>
 8000e5c:	2080      	movs	r0, #128	; 0x80
 8000e5e:	03c0      	lsls	r0, r0, #15
 8000e60:	4304      	orrs	r4, r0
 8000e62:	0264      	lsls	r4, r4, #9
 8000e64:	0a64      	lsrs	r4, r4, #9
 8000e66:	1c32      	adds	r2, r6, #0
 8000e68:	23ff      	movs	r3, #255	; 0xff
 8000e6a:	e7bd      	b.n	8000de8 <__aeabi_i2f+0x28>
 8000e6c:	1c32      	adds	r2, r6, #0
 8000e6e:	23ff      	movs	r3, #255	; 0xff
 8000e70:	2400      	movs	r4, #0
 8000e72:	e7b9      	b.n	8000de8 <__aeabi_i2f+0x28>
 8000e74:	fbffffff 	.word	0xfbffffff

08000e78 <__aeabi_ui2f>:
 8000e78:	b510      	push	{r4, lr}
 8000e7a:	1e04      	subs	r4, r0, #0
 8000e7c:	d033      	beq.n	8000ee6 <__aeabi_ui2f+0x6e>
 8000e7e:	f001 ff0f 	bl	8002ca0 <__clzsi2>
 8000e82:	239e      	movs	r3, #158	; 0x9e
 8000e84:	1a1b      	subs	r3, r3, r0
 8000e86:	2b96      	cmp	r3, #150	; 0x96
 8000e88:	dc09      	bgt.n	8000e9e <__aeabi_ui2f+0x26>
 8000e8a:	3808      	subs	r0, #8
 8000e8c:	4084      	lsls	r4, r0
 8000e8e:	0264      	lsls	r4, r4, #9
 8000e90:	0a64      	lsrs	r4, r4, #9
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	0264      	lsls	r4, r4, #9
 8000e96:	05db      	lsls	r3, r3, #23
 8000e98:	0a60      	lsrs	r0, r4, #9
 8000e9a:	4318      	orrs	r0, r3
 8000e9c:	bd10      	pop	{r4, pc}
 8000e9e:	2b99      	cmp	r3, #153	; 0x99
 8000ea0:	dd0a      	ble.n	8000eb8 <__aeabi_ui2f+0x40>
 8000ea2:	2205      	movs	r2, #5
 8000ea4:	1a12      	subs	r2, r2, r0
 8000ea6:	1c21      	adds	r1, r4, #0
 8000ea8:	40d1      	lsrs	r1, r2
 8000eaa:	1c0a      	adds	r2, r1, #0
 8000eac:	1c01      	adds	r1, r0, #0
 8000eae:	311b      	adds	r1, #27
 8000eb0:	408c      	lsls	r4, r1
 8000eb2:	1e61      	subs	r1, r4, #1
 8000eb4:	418c      	sbcs	r4, r1
 8000eb6:	4314      	orrs	r4, r2
 8000eb8:	2805      	cmp	r0, #5
 8000eba:	dd01      	ble.n	8000ec0 <__aeabi_ui2f+0x48>
 8000ebc:	1f42      	subs	r2, r0, #5
 8000ebe:	4094      	lsls	r4, r2
 8000ec0:	4a14      	ldr	r2, [pc, #80]	; (8000f14 <__aeabi_ui2f+0x9c>)
 8000ec2:	4022      	ands	r2, r4
 8000ec4:	0761      	lsls	r1, r4, #29
 8000ec6:	d004      	beq.n	8000ed2 <__aeabi_ui2f+0x5a>
 8000ec8:	210f      	movs	r1, #15
 8000eca:	400c      	ands	r4, r1
 8000ecc:	2c04      	cmp	r4, #4
 8000ece:	d000      	beq.n	8000ed2 <__aeabi_ui2f+0x5a>
 8000ed0:	3204      	adds	r2, #4
 8000ed2:	0151      	lsls	r1, r2, #5
 8000ed4:	d50a      	bpl.n	8000eec <__aeabi_ui2f+0x74>
 8000ed6:	239f      	movs	r3, #159	; 0x9f
 8000ed8:	1a18      	subs	r0, r3, r0
 8000eda:	28ff      	cmp	r0, #255	; 0xff
 8000edc:	d016      	beq.n	8000f0c <__aeabi_ui2f+0x94>
 8000ede:	0194      	lsls	r4, r2, #6
 8000ee0:	0a64      	lsrs	r4, r4, #9
 8000ee2:	b2c3      	uxtb	r3, r0
 8000ee4:	e7d6      	b.n	8000e94 <__aeabi_ui2f+0x1c>
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	2400      	movs	r4, #0
 8000eea:	e7d3      	b.n	8000e94 <__aeabi_ui2f+0x1c>
 8000eec:	08d2      	lsrs	r2, r2, #3
 8000eee:	2bff      	cmp	r3, #255	; 0xff
 8000ef0:	d003      	beq.n	8000efa <__aeabi_ui2f+0x82>
 8000ef2:	0254      	lsls	r4, r2, #9
 8000ef4:	0a64      	lsrs	r4, r4, #9
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	e7cc      	b.n	8000e94 <__aeabi_ui2f+0x1c>
 8000efa:	2a00      	cmp	r2, #0
 8000efc:	d006      	beq.n	8000f0c <__aeabi_ui2f+0x94>
 8000efe:	2480      	movs	r4, #128	; 0x80
 8000f00:	03e4      	lsls	r4, r4, #15
 8000f02:	4314      	orrs	r4, r2
 8000f04:	0264      	lsls	r4, r4, #9
 8000f06:	0a64      	lsrs	r4, r4, #9
 8000f08:	23ff      	movs	r3, #255	; 0xff
 8000f0a:	e7c3      	b.n	8000e94 <__aeabi_ui2f+0x1c>
 8000f0c:	23ff      	movs	r3, #255	; 0xff
 8000f0e:	2400      	movs	r4, #0
 8000f10:	e7c0      	b.n	8000e94 <__aeabi_ui2f+0x1c>
 8000f12:	46c0      	nop			; (mov r8, r8)
 8000f14:	fbffffff 	.word	0xfbffffff

08000f18 <__aeabi_dadd>:
 8000f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f1a:	465f      	mov	r7, fp
 8000f1c:	4656      	mov	r6, sl
 8000f1e:	4644      	mov	r4, r8
 8000f20:	464d      	mov	r5, r9
 8000f22:	b4f0      	push	{r4, r5, r6, r7}
 8000f24:	030c      	lsls	r4, r1, #12
 8000f26:	004d      	lsls	r5, r1, #1
 8000f28:	0fce      	lsrs	r6, r1, #31
 8000f2a:	0a61      	lsrs	r1, r4, #9
 8000f2c:	0f44      	lsrs	r4, r0, #29
 8000f2e:	4321      	orrs	r1, r4
 8000f30:	00c4      	lsls	r4, r0, #3
 8000f32:	0318      	lsls	r0, r3, #12
 8000f34:	4680      	mov	r8, r0
 8000f36:	0058      	lsls	r0, r3, #1
 8000f38:	0d40      	lsrs	r0, r0, #21
 8000f3a:	4682      	mov	sl, r0
 8000f3c:	0fd8      	lsrs	r0, r3, #31
 8000f3e:	4684      	mov	ip, r0
 8000f40:	4640      	mov	r0, r8
 8000f42:	0a40      	lsrs	r0, r0, #9
 8000f44:	0f53      	lsrs	r3, r2, #29
 8000f46:	4303      	orrs	r3, r0
 8000f48:	00d0      	lsls	r0, r2, #3
 8000f4a:	0d6d      	lsrs	r5, r5, #21
 8000f4c:	1c37      	adds	r7, r6, #0
 8000f4e:	4683      	mov	fp, r0
 8000f50:	4652      	mov	r2, sl
 8000f52:	4566      	cmp	r6, ip
 8000f54:	d100      	bne.n	8000f58 <__aeabi_dadd+0x40>
 8000f56:	e09d      	b.n	8001094 <__aeabi_dadd+0x17c>
 8000f58:	1aaf      	subs	r7, r5, r2
 8000f5a:	2f00      	cmp	r7, #0
 8000f5c:	dc00      	bgt.n	8000f60 <__aeabi_dadd+0x48>
 8000f5e:	e103      	b.n	8001168 <__aeabi_dadd+0x250>
 8000f60:	2a00      	cmp	r2, #0
 8000f62:	d138      	bne.n	8000fd6 <__aeabi_dadd+0xbe>
 8000f64:	4318      	orrs	r0, r3
 8000f66:	d000      	beq.n	8000f6a <__aeabi_dadd+0x52>
 8000f68:	e0e4      	b.n	8001134 <__aeabi_dadd+0x21c>
 8000f6a:	0763      	lsls	r3, r4, #29
 8000f6c:	d009      	beq.n	8000f82 <__aeabi_dadd+0x6a>
 8000f6e:	230f      	movs	r3, #15
 8000f70:	4023      	ands	r3, r4
 8000f72:	2b04      	cmp	r3, #4
 8000f74:	d005      	beq.n	8000f82 <__aeabi_dadd+0x6a>
 8000f76:	1d23      	adds	r3, r4, #4
 8000f78:	42a3      	cmp	r3, r4
 8000f7a:	41a4      	sbcs	r4, r4
 8000f7c:	4264      	negs	r4, r4
 8000f7e:	1909      	adds	r1, r1, r4
 8000f80:	1c1c      	adds	r4, r3, #0
 8000f82:	0208      	lsls	r0, r1, #8
 8000f84:	d400      	bmi.n	8000f88 <__aeabi_dadd+0x70>
 8000f86:	e078      	b.n	800107a <__aeabi_dadd+0x162>
 8000f88:	4bce      	ldr	r3, [pc, #824]	; (80012c4 <__aeabi_dadd+0x3ac>)
 8000f8a:	1c6a      	adds	r2, r5, #1
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	d100      	bne.n	8000f92 <__aeabi_dadd+0x7a>
 8000f90:	e105      	b.n	800119e <__aeabi_dadd+0x286>
 8000f92:	4bcd      	ldr	r3, [pc, #820]	; (80012c8 <__aeabi_dadd+0x3b0>)
 8000f94:	08e4      	lsrs	r4, r4, #3
 8000f96:	4019      	ands	r1, r3
 8000f98:	0748      	lsls	r0, r1, #29
 8000f9a:	0552      	lsls	r2, r2, #21
 8000f9c:	0249      	lsls	r1, r1, #9
 8000f9e:	4304      	orrs	r4, r0
 8000fa0:	0b0b      	lsrs	r3, r1, #12
 8000fa2:	0d52      	lsrs	r2, r2, #21
 8000fa4:	1c37      	adds	r7, r6, #0
 8000fa6:	2000      	movs	r0, #0
 8000fa8:	2100      	movs	r1, #0
 8000faa:	031b      	lsls	r3, r3, #12
 8000fac:	1c20      	adds	r0, r4, #0
 8000fae:	0b1c      	lsrs	r4, r3, #12
 8000fb0:	0d0b      	lsrs	r3, r1, #20
 8000fb2:	051b      	lsls	r3, r3, #20
 8000fb4:	4dc5      	ldr	r5, [pc, #788]	; (80012cc <__aeabi_dadd+0x3b4>)
 8000fb6:	4323      	orrs	r3, r4
 8000fb8:	0552      	lsls	r2, r2, #21
 8000fba:	0852      	lsrs	r2, r2, #1
 8000fbc:	401d      	ands	r5, r3
 8000fbe:	4315      	orrs	r5, r2
 8000fc0:	006d      	lsls	r5, r5, #1
 8000fc2:	086d      	lsrs	r5, r5, #1
 8000fc4:	07ff      	lsls	r7, r7, #31
 8000fc6:	1c29      	adds	r1, r5, #0
 8000fc8:	4339      	orrs	r1, r7
 8000fca:	bc3c      	pop	{r2, r3, r4, r5}
 8000fcc:	4690      	mov	r8, r2
 8000fce:	4699      	mov	r9, r3
 8000fd0:	46a2      	mov	sl, r4
 8000fd2:	46ab      	mov	fp, r5
 8000fd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000fd6:	48bb      	ldr	r0, [pc, #748]	; (80012c4 <__aeabi_dadd+0x3ac>)
 8000fd8:	4285      	cmp	r5, r0
 8000fda:	d0c6      	beq.n	8000f6a <__aeabi_dadd+0x52>
 8000fdc:	2080      	movs	r0, #128	; 0x80
 8000fde:	0400      	lsls	r0, r0, #16
 8000fe0:	4303      	orrs	r3, r0
 8000fe2:	2f38      	cmp	r7, #56	; 0x38
 8000fe4:	dd00      	ble.n	8000fe8 <__aeabi_dadd+0xd0>
 8000fe6:	e0ec      	b.n	80011c2 <__aeabi_dadd+0x2aa>
 8000fe8:	2f1f      	cmp	r7, #31
 8000fea:	dd00      	ble.n	8000fee <__aeabi_dadd+0xd6>
 8000fec:	e120      	b.n	8001230 <__aeabi_dadd+0x318>
 8000fee:	2020      	movs	r0, #32
 8000ff0:	1bc0      	subs	r0, r0, r7
 8000ff2:	1c1a      	adds	r2, r3, #0
 8000ff4:	4681      	mov	r9, r0
 8000ff6:	4082      	lsls	r2, r0
 8000ff8:	4658      	mov	r0, fp
 8000ffa:	40f8      	lsrs	r0, r7
 8000ffc:	4302      	orrs	r2, r0
 8000ffe:	4694      	mov	ip, r2
 8001000:	4658      	mov	r0, fp
 8001002:	464a      	mov	r2, r9
 8001004:	4090      	lsls	r0, r2
 8001006:	1e42      	subs	r2, r0, #1
 8001008:	4190      	sbcs	r0, r2
 800100a:	40fb      	lsrs	r3, r7
 800100c:	4662      	mov	r2, ip
 800100e:	4302      	orrs	r2, r0
 8001010:	1c1f      	adds	r7, r3, #0
 8001012:	1aa2      	subs	r2, r4, r2
 8001014:	4294      	cmp	r4, r2
 8001016:	41a4      	sbcs	r4, r4
 8001018:	4264      	negs	r4, r4
 800101a:	1bc9      	subs	r1, r1, r7
 800101c:	1b09      	subs	r1, r1, r4
 800101e:	1c14      	adds	r4, r2, #0
 8001020:	020b      	lsls	r3, r1, #8
 8001022:	d5a2      	bpl.n	8000f6a <__aeabi_dadd+0x52>
 8001024:	0249      	lsls	r1, r1, #9
 8001026:	0a4f      	lsrs	r7, r1, #9
 8001028:	2f00      	cmp	r7, #0
 800102a:	d100      	bne.n	800102e <__aeabi_dadd+0x116>
 800102c:	e0c4      	b.n	80011b8 <__aeabi_dadd+0x2a0>
 800102e:	1c38      	adds	r0, r7, #0
 8001030:	f001 fe36 	bl	8002ca0 <__clzsi2>
 8001034:	1c02      	adds	r2, r0, #0
 8001036:	3a08      	subs	r2, #8
 8001038:	2a1f      	cmp	r2, #31
 800103a:	dd00      	ble.n	800103e <__aeabi_dadd+0x126>
 800103c:	e0b7      	b.n	80011ae <__aeabi_dadd+0x296>
 800103e:	2128      	movs	r1, #40	; 0x28
 8001040:	1a09      	subs	r1, r1, r0
 8001042:	1c20      	adds	r0, r4, #0
 8001044:	4097      	lsls	r7, r2
 8001046:	40c8      	lsrs	r0, r1
 8001048:	4307      	orrs	r7, r0
 800104a:	4094      	lsls	r4, r2
 800104c:	4295      	cmp	r5, r2
 800104e:	dd00      	ble.n	8001052 <__aeabi_dadd+0x13a>
 8001050:	e0a9      	b.n	80011a6 <__aeabi_dadd+0x28e>
 8001052:	1b55      	subs	r5, r2, r5
 8001054:	1c69      	adds	r1, r5, #1
 8001056:	291f      	cmp	r1, #31
 8001058:	dd00      	ble.n	800105c <__aeabi_dadd+0x144>
 800105a:	e0d8      	b.n	800120e <__aeabi_dadd+0x2f6>
 800105c:	221f      	movs	r2, #31
 800105e:	1b55      	subs	r5, r2, r5
 8001060:	1c3b      	adds	r3, r7, #0
 8001062:	1c22      	adds	r2, r4, #0
 8001064:	40ab      	lsls	r3, r5
 8001066:	40ca      	lsrs	r2, r1
 8001068:	40ac      	lsls	r4, r5
 800106a:	1e65      	subs	r5, r4, #1
 800106c:	41ac      	sbcs	r4, r5
 800106e:	4313      	orrs	r3, r2
 8001070:	40cf      	lsrs	r7, r1
 8001072:	431c      	orrs	r4, r3
 8001074:	1c39      	adds	r1, r7, #0
 8001076:	2500      	movs	r5, #0
 8001078:	e777      	b.n	8000f6a <__aeabi_dadd+0x52>
 800107a:	0748      	lsls	r0, r1, #29
 800107c:	08e4      	lsrs	r4, r4, #3
 800107e:	056a      	lsls	r2, r5, #21
 8001080:	08c9      	lsrs	r1, r1, #3
 8001082:	0d52      	lsrs	r2, r2, #21
 8001084:	1c37      	adds	r7, r6, #0
 8001086:	4304      	orrs	r4, r0
 8001088:	4b8e      	ldr	r3, [pc, #568]	; (80012c4 <__aeabi_dadd+0x3ac>)
 800108a:	429d      	cmp	r5, r3
 800108c:	d048      	beq.n	8001120 <__aeabi_dadd+0x208>
 800108e:	0309      	lsls	r1, r1, #12
 8001090:	0b0b      	lsrs	r3, r1, #12
 8001092:	e788      	b.n	8000fa6 <__aeabi_dadd+0x8e>
 8001094:	1aaa      	subs	r2, r5, r2
 8001096:	4694      	mov	ip, r2
 8001098:	2a00      	cmp	r2, #0
 800109a:	dc00      	bgt.n	800109e <__aeabi_dadd+0x186>
 800109c:	e098      	b.n	80011d0 <__aeabi_dadd+0x2b8>
 800109e:	4650      	mov	r0, sl
 80010a0:	2800      	cmp	r0, #0
 80010a2:	d053      	beq.n	800114c <__aeabi_dadd+0x234>
 80010a4:	4887      	ldr	r0, [pc, #540]	; (80012c4 <__aeabi_dadd+0x3ac>)
 80010a6:	4285      	cmp	r5, r0
 80010a8:	d100      	bne.n	80010ac <__aeabi_dadd+0x194>
 80010aa:	e75e      	b.n	8000f6a <__aeabi_dadd+0x52>
 80010ac:	2080      	movs	r0, #128	; 0x80
 80010ae:	0400      	lsls	r0, r0, #16
 80010b0:	4303      	orrs	r3, r0
 80010b2:	4662      	mov	r2, ip
 80010b4:	2a38      	cmp	r2, #56	; 0x38
 80010b6:	dd00      	ble.n	80010ba <__aeabi_dadd+0x1a2>
 80010b8:	e0fd      	b.n	80012b6 <__aeabi_dadd+0x39e>
 80010ba:	2a1f      	cmp	r2, #31
 80010bc:	dd00      	ble.n	80010c0 <__aeabi_dadd+0x1a8>
 80010be:	e14b      	b.n	8001358 <__aeabi_dadd+0x440>
 80010c0:	2220      	movs	r2, #32
 80010c2:	4660      	mov	r0, ip
 80010c4:	1a10      	subs	r0, r2, r0
 80010c6:	1c1a      	adds	r2, r3, #0
 80010c8:	4082      	lsls	r2, r0
 80010ca:	4682      	mov	sl, r0
 80010cc:	4691      	mov	r9, r2
 80010ce:	4658      	mov	r0, fp
 80010d0:	4662      	mov	r2, ip
 80010d2:	40d0      	lsrs	r0, r2
 80010d4:	464a      	mov	r2, r9
 80010d6:	4302      	orrs	r2, r0
 80010d8:	4690      	mov	r8, r2
 80010da:	4658      	mov	r0, fp
 80010dc:	4652      	mov	r2, sl
 80010de:	4090      	lsls	r0, r2
 80010e0:	1e42      	subs	r2, r0, #1
 80010e2:	4190      	sbcs	r0, r2
 80010e4:	4642      	mov	r2, r8
 80010e6:	4302      	orrs	r2, r0
 80010e8:	4660      	mov	r0, ip
 80010ea:	40c3      	lsrs	r3, r0
 80010ec:	1912      	adds	r2, r2, r4
 80010ee:	42a2      	cmp	r2, r4
 80010f0:	41a4      	sbcs	r4, r4
 80010f2:	4264      	negs	r4, r4
 80010f4:	1859      	adds	r1, r3, r1
 80010f6:	1909      	adds	r1, r1, r4
 80010f8:	1c14      	adds	r4, r2, #0
 80010fa:	0208      	lsls	r0, r1, #8
 80010fc:	d400      	bmi.n	8001100 <__aeabi_dadd+0x1e8>
 80010fe:	e734      	b.n	8000f6a <__aeabi_dadd+0x52>
 8001100:	4b70      	ldr	r3, [pc, #448]	; (80012c4 <__aeabi_dadd+0x3ac>)
 8001102:	3501      	adds	r5, #1
 8001104:	429d      	cmp	r5, r3
 8001106:	d100      	bne.n	800110a <__aeabi_dadd+0x1f2>
 8001108:	e124      	b.n	8001354 <__aeabi_dadd+0x43c>
 800110a:	4b6f      	ldr	r3, [pc, #444]	; (80012c8 <__aeabi_dadd+0x3b0>)
 800110c:	0860      	lsrs	r0, r4, #1
 800110e:	4019      	ands	r1, r3
 8001110:	2301      	movs	r3, #1
 8001112:	4023      	ands	r3, r4
 8001114:	1c1c      	adds	r4, r3, #0
 8001116:	4304      	orrs	r4, r0
 8001118:	07cb      	lsls	r3, r1, #31
 800111a:	431c      	orrs	r4, r3
 800111c:	0849      	lsrs	r1, r1, #1
 800111e:	e724      	b.n	8000f6a <__aeabi_dadd+0x52>
 8001120:	1c0b      	adds	r3, r1, #0
 8001122:	4323      	orrs	r3, r4
 8001124:	d100      	bne.n	8001128 <__aeabi_dadd+0x210>
 8001126:	e1c7      	b.n	80014b8 <__aeabi_dadd+0x5a0>
 8001128:	2380      	movs	r3, #128	; 0x80
 800112a:	031b      	lsls	r3, r3, #12
 800112c:	430b      	orrs	r3, r1
 800112e:	031b      	lsls	r3, r3, #12
 8001130:	0b1b      	lsrs	r3, r3, #12
 8001132:	e738      	b.n	8000fa6 <__aeabi_dadd+0x8e>
 8001134:	3f01      	subs	r7, #1
 8001136:	2f00      	cmp	r7, #0
 8001138:	d164      	bne.n	8001204 <__aeabi_dadd+0x2ec>
 800113a:	4658      	mov	r0, fp
 800113c:	1a22      	subs	r2, r4, r0
 800113e:	4294      	cmp	r4, r2
 8001140:	41a4      	sbcs	r4, r4
 8001142:	4264      	negs	r4, r4
 8001144:	1ac9      	subs	r1, r1, r3
 8001146:	1b09      	subs	r1, r1, r4
 8001148:	1c14      	adds	r4, r2, #0
 800114a:	e769      	b.n	8001020 <__aeabi_dadd+0x108>
 800114c:	4658      	mov	r0, fp
 800114e:	4318      	orrs	r0, r3
 8001150:	d100      	bne.n	8001154 <__aeabi_dadd+0x23c>
 8001152:	e70a      	b.n	8000f6a <__aeabi_dadd+0x52>
 8001154:	2201      	movs	r2, #1
 8001156:	4252      	negs	r2, r2
 8001158:	4494      	add	ip, r2
 800115a:	4660      	mov	r0, ip
 800115c:	2800      	cmp	r0, #0
 800115e:	d000      	beq.n	8001162 <__aeabi_dadd+0x24a>
 8001160:	e0c5      	b.n	80012ee <__aeabi_dadd+0x3d6>
 8001162:	4658      	mov	r0, fp
 8001164:	1902      	adds	r2, r0, r4
 8001166:	e7c2      	b.n	80010ee <__aeabi_dadd+0x1d6>
 8001168:	2f00      	cmp	r7, #0
 800116a:	d172      	bne.n	8001252 <__aeabi_dadd+0x33a>
 800116c:	1c68      	adds	r0, r5, #1
 800116e:	0540      	lsls	r0, r0, #21
 8001170:	0d40      	lsrs	r0, r0, #21
 8001172:	2801      	cmp	r0, #1
 8001174:	dc00      	bgt.n	8001178 <__aeabi_dadd+0x260>
 8001176:	e0de      	b.n	8001336 <__aeabi_dadd+0x41e>
 8001178:	465a      	mov	r2, fp
 800117a:	1aa2      	subs	r2, r4, r2
 800117c:	4294      	cmp	r4, r2
 800117e:	41bf      	sbcs	r7, r7
 8001180:	1ac8      	subs	r0, r1, r3
 8001182:	427f      	negs	r7, r7
 8001184:	1bc7      	subs	r7, r0, r7
 8001186:	0238      	lsls	r0, r7, #8
 8001188:	d400      	bmi.n	800118c <__aeabi_dadd+0x274>
 800118a:	e088      	b.n	800129e <__aeabi_dadd+0x386>
 800118c:	465a      	mov	r2, fp
 800118e:	1b14      	subs	r4, r2, r4
 8001190:	45a3      	cmp	fp, r4
 8001192:	4192      	sbcs	r2, r2
 8001194:	1a59      	subs	r1, r3, r1
 8001196:	4252      	negs	r2, r2
 8001198:	1a8f      	subs	r7, r1, r2
 800119a:	4666      	mov	r6, ip
 800119c:	e744      	b.n	8001028 <__aeabi_dadd+0x110>
 800119e:	1c37      	adds	r7, r6, #0
 80011a0:	2300      	movs	r3, #0
 80011a2:	2400      	movs	r4, #0
 80011a4:	e6ff      	b.n	8000fa6 <__aeabi_dadd+0x8e>
 80011a6:	4948      	ldr	r1, [pc, #288]	; (80012c8 <__aeabi_dadd+0x3b0>)
 80011a8:	1aad      	subs	r5, r5, r2
 80011aa:	4039      	ands	r1, r7
 80011ac:	e6dd      	b.n	8000f6a <__aeabi_dadd+0x52>
 80011ae:	1c27      	adds	r7, r4, #0
 80011b0:	3828      	subs	r0, #40	; 0x28
 80011b2:	4087      	lsls	r7, r0
 80011b4:	2400      	movs	r4, #0
 80011b6:	e749      	b.n	800104c <__aeabi_dadd+0x134>
 80011b8:	1c20      	adds	r0, r4, #0
 80011ba:	f001 fd71 	bl	8002ca0 <__clzsi2>
 80011be:	3020      	adds	r0, #32
 80011c0:	e738      	b.n	8001034 <__aeabi_dadd+0x11c>
 80011c2:	465a      	mov	r2, fp
 80011c4:	431a      	orrs	r2, r3
 80011c6:	1e53      	subs	r3, r2, #1
 80011c8:	419a      	sbcs	r2, r3
 80011ca:	b2d2      	uxtb	r2, r2
 80011cc:	2700      	movs	r7, #0
 80011ce:	e720      	b.n	8001012 <__aeabi_dadd+0xfa>
 80011d0:	2a00      	cmp	r2, #0
 80011d2:	d000      	beq.n	80011d6 <__aeabi_dadd+0x2be>
 80011d4:	e0dd      	b.n	8001392 <__aeabi_dadd+0x47a>
 80011d6:	1c68      	adds	r0, r5, #1
 80011d8:	0542      	lsls	r2, r0, #21
 80011da:	0d52      	lsrs	r2, r2, #21
 80011dc:	2a01      	cmp	r2, #1
 80011de:	dc00      	bgt.n	80011e2 <__aeabi_dadd+0x2ca>
 80011e0:	e08e      	b.n	8001300 <__aeabi_dadd+0x3e8>
 80011e2:	4d38      	ldr	r5, [pc, #224]	; (80012c4 <__aeabi_dadd+0x3ac>)
 80011e4:	42a8      	cmp	r0, r5
 80011e6:	d100      	bne.n	80011ea <__aeabi_dadd+0x2d2>
 80011e8:	e0b3      	b.n	8001352 <__aeabi_dadd+0x43a>
 80011ea:	465d      	mov	r5, fp
 80011ec:	192a      	adds	r2, r5, r4
 80011ee:	42a2      	cmp	r2, r4
 80011f0:	41a4      	sbcs	r4, r4
 80011f2:	4264      	negs	r4, r4
 80011f4:	1859      	adds	r1, r3, r1
 80011f6:	1909      	adds	r1, r1, r4
 80011f8:	07cc      	lsls	r4, r1, #31
 80011fa:	0852      	lsrs	r2, r2, #1
 80011fc:	4314      	orrs	r4, r2
 80011fe:	0849      	lsrs	r1, r1, #1
 8001200:	1c05      	adds	r5, r0, #0
 8001202:	e6b2      	b.n	8000f6a <__aeabi_dadd+0x52>
 8001204:	482f      	ldr	r0, [pc, #188]	; (80012c4 <__aeabi_dadd+0x3ac>)
 8001206:	4285      	cmp	r5, r0
 8001208:	d000      	beq.n	800120c <__aeabi_dadd+0x2f4>
 800120a:	e6ea      	b.n	8000fe2 <__aeabi_dadd+0xca>
 800120c:	e6ad      	b.n	8000f6a <__aeabi_dadd+0x52>
 800120e:	1c2b      	adds	r3, r5, #0
 8001210:	3b1f      	subs	r3, #31
 8001212:	1c3a      	adds	r2, r7, #0
 8001214:	40da      	lsrs	r2, r3
 8001216:	1c13      	adds	r3, r2, #0
 8001218:	2920      	cmp	r1, #32
 800121a:	d06d      	beq.n	80012f8 <__aeabi_dadd+0x3e0>
 800121c:	223f      	movs	r2, #63	; 0x3f
 800121e:	1b55      	subs	r5, r2, r5
 8001220:	40af      	lsls	r7, r5
 8001222:	433c      	orrs	r4, r7
 8001224:	1e60      	subs	r0, r4, #1
 8001226:	4184      	sbcs	r4, r0
 8001228:	431c      	orrs	r4, r3
 800122a:	2100      	movs	r1, #0
 800122c:	2500      	movs	r5, #0
 800122e:	e69c      	b.n	8000f6a <__aeabi_dadd+0x52>
 8001230:	1c38      	adds	r0, r7, #0
 8001232:	3820      	subs	r0, #32
 8001234:	1c1a      	adds	r2, r3, #0
 8001236:	40c2      	lsrs	r2, r0
 8001238:	1c10      	adds	r0, r2, #0
 800123a:	2f20      	cmp	r7, #32
 800123c:	d05e      	beq.n	80012fc <__aeabi_dadd+0x3e4>
 800123e:	2240      	movs	r2, #64	; 0x40
 8001240:	1bd7      	subs	r7, r2, r7
 8001242:	40bb      	lsls	r3, r7
 8001244:	465a      	mov	r2, fp
 8001246:	431a      	orrs	r2, r3
 8001248:	1e53      	subs	r3, r2, #1
 800124a:	419a      	sbcs	r2, r3
 800124c:	4302      	orrs	r2, r0
 800124e:	2700      	movs	r7, #0
 8001250:	e6df      	b.n	8001012 <__aeabi_dadd+0xfa>
 8001252:	2d00      	cmp	r5, #0
 8001254:	d03c      	beq.n	80012d0 <__aeabi_dadd+0x3b8>
 8001256:	4d1b      	ldr	r5, [pc, #108]	; (80012c4 <__aeabi_dadd+0x3ac>)
 8001258:	45aa      	cmp	sl, r5
 800125a:	d100      	bne.n	800125e <__aeabi_dadd+0x346>
 800125c:	e094      	b.n	8001388 <__aeabi_dadd+0x470>
 800125e:	2580      	movs	r5, #128	; 0x80
 8001260:	042d      	lsls	r5, r5, #16
 8001262:	427f      	negs	r7, r7
 8001264:	4329      	orrs	r1, r5
 8001266:	2f38      	cmp	r7, #56	; 0x38
 8001268:	dd00      	ble.n	800126c <__aeabi_dadd+0x354>
 800126a:	e0ad      	b.n	80013c8 <__aeabi_dadd+0x4b0>
 800126c:	2f1f      	cmp	r7, #31
 800126e:	dd00      	ble.n	8001272 <__aeabi_dadd+0x35a>
 8001270:	e12c      	b.n	80014cc <__aeabi_dadd+0x5b4>
 8001272:	2520      	movs	r5, #32
 8001274:	1bed      	subs	r5, r5, r7
 8001276:	1c08      	adds	r0, r1, #0
 8001278:	1c26      	adds	r6, r4, #0
 800127a:	40a8      	lsls	r0, r5
 800127c:	40fe      	lsrs	r6, r7
 800127e:	40ac      	lsls	r4, r5
 8001280:	4306      	orrs	r6, r0
 8001282:	1e65      	subs	r5, r4, #1
 8001284:	41ac      	sbcs	r4, r5
 8001286:	4334      	orrs	r4, r6
 8001288:	40f9      	lsrs	r1, r7
 800128a:	465d      	mov	r5, fp
 800128c:	1b2c      	subs	r4, r5, r4
 800128e:	45a3      	cmp	fp, r4
 8001290:	4192      	sbcs	r2, r2
 8001292:	1a5b      	subs	r3, r3, r1
 8001294:	4252      	negs	r2, r2
 8001296:	1a99      	subs	r1, r3, r2
 8001298:	4655      	mov	r5, sl
 800129a:	4666      	mov	r6, ip
 800129c:	e6c0      	b.n	8001020 <__aeabi_dadd+0x108>
 800129e:	1c13      	adds	r3, r2, #0
 80012a0:	433b      	orrs	r3, r7
 80012a2:	1c14      	adds	r4, r2, #0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d000      	beq.n	80012aa <__aeabi_dadd+0x392>
 80012a8:	e6be      	b.n	8001028 <__aeabi_dadd+0x110>
 80012aa:	2700      	movs	r7, #0
 80012ac:	2200      	movs	r2, #0
 80012ae:	2500      	movs	r5, #0
 80012b0:	2100      	movs	r1, #0
 80012b2:	2400      	movs	r4, #0
 80012b4:	e6e8      	b.n	8001088 <__aeabi_dadd+0x170>
 80012b6:	465a      	mov	r2, fp
 80012b8:	431a      	orrs	r2, r3
 80012ba:	1e53      	subs	r3, r2, #1
 80012bc:	419a      	sbcs	r2, r3
 80012be:	b2d2      	uxtb	r2, r2
 80012c0:	2300      	movs	r3, #0
 80012c2:	e713      	b.n	80010ec <__aeabi_dadd+0x1d4>
 80012c4:	000007ff 	.word	0x000007ff
 80012c8:	ff7fffff 	.word	0xff7fffff
 80012cc:	800fffff 	.word	0x800fffff
 80012d0:	1c0d      	adds	r5, r1, #0
 80012d2:	4325      	orrs	r5, r4
 80012d4:	d058      	beq.n	8001388 <__aeabi_dadd+0x470>
 80012d6:	43ff      	mvns	r7, r7
 80012d8:	2f00      	cmp	r7, #0
 80012da:	d151      	bne.n	8001380 <__aeabi_dadd+0x468>
 80012dc:	1b04      	subs	r4, r0, r4
 80012de:	45a3      	cmp	fp, r4
 80012e0:	4192      	sbcs	r2, r2
 80012e2:	1a59      	subs	r1, r3, r1
 80012e4:	4252      	negs	r2, r2
 80012e6:	1a89      	subs	r1, r1, r2
 80012e8:	4655      	mov	r5, sl
 80012ea:	4666      	mov	r6, ip
 80012ec:	e698      	b.n	8001020 <__aeabi_dadd+0x108>
 80012ee:	4896      	ldr	r0, [pc, #600]	; (8001548 <__aeabi_dadd+0x630>)
 80012f0:	4285      	cmp	r5, r0
 80012f2:	d000      	beq.n	80012f6 <__aeabi_dadd+0x3de>
 80012f4:	e6dd      	b.n	80010b2 <__aeabi_dadd+0x19a>
 80012f6:	e638      	b.n	8000f6a <__aeabi_dadd+0x52>
 80012f8:	2700      	movs	r7, #0
 80012fa:	e792      	b.n	8001222 <__aeabi_dadd+0x30a>
 80012fc:	2300      	movs	r3, #0
 80012fe:	e7a1      	b.n	8001244 <__aeabi_dadd+0x32c>
 8001300:	1c08      	adds	r0, r1, #0
 8001302:	4320      	orrs	r0, r4
 8001304:	2d00      	cmp	r5, #0
 8001306:	d000      	beq.n	800130a <__aeabi_dadd+0x3f2>
 8001308:	e0c0      	b.n	800148c <__aeabi_dadd+0x574>
 800130a:	2800      	cmp	r0, #0
 800130c:	d100      	bne.n	8001310 <__aeabi_dadd+0x3f8>
 800130e:	e0fb      	b.n	8001508 <__aeabi_dadd+0x5f0>
 8001310:	4658      	mov	r0, fp
 8001312:	4318      	orrs	r0, r3
 8001314:	d100      	bne.n	8001318 <__aeabi_dadd+0x400>
 8001316:	e628      	b.n	8000f6a <__aeabi_dadd+0x52>
 8001318:	4658      	mov	r0, fp
 800131a:	1902      	adds	r2, r0, r4
 800131c:	42a2      	cmp	r2, r4
 800131e:	41a4      	sbcs	r4, r4
 8001320:	4264      	negs	r4, r4
 8001322:	1859      	adds	r1, r3, r1
 8001324:	1909      	adds	r1, r1, r4
 8001326:	1c14      	adds	r4, r2, #0
 8001328:	020a      	lsls	r2, r1, #8
 800132a:	d400      	bmi.n	800132e <__aeabi_dadd+0x416>
 800132c:	e61d      	b.n	8000f6a <__aeabi_dadd+0x52>
 800132e:	4b87      	ldr	r3, [pc, #540]	; (800154c <__aeabi_dadd+0x634>)
 8001330:	2501      	movs	r5, #1
 8001332:	4019      	ands	r1, r3
 8001334:	e619      	b.n	8000f6a <__aeabi_dadd+0x52>
 8001336:	1c08      	adds	r0, r1, #0
 8001338:	4320      	orrs	r0, r4
 800133a:	2d00      	cmp	r5, #0
 800133c:	d139      	bne.n	80013b2 <__aeabi_dadd+0x49a>
 800133e:	2800      	cmp	r0, #0
 8001340:	d16d      	bne.n	800141e <__aeabi_dadd+0x506>
 8001342:	4659      	mov	r1, fp
 8001344:	4319      	orrs	r1, r3
 8001346:	d100      	bne.n	800134a <__aeabi_dadd+0x432>
 8001348:	e0bd      	b.n	80014c6 <__aeabi_dadd+0x5ae>
 800134a:	1c19      	adds	r1, r3, #0
 800134c:	465c      	mov	r4, fp
 800134e:	4666      	mov	r6, ip
 8001350:	e60b      	b.n	8000f6a <__aeabi_dadd+0x52>
 8001352:	1c05      	adds	r5, r0, #0
 8001354:	1c2a      	adds	r2, r5, #0
 8001356:	e7ab      	b.n	80012b0 <__aeabi_dadd+0x398>
 8001358:	4660      	mov	r0, ip
 800135a:	3820      	subs	r0, #32
 800135c:	1c1a      	adds	r2, r3, #0
 800135e:	40c2      	lsrs	r2, r0
 8001360:	4660      	mov	r0, ip
 8001362:	4691      	mov	r9, r2
 8001364:	2820      	cmp	r0, #32
 8001366:	d100      	bne.n	800136a <__aeabi_dadd+0x452>
 8001368:	e0ab      	b.n	80014c2 <__aeabi_dadd+0x5aa>
 800136a:	2240      	movs	r2, #64	; 0x40
 800136c:	1a12      	subs	r2, r2, r0
 800136e:	4093      	lsls	r3, r2
 8001370:	465a      	mov	r2, fp
 8001372:	431a      	orrs	r2, r3
 8001374:	1e53      	subs	r3, r2, #1
 8001376:	419a      	sbcs	r2, r3
 8001378:	464b      	mov	r3, r9
 800137a:	431a      	orrs	r2, r3
 800137c:	2300      	movs	r3, #0
 800137e:	e6b5      	b.n	80010ec <__aeabi_dadd+0x1d4>
 8001380:	4d71      	ldr	r5, [pc, #452]	; (8001548 <__aeabi_dadd+0x630>)
 8001382:	45aa      	cmp	sl, r5
 8001384:	d000      	beq.n	8001388 <__aeabi_dadd+0x470>
 8001386:	e76e      	b.n	8001266 <__aeabi_dadd+0x34e>
 8001388:	1c19      	adds	r1, r3, #0
 800138a:	465c      	mov	r4, fp
 800138c:	4655      	mov	r5, sl
 800138e:	4666      	mov	r6, ip
 8001390:	e5eb      	b.n	8000f6a <__aeabi_dadd+0x52>
 8001392:	2d00      	cmp	r5, #0
 8001394:	d11e      	bne.n	80013d4 <__aeabi_dadd+0x4bc>
 8001396:	1c0d      	adds	r5, r1, #0
 8001398:	4325      	orrs	r5, r4
 800139a:	d073      	beq.n	8001484 <__aeabi_dadd+0x56c>
 800139c:	43d5      	mvns	r5, r2
 800139e:	2d00      	cmp	r5, #0
 80013a0:	d16d      	bne.n	800147e <__aeabi_dadd+0x566>
 80013a2:	445c      	add	r4, fp
 80013a4:	455c      	cmp	r4, fp
 80013a6:	4192      	sbcs	r2, r2
 80013a8:	1859      	adds	r1, r3, r1
 80013aa:	4252      	negs	r2, r2
 80013ac:	1889      	adds	r1, r1, r2
 80013ae:	4655      	mov	r5, sl
 80013b0:	e6a3      	b.n	80010fa <__aeabi_dadd+0x1e2>
 80013b2:	2800      	cmp	r0, #0
 80013b4:	d149      	bne.n	800144a <__aeabi_dadd+0x532>
 80013b6:	4659      	mov	r1, fp
 80013b8:	4319      	orrs	r1, r3
 80013ba:	d100      	bne.n	80013be <__aeabi_dadd+0x4a6>
 80013bc:	e096      	b.n	80014ec <__aeabi_dadd+0x5d4>
 80013be:	1c19      	adds	r1, r3, #0
 80013c0:	465c      	mov	r4, fp
 80013c2:	4666      	mov	r6, ip
 80013c4:	4d60      	ldr	r5, [pc, #384]	; (8001548 <__aeabi_dadd+0x630>)
 80013c6:	e5d0      	b.n	8000f6a <__aeabi_dadd+0x52>
 80013c8:	430c      	orrs	r4, r1
 80013ca:	1e61      	subs	r1, r4, #1
 80013cc:	418c      	sbcs	r4, r1
 80013ce:	b2e4      	uxtb	r4, r4
 80013d0:	2100      	movs	r1, #0
 80013d2:	e75a      	b.n	800128a <__aeabi_dadd+0x372>
 80013d4:	4d5c      	ldr	r5, [pc, #368]	; (8001548 <__aeabi_dadd+0x630>)
 80013d6:	45aa      	cmp	sl, r5
 80013d8:	d054      	beq.n	8001484 <__aeabi_dadd+0x56c>
 80013da:	4255      	negs	r5, r2
 80013dc:	2280      	movs	r2, #128	; 0x80
 80013de:	0410      	lsls	r0, r2, #16
 80013e0:	4301      	orrs	r1, r0
 80013e2:	2d38      	cmp	r5, #56	; 0x38
 80013e4:	dd00      	ble.n	80013e8 <__aeabi_dadd+0x4d0>
 80013e6:	e085      	b.n	80014f4 <__aeabi_dadd+0x5dc>
 80013e8:	2d1f      	cmp	r5, #31
 80013ea:	dd00      	ble.n	80013ee <__aeabi_dadd+0x4d6>
 80013ec:	e095      	b.n	800151a <__aeabi_dadd+0x602>
 80013ee:	2220      	movs	r2, #32
 80013f0:	1b50      	subs	r0, r2, r5
 80013f2:	1c0a      	adds	r2, r1, #0
 80013f4:	4684      	mov	ip, r0
 80013f6:	4082      	lsls	r2, r0
 80013f8:	1c20      	adds	r0, r4, #0
 80013fa:	40e8      	lsrs	r0, r5
 80013fc:	4302      	orrs	r2, r0
 80013fe:	4690      	mov	r8, r2
 8001400:	4662      	mov	r2, ip
 8001402:	4094      	lsls	r4, r2
 8001404:	1e60      	subs	r0, r4, #1
 8001406:	4184      	sbcs	r4, r0
 8001408:	4642      	mov	r2, r8
 800140a:	4314      	orrs	r4, r2
 800140c:	40e9      	lsrs	r1, r5
 800140e:	445c      	add	r4, fp
 8001410:	455c      	cmp	r4, fp
 8001412:	4192      	sbcs	r2, r2
 8001414:	18cb      	adds	r3, r1, r3
 8001416:	4252      	negs	r2, r2
 8001418:	1899      	adds	r1, r3, r2
 800141a:	4655      	mov	r5, sl
 800141c:	e66d      	b.n	80010fa <__aeabi_dadd+0x1e2>
 800141e:	4658      	mov	r0, fp
 8001420:	4318      	orrs	r0, r3
 8001422:	d100      	bne.n	8001426 <__aeabi_dadd+0x50e>
 8001424:	e5a1      	b.n	8000f6a <__aeabi_dadd+0x52>
 8001426:	4658      	mov	r0, fp
 8001428:	1a27      	subs	r7, r4, r0
 800142a:	42bc      	cmp	r4, r7
 800142c:	4192      	sbcs	r2, r2
 800142e:	1ac8      	subs	r0, r1, r3
 8001430:	4252      	negs	r2, r2
 8001432:	1a80      	subs	r0, r0, r2
 8001434:	0202      	lsls	r2, r0, #8
 8001436:	d56a      	bpl.n	800150e <__aeabi_dadd+0x5f6>
 8001438:	4658      	mov	r0, fp
 800143a:	1b04      	subs	r4, r0, r4
 800143c:	45a3      	cmp	fp, r4
 800143e:	4192      	sbcs	r2, r2
 8001440:	1a59      	subs	r1, r3, r1
 8001442:	4252      	negs	r2, r2
 8001444:	1a89      	subs	r1, r1, r2
 8001446:	4666      	mov	r6, ip
 8001448:	e58f      	b.n	8000f6a <__aeabi_dadd+0x52>
 800144a:	4658      	mov	r0, fp
 800144c:	4318      	orrs	r0, r3
 800144e:	d036      	beq.n	80014be <__aeabi_dadd+0x5a6>
 8001450:	0748      	lsls	r0, r1, #29
 8001452:	08e4      	lsrs	r4, r4, #3
 8001454:	4304      	orrs	r4, r0
 8001456:	2080      	movs	r0, #128	; 0x80
 8001458:	08c9      	lsrs	r1, r1, #3
 800145a:	0300      	lsls	r0, r0, #12
 800145c:	4201      	tst	r1, r0
 800145e:	d008      	beq.n	8001472 <__aeabi_dadd+0x55a>
 8001460:	08dd      	lsrs	r5, r3, #3
 8001462:	4205      	tst	r5, r0
 8001464:	d105      	bne.n	8001472 <__aeabi_dadd+0x55a>
 8001466:	4659      	mov	r1, fp
 8001468:	08ca      	lsrs	r2, r1, #3
 800146a:	075c      	lsls	r4, r3, #29
 800146c:	4314      	orrs	r4, r2
 800146e:	1c29      	adds	r1, r5, #0
 8001470:	4666      	mov	r6, ip
 8001472:	0f63      	lsrs	r3, r4, #29
 8001474:	00c9      	lsls	r1, r1, #3
 8001476:	4319      	orrs	r1, r3
 8001478:	00e4      	lsls	r4, r4, #3
 800147a:	4d33      	ldr	r5, [pc, #204]	; (8001548 <__aeabi_dadd+0x630>)
 800147c:	e575      	b.n	8000f6a <__aeabi_dadd+0x52>
 800147e:	4a32      	ldr	r2, [pc, #200]	; (8001548 <__aeabi_dadd+0x630>)
 8001480:	4592      	cmp	sl, r2
 8001482:	d1ae      	bne.n	80013e2 <__aeabi_dadd+0x4ca>
 8001484:	1c19      	adds	r1, r3, #0
 8001486:	465c      	mov	r4, fp
 8001488:	4655      	mov	r5, sl
 800148a:	e56e      	b.n	8000f6a <__aeabi_dadd+0x52>
 800148c:	2800      	cmp	r0, #0
 800148e:	d037      	beq.n	8001500 <__aeabi_dadd+0x5e8>
 8001490:	4658      	mov	r0, fp
 8001492:	4318      	orrs	r0, r3
 8001494:	d013      	beq.n	80014be <__aeabi_dadd+0x5a6>
 8001496:	2580      	movs	r5, #128	; 0x80
 8001498:	0748      	lsls	r0, r1, #29
 800149a:	08e4      	lsrs	r4, r4, #3
 800149c:	08c9      	lsrs	r1, r1, #3
 800149e:	032d      	lsls	r5, r5, #12
 80014a0:	4304      	orrs	r4, r0
 80014a2:	4229      	tst	r1, r5
 80014a4:	d0e5      	beq.n	8001472 <__aeabi_dadd+0x55a>
 80014a6:	08d8      	lsrs	r0, r3, #3
 80014a8:	4228      	tst	r0, r5
 80014aa:	d1e2      	bne.n	8001472 <__aeabi_dadd+0x55a>
 80014ac:	465d      	mov	r5, fp
 80014ae:	08ea      	lsrs	r2, r5, #3
 80014b0:	075c      	lsls	r4, r3, #29
 80014b2:	4314      	orrs	r4, r2
 80014b4:	1c01      	adds	r1, r0, #0
 80014b6:	e7dc      	b.n	8001472 <__aeabi_dadd+0x55a>
 80014b8:	2300      	movs	r3, #0
 80014ba:	2400      	movs	r4, #0
 80014bc:	e573      	b.n	8000fa6 <__aeabi_dadd+0x8e>
 80014be:	4d22      	ldr	r5, [pc, #136]	; (8001548 <__aeabi_dadd+0x630>)
 80014c0:	e553      	b.n	8000f6a <__aeabi_dadd+0x52>
 80014c2:	2300      	movs	r3, #0
 80014c4:	e754      	b.n	8001370 <__aeabi_dadd+0x458>
 80014c6:	2700      	movs	r7, #0
 80014c8:	2200      	movs	r2, #0
 80014ca:	e6f1      	b.n	80012b0 <__aeabi_dadd+0x398>
 80014cc:	1c3d      	adds	r5, r7, #0
 80014ce:	3d20      	subs	r5, #32
 80014d0:	1c0a      	adds	r2, r1, #0
 80014d2:	40ea      	lsrs	r2, r5
 80014d4:	1c15      	adds	r5, r2, #0
 80014d6:	2f20      	cmp	r7, #32
 80014d8:	d031      	beq.n	800153e <__aeabi_dadd+0x626>
 80014da:	2640      	movs	r6, #64	; 0x40
 80014dc:	1bf7      	subs	r7, r6, r7
 80014de:	40b9      	lsls	r1, r7
 80014e0:	430c      	orrs	r4, r1
 80014e2:	1e61      	subs	r1, r4, #1
 80014e4:	418c      	sbcs	r4, r1
 80014e6:	432c      	orrs	r4, r5
 80014e8:	2100      	movs	r1, #0
 80014ea:	e6ce      	b.n	800128a <__aeabi_dadd+0x372>
 80014ec:	4a16      	ldr	r2, [pc, #88]	; (8001548 <__aeabi_dadd+0x630>)
 80014ee:	2700      	movs	r7, #0
 80014f0:	1c15      	adds	r5, r2, #0
 80014f2:	e6dd      	b.n	80012b0 <__aeabi_dadd+0x398>
 80014f4:	430c      	orrs	r4, r1
 80014f6:	1e61      	subs	r1, r4, #1
 80014f8:	418c      	sbcs	r4, r1
 80014fa:	b2e4      	uxtb	r4, r4
 80014fc:	2100      	movs	r1, #0
 80014fe:	e786      	b.n	800140e <__aeabi_dadd+0x4f6>
 8001500:	1c19      	adds	r1, r3, #0
 8001502:	465c      	mov	r4, fp
 8001504:	4d10      	ldr	r5, [pc, #64]	; (8001548 <__aeabi_dadd+0x630>)
 8001506:	e530      	b.n	8000f6a <__aeabi_dadd+0x52>
 8001508:	1c19      	adds	r1, r3, #0
 800150a:	465c      	mov	r4, fp
 800150c:	e52d      	b.n	8000f6a <__aeabi_dadd+0x52>
 800150e:	1c03      	adds	r3, r0, #0
 8001510:	433b      	orrs	r3, r7
 8001512:	d0d8      	beq.n	80014c6 <__aeabi_dadd+0x5ae>
 8001514:	1c01      	adds	r1, r0, #0
 8001516:	1c3c      	adds	r4, r7, #0
 8001518:	e527      	b.n	8000f6a <__aeabi_dadd+0x52>
 800151a:	2020      	movs	r0, #32
 800151c:	4240      	negs	r0, r0
 800151e:	1940      	adds	r0, r0, r5
 8001520:	1c0a      	adds	r2, r1, #0
 8001522:	40c2      	lsrs	r2, r0
 8001524:	4690      	mov	r8, r2
 8001526:	2d20      	cmp	r5, #32
 8001528:	d00b      	beq.n	8001542 <__aeabi_dadd+0x62a>
 800152a:	2040      	movs	r0, #64	; 0x40
 800152c:	1b45      	subs	r5, r0, r5
 800152e:	40a9      	lsls	r1, r5
 8001530:	430c      	orrs	r4, r1
 8001532:	1e61      	subs	r1, r4, #1
 8001534:	418c      	sbcs	r4, r1
 8001536:	4645      	mov	r5, r8
 8001538:	432c      	orrs	r4, r5
 800153a:	2100      	movs	r1, #0
 800153c:	e767      	b.n	800140e <__aeabi_dadd+0x4f6>
 800153e:	2100      	movs	r1, #0
 8001540:	e7ce      	b.n	80014e0 <__aeabi_dadd+0x5c8>
 8001542:	2100      	movs	r1, #0
 8001544:	e7f4      	b.n	8001530 <__aeabi_dadd+0x618>
 8001546:	46c0      	nop			; (mov r8, r8)
 8001548:	000007ff 	.word	0x000007ff
 800154c:	ff7fffff 	.word	0xff7fffff

08001550 <__aeabi_ddiv>:
 8001550:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001552:	4656      	mov	r6, sl
 8001554:	4644      	mov	r4, r8
 8001556:	465f      	mov	r7, fp
 8001558:	464d      	mov	r5, r9
 800155a:	b4f0      	push	{r4, r5, r6, r7}
 800155c:	1c1f      	adds	r7, r3, #0
 800155e:	030b      	lsls	r3, r1, #12
 8001560:	0b1b      	lsrs	r3, r3, #12
 8001562:	4698      	mov	r8, r3
 8001564:	004b      	lsls	r3, r1, #1
 8001566:	b087      	sub	sp, #28
 8001568:	1c04      	adds	r4, r0, #0
 800156a:	4681      	mov	r9, r0
 800156c:	0d5b      	lsrs	r3, r3, #21
 800156e:	0fc8      	lsrs	r0, r1, #31
 8001570:	1c16      	adds	r6, r2, #0
 8001572:	469a      	mov	sl, r3
 8001574:	9000      	str	r0, [sp, #0]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d051      	beq.n	800161e <__aeabi_ddiv+0xce>
 800157a:	4b6a      	ldr	r3, [pc, #424]	; (8001724 <__aeabi_ddiv+0x1d4>)
 800157c:	459a      	cmp	sl, r3
 800157e:	d031      	beq.n	80015e4 <__aeabi_ddiv+0x94>
 8001580:	2280      	movs	r2, #128	; 0x80
 8001582:	4641      	mov	r1, r8
 8001584:	0352      	lsls	r2, r2, #13
 8001586:	430a      	orrs	r2, r1
 8001588:	0f63      	lsrs	r3, r4, #29
 800158a:	00d2      	lsls	r2, r2, #3
 800158c:	431a      	orrs	r2, r3
 800158e:	4b66      	ldr	r3, [pc, #408]	; (8001728 <__aeabi_ddiv+0x1d8>)
 8001590:	4690      	mov	r8, r2
 8001592:	2500      	movs	r5, #0
 8001594:	00e2      	lsls	r2, r4, #3
 8001596:	4691      	mov	r9, r2
 8001598:	449a      	add	sl, r3
 800159a:	2400      	movs	r4, #0
 800159c:	9502      	str	r5, [sp, #8]
 800159e:	033b      	lsls	r3, r7, #12
 80015a0:	0b1b      	lsrs	r3, r3, #12
 80015a2:	469b      	mov	fp, r3
 80015a4:	0ffd      	lsrs	r5, r7, #31
 80015a6:	007b      	lsls	r3, r7, #1
 80015a8:	1c31      	adds	r1, r6, #0
 80015aa:	0d5b      	lsrs	r3, r3, #21
 80015ac:	9501      	str	r5, [sp, #4]
 80015ae:	d060      	beq.n	8001672 <__aeabi_ddiv+0x122>
 80015b0:	4a5c      	ldr	r2, [pc, #368]	; (8001724 <__aeabi_ddiv+0x1d4>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d054      	beq.n	8001660 <__aeabi_ddiv+0x110>
 80015b6:	2180      	movs	r1, #128	; 0x80
 80015b8:	4658      	mov	r0, fp
 80015ba:	0349      	lsls	r1, r1, #13
 80015bc:	4301      	orrs	r1, r0
 80015be:	0f72      	lsrs	r2, r6, #29
 80015c0:	00c9      	lsls	r1, r1, #3
 80015c2:	4311      	orrs	r1, r2
 80015c4:	4a58      	ldr	r2, [pc, #352]	; (8001728 <__aeabi_ddiv+0x1d8>)
 80015c6:	468b      	mov	fp, r1
 80015c8:	189b      	adds	r3, r3, r2
 80015ca:	00f1      	lsls	r1, r6, #3
 80015cc:	2000      	movs	r0, #0
 80015ce:	9a00      	ldr	r2, [sp, #0]
 80015d0:	4304      	orrs	r4, r0
 80015d2:	406a      	eors	r2, r5
 80015d4:	9203      	str	r2, [sp, #12]
 80015d6:	2c0f      	cmp	r4, #15
 80015d8:	d900      	bls.n	80015dc <__aeabi_ddiv+0x8c>
 80015da:	e0ad      	b.n	8001738 <__aeabi_ddiv+0x1e8>
 80015dc:	4e53      	ldr	r6, [pc, #332]	; (800172c <__aeabi_ddiv+0x1dc>)
 80015de:	00a4      	lsls	r4, r4, #2
 80015e0:	5934      	ldr	r4, [r6, r4]
 80015e2:	46a7      	mov	pc, r4
 80015e4:	4640      	mov	r0, r8
 80015e6:	4304      	orrs	r4, r0
 80015e8:	d16e      	bne.n	80016c8 <__aeabi_ddiv+0x178>
 80015ea:	2100      	movs	r1, #0
 80015ec:	2502      	movs	r5, #2
 80015ee:	2408      	movs	r4, #8
 80015f0:	4688      	mov	r8, r1
 80015f2:	4689      	mov	r9, r1
 80015f4:	9502      	str	r5, [sp, #8]
 80015f6:	e7d2      	b.n	800159e <__aeabi_ddiv+0x4e>
 80015f8:	9c00      	ldr	r4, [sp, #0]
 80015fa:	9802      	ldr	r0, [sp, #8]
 80015fc:	46c3      	mov	fp, r8
 80015fe:	4649      	mov	r1, r9
 8001600:	9401      	str	r4, [sp, #4]
 8001602:	2802      	cmp	r0, #2
 8001604:	d064      	beq.n	80016d0 <__aeabi_ddiv+0x180>
 8001606:	2803      	cmp	r0, #3
 8001608:	d100      	bne.n	800160c <__aeabi_ddiv+0xbc>
 800160a:	e2ab      	b.n	8001b64 <__aeabi_ddiv+0x614>
 800160c:	2801      	cmp	r0, #1
 800160e:	d000      	beq.n	8001612 <__aeabi_ddiv+0xc2>
 8001610:	e238      	b.n	8001a84 <__aeabi_ddiv+0x534>
 8001612:	9a01      	ldr	r2, [sp, #4]
 8001614:	2400      	movs	r4, #0
 8001616:	4002      	ands	r2, r0
 8001618:	2500      	movs	r5, #0
 800161a:	46a1      	mov	r9, r4
 800161c:	e060      	b.n	80016e0 <__aeabi_ddiv+0x190>
 800161e:	4643      	mov	r3, r8
 8001620:	4323      	orrs	r3, r4
 8001622:	d04a      	beq.n	80016ba <__aeabi_ddiv+0x16a>
 8001624:	4640      	mov	r0, r8
 8001626:	2800      	cmp	r0, #0
 8001628:	d100      	bne.n	800162c <__aeabi_ddiv+0xdc>
 800162a:	e1c0      	b.n	80019ae <__aeabi_ddiv+0x45e>
 800162c:	f001 fb38 	bl	8002ca0 <__clzsi2>
 8001630:	1e03      	subs	r3, r0, #0
 8001632:	2b27      	cmp	r3, #39	; 0x27
 8001634:	dd00      	ble.n	8001638 <__aeabi_ddiv+0xe8>
 8001636:	e1b3      	b.n	80019a0 <__aeabi_ddiv+0x450>
 8001638:	2128      	movs	r1, #40	; 0x28
 800163a:	1a0d      	subs	r5, r1, r0
 800163c:	1c21      	adds	r1, r4, #0
 800163e:	3b08      	subs	r3, #8
 8001640:	4642      	mov	r2, r8
 8001642:	40e9      	lsrs	r1, r5
 8001644:	409a      	lsls	r2, r3
 8001646:	1c0d      	adds	r5, r1, #0
 8001648:	4315      	orrs	r5, r2
 800164a:	1c22      	adds	r2, r4, #0
 800164c:	409a      	lsls	r2, r3
 800164e:	46a8      	mov	r8, r5
 8001650:	4691      	mov	r9, r2
 8001652:	4b37      	ldr	r3, [pc, #220]	; (8001730 <__aeabi_ddiv+0x1e0>)
 8001654:	2500      	movs	r5, #0
 8001656:	1a1b      	subs	r3, r3, r0
 8001658:	469a      	mov	sl, r3
 800165a:	2400      	movs	r4, #0
 800165c:	9502      	str	r5, [sp, #8]
 800165e:	e79e      	b.n	800159e <__aeabi_ddiv+0x4e>
 8001660:	465a      	mov	r2, fp
 8001662:	4316      	orrs	r6, r2
 8001664:	2003      	movs	r0, #3
 8001666:	2e00      	cmp	r6, #0
 8001668:	d1b1      	bne.n	80015ce <__aeabi_ddiv+0x7e>
 800166a:	46b3      	mov	fp, r6
 800166c:	2100      	movs	r1, #0
 800166e:	2002      	movs	r0, #2
 8001670:	e7ad      	b.n	80015ce <__aeabi_ddiv+0x7e>
 8001672:	465a      	mov	r2, fp
 8001674:	4332      	orrs	r2, r6
 8001676:	d01b      	beq.n	80016b0 <__aeabi_ddiv+0x160>
 8001678:	465b      	mov	r3, fp
 800167a:	2b00      	cmp	r3, #0
 800167c:	d100      	bne.n	8001680 <__aeabi_ddiv+0x130>
 800167e:	e18a      	b.n	8001996 <__aeabi_ddiv+0x446>
 8001680:	4658      	mov	r0, fp
 8001682:	f001 fb0d 	bl	8002ca0 <__clzsi2>
 8001686:	2827      	cmp	r0, #39	; 0x27
 8001688:	dd00      	ble.n	800168c <__aeabi_ddiv+0x13c>
 800168a:	e17d      	b.n	8001988 <__aeabi_ddiv+0x438>
 800168c:	2228      	movs	r2, #40	; 0x28
 800168e:	1a17      	subs	r7, r2, r0
 8001690:	1c01      	adds	r1, r0, #0
 8001692:	1c32      	adds	r2, r6, #0
 8001694:	3908      	subs	r1, #8
 8001696:	465b      	mov	r3, fp
 8001698:	40fa      	lsrs	r2, r7
 800169a:	408b      	lsls	r3, r1
 800169c:	1c17      	adds	r7, r2, #0
 800169e:	431f      	orrs	r7, r3
 80016a0:	1c33      	adds	r3, r6, #0
 80016a2:	408b      	lsls	r3, r1
 80016a4:	46bb      	mov	fp, r7
 80016a6:	1c19      	adds	r1, r3, #0
 80016a8:	4b21      	ldr	r3, [pc, #132]	; (8001730 <__aeabi_ddiv+0x1e0>)
 80016aa:	1a1b      	subs	r3, r3, r0
 80016ac:	2000      	movs	r0, #0
 80016ae:	e78e      	b.n	80015ce <__aeabi_ddiv+0x7e>
 80016b0:	2700      	movs	r7, #0
 80016b2:	46bb      	mov	fp, r7
 80016b4:	2100      	movs	r1, #0
 80016b6:	2001      	movs	r0, #1
 80016b8:	e789      	b.n	80015ce <__aeabi_ddiv+0x7e>
 80016ba:	2000      	movs	r0, #0
 80016bc:	2501      	movs	r5, #1
 80016be:	2404      	movs	r4, #4
 80016c0:	4680      	mov	r8, r0
 80016c2:	4681      	mov	r9, r0
 80016c4:	9502      	str	r5, [sp, #8]
 80016c6:	e76a      	b.n	800159e <__aeabi_ddiv+0x4e>
 80016c8:	2503      	movs	r5, #3
 80016ca:	240c      	movs	r4, #12
 80016cc:	9502      	str	r5, [sp, #8]
 80016ce:	e766      	b.n	800159e <__aeabi_ddiv+0x4e>
 80016d0:	9c01      	ldr	r4, [sp, #4]
 80016d2:	9403      	str	r4, [sp, #12]
 80016d4:	9d03      	ldr	r5, [sp, #12]
 80016d6:	2201      	movs	r2, #1
 80016d8:	402a      	ands	r2, r5
 80016da:	2400      	movs	r4, #0
 80016dc:	4d11      	ldr	r5, [pc, #68]	; (8001724 <__aeabi_ddiv+0x1d4>)
 80016de:	46a1      	mov	r9, r4
 80016e0:	2000      	movs	r0, #0
 80016e2:	2100      	movs	r1, #0
 80016e4:	0324      	lsls	r4, r4, #12
 80016e6:	0b26      	lsrs	r6, r4, #12
 80016e8:	0d0c      	lsrs	r4, r1, #20
 80016ea:	0524      	lsls	r4, r4, #20
 80016ec:	4b11      	ldr	r3, [pc, #68]	; (8001734 <__aeabi_ddiv+0x1e4>)
 80016ee:	4334      	orrs	r4, r6
 80016f0:	052d      	lsls	r5, r5, #20
 80016f2:	4023      	ands	r3, r4
 80016f4:	432b      	orrs	r3, r5
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	085b      	lsrs	r3, r3, #1
 80016fa:	07d2      	lsls	r2, r2, #31
 80016fc:	1c19      	adds	r1, r3, #0
 80016fe:	4648      	mov	r0, r9
 8001700:	4311      	orrs	r1, r2
 8001702:	b007      	add	sp, #28
 8001704:	bc3c      	pop	{r2, r3, r4, r5}
 8001706:	4690      	mov	r8, r2
 8001708:	4699      	mov	r9, r3
 800170a:	46a2      	mov	sl, r4
 800170c:	46ab      	mov	fp, r5
 800170e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001710:	2200      	movs	r2, #0
 8001712:	2480      	movs	r4, #128	; 0x80
 8001714:	0324      	lsls	r4, r4, #12
 8001716:	4691      	mov	r9, r2
 8001718:	4d02      	ldr	r5, [pc, #8]	; (8001724 <__aeabi_ddiv+0x1d4>)
 800171a:	e7e1      	b.n	80016e0 <__aeabi_ddiv+0x190>
 800171c:	2400      	movs	r4, #0
 800171e:	2500      	movs	r5, #0
 8001720:	46a1      	mov	r9, r4
 8001722:	e7dd      	b.n	80016e0 <__aeabi_ddiv+0x190>
 8001724:	000007ff 	.word	0x000007ff
 8001728:	fffffc01 	.word	0xfffffc01
 800172c:	0800bd30 	.word	0x0800bd30
 8001730:	fffffc0d 	.word	0xfffffc0d
 8001734:	800fffff 	.word	0x800fffff
 8001738:	4655      	mov	r5, sl
 800173a:	1aed      	subs	r5, r5, r3
 800173c:	9504      	str	r5, [sp, #16]
 800173e:	45d8      	cmp	r8, fp
 8001740:	d900      	bls.n	8001744 <__aeabi_ddiv+0x1f4>
 8001742:	e153      	b.n	80019ec <__aeabi_ddiv+0x49c>
 8001744:	d100      	bne.n	8001748 <__aeabi_ddiv+0x1f8>
 8001746:	e14e      	b.n	80019e6 <__aeabi_ddiv+0x496>
 8001748:	9c04      	ldr	r4, [sp, #16]
 800174a:	2500      	movs	r5, #0
 800174c:	3c01      	subs	r4, #1
 800174e:	464e      	mov	r6, r9
 8001750:	9404      	str	r4, [sp, #16]
 8001752:	4647      	mov	r7, r8
 8001754:	46a9      	mov	r9, r5
 8001756:	4658      	mov	r0, fp
 8001758:	0203      	lsls	r3, r0, #8
 800175a:	0e0c      	lsrs	r4, r1, #24
 800175c:	431c      	orrs	r4, r3
 800175e:	0209      	lsls	r1, r1, #8
 8001760:	0c25      	lsrs	r5, r4, #16
 8001762:	0423      	lsls	r3, r4, #16
 8001764:	0c1b      	lsrs	r3, r3, #16
 8001766:	9100      	str	r1, [sp, #0]
 8001768:	1c38      	adds	r0, r7, #0
 800176a:	1c29      	adds	r1, r5, #0
 800176c:	9301      	str	r3, [sp, #4]
 800176e:	f7fe fce9 	bl	8000144 <__aeabi_uidiv>
 8001772:	9901      	ldr	r1, [sp, #4]
 8001774:	4683      	mov	fp, r0
 8001776:	4341      	muls	r1, r0
 8001778:	1c38      	adds	r0, r7, #0
 800177a:	468a      	mov	sl, r1
 800177c:	1c29      	adds	r1, r5, #0
 800177e:	f7fe fd25 	bl	80001cc <__aeabi_uidivmod>
 8001782:	0c33      	lsrs	r3, r6, #16
 8001784:	0409      	lsls	r1, r1, #16
 8001786:	4319      	orrs	r1, r3
 8001788:	458a      	cmp	sl, r1
 800178a:	d90c      	bls.n	80017a6 <__aeabi_ddiv+0x256>
 800178c:	465b      	mov	r3, fp
 800178e:	1909      	adds	r1, r1, r4
 8001790:	3b01      	subs	r3, #1
 8001792:	428c      	cmp	r4, r1
 8001794:	d900      	bls.n	8001798 <__aeabi_ddiv+0x248>
 8001796:	e147      	b.n	8001a28 <__aeabi_ddiv+0x4d8>
 8001798:	458a      	cmp	sl, r1
 800179a:	d800      	bhi.n	800179e <__aeabi_ddiv+0x24e>
 800179c:	e144      	b.n	8001a28 <__aeabi_ddiv+0x4d8>
 800179e:	2202      	movs	r2, #2
 80017a0:	4252      	negs	r2, r2
 80017a2:	4493      	add	fp, r2
 80017a4:	1909      	adds	r1, r1, r4
 80017a6:	4653      	mov	r3, sl
 80017a8:	1acb      	subs	r3, r1, r3
 80017aa:	1c18      	adds	r0, r3, #0
 80017ac:	1c29      	adds	r1, r5, #0
 80017ae:	4698      	mov	r8, r3
 80017b0:	f7fe fcc8 	bl	8000144 <__aeabi_uidiv>
 80017b4:	1c07      	adds	r7, r0, #0
 80017b6:	9801      	ldr	r0, [sp, #4]
 80017b8:	1c29      	adds	r1, r5, #0
 80017ba:	4378      	muls	r0, r7
 80017bc:	4682      	mov	sl, r0
 80017be:	4640      	mov	r0, r8
 80017c0:	f7fe fd04 	bl	80001cc <__aeabi_uidivmod>
 80017c4:	0436      	lsls	r6, r6, #16
 80017c6:	040b      	lsls	r3, r1, #16
 80017c8:	0c36      	lsrs	r6, r6, #16
 80017ca:	4333      	orrs	r3, r6
 80017cc:	459a      	cmp	sl, r3
 80017ce:	d909      	bls.n	80017e4 <__aeabi_ddiv+0x294>
 80017d0:	191b      	adds	r3, r3, r4
 80017d2:	1e7a      	subs	r2, r7, #1
 80017d4:	429c      	cmp	r4, r3
 80017d6:	d900      	bls.n	80017da <__aeabi_ddiv+0x28a>
 80017d8:	e124      	b.n	8001a24 <__aeabi_ddiv+0x4d4>
 80017da:	459a      	cmp	sl, r3
 80017dc:	d800      	bhi.n	80017e0 <__aeabi_ddiv+0x290>
 80017de:	e121      	b.n	8001a24 <__aeabi_ddiv+0x4d4>
 80017e0:	3f02      	subs	r7, #2
 80017e2:	191b      	adds	r3, r3, r4
 80017e4:	465e      	mov	r6, fp
 80017e6:	0432      	lsls	r2, r6, #16
 80017e8:	4317      	orrs	r7, r2
 80017ea:	0c38      	lsrs	r0, r7, #16
 80017ec:	46bb      	mov	fp, r7
 80017ee:	9e00      	ldr	r6, [sp, #0]
 80017f0:	9f00      	ldr	r7, [sp, #0]
 80017f2:	4651      	mov	r1, sl
 80017f4:	0c3f      	lsrs	r7, r7, #16
 80017f6:	0432      	lsls	r2, r6, #16
 80017f8:	1a5b      	subs	r3, r3, r1
 80017fa:	4659      	mov	r1, fp
 80017fc:	46ba      	mov	sl, r7
 80017fe:	0c12      	lsrs	r2, r2, #16
 8001800:	040f      	lsls	r7, r1, #16
 8001802:	0c3f      	lsrs	r7, r7, #16
 8001804:	4690      	mov	r8, r2
 8001806:	4651      	mov	r1, sl
 8001808:	437a      	muls	r2, r7
 800180a:	434f      	muls	r7, r1
 800180c:	4641      	mov	r1, r8
 800180e:	4341      	muls	r1, r0
 8001810:	4656      	mov	r6, sl
 8001812:	4370      	muls	r0, r6
 8001814:	19cf      	adds	r7, r1, r7
 8001816:	0c16      	lsrs	r6, r2, #16
 8001818:	19be      	adds	r6, r7, r6
 800181a:	42b1      	cmp	r1, r6
 800181c:	d902      	bls.n	8001824 <__aeabi_ddiv+0x2d4>
 800181e:	2780      	movs	r7, #128	; 0x80
 8001820:	027f      	lsls	r7, r7, #9
 8001822:	19c0      	adds	r0, r0, r7
 8001824:	0c31      	lsrs	r1, r6, #16
 8001826:	0412      	lsls	r2, r2, #16
 8001828:	0436      	lsls	r6, r6, #16
 800182a:	0c12      	lsrs	r2, r2, #16
 800182c:	1840      	adds	r0, r0, r1
 800182e:	18b6      	adds	r6, r6, r2
 8001830:	4283      	cmp	r3, r0
 8001832:	d200      	bcs.n	8001836 <__aeabi_ddiv+0x2e6>
 8001834:	e0c4      	b.n	80019c0 <__aeabi_ddiv+0x470>
 8001836:	d100      	bne.n	800183a <__aeabi_ddiv+0x2ea>
 8001838:	e0be      	b.n	80019b8 <__aeabi_ddiv+0x468>
 800183a:	1a19      	subs	r1, r3, r0
 800183c:	4648      	mov	r0, r9
 800183e:	1b86      	subs	r6, r0, r6
 8001840:	45b1      	cmp	r9, r6
 8001842:	41bf      	sbcs	r7, r7
 8001844:	427f      	negs	r7, r7
 8001846:	1bcf      	subs	r7, r1, r7
 8001848:	42a7      	cmp	r7, r4
 800184a:	d100      	bne.n	800184e <__aeabi_ddiv+0x2fe>
 800184c:	e113      	b.n	8001a76 <__aeabi_ddiv+0x526>
 800184e:	1c29      	adds	r1, r5, #0
 8001850:	1c38      	adds	r0, r7, #0
 8001852:	f7fe fc77 	bl	8000144 <__aeabi_uidiv>
 8001856:	9901      	ldr	r1, [sp, #4]
 8001858:	9002      	str	r0, [sp, #8]
 800185a:	4341      	muls	r1, r0
 800185c:	1c38      	adds	r0, r7, #0
 800185e:	4689      	mov	r9, r1
 8001860:	1c29      	adds	r1, r5, #0
 8001862:	f7fe fcb3 	bl	80001cc <__aeabi_uidivmod>
 8001866:	0c33      	lsrs	r3, r6, #16
 8001868:	0409      	lsls	r1, r1, #16
 800186a:	4319      	orrs	r1, r3
 800186c:	4589      	cmp	r9, r1
 800186e:	d90c      	bls.n	800188a <__aeabi_ddiv+0x33a>
 8001870:	9b02      	ldr	r3, [sp, #8]
 8001872:	1909      	adds	r1, r1, r4
 8001874:	3b01      	subs	r3, #1
 8001876:	428c      	cmp	r4, r1
 8001878:	d900      	bls.n	800187c <__aeabi_ddiv+0x32c>
 800187a:	e0ff      	b.n	8001a7c <__aeabi_ddiv+0x52c>
 800187c:	4589      	cmp	r9, r1
 800187e:	d800      	bhi.n	8001882 <__aeabi_ddiv+0x332>
 8001880:	e0fc      	b.n	8001a7c <__aeabi_ddiv+0x52c>
 8001882:	9f02      	ldr	r7, [sp, #8]
 8001884:	1909      	adds	r1, r1, r4
 8001886:	3f02      	subs	r7, #2
 8001888:	9702      	str	r7, [sp, #8]
 800188a:	464f      	mov	r7, r9
 800188c:	1bcf      	subs	r7, r1, r7
 800188e:	1c38      	adds	r0, r7, #0
 8001890:	1c29      	adds	r1, r5, #0
 8001892:	9705      	str	r7, [sp, #20]
 8001894:	f7fe fc56 	bl	8000144 <__aeabi_uidiv>
 8001898:	1c07      	adds	r7, r0, #0
 800189a:	9801      	ldr	r0, [sp, #4]
 800189c:	1c29      	adds	r1, r5, #0
 800189e:	4378      	muls	r0, r7
 80018a0:	4681      	mov	r9, r0
 80018a2:	9805      	ldr	r0, [sp, #20]
 80018a4:	f7fe fc92 	bl	80001cc <__aeabi_uidivmod>
 80018a8:	0436      	lsls	r6, r6, #16
 80018aa:	0409      	lsls	r1, r1, #16
 80018ac:	0c36      	lsrs	r6, r6, #16
 80018ae:	430e      	orrs	r6, r1
 80018b0:	45b1      	cmp	r9, r6
 80018b2:	d909      	bls.n	80018c8 <__aeabi_ddiv+0x378>
 80018b4:	1936      	adds	r6, r6, r4
 80018b6:	1e7b      	subs	r3, r7, #1
 80018b8:	42b4      	cmp	r4, r6
 80018ba:	d900      	bls.n	80018be <__aeabi_ddiv+0x36e>
 80018bc:	e0e0      	b.n	8001a80 <__aeabi_ddiv+0x530>
 80018be:	45b1      	cmp	r9, r6
 80018c0:	d800      	bhi.n	80018c4 <__aeabi_ddiv+0x374>
 80018c2:	e0dd      	b.n	8001a80 <__aeabi_ddiv+0x530>
 80018c4:	3f02      	subs	r7, #2
 80018c6:	1936      	adds	r6, r6, r4
 80018c8:	9d02      	ldr	r5, [sp, #8]
 80018ca:	4649      	mov	r1, r9
 80018cc:	1a76      	subs	r6, r6, r1
 80018ce:	0429      	lsls	r1, r5, #16
 80018d0:	4339      	orrs	r1, r7
 80018d2:	040b      	lsls	r3, r1, #16
 80018d4:	4657      	mov	r7, sl
 80018d6:	0c0a      	lsrs	r2, r1, #16
 80018d8:	0c1b      	lsrs	r3, r3, #16
 80018da:	4640      	mov	r0, r8
 80018dc:	4645      	mov	r5, r8
 80018de:	4358      	muls	r0, r3
 80018e0:	4355      	muls	r5, r2
 80018e2:	437b      	muls	r3, r7
 80018e4:	437a      	muls	r2, r7
 80018e6:	18eb      	adds	r3, r5, r3
 80018e8:	0c07      	lsrs	r7, r0, #16
 80018ea:	19db      	adds	r3, r3, r7
 80018ec:	429d      	cmp	r5, r3
 80018ee:	d902      	bls.n	80018f6 <__aeabi_ddiv+0x3a6>
 80018f0:	2580      	movs	r5, #128	; 0x80
 80018f2:	026d      	lsls	r5, r5, #9
 80018f4:	1952      	adds	r2, r2, r5
 80018f6:	0c1d      	lsrs	r5, r3, #16
 80018f8:	0400      	lsls	r0, r0, #16
 80018fa:	041b      	lsls	r3, r3, #16
 80018fc:	0c00      	lsrs	r0, r0, #16
 80018fe:	1952      	adds	r2, r2, r5
 8001900:	181b      	adds	r3, r3, r0
 8001902:	4296      	cmp	r6, r2
 8001904:	d335      	bcc.n	8001972 <__aeabi_ddiv+0x422>
 8001906:	d100      	bne.n	800190a <__aeabi_ddiv+0x3ba>
 8001908:	e0fc      	b.n	8001b04 <__aeabi_ddiv+0x5b4>
 800190a:	2301      	movs	r3, #1
 800190c:	4319      	orrs	r1, r3
 800190e:	9e04      	ldr	r6, [sp, #16]
 8001910:	4f99      	ldr	r7, [pc, #612]	; (8001b78 <__aeabi_ddiv+0x628>)
 8001912:	19f5      	adds	r5, r6, r7
 8001914:	2d00      	cmp	r5, #0
 8001916:	dc00      	bgt.n	800191a <__aeabi_ddiv+0x3ca>
 8001918:	e0a1      	b.n	8001a5e <__aeabi_ddiv+0x50e>
 800191a:	0748      	lsls	r0, r1, #29
 800191c:	d009      	beq.n	8001932 <__aeabi_ddiv+0x3e2>
 800191e:	230f      	movs	r3, #15
 8001920:	400b      	ands	r3, r1
 8001922:	2b04      	cmp	r3, #4
 8001924:	d005      	beq.n	8001932 <__aeabi_ddiv+0x3e2>
 8001926:	1d0b      	adds	r3, r1, #4
 8001928:	428b      	cmp	r3, r1
 800192a:	4189      	sbcs	r1, r1
 800192c:	4249      	negs	r1, r1
 800192e:	448b      	add	fp, r1
 8001930:	1c19      	adds	r1, r3, #0
 8001932:	465a      	mov	r2, fp
 8001934:	01d2      	lsls	r2, r2, #7
 8001936:	d507      	bpl.n	8001948 <__aeabi_ddiv+0x3f8>
 8001938:	4b90      	ldr	r3, [pc, #576]	; (8001b7c <__aeabi_ddiv+0x62c>)
 800193a:	465c      	mov	r4, fp
 800193c:	9e04      	ldr	r6, [sp, #16]
 800193e:	2780      	movs	r7, #128	; 0x80
 8001940:	401c      	ands	r4, r3
 8001942:	00ff      	lsls	r7, r7, #3
 8001944:	46a3      	mov	fp, r4
 8001946:	19f5      	adds	r5, r6, r7
 8001948:	4b8d      	ldr	r3, [pc, #564]	; (8001b80 <__aeabi_ddiv+0x630>)
 800194a:	429d      	cmp	r5, r3
 800194c:	dd7a      	ble.n	8001a44 <__aeabi_ddiv+0x4f4>
 800194e:	9c03      	ldr	r4, [sp, #12]
 8001950:	2201      	movs	r2, #1
 8001952:	4022      	ands	r2, r4
 8001954:	2400      	movs	r4, #0
 8001956:	4d8b      	ldr	r5, [pc, #556]	; (8001b84 <__aeabi_ddiv+0x634>)
 8001958:	46a1      	mov	r9, r4
 800195a:	e6c1      	b.n	80016e0 <__aeabi_ddiv+0x190>
 800195c:	2480      	movs	r4, #128	; 0x80
 800195e:	0324      	lsls	r4, r4, #12
 8001960:	4647      	mov	r7, r8
 8001962:	4227      	tst	r7, r4
 8001964:	d14c      	bne.n	8001a00 <__aeabi_ddiv+0x4b0>
 8001966:	433c      	orrs	r4, r7
 8001968:	0324      	lsls	r4, r4, #12
 800196a:	0b24      	lsrs	r4, r4, #12
 800196c:	9a00      	ldr	r2, [sp, #0]
 800196e:	4d85      	ldr	r5, [pc, #532]	; (8001b84 <__aeabi_ddiv+0x634>)
 8001970:	e6b6      	b.n	80016e0 <__aeabi_ddiv+0x190>
 8001972:	1936      	adds	r6, r6, r4
 8001974:	1e48      	subs	r0, r1, #1
 8001976:	42b4      	cmp	r4, r6
 8001978:	d95e      	bls.n	8001a38 <__aeabi_ddiv+0x4e8>
 800197a:	1c01      	adds	r1, r0, #0
 800197c:	4296      	cmp	r6, r2
 800197e:	d1c4      	bne.n	800190a <__aeabi_ddiv+0x3ba>
 8001980:	9e00      	ldr	r6, [sp, #0]
 8001982:	429e      	cmp	r6, r3
 8001984:	d1c1      	bne.n	800190a <__aeabi_ddiv+0x3ba>
 8001986:	e7c2      	b.n	800190e <__aeabi_ddiv+0x3be>
 8001988:	1c03      	adds	r3, r0, #0
 800198a:	3b28      	subs	r3, #40	; 0x28
 800198c:	1c31      	adds	r1, r6, #0
 800198e:	4099      	lsls	r1, r3
 8001990:	468b      	mov	fp, r1
 8001992:	2100      	movs	r1, #0
 8001994:	e688      	b.n	80016a8 <__aeabi_ddiv+0x158>
 8001996:	1c30      	adds	r0, r6, #0
 8001998:	f001 f982 	bl	8002ca0 <__clzsi2>
 800199c:	3020      	adds	r0, #32
 800199e:	e672      	b.n	8001686 <__aeabi_ddiv+0x136>
 80019a0:	3b28      	subs	r3, #40	; 0x28
 80019a2:	1c21      	adds	r1, r4, #0
 80019a4:	4099      	lsls	r1, r3
 80019a6:	2200      	movs	r2, #0
 80019a8:	4688      	mov	r8, r1
 80019aa:	4691      	mov	r9, r2
 80019ac:	e651      	b.n	8001652 <__aeabi_ddiv+0x102>
 80019ae:	1c20      	adds	r0, r4, #0
 80019b0:	f001 f976 	bl	8002ca0 <__clzsi2>
 80019b4:	3020      	adds	r0, #32
 80019b6:	e63b      	b.n	8001630 <__aeabi_ddiv+0xe0>
 80019b8:	2100      	movs	r1, #0
 80019ba:	45b1      	cmp	r9, r6
 80019bc:	d300      	bcc.n	80019c0 <__aeabi_ddiv+0x470>
 80019be:	e73d      	b.n	800183c <__aeabi_ddiv+0x2ec>
 80019c0:	9f00      	ldr	r7, [sp, #0]
 80019c2:	465a      	mov	r2, fp
 80019c4:	44b9      	add	r9, r7
 80019c6:	45b9      	cmp	r9, r7
 80019c8:	41bf      	sbcs	r7, r7
 80019ca:	427f      	negs	r7, r7
 80019cc:	193f      	adds	r7, r7, r4
 80019ce:	18fb      	adds	r3, r7, r3
 80019d0:	3a01      	subs	r2, #1
 80019d2:	429c      	cmp	r4, r3
 80019d4:	d21e      	bcs.n	8001a14 <__aeabi_ddiv+0x4c4>
 80019d6:	4298      	cmp	r0, r3
 80019d8:	d900      	bls.n	80019dc <__aeabi_ddiv+0x48c>
 80019da:	e07e      	b.n	8001ada <__aeabi_ddiv+0x58a>
 80019dc:	d100      	bne.n	80019e0 <__aeabi_ddiv+0x490>
 80019de:	e0b5      	b.n	8001b4c <__aeabi_ddiv+0x5fc>
 80019e0:	1a19      	subs	r1, r3, r0
 80019e2:	4693      	mov	fp, r2
 80019e4:	e72a      	b.n	800183c <__aeabi_ddiv+0x2ec>
 80019e6:	4589      	cmp	r9, r1
 80019e8:	d800      	bhi.n	80019ec <__aeabi_ddiv+0x49c>
 80019ea:	e6ad      	b.n	8001748 <__aeabi_ddiv+0x1f8>
 80019ec:	4648      	mov	r0, r9
 80019ee:	4646      	mov	r6, r8
 80019f0:	4642      	mov	r2, r8
 80019f2:	0877      	lsrs	r7, r6, #1
 80019f4:	07d3      	lsls	r3, r2, #31
 80019f6:	0846      	lsrs	r6, r0, #1
 80019f8:	07c0      	lsls	r0, r0, #31
 80019fa:	431e      	orrs	r6, r3
 80019fc:	4681      	mov	r9, r0
 80019fe:	e6aa      	b.n	8001756 <__aeabi_ddiv+0x206>
 8001a00:	4658      	mov	r0, fp
 8001a02:	4220      	tst	r0, r4
 8001a04:	d112      	bne.n	8001a2c <__aeabi_ddiv+0x4dc>
 8001a06:	4304      	orrs	r4, r0
 8001a08:	0324      	lsls	r4, r4, #12
 8001a0a:	1c2a      	adds	r2, r5, #0
 8001a0c:	0b24      	lsrs	r4, r4, #12
 8001a0e:	4689      	mov	r9, r1
 8001a10:	4d5c      	ldr	r5, [pc, #368]	; (8001b84 <__aeabi_ddiv+0x634>)
 8001a12:	e665      	b.n	80016e0 <__aeabi_ddiv+0x190>
 8001a14:	42a3      	cmp	r3, r4
 8001a16:	d1e3      	bne.n	80019e0 <__aeabi_ddiv+0x490>
 8001a18:	9f00      	ldr	r7, [sp, #0]
 8001a1a:	454f      	cmp	r7, r9
 8001a1c:	d9db      	bls.n	80019d6 <__aeabi_ddiv+0x486>
 8001a1e:	1a21      	subs	r1, r4, r0
 8001a20:	4693      	mov	fp, r2
 8001a22:	e70b      	b.n	800183c <__aeabi_ddiv+0x2ec>
 8001a24:	1c17      	adds	r7, r2, #0
 8001a26:	e6dd      	b.n	80017e4 <__aeabi_ddiv+0x294>
 8001a28:	469b      	mov	fp, r3
 8001a2a:	e6bc      	b.n	80017a6 <__aeabi_ddiv+0x256>
 8001a2c:	433c      	orrs	r4, r7
 8001a2e:	0324      	lsls	r4, r4, #12
 8001a30:	0b24      	lsrs	r4, r4, #12
 8001a32:	9a00      	ldr	r2, [sp, #0]
 8001a34:	4d53      	ldr	r5, [pc, #332]	; (8001b84 <__aeabi_ddiv+0x634>)
 8001a36:	e653      	b.n	80016e0 <__aeabi_ddiv+0x190>
 8001a38:	42b2      	cmp	r2, r6
 8001a3a:	d859      	bhi.n	8001af0 <__aeabi_ddiv+0x5a0>
 8001a3c:	d100      	bne.n	8001a40 <__aeabi_ddiv+0x4f0>
 8001a3e:	e08a      	b.n	8001b56 <__aeabi_ddiv+0x606>
 8001a40:	1c01      	adds	r1, r0, #0
 8001a42:	e762      	b.n	800190a <__aeabi_ddiv+0x3ba>
 8001a44:	465f      	mov	r7, fp
 8001a46:	08c9      	lsrs	r1, r1, #3
 8001a48:	077b      	lsls	r3, r7, #29
 8001a4a:	9e03      	ldr	r6, [sp, #12]
 8001a4c:	430b      	orrs	r3, r1
 8001a4e:	027c      	lsls	r4, r7, #9
 8001a50:	056d      	lsls	r5, r5, #21
 8001a52:	2201      	movs	r2, #1
 8001a54:	4699      	mov	r9, r3
 8001a56:	0b24      	lsrs	r4, r4, #12
 8001a58:	0d6d      	lsrs	r5, r5, #21
 8001a5a:	4032      	ands	r2, r6
 8001a5c:	e640      	b.n	80016e0 <__aeabi_ddiv+0x190>
 8001a5e:	4b4a      	ldr	r3, [pc, #296]	; (8001b88 <__aeabi_ddiv+0x638>)
 8001a60:	9f04      	ldr	r7, [sp, #16]
 8001a62:	1bdb      	subs	r3, r3, r7
 8001a64:	2b38      	cmp	r3, #56	; 0x38
 8001a66:	dd10      	ble.n	8001a8a <__aeabi_ddiv+0x53a>
 8001a68:	9c03      	ldr	r4, [sp, #12]
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	4022      	ands	r2, r4
 8001a6e:	2400      	movs	r4, #0
 8001a70:	2500      	movs	r5, #0
 8001a72:	46a1      	mov	r9, r4
 8001a74:	e634      	b.n	80016e0 <__aeabi_ddiv+0x190>
 8001a76:	2101      	movs	r1, #1
 8001a78:	4249      	negs	r1, r1
 8001a7a:	e748      	b.n	800190e <__aeabi_ddiv+0x3be>
 8001a7c:	9302      	str	r3, [sp, #8]
 8001a7e:	e704      	b.n	800188a <__aeabi_ddiv+0x33a>
 8001a80:	1c1f      	adds	r7, r3, #0
 8001a82:	e721      	b.n	80018c8 <__aeabi_ddiv+0x378>
 8001a84:	9c01      	ldr	r4, [sp, #4]
 8001a86:	9403      	str	r4, [sp, #12]
 8001a88:	e741      	b.n	800190e <__aeabi_ddiv+0x3be>
 8001a8a:	2b1f      	cmp	r3, #31
 8001a8c:	dc40      	bgt.n	8001b10 <__aeabi_ddiv+0x5c0>
 8001a8e:	483f      	ldr	r0, [pc, #252]	; (8001b8c <__aeabi_ddiv+0x63c>)
 8001a90:	9f04      	ldr	r7, [sp, #16]
 8001a92:	1c0c      	adds	r4, r1, #0
 8001a94:	183a      	adds	r2, r7, r0
 8001a96:	4658      	mov	r0, fp
 8001a98:	4091      	lsls	r1, r2
 8001a9a:	40dc      	lsrs	r4, r3
 8001a9c:	4090      	lsls	r0, r2
 8001a9e:	4320      	orrs	r0, r4
 8001aa0:	1c0a      	adds	r2, r1, #0
 8001aa2:	1e51      	subs	r1, r2, #1
 8001aa4:	418a      	sbcs	r2, r1
 8001aa6:	1c01      	adds	r1, r0, #0
 8001aa8:	4311      	orrs	r1, r2
 8001aaa:	465a      	mov	r2, fp
 8001aac:	40da      	lsrs	r2, r3
 8001aae:	1c13      	adds	r3, r2, #0
 8001ab0:	0748      	lsls	r0, r1, #29
 8001ab2:	d009      	beq.n	8001ac8 <__aeabi_ddiv+0x578>
 8001ab4:	220f      	movs	r2, #15
 8001ab6:	400a      	ands	r2, r1
 8001ab8:	2a04      	cmp	r2, #4
 8001aba:	d005      	beq.n	8001ac8 <__aeabi_ddiv+0x578>
 8001abc:	1d0a      	adds	r2, r1, #4
 8001abe:	428a      	cmp	r2, r1
 8001ac0:	4189      	sbcs	r1, r1
 8001ac2:	4249      	negs	r1, r1
 8001ac4:	185b      	adds	r3, r3, r1
 8001ac6:	1c11      	adds	r1, r2, #0
 8001ac8:	021a      	lsls	r2, r3, #8
 8001aca:	d534      	bpl.n	8001b36 <__aeabi_ddiv+0x5e6>
 8001acc:	9c03      	ldr	r4, [sp, #12]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	4022      	ands	r2, r4
 8001ad2:	2400      	movs	r4, #0
 8001ad4:	2501      	movs	r5, #1
 8001ad6:	46a1      	mov	r9, r4
 8001ad8:	e602      	b.n	80016e0 <__aeabi_ddiv+0x190>
 8001ada:	9f00      	ldr	r7, [sp, #0]
 8001adc:	2102      	movs	r1, #2
 8001ade:	4249      	negs	r1, r1
 8001ae0:	44b9      	add	r9, r7
 8001ae2:	448b      	add	fp, r1
 8001ae4:	45b9      	cmp	r9, r7
 8001ae6:	4189      	sbcs	r1, r1
 8001ae8:	4249      	negs	r1, r1
 8001aea:	1909      	adds	r1, r1, r4
 8001aec:	18cb      	adds	r3, r1, r3
 8001aee:	e6a4      	b.n	800183a <__aeabi_ddiv+0x2ea>
 8001af0:	9d00      	ldr	r5, [sp, #0]
 8001af2:	1e88      	subs	r0, r1, #2
 8001af4:	0069      	lsls	r1, r5, #1
 8001af6:	42a9      	cmp	r1, r5
 8001af8:	41ad      	sbcs	r5, r5
 8001afa:	426d      	negs	r5, r5
 8001afc:	192c      	adds	r4, r5, r4
 8001afe:	1936      	adds	r6, r6, r4
 8001b00:	9100      	str	r1, [sp, #0]
 8001b02:	e73a      	b.n	800197a <__aeabi_ddiv+0x42a>
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d000      	beq.n	8001b0a <__aeabi_ddiv+0x5ba>
 8001b08:	e733      	b.n	8001972 <__aeabi_ddiv+0x422>
 8001b0a:	2400      	movs	r4, #0
 8001b0c:	9400      	str	r4, [sp, #0]
 8001b0e:	e737      	b.n	8001980 <__aeabi_ddiv+0x430>
 8001b10:	4a1f      	ldr	r2, [pc, #124]	; (8001b90 <__aeabi_ddiv+0x640>)
 8001b12:	9c04      	ldr	r4, [sp, #16]
 8001b14:	465d      	mov	r5, fp
 8001b16:	1b12      	subs	r2, r2, r4
 8001b18:	40d5      	lsrs	r5, r2
 8001b1a:	1c2a      	adds	r2, r5, #0
 8001b1c:	2b20      	cmp	r3, #32
 8001b1e:	d01f      	beq.n	8001b60 <__aeabi_ddiv+0x610>
 8001b20:	4e1c      	ldr	r6, [pc, #112]	; (8001b94 <__aeabi_ddiv+0x644>)
 8001b22:	465f      	mov	r7, fp
 8001b24:	19a3      	adds	r3, r4, r6
 8001b26:	409f      	lsls	r7, r3
 8001b28:	1c3b      	adds	r3, r7, #0
 8001b2a:	4319      	orrs	r1, r3
 8001b2c:	1e4b      	subs	r3, r1, #1
 8001b2e:	4199      	sbcs	r1, r3
 8001b30:	4311      	orrs	r1, r2
 8001b32:	2300      	movs	r3, #0
 8001b34:	e7bc      	b.n	8001ab0 <__aeabi_ddiv+0x560>
 8001b36:	075a      	lsls	r2, r3, #29
 8001b38:	08c9      	lsrs	r1, r1, #3
 8001b3a:	430a      	orrs	r2, r1
 8001b3c:	9f03      	ldr	r7, [sp, #12]
 8001b3e:	4691      	mov	r9, r2
 8001b40:	025b      	lsls	r3, r3, #9
 8001b42:	2201      	movs	r2, #1
 8001b44:	0b1c      	lsrs	r4, r3, #12
 8001b46:	403a      	ands	r2, r7
 8001b48:	2500      	movs	r5, #0
 8001b4a:	e5c9      	b.n	80016e0 <__aeabi_ddiv+0x190>
 8001b4c:	454e      	cmp	r6, r9
 8001b4e:	d8c4      	bhi.n	8001ada <__aeabi_ddiv+0x58a>
 8001b50:	4693      	mov	fp, r2
 8001b52:	2100      	movs	r1, #0
 8001b54:	e672      	b.n	800183c <__aeabi_ddiv+0x2ec>
 8001b56:	9f00      	ldr	r7, [sp, #0]
 8001b58:	429f      	cmp	r7, r3
 8001b5a:	d3c9      	bcc.n	8001af0 <__aeabi_ddiv+0x5a0>
 8001b5c:	1c01      	adds	r1, r0, #0
 8001b5e:	e70f      	b.n	8001980 <__aeabi_ddiv+0x430>
 8001b60:	2300      	movs	r3, #0
 8001b62:	e7e2      	b.n	8001b2a <__aeabi_ddiv+0x5da>
 8001b64:	2480      	movs	r4, #128	; 0x80
 8001b66:	0324      	lsls	r4, r4, #12
 8001b68:	465f      	mov	r7, fp
 8001b6a:	433c      	orrs	r4, r7
 8001b6c:	0324      	lsls	r4, r4, #12
 8001b6e:	0b24      	lsrs	r4, r4, #12
 8001b70:	9a01      	ldr	r2, [sp, #4]
 8001b72:	4689      	mov	r9, r1
 8001b74:	4d03      	ldr	r5, [pc, #12]	; (8001b84 <__aeabi_ddiv+0x634>)
 8001b76:	e5b3      	b.n	80016e0 <__aeabi_ddiv+0x190>
 8001b78:	000003ff 	.word	0x000003ff
 8001b7c:	feffffff 	.word	0xfeffffff
 8001b80:	000007fe 	.word	0x000007fe
 8001b84:	000007ff 	.word	0x000007ff
 8001b88:	fffffc02 	.word	0xfffffc02
 8001b8c:	0000041e 	.word	0x0000041e
 8001b90:	fffffbe2 	.word	0xfffffbe2
 8001b94:	0000043e 	.word	0x0000043e

08001b98 <__eqdf2>:
 8001b98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b9a:	465f      	mov	r7, fp
 8001b9c:	4656      	mov	r6, sl
 8001b9e:	464d      	mov	r5, r9
 8001ba0:	4644      	mov	r4, r8
 8001ba2:	b4f0      	push	{r4, r5, r6, r7}
 8001ba4:	1c0d      	adds	r5, r1, #0
 8001ba6:	1c04      	adds	r4, r0, #0
 8001ba8:	4680      	mov	r8, r0
 8001baa:	0fe8      	lsrs	r0, r5, #31
 8001bac:	4681      	mov	r9, r0
 8001bae:	0318      	lsls	r0, r3, #12
 8001bb0:	030f      	lsls	r7, r1, #12
 8001bb2:	0b00      	lsrs	r0, r0, #12
 8001bb4:	0b3f      	lsrs	r7, r7, #12
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	4684      	mov	ip, r0
 8001bba:	481b      	ldr	r0, [pc, #108]	; (8001c28 <__eqdf2+0x90>)
 8001bbc:	9700      	str	r7, [sp, #0]
 8001bbe:	0049      	lsls	r1, r1, #1
 8001bc0:	005e      	lsls	r6, r3, #1
 8001bc2:	0fdf      	lsrs	r7, r3, #31
 8001bc4:	0d49      	lsrs	r1, r1, #21
 8001bc6:	4692      	mov	sl, r2
 8001bc8:	0d76      	lsrs	r6, r6, #21
 8001bca:	46bb      	mov	fp, r7
 8001bcc:	4281      	cmp	r1, r0
 8001bce:	d00c      	beq.n	8001bea <__eqdf2+0x52>
 8001bd0:	4815      	ldr	r0, [pc, #84]	; (8001c28 <__eqdf2+0x90>)
 8001bd2:	4286      	cmp	r6, r0
 8001bd4:	d010      	beq.n	8001bf8 <__eqdf2+0x60>
 8001bd6:	2001      	movs	r0, #1
 8001bd8:	42b1      	cmp	r1, r6
 8001bda:	d015      	beq.n	8001c08 <__eqdf2+0x70>
 8001bdc:	b003      	add	sp, #12
 8001bde:	bc3c      	pop	{r2, r3, r4, r5}
 8001be0:	4690      	mov	r8, r2
 8001be2:	4699      	mov	r9, r3
 8001be4:	46a2      	mov	sl, r4
 8001be6:	46ab      	mov	fp, r5
 8001be8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bea:	9f00      	ldr	r7, [sp, #0]
 8001bec:	2001      	movs	r0, #1
 8001bee:	4327      	orrs	r7, r4
 8001bf0:	d1f4      	bne.n	8001bdc <__eqdf2+0x44>
 8001bf2:	480d      	ldr	r0, [pc, #52]	; (8001c28 <__eqdf2+0x90>)
 8001bf4:	4286      	cmp	r6, r0
 8001bf6:	d1ee      	bne.n	8001bd6 <__eqdf2+0x3e>
 8001bf8:	4660      	mov	r0, ip
 8001bfa:	4302      	orrs	r2, r0
 8001bfc:	2001      	movs	r0, #1
 8001bfe:	2a00      	cmp	r2, #0
 8001c00:	d1ec      	bne.n	8001bdc <__eqdf2+0x44>
 8001c02:	2001      	movs	r0, #1
 8001c04:	42b1      	cmp	r1, r6
 8001c06:	d1e9      	bne.n	8001bdc <__eqdf2+0x44>
 8001c08:	9b00      	ldr	r3, [sp, #0]
 8001c0a:	4563      	cmp	r3, ip
 8001c0c:	d1e6      	bne.n	8001bdc <__eqdf2+0x44>
 8001c0e:	45d0      	cmp	r8, sl
 8001c10:	d1e4      	bne.n	8001bdc <__eqdf2+0x44>
 8001c12:	45d9      	cmp	r9, fp
 8001c14:	d006      	beq.n	8001c24 <__eqdf2+0x8c>
 8001c16:	2900      	cmp	r1, #0
 8001c18:	d1e0      	bne.n	8001bdc <__eqdf2+0x44>
 8001c1a:	431c      	orrs	r4, r3
 8001c1c:	1c20      	adds	r0, r4, #0
 8001c1e:	1e44      	subs	r4, r0, #1
 8001c20:	41a0      	sbcs	r0, r4
 8001c22:	e7db      	b.n	8001bdc <__eqdf2+0x44>
 8001c24:	2000      	movs	r0, #0
 8001c26:	e7d9      	b.n	8001bdc <__eqdf2+0x44>
 8001c28:	000007ff 	.word	0x000007ff

08001c2c <__gedf2>:
 8001c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c2e:	465f      	mov	r7, fp
 8001c30:	4656      	mov	r6, sl
 8001c32:	464d      	mov	r5, r9
 8001c34:	4644      	mov	r4, r8
 8001c36:	b4f0      	push	{r4, r5, r6, r7}
 8001c38:	0fcd      	lsrs	r5, r1, #31
 8001c3a:	0fde      	lsrs	r6, r3, #31
 8001c3c:	46ac      	mov	ip, r5
 8001c3e:	031d      	lsls	r5, r3, #12
 8001c40:	0b2d      	lsrs	r5, r5, #12
 8001c42:	46b1      	mov	r9, r6
 8001c44:	4e37      	ldr	r6, [pc, #220]	; (8001d24 <__gedf2+0xf8>)
 8001c46:	030f      	lsls	r7, r1, #12
 8001c48:	004c      	lsls	r4, r1, #1
 8001c4a:	46ab      	mov	fp, r5
 8001c4c:	005d      	lsls	r5, r3, #1
 8001c4e:	4680      	mov	r8, r0
 8001c50:	0b3f      	lsrs	r7, r7, #12
 8001c52:	0d64      	lsrs	r4, r4, #21
 8001c54:	4692      	mov	sl, r2
 8001c56:	0d6d      	lsrs	r5, r5, #21
 8001c58:	42b4      	cmp	r4, r6
 8001c5a:	d032      	beq.n	8001cc2 <__gedf2+0x96>
 8001c5c:	4e31      	ldr	r6, [pc, #196]	; (8001d24 <__gedf2+0xf8>)
 8001c5e:	42b5      	cmp	r5, r6
 8001c60:	d035      	beq.n	8001cce <__gedf2+0xa2>
 8001c62:	2c00      	cmp	r4, #0
 8001c64:	d10e      	bne.n	8001c84 <__gedf2+0x58>
 8001c66:	4338      	orrs	r0, r7
 8001c68:	4241      	negs	r1, r0
 8001c6a:	4141      	adcs	r1, r0
 8001c6c:	1c08      	adds	r0, r1, #0
 8001c6e:	2d00      	cmp	r5, #0
 8001c70:	d00b      	beq.n	8001c8a <__gedf2+0x5e>
 8001c72:	2900      	cmp	r1, #0
 8001c74:	d119      	bne.n	8001caa <__gedf2+0x7e>
 8001c76:	45cc      	cmp	ip, r9
 8001c78:	d02d      	beq.n	8001cd6 <__gedf2+0xaa>
 8001c7a:	4665      	mov	r5, ip
 8001c7c:	4268      	negs	r0, r5
 8001c7e:	2301      	movs	r3, #1
 8001c80:	4318      	orrs	r0, r3
 8001c82:	e018      	b.n	8001cb6 <__gedf2+0x8a>
 8001c84:	2d00      	cmp	r5, #0
 8001c86:	d1f6      	bne.n	8001c76 <__gedf2+0x4a>
 8001c88:	1c28      	adds	r0, r5, #0
 8001c8a:	4659      	mov	r1, fp
 8001c8c:	430a      	orrs	r2, r1
 8001c8e:	4253      	negs	r3, r2
 8001c90:	4153      	adcs	r3, r2
 8001c92:	2800      	cmp	r0, #0
 8001c94:	d106      	bne.n	8001ca4 <__gedf2+0x78>
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d0ed      	beq.n	8001c76 <__gedf2+0x4a>
 8001c9a:	4663      	mov	r3, ip
 8001c9c:	4258      	negs	r0, r3
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	4318      	orrs	r0, r3
 8001ca2:	e008      	b.n	8001cb6 <__gedf2+0x8a>
 8001ca4:	2000      	movs	r0, #0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d105      	bne.n	8001cb6 <__gedf2+0x8a>
 8001caa:	464a      	mov	r2, r9
 8001cac:	4250      	negs	r0, r2
 8001cae:	4150      	adcs	r0, r2
 8001cb0:	4240      	negs	r0, r0
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	4318      	orrs	r0, r3
 8001cb6:	bc3c      	pop	{r2, r3, r4, r5}
 8001cb8:	4690      	mov	r8, r2
 8001cba:	4699      	mov	r9, r3
 8001cbc:	46a2      	mov	sl, r4
 8001cbe:	46ab      	mov	fp, r5
 8001cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cc2:	1c3e      	adds	r6, r7, #0
 8001cc4:	4306      	orrs	r6, r0
 8001cc6:	d0c9      	beq.n	8001c5c <__gedf2+0x30>
 8001cc8:	2002      	movs	r0, #2
 8001cca:	4240      	negs	r0, r0
 8001ccc:	e7f3      	b.n	8001cb6 <__gedf2+0x8a>
 8001cce:	465e      	mov	r6, fp
 8001cd0:	4316      	orrs	r6, r2
 8001cd2:	d0c6      	beq.n	8001c62 <__gedf2+0x36>
 8001cd4:	e7f8      	b.n	8001cc8 <__gedf2+0x9c>
 8001cd6:	42ac      	cmp	r4, r5
 8001cd8:	dc07      	bgt.n	8001cea <__gedf2+0xbe>
 8001cda:	da0b      	bge.n	8001cf4 <__gedf2+0xc8>
 8001cdc:	4661      	mov	r1, ip
 8001cde:	4248      	negs	r0, r1
 8001ce0:	4148      	adcs	r0, r1
 8001ce2:	4240      	negs	r0, r0
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	4318      	orrs	r0, r3
 8001ce8:	e7e5      	b.n	8001cb6 <__gedf2+0x8a>
 8001cea:	4666      	mov	r6, ip
 8001cec:	4270      	negs	r0, r6
 8001cee:	2301      	movs	r3, #1
 8001cf0:	4318      	orrs	r0, r3
 8001cf2:	e7e0      	b.n	8001cb6 <__gedf2+0x8a>
 8001cf4:	455f      	cmp	r7, fp
 8001cf6:	d80a      	bhi.n	8001d0e <__gedf2+0xe2>
 8001cf8:	d00e      	beq.n	8001d18 <__gedf2+0xec>
 8001cfa:	2000      	movs	r0, #0
 8001cfc:	455f      	cmp	r7, fp
 8001cfe:	d2da      	bcs.n	8001cb6 <__gedf2+0x8a>
 8001d00:	4665      	mov	r5, ip
 8001d02:	4268      	negs	r0, r5
 8001d04:	4168      	adcs	r0, r5
 8001d06:	4240      	negs	r0, r0
 8001d08:	2301      	movs	r3, #1
 8001d0a:	4318      	orrs	r0, r3
 8001d0c:	e7d3      	b.n	8001cb6 <__gedf2+0x8a>
 8001d0e:	4662      	mov	r2, ip
 8001d10:	4250      	negs	r0, r2
 8001d12:	2301      	movs	r3, #1
 8001d14:	4318      	orrs	r0, r3
 8001d16:	e7ce      	b.n	8001cb6 <__gedf2+0x8a>
 8001d18:	45d0      	cmp	r8, sl
 8001d1a:	d8f8      	bhi.n	8001d0e <__gedf2+0xe2>
 8001d1c:	2000      	movs	r0, #0
 8001d1e:	45d0      	cmp	r8, sl
 8001d20:	d3ee      	bcc.n	8001d00 <__gedf2+0xd4>
 8001d22:	e7c8      	b.n	8001cb6 <__gedf2+0x8a>
 8001d24:	000007ff 	.word	0x000007ff

08001d28 <__ledf2>:
 8001d28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d2a:	4656      	mov	r6, sl
 8001d2c:	464d      	mov	r5, r9
 8001d2e:	4644      	mov	r4, r8
 8001d30:	465f      	mov	r7, fp
 8001d32:	b4f0      	push	{r4, r5, r6, r7}
 8001d34:	1c0d      	adds	r5, r1, #0
 8001d36:	b083      	sub	sp, #12
 8001d38:	1c04      	adds	r4, r0, #0
 8001d3a:	9001      	str	r0, [sp, #4]
 8001d3c:	0fe8      	lsrs	r0, r5, #31
 8001d3e:	4681      	mov	r9, r0
 8001d40:	0318      	lsls	r0, r3, #12
 8001d42:	030f      	lsls	r7, r1, #12
 8001d44:	0b00      	lsrs	r0, r0, #12
 8001d46:	0b3f      	lsrs	r7, r7, #12
 8001d48:	4684      	mov	ip, r0
 8001d4a:	4835      	ldr	r0, [pc, #212]	; (8001e20 <__ledf2+0xf8>)
 8001d4c:	9700      	str	r7, [sp, #0]
 8001d4e:	0049      	lsls	r1, r1, #1
 8001d50:	005e      	lsls	r6, r3, #1
 8001d52:	0fdf      	lsrs	r7, r3, #31
 8001d54:	0d49      	lsrs	r1, r1, #21
 8001d56:	4692      	mov	sl, r2
 8001d58:	0d76      	lsrs	r6, r6, #21
 8001d5a:	46b8      	mov	r8, r7
 8001d5c:	4281      	cmp	r1, r0
 8001d5e:	d034      	beq.n	8001dca <__ledf2+0xa2>
 8001d60:	482f      	ldr	r0, [pc, #188]	; (8001e20 <__ledf2+0xf8>)
 8001d62:	4286      	cmp	r6, r0
 8001d64:	d036      	beq.n	8001dd4 <__ledf2+0xac>
 8001d66:	2900      	cmp	r1, #0
 8001d68:	d018      	beq.n	8001d9c <__ledf2+0x74>
 8001d6a:	2e00      	cmp	r6, #0
 8001d6c:	d11f      	bne.n	8001dae <__ledf2+0x86>
 8001d6e:	1c34      	adds	r4, r6, #0
 8001d70:	4667      	mov	r7, ip
 8001d72:	433a      	orrs	r2, r7
 8001d74:	4253      	negs	r3, r2
 8001d76:	4153      	adcs	r3, r2
 8001d78:	2c00      	cmp	r4, #0
 8001d7a:	d01f      	beq.n	8001dbc <__ledf2+0x94>
 8001d7c:	2000      	movs	r0, #0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d105      	bne.n	8001d8e <__ledf2+0x66>
 8001d82:	4642      	mov	r2, r8
 8001d84:	4250      	negs	r0, r2
 8001d86:	4150      	adcs	r0, r2
 8001d88:	4240      	negs	r0, r0
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	4318      	orrs	r0, r3
 8001d8e:	b003      	add	sp, #12
 8001d90:	bc3c      	pop	{r2, r3, r4, r5}
 8001d92:	4690      	mov	r8, r2
 8001d94:	4699      	mov	r9, r3
 8001d96:	46a2      	mov	sl, r4
 8001d98:	46ab      	mov	fp, r5
 8001d9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d9c:	9800      	ldr	r0, [sp, #0]
 8001d9e:	4304      	orrs	r4, r0
 8001da0:	4260      	negs	r0, r4
 8001da2:	4160      	adcs	r0, r4
 8001da4:	1c04      	adds	r4, r0, #0
 8001da6:	2e00      	cmp	r6, #0
 8001da8:	d0e2      	beq.n	8001d70 <__ledf2+0x48>
 8001daa:	2800      	cmp	r0, #0
 8001dac:	d1e9      	bne.n	8001d82 <__ledf2+0x5a>
 8001dae:	45c1      	cmp	r9, r8
 8001db0:	d015      	beq.n	8001dde <__ledf2+0xb6>
 8001db2:	464f      	mov	r7, r9
 8001db4:	4278      	negs	r0, r7
 8001db6:	2301      	movs	r3, #1
 8001db8:	4318      	orrs	r0, r3
 8001dba:	e7e8      	b.n	8001d8e <__ledf2+0x66>
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d0f6      	beq.n	8001dae <__ledf2+0x86>
 8001dc0:	464b      	mov	r3, r9
 8001dc2:	4258      	negs	r0, r3
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	4318      	orrs	r0, r3
 8001dc8:	e7e1      	b.n	8001d8e <__ledf2+0x66>
 8001dca:	9f00      	ldr	r7, [sp, #0]
 8001dcc:	2002      	movs	r0, #2
 8001dce:	4327      	orrs	r7, r4
 8001dd0:	d1dd      	bne.n	8001d8e <__ledf2+0x66>
 8001dd2:	e7c5      	b.n	8001d60 <__ledf2+0x38>
 8001dd4:	4667      	mov	r7, ip
 8001dd6:	2002      	movs	r0, #2
 8001dd8:	4317      	orrs	r7, r2
 8001dda:	d1d8      	bne.n	8001d8e <__ledf2+0x66>
 8001ddc:	e7c3      	b.n	8001d66 <__ledf2+0x3e>
 8001dde:	42b1      	cmp	r1, r6
 8001de0:	dd04      	ble.n	8001dec <__ledf2+0xc4>
 8001de2:	464a      	mov	r2, r9
 8001de4:	4250      	negs	r0, r2
 8001de6:	2301      	movs	r3, #1
 8001de8:	4318      	orrs	r0, r3
 8001dea:	e7d0      	b.n	8001d8e <__ledf2+0x66>
 8001dec:	42b1      	cmp	r1, r6
 8001dee:	db07      	blt.n	8001e00 <__ledf2+0xd8>
 8001df0:	9800      	ldr	r0, [sp, #0]
 8001df2:	4560      	cmp	r0, ip
 8001df4:	d8e4      	bhi.n	8001dc0 <__ledf2+0x98>
 8001df6:	d00a      	beq.n	8001e0e <__ledf2+0xe6>
 8001df8:	9f00      	ldr	r7, [sp, #0]
 8001dfa:	2000      	movs	r0, #0
 8001dfc:	4567      	cmp	r7, ip
 8001dfe:	d2c6      	bcs.n	8001d8e <__ledf2+0x66>
 8001e00:	464f      	mov	r7, r9
 8001e02:	4278      	negs	r0, r7
 8001e04:	4178      	adcs	r0, r7
 8001e06:	4240      	negs	r0, r0
 8001e08:	2301      	movs	r3, #1
 8001e0a:	4318      	orrs	r0, r3
 8001e0c:	e7bf      	b.n	8001d8e <__ledf2+0x66>
 8001e0e:	9a01      	ldr	r2, [sp, #4]
 8001e10:	4552      	cmp	r2, sl
 8001e12:	d8d5      	bhi.n	8001dc0 <__ledf2+0x98>
 8001e14:	9a01      	ldr	r2, [sp, #4]
 8001e16:	2000      	movs	r0, #0
 8001e18:	4552      	cmp	r2, sl
 8001e1a:	d3f1      	bcc.n	8001e00 <__ledf2+0xd8>
 8001e1c:	e7b7      	b.n	8001d8e <__ledf2+0x66>
 8001e1e:	46c0      	nop			; (mov r8, r8)
 8001e20:	000007ff 	.word	0x000007ff

08001e24 <__aeabi_dmul>:
 8001e24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e26:	4656      	mov	r6, sl
 8001e28:	4644      	mov	r4, r8
 8001e2a:	465f      	mov	r7, fp
 8001e2c:	464d      	mov	r5, r9
 8001e2e:	b4f0      	push	{r4, r5, r6, r7}
 8001e30:	1c1f      	adds	r7, r3, #0
 8001e32:	030b      	lsls	r3, r1, #12
 8001e34:	0b1b      	lsrs	r3, r3, #12
 8001e36:	469a      	mov	sl, r3
 8001e38:	004b      	lsls	r3, r1, #1
 8001e3a:	b087      	sub	sp, #28
 8001e3c:	1c04      	adds	r4, r0, #0
 8001e3e:	4680      	mov	r8, r0
 8001e40:	0d5b      	lsrs	r3, r3, #21
 8001e42:	0fc8      	lsrs	r0, r1, #31
 8001e44:	1c16      	adds	r6, r2, #0
 8001e46:	9302      	str	r3, [sp, #8]
 8001e48:	4681      	mov	r9, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d068      	beq.n	8001f20 <__aeabi_dmul+0xfc>
 8001e4e:	4b69      	ldr	r3, [pc, #420]	; (8001ff4 <__aeabi_dmul+0x1d0>)
 8001e50:	9902      	ldr	r1, [sp, #8]
 8001e52:	4299      	cmp	r1, r3
 8001e54:	d032      	beq.n	8001ebc <__aeabi_dmul+0x98>
 8001e56:	2280      	movs	r2, #128	; 0x80
 8001e58:	4653      	mov	r3, sl
 8001e5a:	0352      	lsls	r2, r2, #13
 8001e5c:	431a      	orrs	r2, r3
 8001e5e:	00d2      	lsls	r2, r2, #3
 8001e60:	0f63      	lsrs	r3, r4, #29
 8001e62:	431a      	orrs	r2, r3
 8001e64:	4692      	mov	sl, r2
 8001e66:	4a64      	ldr	r2, [pc, #400]	; (8001ff8 <__aeabi_dmul+0x1d4>)
 8001e68:	00e0      	lsls	r0, r4, #3
 8001e6a:	1889      	adds	r1, r1, r2
 8001e6c:	4680      	mov	r8, r0
 8001e6e:	9102      	str	r1, [sp, #8]
 8001e70:	2400      	movs	r4, #0
 8001e72:	2500      	movs	r5, #0
 8001e74:	033b      	lsls	r3, r7, #12
 8001e76:	0b1b      	lsrs	r3, r3, #12
 8001e78:	469b      	mov	fp, r3
 8001e7a:	0078      	lsls	r0, r7, #1
 8001e7c:	0ffb      	lsrs	r3, r7, #31
 8001e7e:	1c32      	adds	r2, r6, #0
 8001e80:	0d40      	lsrs	r0, r0, #21
 8001e82:	9303      	str	r3, [sp, #12]
 8001e84:	d100      	bne.n	8001e88 <__aeabi_dmul+0x64>
 8001e86:	e075      	b.n	8001f74 <__aeabi_dmul+0x150>
 8001e88:	4b5a      	ldr	r3, [pc, #360]	; (8001ff4 <__aeabi_dmul+0x1d0>)
 8001e8a:	4298      	cmp	r0, r3
 8001e8c:	d069      	beq.n	8001f62 <__aeabi_dmul+0x13e>
 8001e8e:	2280      	movs	r2, #128	; 0x80
 8001e90:	4659      	mov	r1, fp
 8001e92:	0352      	lsls	r2, r2, #13
 8001e94:	430a      	orrs	r2, r1
 8001e96:	0f73      	lsrs	r3, r6, #29
 8001e98:	00d2      	lsls	r2, r2, #3
 8001e9a:	431a      	orrs	r2, r3
 8001e9c:	4b56      	ldr	r3, [pc, #344]	; (8001ff8 <__aeabi_dmul+0x1d4>)
 8001e9e:	4693      	mov	fp, r2
 8001ea0:	18c0      	adds	r0, r0, r3
 8001ea2:	00f2      	lsls	r2, r6, #3
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	9903      	ldr	r1, [sp, #12]
 8001ea8:	464e      	mov	r6, r9
 8001eaa:	4071      	eors	r1, r6
 8001eac:	431c      	orrs	r4, r3
 8001eae:	2c0f      	cmp	r4, #15
 8001eb0:	d900      	bls.n	8001eb4 <__aeabi_dmul+0x90>
 8001eb2:	e0a9      	b.n	8002008 <__aeabi_dmul+0x1e4>
 8001eb4:	4e51      	ldr	r6, [pc, #324]	; (8001ffc <__aeabi_dmul+0x1d8>)
 8001eb6:	00a4      	lsls	r4, r4, #2
 8001eb8:	5934      	ldr	r4, [r6, r4]
 8001eba:	46a7      	mov	pc, r4
 8001ebc:	4653      	mov	r3, sl
 8001ebe:	431c      	orrs	r4, r3
 8001ec0:	d000      	beq.n	8001ec4 <__aeabi_dmul+0xa0>
 8001ec2:	e087      	b.n	8001fd4 <__aeabi_dmul+0x1b0>
 8001ec4:	2500      	movs	r5, #0
 8001ec6:	46aa      	mov	sl, r5
 8001ec8:	46a8      	mov	r8, r5
 8001eca:	2408      	movs	r4, #8
 8001ecc:	2502      	movs	r5, #2
 8001ece:	e7d1      	b.n	8001e74 <__aeabi_dmul+0x50>
 8001ed0:	4649      	mov	r1, r9
 8001ed2:	2d02      	cmp	r5, #2
 8001ed4:	d06c      	beq.n	8001fb0 <__aeabi_dmul+0x18c>
 8001ed6:	2d03      	cmp	r5, #3
 8001ed8:	d100      	bne.n	8001edc <__aeabi_dmul+0xb8>
 8001eda:	e217      	b.n	800230c <__aeabi_dmul+0x4e8>
 8001edc:	2d01      	cmp	r5, #1
 8001ede:	d000      	beq.n	8001ee2 <__aeabi_dmul+0xbe>
 8001ee0:	e158      	b.n	8002194 <__aeabi_dmul+0x370>
 8001ee2:	400d      	ands	r5, r1
 8001ee4:	b2ed      	uxtb	r5, r5
 8001ee6:	2400      	movs	r4, #0
 8001ee8:	46a9      	mov	r9, r5
 8001eea:	2300      	movs	r3, #0
 8001eec:	46a0      	mov	r8, r4
 8001eee:	2000      	movs	r0, #0
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	0325      	lsls	r5, r4, #12
 8001ef4:	0d0a      	lsrs	r2, r1, #20
 8001ef6:	051c      	lsls	r4, r3, #20
 8001ef8:	0b2d      	lsrs	r5, r5, #12
 8001efa:	0512      	lsls	r2, r2, #20
 8001efc:	4b40      	ldr	r3, [pc, #256]	; (8002000 <__aeabi_dmul+0x1dc>)
 8001efe:	432a      	orrs	r2, r5
 8001f00:	4013      	ands	r3, r2
 8001f02:	4323      	orrs	r3, r4
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	464c      	mov	r4, r9
 8001f08:	085b      	lsrs	r3, r3, #1
 8001f0a:	07e2      	lsls	r2, r4, #31
 8001f0c:	1c19      	adds	r1, r3, #0
 8001f0e:	4640      	mov	r0, r8
 8001f10:	4311      	orrs	r1, r2
 8001f12:	b007      	add	sp, #28
 8001f14:	bc3c      	pop	{r2, r3, r4, r5}
 8001f16:	4690      	mov	r8, r2
 8001f18:	4699      	mov	r9, r3
 8001f1a:	46a2      	mov	sl, r4
 8001f1c:	46ab      	mov	fp, r5
 8001f1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f20:	4653      	mov	r3, sl
 8001f22:	4323      	orrs	r3, r4
 8001f24:	d050      	beq.n	8001fc8 <__aeabi_dmul+0x1a4>
 8001f26:	4653      	mov	r3, sl
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d100      	bne.n	8001f2e <__aeabi_dmul+0x10a>
 8001f2c:	e184      	b.n	8002238 <__aeabi_dmul+0x414>
 8001f2e:	4650      	mov	r0, sl
 8001f30:	f000 feb6 	bl	8002ca0 <__clzsi2>
 8001f34:	1e03      	subs	r3, r0, #0
 8001f36:	2b27      	cmp	r3, #39	; 0x27
 8001f38:	dd00      	ble.n	8001f3c <__aeabi_dmul+0x118>
 8001f3a:	e176      	b.n	800222a <__aeabi_dmul+0x406>
 8001f3c:	2128      	movs	r1, #40	; 0x28
 8001f3e:	1a0d      	subs	r5, r1, r0
 8001f40:	1c21      	adds	r1, r4, #0
 8001f42:	3b08      	subs	r3, #8
 8001f44:	4652      	mov	r2, sl
 8001f46:	40e9      	lsrs	r1, r5
 8001f48:	409a      	lsls	r2, r3
 8001f4a:	1c0d      	adds	r5, r1, #0
 8001f4c:	4315      	orrs	r5, r2
 8001f4e:	1c22      	adds	r2, r4, #0
 8001f50:	409a      	lsls	r2, r3
 8001f52:	46aa      	mov	sl, r5
 8001f54:	4690      	mov	r8, r2
 8001f56:	4b2b      	ldr	r3, [pc, #172]	; (8002004 <__aeabi_dmul+0x1e0>)
 8001f58:	2400      	movs	r4, #0
 8001f5a:	1a1b      	subs	r3, r3, r0
 8001f5c:	9302      	str	r3, [sp, #8]
 8001f5e:	2500      	movs	r5, #0
 8001f60:	e788      	b.n	8001e74 <__aeabi_dmul+0x50>
 8001f62:	465b      	mov	r3, fp
 8001f64:	431e      	orrs	r6, r3
 8001f66:	2303      	movs	r3, #3
 8001f68:	2e00      	cmp	r6, #0
 8001f6a:	d19c      	bne.n	8001ea6 <__aeabi_dmul+0x82>
 8001f6c:	46b3      	mov	fp, r6
 8001f6e:	2200      	movs	r2, #0
 8001f70:	2302      	movs	r3, #2
 8001f72:	e798      	b.n	8001ea6 <__aeabi_dmul+0x82>
 8001f74:	465b      	mov	r3, fp
 8001f76:	4333      	orrs	r3, r6
 8001f78:	d021      	beq.n	8001fbe <__aeabi_dmul+0x19a>
 8001f7a:	4658      	mov	r0, fp
 8001f7c:	2800      	cmp	r0, #0
 8001f7e:	d100      	bne.n	8001f82 <__aeabi_dmul+0x15e>
 8001f80:	e14e      	b.n	8002220 <__aeabi_dmul+0x3fc>
 8001f82:	f000 fe8d 	bl	8002ca0 <__clzsi2>
 8001f86:	2827      	cmp	r0, #39	; 0x27
 8001f88:	dd00      	ble.n	8001f8c <__aeabi_dmul+0x168>
 8001f8a:	e142      	b.n	8002212 <__aeabi_dmul+0x3ee>
 8001f8c:	2128      	movs	r1, #40	; 0x28
 8001f8e:	1a0f      	subs	r7, r1, r0
 8001f90:	1c02      	adds	r2, r0, #0
 8001f92:	1c31      	adds	r1, r6, #0
 8001f94:	3a08      	subs	r2, #8
 8001f96:	465b      	mov	r3, fp
 8001f98:	40f9      	lsrs	r1, r7
 8001f9a:	4093      	lsls	r3, r2
 8001f9c:	1c0f      	adds	r7, r1, #0
 8001f9e:	431f      	orrs	r7, r3
 8001fa0:	1c33      	adds	r3, r6, #0
 8001fa2:	4093      	lsls	r3, r2
 8001fa4:	46bb      	mov	fp, r7
 8001fa6:	1c1a      	adds	r2, r3, #0
 8001fa8:	4b16      	ldr	r3, [pc, #88]	; (8002004 <__aeabi_dmul+0x1e0>)
 8001faa:	1a18      	subs	r0, r3, r0
 8001fac:	2300      	movs	r3, #0
 8001fae:	e77a      	b.n	8001ea6 <__aeabi_dmul+0x82>
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	400b      	ands	r3, r1
 8001fb4:	2400      	movs	r4, #0
 8001fb6:	4699      	mov	r9, r3
 8001fb8:	46a0      	mov	r8, r4
 8001fba:	4b0e      	ldr	r3, [pc, #56]	; (8001ff4 <__aeabi_dmul+0x1d0>)
 8001fbc:	e797      	b.n	8001eee <__aeabi_dmul+0xca>
 8001fbe:	2700      	movs	r7, #0
 8001fc0:	46bb      	mov	fp, r7
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e76e      	b.n	8001ea6 <__aeabi_dmul+0x82>
 8001fc8:	2100      	movs	r1, #0
 8001fca:	2404      	movs	r4, #4
 8001fcc:	468a      	mov	sl, r1
 8001fce:	4688      	mov	r8, r1
 8001fd0:	2501      	movs	r5, #1
 8001fd2:	e74f      	b.n	8001e74 <__aeabi_dmul+0x50>
 8001fd4:	240c      	movs	r4, #12
 8001fd6:	2503      	movs	r5, #3
 8001fd8:	e74c      	b.n	8001e74 <__aeabi_dmul+0x50>
 8001fda:	2500      	movs	r5, #0
 8001fdc:	2480      	movs	r4, #128	; 0x80
 8001fde:	46a9      	mov	r9, r5
 8001fe0:	0324      	lsls	r4, r4, #12
 8001fe2:	46a8      	mov	r8, r5
 8001fe4:	4b03      	ldr	r3, [pc, #12]	; (8001ff4 <__aeabi_dmul+0x1d0>)
 8001fe6:	e782      	b.n	8001eee <__aeabi_dmul+0xca>
 8001fe8:	46da      	mov	sl, fp
 8001fea:	4690      	mov	r8, r2
 8001fec:	9903      	ldr	r1, [sp, #12]
 8001fee:	1c1d      	adds	r5, r3, #0
 8001ff0:	e76f      	b.n	8001ed2 <__aeabi_dmul+0xae>
 8001ff2:	46c0      	nop			; (mov r8, r8)
 8001ff4:	000007ff 	.word	0x000007ff
 8001ff8:	fffffc01 	.word	0xfffffc01
 8001ffc:	0800bd70 	.word	0x0800bd70
 8002000:	800fffff 	.word	0x800fffff
 8002004:	fffffc0d 	.word	0xfffffc0d
 8002008:	9f02      	ldr	r7, [sp, #8]
 800200a:	0c16      	lsrs	r6, r2, #16
 800200c:	1838      	adds	r0, r7, r0
 800200e:	9004      	str	r0, [sp, #16]
 8002010:	4640      	mov	r0, r8
 8002012:	0c07      	lsrs	r7, r0, #16
 8002014:	0400      	lsls	r0, r0, #16
 8002016:	0c00      	lsrs	r0, r0, #16
 8002018:	0412      	lsls	r2, r2, #16
 800201a:	0c12      	lsrs	r2, r2, #16
 800201c:	1c03      	adds	r3, r0, #0
 800201e:	4353      	muls	r3, r2
 8002020:	1c04      	adds	r4, r0, #0
 8002022:	1c3d      	adds	r5, r7, #0
 8002024:	4374      	muls	r4, r6
 8002026:	4355      	muls	r5, r2
 8002028:	4698      	mov	r8, r3
 800202a:	1c3b      	adds	r3, r7, #0
 800202c:	4373      	muls	r3, r6
 800202e:	1964      	adds	r4, r4, r5
 8002030:	46a4      	mov	ip, r4
 8002032:	4644      	mov	r4, r8
 8002034:	9302      	str	r3, [sp, #8]
 8002036:	0c23      	lsrs	r3, r4, #16
 8002038:	4463      	add	r3, ip
 800203a:	429d      	cmp	r5, r3
 800203c:	d904      	bls.n	8002048 <__aeabi_dmul+0x224>
 800203e:	9d02      	ldr	r5, [sp, #8]
 8002040:	2480      	movs	r4, #128	; 0x80
 8002042:	0264      	lsls	r4, r4, #9
 8002044:	192d      	adds	r5, r5, r4
 8002046:	9502      	str	r5, [sp, #8]
 8002048:	0c1d      	lsrs	r5, r3, #16
 800204a:	9503      	str	r5, [sp, #12]
 800204c:	4645      	mov	r5, r8
 800204e:	042c      	lsls	r4, r5, #16
 8002050:	041b      	lsls	r3, r3, #16
 8002052:	0c24      	lsrs	r4, r4, #16
 8002054:	191c      	adds	r4, r3, r4
 8002056:	9405      	str	r4, [sp, #20]
 8002058:	465c      	mov	r4, fp
 800205a:	0c23      	lsrs	r3, r4, #16
 800205c:	1c05      	adds	r5, r0, #0
 800205e:	4358      	muls	r0, r3
 8002060:	0424      	lsls	r4, r4, #16
 8002062:	0c24      	lsrs	r4, r4, #16
 8002064:	4684      	mov	ip, r0
 8002066:	1c38      	adds	r0, r7, #0
 8002068:	4360      	muls	r0, r4
 800206a:	4365      	muls	r5, r4
 800206c:	435f      	muls	r7, r3
 800206e:	4681      	mov	r9, r0
 8002070:	44cc      	add	ip, r9
 8002072:	0c28      	lsrs	r0, r5, #16
 8002074:	4460      	add	r0, ip
 8002076:	46bb      	mov	fp, r7
 8002078:	4581      	cmp	r9, r0
 800207a:	d902      	bls.n	8002082 <__aeabi_dmul+0x25e>
 800207c:	2780      	movs	r7, #128	; 0x80
 800207e:	027f      	lsls	r7, r7, #9
 8002080:	44bb      	add	fp, r7
 8002082:	042d      	lsls	r5, r5, #16
 8002084:	0c07      	lsrs	r7, r0, #16
 8002086:	0c2d      	lsrs	r5, r5, #16
 8002088:	0400      	lsls	r0, r0, #16
 800208a:	1940      	adds	r0, r0, r5
 800208c:	4655      	mov	r5, sl
 800208e:	46bc      	mov	ip, r7
 8002090:	042f      	lsls	r7, r5, #16
 8002092:	44e3      	add	fp, ip
 8002094:	4684      	mov	ip, r0
 8002096:	0c28      	lsrs	r0, r5, #16
 8002098:	0c3d      	lsrs	r5, r7, #16
 800209a:	1c2f      	adds	r7, r5, #0
 800209c:	4357      	muls	r7, r2
 800209e:	46b8      	mov	r8, r7
 80020a0:	1c2f      	adds	r7, r5, #0
 80020a2:	4377      	muls	r7, r6
 80020a4:	4342      	muls	r2, r0
 80020a6:	46b9      	mov	r9, r7
 80020a8:	4647      	mov	r7, r8
 80020aa:	0c3f      	lsrs	r7, r7, #16
 80020ac:	4491      	add	r9, r2
 80020ae:	46ba      	mov	sl, r7
 80020b0:	44d1      	add	r9, sl
 80020b2:	4346      	muls	r6, r0
 80020b4:	454a      	cmp	r2, r9
 80020b6:	d902      	bls.n	80020be <__aeabi_dmul+0x29a>
 80020b8:	2280      	movs	r2, #128	; 0x80
 80020ba:	0252      	lsls	r2, r2, #9
 80020bc:	18b6      	adds	r6, r6, r2
 80020be:	464f      	mov	r7, r9
 80020c0:	0c3a      	lsrs	r2, r7, #16
 80020c2:	18b6      	adds	r6, r6, r2
 80020c4:	043a      	lsls	r2, r7, #16
 80020c6:	4647      	mov	r7, r8
 80020c8:	043f      	lsls	r7, r7, #16
 80020ca:	0c3f      	lsrs	r7, r7, #16
 80020cc:	46b8      	mov	r8, r7
 80020ce:	1c2f      	adds	r7, r5, #0
 80020d0:	4367      	muls	r7, r4
 80020d2:	435d      	muls	r5, r3
 80020d4:	4344      	muls	r4, r0
 80020d6:	4358      	muls	r0, r3
 80020d8:	1965      	adds	r5, r4, r5
 80020da:	9001      	str	r0, [sp, #4]
 80020dc:	0c38      	lsrs	r0, r7, #16
 80020de:	182d      	adds	r5, r5, r0
 80020e0:	4442      	add	r2, r8
 80020e2:	46b8      	mov	r8, r7
 80020e4:	42ac      	cmp	r4, r5
 80020e6:	d904      	bls.n	80020f2 <__aeabi_dmul+0x2ce>
 80020e8:	9801      	ldr	r0, [sp, #4]
 80020ea:	2380      	movs	r3, #128	; 0x80
 80020ec:	025b      	lsls	r3, r3, #9
 80020ee:	18c0      	adds	r0, r0, r3
 80020f0:	9001      	str	r0, [sp, #4]
 80020f2:	9c03      	ldr	r4, [sp, #12]
 80020f4:	9f02      	ldr	r7, [sp, #8]
 80020f6:	1c20      	adds	r0, r4, #0
 80020f8:	4460      	add	r0, ip
 80020fa:	19c0      	adds	r0, r0, r7
 80020fc:	4560      	cmp	r0, ip
 80020fe:	41a4      	sbcs	r4, r4
 8002100:	4647      	mov	r7, r8
 8002102:	4264      	negs	r4, r4
 8002104:	46a4      	mov	ip, r4
 8002106:	042b      	lsls	r3, r5, #16
 8002108:	043c      	lsls	r4, r7, #16
 800210a:	4699      	mov	r9, r3
 800210c:	0c24      	lsrs	r4, r4, #16
 800210e:	444c      	add	r4, r9
 8002110:	46a0      	mov	r8, r4
 8002112:	44d8      	add	r8, fp
 8002114:	1880      	adds	r0, r0, r2
 8002116:	46c2      	mov	sl, r8
 8002118:	44e2      	add	sl, ip
 800211a:	4290      	cmp	r0, r2
 800211c:	4192      	sbcs	r2, r2
 800211e:	4657      	mov	r7, sl
 8002120:	4252      	negs	r2, r2
 8002122:	4691      	mov	r9, r2
 8002124:	19f2      	adds	r2, r6, r7
 8002126:	45e2      	cmp	sl, ip
 8002128:	41bf      	sbcs	r7, r7
 800212a:	427f      	negs	r7, r7
 800212c:	464b      	mov	r3, r9
 800212e:	46bc      	mov	ip, r7
 8002130:	45d8      	cmp	r8, fp
 8002132:	41bf      	sbcs	r7, r7
 8002134:	18d4      	adds	r4, r2, r3
 8002136:	427f      	negs	r7, r7
 8002138:	4663      	mov	r3, ip
 800213a:	431f      	orrs	r7, r3
 800213c:	0c2d      	lsrs	r5, r5, #16
 800213e:	197f      	adds	r7, r7, r5
 8002140:	42b2      	cmp	r2, r6
 8002142:	4192      	sbcs	r2, r2
 8002144:	454c      	cmp	r4, r9
 8002146:	41ad      	sbcs	r5, r5
 8002148:	4252      	negs	r2, r2
 800214a:	426d      	negs	r5, r5
 800214c:	4315      	orrs	r5, r2
 800214e:	9e01      	ldr	r6, [sp, #4]
 8002150:	197d      	adds	r5, r7, r5
 8002152:	19ab      	adds	r3, r5, r6
 8002154:	0de2      	lsrs	r2, r4, #23
 8002156:	025b      	lsls	r3, r3, #9
 8002158:	9f05      	ldr	r7, [sp, #20]
 800215a:	4313      	orrs	r3, r2
 800215c:	0242      	lsls	r2, r0, #9
 800215e:	433a      	orrs	r2, r7
 8002160:	469a      	mov	sl, r3
 8002162:	1e53      	subs	r3, r2, #1
 8002164:	419a      	sbcs	r2, r3
 8002166:	0dc3      	lsrs	r3, r0, #23
 8002168:	1c10      	adds	r0, r2, #0
 800216a:	4318      	orrs	r0, r3
 800216c:	0264      	lsls	r4, r4, #9
 800216e:	4320      	orrs	r0, r4
 8002170:	4680      	mov	r8, r0
 8002172:	4650      	mov	r0, sl
 8002174:	01c0      	lsls	r0, r0, #7
 8002176:	d50d      	bpl.n	8002194 <__aeabi_dmul+0x370>
 8002178:	4645      	mov	r5, r8
 800217a:	2201      	movs	r2, #1
 800217c:	4656      	mov	r6, sl
 800217e:	9c04      	ldr	r4, [sp, #16]
 8002180:	086b      	lsrs	r3, r5, #1
 8002182:	402a      	ands	r2, r5
 8002184:	431a      	orrs	r2, r3
 8002186:	07f3      	lsls	r3, r6, #31
 8002188:	3401      	adds	r4, #1
 800218a:	431a      	orrs	r2, r3
 800218c:	0876      	lsrs	r6, r6, #1
 800218e:	9404      	str	r4, [sp, #16]
 8002190:	4690      	mov	r8, r2
 8002192:	46b2      	mov	sl, r6
 8002194:	9e04      	ldr	r6, [sp, #16]
 8002196:	4f63      	ldr	r7, [pc, #396]	; (8002324 <__aeabi_dmul+0x500>)
 8002198:	19f3      	adds	r3, r6, r7
 800219a:	2b00      	cmp	r3, #0
 800219c:	dd61      	ble.n	8002262 <__aeabi_dmul+0x43e>
 800219e:	4640      	mov	r0, r8
 80021a0:	0740      	lsls	r0, r0, #29
 80021a2:	d00b      	beq.n	80021bc <__aeabi_dmul+0x398>
 80021a4:	220f      	movs	r2, #15
 80021a6:	4644      	mov	r4, r8
 80021a8:	4022      	ands	r2, r4
 80021aa:	2a04      	cmp	r2, #4
 80021ac:	d006      	beq.n	80021bc <__aeabi_dmul+0x398>
 80021ae:	4642      	mov	r2, r8
 80021b0:	3204      	adds	r2, #4
 80021b2:	4542      	cmp	r2, r8
 80021b4:	4180      	sbcs	r0, r0
 80021b6:	4240      	negs	r0, r0
 80021b8:	4482      	add	sl, r0
 80021ba:	4690      	mov	r8, r2
 80021bc:	4655      	mov	r5, sl
 80021be:	01ed      	lsls	r5, r5, #7
 80021c0:	d507      	bpl.n	80021d2 <__aeabi_dmul+0x3ae>
 80021c2:	4b59      	ldr	r3, [pc, #356]	; (8002328 <__aeabi_dmul+0x504>)
 80021c4:	4656      	mov	r6, sl
 80021c6:	9f04      	ldr	r7, [sp, #16]
 80021c8:	2080      	movs	r0, #128	; 0x80
 80021ca:	401e      	ands	r6, r3
 80021cc:	00c0      	lsls	r0, r0, #3
 80021ce:	46b2      	mov	sl, r6
 80021d0:	183b      	adds	r3, r7, r0
 80021d2:	4a56      	ldr	r2, [pc, #344]	; (800232c <__aeabi_dmul+0x508>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	dd00      	ble.n	80021da <__aeabi_dmul+0x3b6>
 80021d8:	e6ea      	b.n	8001fb0 <__aeabi_dmul+0x18c>
 80021da:	4644      	mov	r4, r8
 80021dc:	4655      	mov	r5, sl
 80021de:	08e2      	lsrs	r2, r4, #3
 80021e0:	0768      	lsls	r0, r5, #29
 80021e2:	4310      	orrs	r0, r2
 80021e4:	2201      	movs	r2, #1
 80021e6:	026c      	lsls	r4, r5, #9
 80021e8:	055b      	lsls	r3, r3, #21
 80021ea:	400a      	ands	r2, r1
 80021ec:	4680      	mov	r8, r0
 80021ee:	0b24      	lsrs	r4, r4, #12
 80021f0:	0d5b      	lsrs	r3, r3, #21
 80021f2:	4691      	mov	r9, r2
 80021f4:	e67b      	b.n	8001eee <__aeabi_dmul+0xca>
 80021f6:	46da      	mov	sl, fp
 80021f8:	4690      	mov	r8, r2
 80021fa:	1c1d      	adds	r5, r3, #0
 80021fc:	e669      	b.n	8001ed2 <__aeabi_dmul+0xae>
 80021fe:	2480      	movs	r4, #128	; 0x80
 8002200:	0324      	lsls	r4, r4, #12
 8002202:	4657      	mov	r7, sl
 8002204:	4227      	tst	r7, r4
 8002206:	d11c      	bne.n	8002242 <__aeabi_dmul+0x41e>
 8002208:	433c      	orrs	r4, r7
 800220a:	0324      	lsls	r4, r4, #12
 800220c:	0b24      	lsrs	r4, r4, #12
 800220e:	4b48      	ldr	r3, [pc, #288]	; (8002330 <__aeabi_dmul+0x50c>)
 8002210:	e66d      	b.n	8001eee <__aeabi_dmul+0xca>
 8002212:	1c03      	adds	r3, r0, #0
 8002214:	3b28      	subs	r3, #40	; 0x28
 8002216:	1c31      	adds	r1, r6, #0
 8002218:	4099      	lsls	r1, r3
 800221a:	468b      	mov	fp, r1
 800221c:	2200      	movs	r2, #0
 800221e:	e6c3      	b.n	8001fa8 <__aeabi_dmul+0x184>
 8002220:	1c30      	adds	r0, r6, #0
 8002222:	f000 fd3d 	bl	8002ca0 <__clzsi2>
 8002226:	3020      	adds	r0, #32
 8002228:	e6ad      	b.n	8001f86 <__aeabi_dmul+0x162>
 800222a:	3b28      	subs	r3, #40	; 0x28
 800222c:	1c21      	adds	r1, r4, #0
 800222e:	4099      	lsls	r1, r3
 8002230:	2200      	movs	r2, #0
 8002232:	468a      	mov	sl, r1
 8002234:	4690      	mov	r8, r2
 8002236:	e68e      	b.n	8001f56 <__aeabi_dmul+0x132>
 8002238:	1c20      	adds	r0, r4, #0
 800223a:	f000 fd31 	bl	8002ca0 <__clzsi2>
 800223e:	3020      	adds	r0, #32
 8002240:	e678      	b.n	8001f34 <__aeabi_dmul+0x110>
 8002242:	4658      	mov	r0, fp
 8002244:	4220      	tst	r0, r4
 8002246:	d107      	bne.n	8002258 <__aeabi_dmul+0x434>
 8002248:	4304      	orrs	r4, r0
 800224a:	9903      	ldr	r1, [sp, #12]
 800224c:	0324      	lsls	r4, r4, #12
 800224e:	0b24      	lsrs	r4, r4, #12
 8002250:	4689      	mov	r9, r1
 8002252:	4690      	mov	r8, r2
 8002254:	4b36      	ldr	r3, [pc, #216]	; (8002330 <__aeabi_dmul+0x50c>)
 8002256:	e64a      	b.n	8001eee <__aeabi_dmul+0xca>
 8002258:	433c      	orrs	r4, r7
 800225a:	0324      	lsls	r4, r4, #12
 800225c:	0b24      	lsrs	r4, r4, #12
 800225e:	4b34      	ldr	r3, [pc, #208]	; (8002330 <__aeabi_dmul+0x50c>)
 8002260:	e645      	b.n	8001eee <__aeabi_dmul+0xca>
 8002262:	4b34      	ldr	r3, [pc, #208]	; (8002334 <__aeabi_dmul+0x510>)
 8002264:	9e04      	ldr	r6, [sp, #16]
 8002266:	1b9b      	subs	r3, r3, r6
 8002268:	2b38      	cmp	r3, #56	; 0x38
 800226a:	dd06      	ble.n	800227a <__aeabi_dmul+0x456>
 800226c:	2301      	movs	r3, #1
 800226e:	400b      	ands	r3, r1
 8002270:	2400      	movs	r4, #0
 8002272:	4699      	mov	r9, r3
 8002274:	46a0      	mov	r8, r4
 8002276:	2300      	movs	r3, #0
 8002278:	e639      	b.n	8001eee <__aeabi_dmul+0xca>
 800227a:	2b1f      	cmp	r3, #31
 800227c:	dc25      	bgt.n	80022ca <__aeabi_dmul+0x4a6>
 800227e:	9c04      	ldr	r4, [sp, #16]
 8002280:	4d2d      	ldr	r5, [pc, #180]	; (8002338 <__aeabi_dmul+0x514>)
 8002282:	4646      	mov	r6, r8
 8002284:	1960      	adds	r0, r4, r5
 8002286:	4652      	mov	r2, sl
 8002288:	4644      	mov	r4, r8
 800228a:	4086      	lsls	r6, r0
 800228c:	40dc      	lsrs	r4, r3
 800228e:	4082      	lsls	r2, r0
 8002290:	4657      	mov	r7, sl
 8002292:	1c30      	adds	r0, r6, #0
 8002294:	4322      	orrs	r2, r4
 8002296:	40df      	lsrs	r7, r3
 8002298:	1e44      	subs	r4, r0, #1
 800229a:	41a0      	sbcs	r0, r4
 800229c:	4302      	orrs	r2, r0
 800229e:	1c3b      	adds	r3, r7, #0
 80022a0:	0754      	lsls	r4, r2, #29
 80022a2:	d009      	beq.n	80022b8 <__aeabi_dmul+0x494>
 80022a4:	200f      	movs	r0, #15
 80022a6:	4010      	ands	r0, r2
 80022a8:	2804      	cmp	r0, #4
 80022aa:	d005      	beq.n	80022b8 <__aeabi_dmul+0x494>
 80022ac:	1d10      	adds	r0, r2, #4
 80022ae:	4290      	cmp	r0, r2
 80022b0:	4192      	sbcs	r2, r2
 80022b2:	4252      	negs	r2, r2
 80022b4:	189b      	adds	r3, r3, r2
 80022b6:	1c02      	adds	r2, r0, #0
 80022b8:	021d      	lsls	r5, r3, #8
 80022ba:	d51a      	bpl.n	80022f2 <__aeabi_dmul+0x4ce>
 80022bc:	2301      	movs	r3, #1
 80022be:	400b      	ands	r3, r1
 80022c0:	2400      	movs	r4, #0
 80022c2:	4699      	mov	r9, r3
 80022c4:	46a0      	mov	r8, r4
 80022c6:	2301      	movs	r3, #1
 80022c8:	e611      	b.n	8001eee <__aeabi_dmul+0xca>
 80022ca:	481c      	ldr	r0, [pc, #112]	; (800233c <__aeabi_dmul+0x518>)
 80022cc:	9c04      	ldr	r4, [sp, #16]
 80022ce:	4655      	mov	r5, sl
 80022d0:	1b00      	subs	r0, r0, r4
 80022d2:	40c5      	lsrs	r5, r0
 80022d4:	1c28      	adds	r0, r5, #0
 80022d6:	2b20      	cmp	r3, #32
 80022d8:	d016      	beq.n	8002308 <__aeabi_dmul+0x4e4>
 80022da:	4e19      	ldr	r6, [pc, #100]	; (8002340 <__aeabi_dmul+0x51c>)
 80022dc:	4657      	mov	r7, sl
 80022de:	19a2      	adds	r2, r4, r6
 80022e0:	4097      	lsls	r7, r2
 80022e2:	1c3a      	adds	r2, r7, #0
 80022e4:	4643      	mov	r3, r8
 80022e6:	431a      	orrs	r2, r3
 80022e8:	1e53      	subs	r3, r2, #1
 80022ea:	419a      	sbcs	r2, r3
 80022ec:	4302      	orrs	r2, r0
 80022ee:	2300      	movs	r3, #0
 80022f0:	e7d6      	b.n	80022a0 <__aeabi_dmul+0x47c>
 80022f2:	0758      	lsls	r0, r3, #29
 80022f4:	025b      	lsls	r3, r3, #9
 80022f6:	08d2      	lsrs	r2, r2, #3
 80022f8:	0b1c      	lsrs	r4, r3, #12
 80022fa:	2301      	movs	r3, #1
 80022fc:	400b      	ands	r3, r1
 80022fe:	4310      	orrs	r0, r2
 8002300:	4699      	mov	r9, r3
 8002302:	4680      	mov	r8, r0
 8002304:	2300      	movs	r3, #0
 8002306:	e5f2      	b.n	8001eee <__aeabi_dmul+0xca>
 8002308:	2200      	movs	r2, #0
 800230a:	e7eb      	b.n	80022e4 <__aeabi_dmul+0x4c0>
 800230c:	2480      	movs	r4, #128	; 0x80
 800230e:	0324      	lsls	r4, r4, #12
 8002310:	4650      	mov	r0, sl
 8002312:	2301      	movs	r3, #1
 8002314:	4304      	orrs	r4, r0
 8002316:	4019      	ands	r1, r3
 8002318:	0324      	lsls	r4, r4, #12
 800231a:	0b24      	lsrs	r4, r4, #12
 800231c:	4689      	mov	r9, r1
 800231e:	4b04      	ldr	r3, [pc, #16]	; (8002330 <__aeabi_dmul+0x50c>)
 8002320:	e5e5      	b.n	8001eee <__aeabi_dmul+0xca>
 8002322:	46c0      	nop			; (mov r8, r8)
 8002324:	000003ff 	.word	0x000003ff
 8002328:	feffffff 	.word	0xfeffffff
 800232c:	000007fe 	.word	0x000007fe
 8002330:	000007ff 	.word	0x000007ff
 8002334:	fffffc02 	.word	0xfffffc02
 8002338:	0000041e 	.word	0x0000041e
 800233c:	fffffbe2 	.word	0xfffffbe2
 8002340:	0000043e 	.word	0x0000043e

08002344 <__aeabi_dsub>:
 8002344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002346:	465f      	mov	r7, fp
 8002348:	4656      	mov	r6, sl
 800234a:	4644      	mov	r4, r8
 800234c:	464d      	mov	r5, r9
 800234e:	b4f0      	push	{r4, r5, r6, r7}
 8002350:	030c      	lsls	r4, r1, #12
 8002352:	004d      	lsls	r5, r1, #1
 8002354:	0fcf      	lsrs	r7, r1, #31
 8002356:	0a61      	lsrs	r1, r4, #9
 8002358:	0f44      	lsrs	r4, r0, #29
 800235a:	4321      	orrs	r1, r4
 800235c:	00c4      	lsls	r4, r0, #3
 800235e:	0318      	lsls	r0, r3, #12
 8002360:	0fde      	lsrs	r6, r3, #31
 8002362:	4680      	mov	r8, r0
 8002364:	46b4      	mov	ip, r6
 8002366:	4646      	mov	r6, r8
 8002368:	0058      	lsls	r0, r3, #1
 800236a:	0a76      	lsrs	r6, r6, #9
 800236c:	0f53      	lsrs	r3, r2, #29
 800236e:	4333      	orrs	r3, r6
 8002370:	00d6      	lsls	r6, r2, #3
 8002372:	4ac9      	ldr	r2, [pc, #804]	; (8002698 <__aeabi_dsub+0x354>)
 8002374:	0d6d      	lsrs	r5, r5, #21
 8002376:	46ba      	mov	sl, r7
 8002378:	0d40      	lsrs	r0, r0, #21
 800237a:	46b3      	mov	fp, r6
 800237c:	4290      	cmp	r0, r2
 800237e:	d100      	bne.n	8002382 <__aeabi_dsub+0x3e>
 8002380:	e0eb      	b.n	800255a <__aeabi_dsub+0x216>
 8002382:	4662      	mov	r2, ip
 8002384:	2601      	movs	r6, #1
 8002386:	4072      	eors	r2, r6
 8002388:	4694      	mov	ip, r2
 800238a:	4567      	cmp	r7, ip
 800238c:	d100      	bne.n	8002390 <__aeabi_dsub+0x4c>
 800238e:	e0a1      	b.n	80024d4 <__aeabi_dsub+0x190>
 8002390:	1a2f      	subs	r7, r5, r0
 8002392:	2f00      	cmp	r7, #0
 8002394:	dc00      	bgt.n	8002398 <__aeabi_dsub+0x54>
 8002396:	e108      	b.n	80025aa <__aeabi_dsub+0x266>
 8002398:	2800      	cmp	r0, #0
 800239a:	d13b      	bne.n	8002414 <__aeabi_dsub+0xd0>
 800239c:	4658      	mov	r0, fp
 800239e:	4318      	orrs	r0, r3
 80023a0:	d000      	beq.n	80023a4 <__aeabi_dsub+0x60>
 80023a2:	e0e8      	b.n	8002576 <__aeabi_dsub+0x232>
 80023a4:	0760      	lsls	r0, r4, #29
 80023a6:	d009      	beq.n	80023bc <__aeabi_dsub+0x78>
 80023a8:	230f      	movs	r3, #15
 80023aa:	4023      	ands	r3, r4
 80023ac:	2b04      	cmp	r3, #4
 80023ae:	d005      	beq.n	80023bc <__aeabi_dsub+0x78>
 80023b0:	1d23      	adds	r3, r4, #4
 80023b2:	42a3      	cmp	r3, r4
 80023b4:	41a4      	sbcs	r4, r4
 80023b6:	4264      	negs	r4, r4
 80023b8:	1909      	adds	r1, r1, r4
 80023ba:	1c1c      	adds	r4, r3, #0
 80023bc:	020a      	lsls	r2, r1, #8
 80023be:	d400      	bmi.n	80023c2 <__aeabi_dsub+0x7e>
 80023c0:	e079      	b.n	80024b6 <__aeabi_dsub+0x172>
 80023c2:	4bb5      	ldr	r3, [pc, #724]	; (8002698 <__aeabi_dsub+0x354>)
 80023c4:	1c6a      	adds	r2, r5, #1
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d100      	bne.n	80023cc <__aeabi_dsub+0x88>
 80023ca:	e109      	b.n	80025e0 <__aeabi_dsub+0x29c>
 80023cc:	4bb3      	ldr	r3, [pc, #716]	; (800269c <__aeabi_dsub+0x358>)
 80023ce:	08e4      	lsrs	r4, r4, #3
 80023d0:	4019      	ands	r1, r3
 80023d2:	0748      	lsls	r0, r1, #29
 80023d4:	4304      	orrs	r4, r0
 80023d6:	0249      	lsls	r1, r1, #9
 80023d8:	0552      	lsls	r2, r2, #21
 80023da:	2701      	movs	r7, #1
 80023dc:	4650      	mov	r0, sl
 80023de:	0b0b      	lsrs	r3, r1, #12
 80023e0:	0d52      	lsrs	r2, r2, #21
 80023e2:	4007      	ands	r7, r0
 80023e4:	2000      	movs	r0, #0
 80023e6:	2100      	movs	r1, #0
 80023e8:	031b      	lsls	r3, r3, #12
 80023ea:	1c20      	adds	r0, r4, #0
 80023ec:	0b1c      	lsrs	r4, r3, #12
 80023ee:	0d0b      	lsrs	r3, r1, #20
 80023f0:	051b      	lsls	r3, r3, #20
 80023f2:	4dab      	ldr	r5, [pc, #684]	; (80026a0 <__aeabi_dsub+0x35c>)
 80023f4:	4323      	orrs	r3, r4
 80023f6:	0552      	lsls	r2, r2, #21
 80023f8:	0852      	lsrs	r2, r2, #1
 80023fa:	401d      	ands	r5, r3
 80023fc:	4315      	orrs	r5, r2
 80023fe:	006d      	lsls	r5, r5, #1
 8002400:	086d      	lsrs	r5, r5, #1
 8002402:	07ff      	lsls	r7, r7, #31
 8002404:	1c29      	adds	r1, r5, #0
 8002406:	4339      	orrs	r1, r7
 8002408:	bc3c      	pop	{r2, r3, r4, r5}
 800240a:	4690      	mov	r8, r2
 800240c:	4699      	mov	r9, r3
 800240e:	46a2      	mov	sl, r4
 8002410:	46ab      	mov	fp, r5
 8002412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002414:	48a0      	ldr	r0, [pc, #640]	; (8002698 <__aeabi_dsub+0x354>)
 8002416:	4285      	cmp	r5, r0
 8002418:	d0c4      	beq.n	80023a4 <__aeabi_dsub+0x60>
 800241a:	2080      	movs	r0, #128	; 0x80
 800241c:	0400      	lsls	r0, r0, #16
 800241e:	4303      	orrs	r3, r0
 8002420:	2f38      	cmp	r7, #56	; 0x38
 8002422:	dd00      	ble.n	8002426 <__aeabi_dsub+0xe2>
 8002424:	e0f0      	b.n	8002608 <__aeabi_dsub+0x2c4>
 8002426:	2f1f      	cmp	r7, #31
 8002428:	dd00      	ble.n	800242c <__aeabi_dsub+0xe8>
 800242a:	e124      	b.n	8002676 <__aeabi_dsub+0x332>
 800242c:	2020      	movs	r0, #32
 800242e:	1bc0      	subs	r0, r0, r7
 8002430:	1c1a      	adds	r2, r3, #0
 8002432:	465e      	mov	r6, fp
 8002434:	4082      	lsls	r2, r0
 8002436:	40fe      	lsrs	r6, r7
 8002438:	4332      	orrs	r2, r6
 800243a:	4694      	mov	ip, r2
 800243c:	465a      	mov	r2, fp
 800243e:	4082      	lsls	r2, r0
 8002440:	1c10      	adds	r0, r2, #0
 8002442:	1e42      	subs	r2, r0, #1
 8002444:	4190      	sbcs	r0, r2
 8002446:	40fb      	lsrs	r3, r7
 8002448:	4662      	mov	r2, ip
 800244a:	4302      	orrs	r2, r0
 800244c:	1c1f      	adds	r7, r3, #0
 800244e:	1aa2      	subs	r2, r4, r2
 8002450:	4294      	cmp	r4, r2
 8002452:	41a4      	sbcs	r4, r4
 8002454:	4264      	negs	r4, r4
 8002456:	1bc9      	subs	r1, r1, r7
 8002458:	1b09      	subs	r1, r1, r4
 800245a:	1c14      	adds	r4, r2, #0
 800245c:	020a      	lsls	r2, r1, #8
 800245e:	d5a1      	bpl.n	80023a4 <__aeabi_dsub+0x60>
 8002460:	0249      	lsls	r1, r1, #9
 8002462:	0a4f      	lsrs	r7, r1, #9
 8002464:	2f00      	cmp	r7, #0
 8002466:	d100      	bne.n	800246a <__aeabi_dsub+0x126>
 8002468:	e0c9      	b.n	80025fe <__aeabi_dsub+0x2ba>
 800246a:	1c38      	adds	r0, r7, #0
 800246c:	f000 fc18 	bl	8002ca0 <__clzsi2>
 8002470:	1c02      	adds	r2, r0, #0
 8002472:	3a08      	subs	r2, #8
 8002474:	2a1f      	cmp	r2, #31
 8002476:	dd00      	ble.n	800247a <__aeabi_dsub+0x136>
 8002478:	e0bc      	b.n	80025f4 <__aeabi_dsub+0x2b0>
 800247a:	2128      	movs	r1, #40	; 0x28
 800247c:	1c23      	adds	r3, r4, #0
 800247e:	1a09      	subs	r1, r1, r0
 8002480:	4097      	lsls	r7, r2
 8002482:	40cb      	lsrs	r3, r1
 8002484:	431f      	orrs	r7, r3
 8002486:	4094      	lsls	r4, r2
 8002488:	4295      	cmp	r5, r2
 800248a:	dd00      	ble.n	800248e <__aeabi_dsub+0x14a>
 800248c:	e0ae      	b.n	80025ec <__aeabi_dsub+0x2a8>
 800248e:	1b55      	subs	r5, r2, r5
 8002490:	1c69      	adds	r1, r5, #1
 8002492:	291f      	cmp	r1, #31
 8002494:	dd00      	ble.n	8002498 <__aeabi_dsub+0x154>
 8002496:	e0dd      	b.n	8002654 <__aeabi_dsub+0x310>
 8002498:	221f      	movs	r2, #31
 800249a:	1b55      	subs	r5, r2, r5
 800249c:	1c3b      	adds	r3, r7, #0
 800249e:	1c22      	adds	r2, r4, #0
 80024a0:	40ab      	lsls	r3, r5
 80024a2:	40ca      	lsrs	r2, r1
 80024a4:	40ac      	lsls	r4, r5
 80024a6:	1e65      	subs	r5, r4, #1
 80024a8:	41ac      	sbcs	r4, r5
 80024aa:	4313      	orrs	r3, r2
 80024ac:	40cf      	lsrs	r7, r1
 80024ae:	431c      	orrs	r4, r3
 80024b0:	1c39      	adds	r1, r7, #0
 80024b2:	2500      	movs	r5, #0
 80024b4:	e776      	b.n	80023a4 <__aeabi_dsub+0x60>
 80024b6:	0748      	lsls	r0, r1, #29
 80024b8:	08e4      	lsrs	r4, r4, #3
 80024ba:	056a      	lsls	r2, r5, #21
 80024bc:	2701      	movs	r7, #1
 80024be:	4656      	mov	r6, sl
 80024c0:	08c9      	lsrs	r1, r1, #3
 80024c2:	0d52      	lsrs	r2, r2, #21
 80024c4:	4037      	ands	r7, r6
 80024c6:	4304      	orrs	r4, r0
 80024c8:	4b73      	ldr	r3, [pc, #460]	; (8002698 <__aeabi_dsub+0x354>)
 80024ca:	429d      	cmp	r5, r3
 80024cc:	d049      	beq.n	8002562 <__aeabi_dsub+0x21e>
 80024ce:	0309      	lsls	r1, r1, #12
 80024d0:	0b0b      	lsrs	r3, r1, #12
 80024d2:	e787      	b.n	80023e4 <__aeabi_dsub+0xa0>
 80024d4:	1a2a      	subs	r2, r5, r0
 80024d6:	4694      	mov	ip, r2
 80024d8:	2a00      	cmp	r2, #0
 80024da:	dc00      	bgt.n	80024de <__aeabi_dsub+0x19a>
 80024dc:	e09b      	b.n	8002616 <__aeabi_dsub+0x2d2>
 80024de:	2800      	cmp	r0, #0
 80024e0:	d055      	beq.n	800258e <__aeabi_dsub+0x24a>
 80024e2:	486d      	ldr	r0, [pc, #436]	; (8002698 <__aeabi_dsub+0x354>)
 80024e4:	4285      	cmp	r5, r0
 80024e6:	d100      	bne.n	80024ea <__aeabi_dsub+0x1a6>
 80024e8:	e75c      	b.n	80023a4 <__aeabi_dsub+0x60>
 80024ea:	2080      	movs	r0, #128	; 0x80
 80024ec:	0400      	lsls	r0, r0, #16
 80024ee:	4303      	orrs	r3, r0
 80024f0:	4660      	mov	r0, ip
 80024f2:	2838      	cmp	r0, #56	; 0x38
 80024f4:	dd00      	ble.n	80024f8 <__aeabi_dsub+0x1b4>
 80024f6:	e109      	b.n	800270c <__aeabi_dsub+0x3c8>
 80024f8:	281f      	cmp	r0, #31
 80024fa:	dd00      	ble.n	80024fe <__aeabi_dsub+0x1ba>
 80024fc:	e150      	b.n	80027a0 <__aeabi_dsub+0x45c>
 80024fe:	4662      	mov	r2, ip
 8002500:	2020      	movs	r0, #32
 8002502:	1a80      	subs	r0, r0, r2
 8002504:	1c1e      	adds	r6, r3, #0
 8002506:	4086      	lsls	r6, r0
 8002508:	46b1      	mov	r9, r6
 800250a:	465e      	mov	r6, fp
 800250c:	40d6      	lsrs	r6, r2
 800250e:	464a      	mov	r2, r9
 8002510:	4332      	orrs	r2, r6
 8002512:	465e      	mov	r6, fp
 8002514:	4086      	lsls	r6, r0
 8002516:	4690      	mov	r8, r2
 8002518:	1c30      	adds	r0, r6, #0
 800251a:	1e42      	subs	r2, r0, #1
 800251c:	4190      	sbcs	r0, r2
 800251e:	4642      	mov	r2, r8
 8002520:	4302      	orrs	r2, r0
 8002522:	4660      	mov	r0, ip
 8002524:	40c3      	lsrs	r3, r0
 8002526:	1912      	adds	r2, r2, r4
 8002528:	42a2      	cmp	r2, r4
 800252a:	41a4      	sbcs	r4, r4
 800252c:	4264      	negs	r4, r4
 800252e:	1859      	adds	r1, r3, r1
 8002530:	1909      	adds	r1, r1, r4
 8002532:	1c14      	adds	r4, r2, #0
 8002534:	0208      	lsls	r0, r1, #8
 8002536:	d400      	bmi.n	800253a <__aeabi_dsub+0x1f6>
 8002538:	e734      	b.n	80023a4 <__aeabi_dsub+0x60>
 800253a:	4b57      	ldr	r3, [pc, #348]	; (8002698 <__aeabi_dsub+0x354>)
 800253c:	3501      	adds	r5, #1
 800253e:	429d      	cmp	r5, r3
 8002540:	d100      	bne.n	8002544 <__aeabi_dsub+0x200>
 8002542:	e142      	b.n	80027ca <__aeabi_dsub+0x486>
 8002544:	4b55      	ldr	r3, [pc, #340]	; (800269c <__aeabi_dsub+0x358>)
 8002546:	0860      	lsrs	r0, r4, #1
 8002548:	4019      	ands	r1, r3
 800254a:	2301      	movs	r3, #1
 800254c:	4023      	ands	r3, r4
 800254e:	1c1c      	adds	r4, r3, #0
 8002550:	4304      	orrs	r4, r0
 8002552:	07cb      	lsls	r3, r1, #31
 8002554:	431c      	orrs	r4, r3
 8002556:	0849      	lsrs	r1, r1, #1
 8002558:	e724      	b.n	80023a4 <__aeabi_dsub+0x60>
 800255a:	431e      	orrs	r6, r3
 800255c:	d000      	beq.n	8002560 <__aeabi_dsub+0x21c>
 800255e:	e714      	b.n	800238a <__aeabi_dsub+0x46>
 8002560:	e70f      	b.n	8002382 <__aeabi_dsub+0x3e>
 8002562:	1c0b      	adds	r3, r1, #0
 8002564:	4323      	orrs	r3, r4
 8002566:	d100      	bne.n	800256a <__aeabi_dsub+0x226>
 8002568:	e1cf      	b.n	800290a <__aeabi_dsub+0x5c6>
 800256a:	2380      	movs	r3, #128	; 0x80
 800256c:	031b      	lsls	r3, r3, #12
 800256e:	430b      	orrs	r3, r1
 8002570:	031b      	lsls	r3, r3, #12
 8002572:	0b1b      	lsrs	r3, r3, #12
 8002574:	e736      	b.n	80023e4 <__aeabi_dsub+0xa0>
 8002576:	3f01      	subs	r7, #1
 8002578:	2f00      	cmp	r7, #0
 800257a:	d166      	bne.n	800264a <__aeabi_dsub+0x306>
 800257c:	465e      	mov	r6, fp
 800257e:	1ba2      	subs	r2, r4, r6
 8002580:	4294      	cmp	r4, r2
 8002582:	41a4      	sbcs	r4, r4
 8002584:	4264      	negs	r4, r4
 8002586:	1ac9      	subs	r1, r1, r3
 8002588:	1b09      	subs	r1, r1, r4
 800258a:	1c14      	adds	r4, r2, #0
 800258c:	e766      	b.n	800245c <__aeabi_dsub+0x118>
 800258e:	4658      	mov	r0, fp
 8002590:	4318      	orrs	r0, r3
 8002592:	d100      	bne.n	8002596 <__aeabi_dsub+0x252>
 8002594:	e706      	b.n	80023a4 <__aeabi_dsub+0x60>
 8002596:	2601      	movs	r6, #1
 8002598:	4276      	negs	r6, r6
 800259a:	44b4      	add	ip, r6
 800259c:	4660      	mov	r0, ip
 800259e:	2800      	cmp	r0, #0
 80025a0:	d000      	beq.n	80025a4 <__aeabi_dsub+0x260>
 80025a2:	e0ca      	b.n	800273a <__aeabi_dsub+0x3f6>
 80025a4:	465e      	mov	r6, fp
 80025a6:	1932      	adds	r2, r6, r4
 80025a8:	e7be      	b.n	8002528 <__aeabi_dsub+0x1e4>
 80025aa:	2f00      	cmp	r7, #0
 80025ac:	d17a      	bne.n	80026a4 <__aeabi_dsub+0x360>
 80025ae:	1c68      	adds	r0, r5, #1
 80025b0:	0540      	lsls	r0, r0, #21
 80025b2:	0d40      	lsrs	r0, r0, #21
 80025b4:	2801      	cmp	r0, #1
 80025b6:	dc00      	bgt.n	80025ba <__aeabi_dsub+0x276>
 80025b8:	e0e3      	b.n	8002782 <__aeabi_dsub+0x43e>
 80025ba:	465a      	mov	r2, fp
 80025bc:	1aa2      	subs	r2, r4, r2
 80025be:	4294      	cmp	r4, r2
 80025c0:	41bf      	sbcs	r7, r7
 80025c2:	1ac8      	subs	r0, r1, r3
 80025c4:	427f      	negs	r7, r7
 80025c6:	1bc7      	subs	r7, r0, r7
 80025c8:	023e      	lsls	r6, r7, #8
 80025ca:	d400      	bmi.n	80025ce <__aeabi_dsub+0x28a>
 80025cc:	e092      	b.n	80026f4 <__aeabi_dsub+0x3b0>
 80025ce:	4658      	mov	r0, fp
 80025d0:	1b04      	subs	r4, r0, r4
 80025d2:	45a3      	cmp	fp, r4
 80025d4:	4192      	sbcs	r2, r2
 80025d6:	1a59      	subs	r1, r3, r1
 80025d8:	4252      	negs	r2, r2
 80025da:	1a8f      	subs	r7, r1, r2
 80025dc:	46e2      	mov	sl, ip
 80025de:	e741      	b.n	8002464 <__aeabi_dsub+0x120>
 80025e0:	4653      	mov	r3, sl
 80025e2:	2701      	movs	r7, #1
 80025e4:	401f      	ands	r7, r3
 80025e6:	2400      	movs	r4, #0
 80025e8:	2300      	movs	r3, #0
 80025ea:	e6fb      	b.n	80023e4 <__aeabi_dsub+0xa0>
 80025ec:	492b      	ldr	r1, [pc, #172]	; (800269c <__aeabi_dsub+0x358>)
 80025ee:	1aad      	subs	r5, r5, r2
 80025f0:	4039      	ands	r1, r7
 80025f2:	e6d7      	b.n	80023a4 <__aeabi_dsub+0x60>
 80025f4:	1c27      	adds	r7, r4, #0
 80025f6:	3828      	subs	r0, #40	; 0x28
 80025f8:	4087      	lsls	r7, r0
 80025fa:	2400      	movs	r4, #0
 80025fc:	e744      	b.n	8002488 <__aeabi_dsub+0x144>
 80025fe:	1c20      	adds	r0, r4, #0
 8002600:	f000 fb4e 	bl	8002ca0 <__clzsi2>
 8002604:	3020      	adds	r0, #32
 8002606:	e733      	b.n	8002470 <__aeabi_dsub+0x12c>
 8002608:	465a      	mov	r2, fp
 800260a:	431a      	orrs	r2, r3
 800260c:	1e53      	subs	r3, r2, #1
 800260e:	419a      	sbcs	r2, r3
 8002610:	b2d2      	uxtb	r2, r2
 8002612:	2700      	movs	r7, #0
 8002614:	e71b      	b.n	800244e <__aeabi_dsub+0x10a>
 8002616:	2a00      	cmp	r2, #0
 8002618:	d000      	beq.n	800261c <__aeabi_dsub+0x2d8>
 800261a:	e0e1      	b.n	80027e0 <__aeabi_dsub+0x49c>
 800261c:	1c68      	adds	r0, r5, #1
 800261e:	0546      	lsls	r6, r0, #21
 8002620:	0d76      	lsrs	r6, r6, #21
 8002622:	2e01      	cmp	r6, #1
 8002624:	dc00      	bgt.n	8002628 <__aeabi_dsub+0x2e4>
 8002626:	e091      	b.n	800274c <__aeabi_dsub+0x408>
 8002628:	4d1b      	ldr	r5, [pc, #108]	; (8002698 <__aeabi_dsub+0x354>)
 800262a:	42a8      	cmp	r0, r5
 800262c:	d100      	bne.n	8002630 <__aeabi_dsub+0x2ec>
 800262e:	e0f7      	b.n	8002820 <__aeabi_dsub+0x4dc>
 8002630:	465e      	mov	r6, fp
 8002632:	1932      	adds	r2, r6, r4
 8002634:	42a2      	cmp	r2, r4
 8002636:	41a4      	sbcs	r4, r4
 8002638:	4264      	negs	r4, r4
 800263a:	1859      	adds	r1, r3, r1
 800263c:	1909      	adds	r1, r1, r4
 800263e:	07cc      	lsls	r4, r1, #31
 8002640:	0852      	lsrs	r2, r2, #1
 8002642:	4314      	orrs	r4, r2
 8002644:	0849      	lsrs	r1, r1, #1
 8002646:	1c05      	adds	r5, r0, #0
 8002648:	e6ac      	b.n	80023a4 <__aeabi_dsub+0x60>
 800264a:	4813      	ldr	r0, [pc, #76]	; (8002698 <__aeabi_dsub+0x354>)
 800264c:	4285      	cmp	r5, r0
 800264e:	d000      	beq.n	8002652 <__aeabi_dsub+0x30e>
 8002650:	e6e6      	b.n	8002420 <__aeabi_dsub+0xdc>
 8002652:	e6a7      	b.n	80023a4 <__aeabi_dsub+0x60>
 8002654:	1c2b      	adds	r3, r5, #0
 8002656:	3b1f      	subs	r3, #31
 8002658:	1c3e      	adds	r6, r7, #0
 800265a:	40de      	lsrs	r6, r3
 800265c:	1c33      	adds	r3, r6, #0
 800265e:	2920      	cmp	r1, #32
 8002660:	d070      	beq.n	8002744 <__aeabi_dsub+0x400>
 8002662:	223f      	movs	r2, #63	; 0x3f
 8002664:	1b55      	subs	r5, r2, r5
 8002666:	40af      	lsls	r7, r5
 8002668:	433c      	orrs	r4, r7
 800266a:	1e60      	subs	r0, r4, #1
 800266c:	4184      	sbcs	r4, r0
 800266e:	431c      	orrs	r4, r3
 8002670:	2100      	movs	r1, #0
 8002672:	2500      	movs	r5, #0
 8002674:	e696      	b.n	80023a4 <__aeabi_dsub+0x60>
 8002676:	1c38      	adds	r0, r7, #0
 8002678:	3820      	subs	r0, #32
 800267a:	1c1e      	adds	r6, r3, #0
 800267c:	40c6      	lsrs	r6, r0
 800267e:	1c30      	adds	r0, r6, #0
 8002680:	2f20      	cmp	r7, #32
 8002682:	d061      	beq.n	8002748 <__aeabi_dsub+0x404>
 8002684:	2240      	movs	r2, #64	; 0x40
 8002686:	1bd7      	subs	r7, r2, r7
 8002688:	40bb      	lsls	r3, r7
 800268a:	465a      	mov	r2, fp
 800268c:	431a      	orrs	r2, r3
 800268e:	1e53      	subs	r3, r2, #1
 8002690:	419a      	sbcs	r2, r3
 8002692:	4302      	orrs	r2, r0
 8002694:	2700      	movs	r7, #0
 8002696:	e6da      	b.n	800244e <__aeabi_dsub+0x10a>
 8002698:	000007ff 	.word	0x000007ff
 800269c:	ff7fffff 	.word	0xff7fffff
 80026a0:	800fffff 	.word	0x800fffff
 80026a4:	2d00      	cmp	r5, #0
 80026a6:	d038      	beq.n	800271a <__aeabi_dsub+0x3d6>
 80026a8:	4db9      	ldr	r5, [pc, #740]	; (8002990 <__aeabi_dsub+0x64c>)
 80026aa:	42a8      	cmp	r0, r5
 80026ac:	d100      	bne.n	80026b0 <__aeabi_dsub+0x36c>
 80026ae:	e092      	b.n	80027d6 <__aeabi_dsub+0x492>
 80026b0:	2580      	movs	r5, #128	; 0x80
 80026b2:	042d      	lsls	r5, r5, #16
 80026b4:	427f      	negs	r7, r7
 80026b6:	4329      	orrs	r1, r5
 80026b8:	2f38      	cmp	r7, #56	; 0x38
 80026ba:	dd00      	ble.n	80026be <__aeabi_dsub+0x37a>
 80026bc:	e0aa      	b.n	8002814 <__aeabi_dsub+0x4d0>
 80026be:	2f1f      	cmp	r7, #31
 80026c0:	dd00      	ble.n	80026c4 <__aeabi_dsub+0x380>
 80026c2:	e12c      	b.n	800291e <__aeabi_dsub+0x5da>
 80026c4:	2520      	movs	r5, #32
 80026c6:	1bed      	subs	r5, r5, r7
 80026c8:	1c0e      	adds	r6, r1, #0
 80026ca:	40ae      	lsls	r6, r5
 80026cc:	46b0      	mov	r8, r6
 80026ce:	1c26      	adds	r6, r4, #0
 80026d0:	40fe      	lsrs	r6, r7
 80026d2:	4642      	mov	r2, r8
 80026d4:	40ac      	lsls	r4, r5
 80026d6:	4316      	orrs	r6, r2
 80026d8:	1e65      	subs	r5, r4, #1
 80026da:	41ac      	sbcs	r4, r5
 80026dc:	4334      	orrs	r4, r6
 80026de:	40f9      	lsrs	r1, r7
 80026e0:	465a      	mov	r2, fp
 80026e2:	1b14      	subs	r4, r2, r4
 80026e4:	45a3      	cmp	fp, r4
 80026e6:	4192      	sbcs	r2, r2
 80026e8:	1a5b      	subs	r3, r3, r1
 80026ea:	4252      	negs	r2, r2
 80026ec:	1a99      	subs	r1, r3, r2
 80026ee:	1c05      	adds	r5, r0, #0
 80026f0:	46e2      	mov	sl, ip
 80026f2:	e6b3      	b.n	800245c <__aeabi_dsub+0x118>
 80026f4:	1c13      	adds	r3, r2, #0
 80026f6:	433b      	orrs	r3, r7
 80026f8:	1c14      	adds	r4, r2, #0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d000      	beq.n	8002700 <__aeabi_dsub+0x3bc>
 80026fe:	e6b1      	b.n	8002464 <__aeabi_dsub+0x120>
 8002700:	2700      	movs	r7, #0
 8002702:	2200      	movs	r2, #0
 8002704:	2500      	movs	r5, #0
 8002706:	2100      	movs	r1, #0
 8002708:	2400      	movs	r4, #0
 800270a:	e6dd      	b.n	80024c8 <__aeabi_dsub+0x184>
 800270c:	465a      	mov	r2, fp
 800270e:	431a      	orrs	r2, r3
 8002710:	1e53      	subs	r3, r2, #1
 8002712:	419a      	sbcs	r2, r3
 8002714:	b2d2      	uxtb	r2, r2
 8002716:	2300      	movs	r3, #0
 8002718:	e705      	b.n	8002526 <__aeabi_dsub+0x1e2>
 800271a:	1c0d      	adds	r5, r1, #0
 800271c:	4325      	orrs	r5, r4
 800271e:	d05a      	beq.n	80027d6 <__aeabi_dsub+0x492>
 8002720:	43ff      	mvns	r7, r7
 8002722:	2f00      	cmp	r7, #0
 8002724:	d153      	bne.n	80027ce <__aeabi_dsub+0x48a>
 8002726:	465a      	mov	r2, fp
 8002728:	1b14      	subs	r4, r2, r4
 800272a:	45a3      	cmp	fp, r4
 800272c:	4192      	sbcs	r2, r2
 800272e:	1a59      	subs	r1, r3, r1
 8002730:	4252      	negs	r2, r2
 8002732:	1a89      	subs	r1, r1, r2
 8002734:	1c05      	adds	r5, r0, #0
 8002736:	46e2      	mov	sl, ip
 8002738:	e690      	b.n	800245c <__aeabi_dsub+0x118>
 800273a:	4895      	ldr	r0, [pc, #596]	; (8002990 <__aeabi_dsub+0x64c>)
 800273c:	4285      	cmp	r5, r0
 800273e:	d000      	beq.n	8002742 <__aeabi_dsub+0x3fe>
 8002740:	e6d6      	b.n	80024f0 <__aeabi_dsub+0x1ac>
 8002742:	e62f      	b.n	80023a4 <__aeabi_dsub+0x60>
 8002744:	2700      	movs	r7, #0
 8002746:	e78f      	b.n	8002668 <__aeabi_dsub+0x324>
 8002748:	2300      	movs	r3, #0
 800274a:	e79e      	b.n	800268a <__aeabi_dsub+0x346>
 800274c:	1c08      	adds	r0, r1, #0
 800274e:	4320      	orrs	r0, r4
 8002750:	2d00      	cmp	r5, #0
 8002752:	d000      	beq.n	8002756 <__aeabi_dsub+0x412>
 8002754:	e0c3      	b.n	80028de <__aeabi_dsub+0x59a>
 8002756:	2800      	cmp	r0, #0
 8002758:	d100      	bne.n	800275c <__aeabi_dsub+0x418>
 800275a:	e0f6      	b.n	800294a <__aeabi_dsub+0x606>
 800275c:	4658      	mov	r0, fp
 800275e:	4318      	orrs	r0, r3
 8002760:	d100      	bne.n	8002764 <__aeabi_dsub+0x420>
 8002762:	e61f      	b.n	80023a4 <__aeabi_dsub+0x60>
 8002764:	4658      	mov	r0, fp
 8002766:	1902      	adds	r2, r0, r4
 8002768:	42a2      	cmp	r2, r4
 800276a:	41a4      	sbcs	r4, r4
 800276c:	4264      	negs	r4, r4
 800276e:	1859      	adds	r1, r3, r1
 8002770:	1909      	adds	r1, r1, r4
 8002772:	1c14      	adds	r4, r2, #0
 8002774:	020a      	lsls	r2, r1, #8
 8002776:	d400      	bmi.n	800277a <__aeabi_dsub+0x436>
 8002778:	e614      	b.n	80023a4 <__aeabi_dsub+0x60>
 800277a:	4b86      	ldr	r3, [pc, #536]	; (8002994 <__aeabi_dsub+0x650>)
 800277c:	2501      	movs	r5, #1
 800277e:	4019      	ands	r1, r3
 8002780:	e610      	b.n	80023a4 <__aeabi_dsub+0x60>
 8002782:	1c08      	adds	r0, r1, #0
 8002784:	4320      	orrs	r0, r4
 8002786:	2d00      	cmp	r5, #0
 8002788:	d13a      	bne.n	8002800 <__aeabi_dsub+0x4bc>
 800278a:	2800      	cmp	r0, #0
 800278c:	d000      	beq.n	8002790 <__aeabi_dsub+0x44c>
 800278e:	e089      	b.n	80028a4 <__aeabi_dsub+0x560>
 8002790:	4659      	mov	r1, fp
 8002792:	4319      	orrs	r1, r3
 8002794:	d100      	bne.n	8002798 <__aeabi_dsub+0x454>
 8002796:	e0bf      	b.n	8002918 <__aeabi_dsub+0x5d4>
 8002798:	1c19      	adds	r1, r3, #0
 800279a:	465c      	mov	r4, fp
 800279c:	46e2      	mov	sl, ip
 800279e:	e601      	b.n	80023a4 <__aeabi_dsub+0x60>
 80027a0:	4660      	mov	r0, ip
 80027a2:	3820      	subs	r0, #32
 80027a4:	1c1a      	adds	r2, r3, #0
 80027a6:	40c2      	lsrs	r2, r0
 80027a8:	4666      	mov	r6, ip
 80027aa:	1c10      	adds	r0, r2, #0
 80027ac:	2e20      	cmp	r6, #32
 80027ae:	d100      	bne.n	80027b2 <__aeabi_dsub+0x46e>
 80027b0:	e0b0      	b.n	8002914 <__aeabi_dsub+0x5d0>
 80027b2:	2240      	movs	r2, #64	; 0x40
 80027b4:	1b92      	subs	r2, r2, r6
 80027b6:	4093      	lsls	r3, r2
 80027b8:	465a      	mov	r2, fp
 80027ba:	431a      	orrs	r2, r3
 80027bc:	1e53      	subs	r3, r2, #1
 80027be:	419a      	sbcs	r2, r3
 80027c0:	4302      	orrs	r2, r0
 80027c2:	2300      	movs	r3, #0
 80027c4:	e6af      	b.n	8002526 <__aeabi_dsub+0x1e2>
 80027c6:	4d72      	ldr	r5, [pc, #456]	; (8002990 <__aeabi_dsub+0x64c>)
 80027c8:	2700      	movs	r7, #0
 80027ca:	1c2a      	adds	r2, r5, #0
 80027cc:	e79b      	b.n	8002706 <__aeabi_dsub+0x3c2>
 80027ce:	4d70      	ldr	r5, [pc, #448]	; (8002990 <__aeabi_dsub+0x64c>)
 80027d0:	42a8      	cmp	r0, r5
 80027d2:	d000      	beq.n	80027d6 <__aeabi_dsub+0x492>
 80027d4:	e770      	b.n	80026b8 <__aeabi_dsub+0x374>
 80027d6:	1c19      	adds	r1, r3, #0
 80027d8:	465c      	mov	r4, fp
 80027da:	1c05      	adds	r5, r0, #0
 80027dc:	46e2      	mov	sl, ip
 80027de:	e5e1      	b.n	80023a4 <__aeabi_dsub+0x60>
 80027e0:	2d00      	cmp	r5, #0
 80027e2:	d120      	bne.n	8002826 <__aeabi_dsub+0x4e2>
 80027e4:	1c0d      	adds	r5, r1, #0
 80027e6:	4325      	orrs	r5, r4
 80027e8:	d075      	beq.n	80028d6 <__aeabi_dsub+0x592>
 80027ea:	43d5      	mvns	r5, r2
 80027ec:	2d00      	cmp	r5, #0
 80027ee:	d16f      	bne.n	80028d0 <__aeabi_dsub+0x58c>
 80027f0:	445c      	add	r4, fp
 80027f2:	455c      	cmp	r4, fp
 80027f4:	4192      	sbcs	r2, r2
 80027f6:	1859      	adds	r1, r3, r1
 80027f8:	4252      	negs	r2, r2
 80027fa:	1889      	adds	r1, r1, r2
 80027fc:	1c05      	adds	r5, r0, #0
 80027fe:	e699      	b.n	8002534 <__aeabi_dsub+0x1f0>
 8002800:	2800      	cmp	r0, #0
 8002802:	d135      	bne.n	8002870 <__aeabi_dsub+0x52c>
 8002804:	4659      	mov	r1, fp
 8002806:	4319      	orrs	r1, r3
 8002808:	d0dd      	beq.n	80027c6 <__aeabi_dsub+0x482>
 800280a:	1c19      	adds	r1, r3, #0
 800280c:	465c      	mov	r4, fp
 800280e:	46e2      	mov	sl, ip
 8002810:	4d5f      	ldr	r5, [pc, #380]	; (8002990 <__aeabi_dsub+0x64c>)
 8002812:	e5c7      	b.n	80023a4 <__aeabi_dsub+0x60>
 8002814:	430c      	orrs	r4, r1
 8002816:	1e61      	subs	r1, r4, #1
 8002818:	418c      	sbcs	r4, r1
 800281a:	b2e4      	uxtb	r4, r4
 800281c:	2100      	movs	r1, #0
 800281e:	e75f      	b.n	80026e0 <__aeabi_dsub+0x39c>
 8002820:	1c05      	adds	r5, r0, #0
 8002822:	1c02      	adds	r2, r0, #0
 8002824:	e76f      	b.n	8002706 <__aeabi_dsub+0x3c2>
 8002826:	4d5a      	ldr	r5, [pc, #360]	; (8002990 <__aeabi_dsub+0x64c>)
 8002828:	42a8      	cmp	r0, r5
 800282a:	d054      	beq.n	80028d6 <__aeabi_dsub+0x592>
 800282c:	4255      	negs	r5, r2
 800282e:	2280      	movs	r2, #128	; 0x80
 8002830:	0416      	lsls	r6, r2, #16
 8002832:	4331      	orrs	r1, r6
 8002834:	2d38      	cmp	r5, #56	; 0x38
 8002836:	dd00      	ble.n	800283a <__aeabi_dsub+0x4f6>
 8002838:	e081      	b.n	800293e <__aeabi_dsub+0x5fa>
 800283a:	2d1f      	cmp	r5, #31
 800283c:	dd00      	ble.n	8002840 <__aeabi_dsub+0x4fc>
 800283e:	e091      	b.n	8002964 <__aeabi_dsub+0x620>
 8002840:	2220      	movs	r2, #32
 8002842:	1b56      	subs	r6, r2, r5
 8002844:	1c0a      	adds	r2, r1, #0
 8002846:	46b4      	mov	ip, r6
 8002848:	40b2      	lsls	r2, r6
 800284a:	1c26      	adds	r6, r4, #0
 800284c:	40ee      	lsrs	r6, r5
 800284e:	4332      	orrs	r2, r6
 8002850:	4690      	mov	r8, r2
 8002852:	4662      	mov	r2, ip
 8002854:	4094      	lsls	r4, r2
 8002856:	1e66      	subs	r6, r4, #1
 8002858:	41b4      	sbcs	r4, r6
 800285a:	4642      	mov	r2, r8
 800285c:	4314      	orrs	r4, r2
 800285e:	40e9      	lsrs	r1, r5
 8002860:	445c      	add	r4, fp
 8002862:	455c      	cmp	r4, fp
 8002864:	4192      	sbcs	r2, r2
 8002866:	18cb      	adds	r3, r1, r3
 8002868:	4252      	negs	r2, r2
 800286a:	1899      	adds	r1, r3, r2
 800286c:	1c05      	adds	r5, r0, #0
 800286e:	e661      	b.n	8002534 <__aeabi_dsub+0x1f0>
 8002870:	4658      	mov	r0, fp
 8002872:	4318      	orrs	r0, r3
 8002874:	d04c      	beq.n	8002910 <__aeabi_dsub+0x5cc>
 8002876:	0748      	lsls	r0, r1, #29
 8002878:	08e4      	lsrs	r4, r4, #3
 800287a:	4304      	orrs	r4, r0
 800287c:	2080      	movs	r0, #128	; 0x80
 800287e:	08c9      	lsrs	r1, r1, #3
 8002880:	0300      	lsls	r0, r0, #12
 8002882:	4201      	tst	r1, r0
 8002884:	d008      	beq.n	8002898 <__aeabi_dsub+0x554>
 8002886:	08dd      	lsrs	r5, r3, #3
 8002888:	4205      	tst	r5, r0
 800288a:	d105      	bne.n	8002898 <__aeabi_dsub+0x554>
 800288c:	4659      	mov	r1, fp
 800288e:	08ca      	lsrs	r2, r1, #3
 8002890:	075c      	lsls	r4, r3, #29
 8002892:	4314      	orrs	r4, r2
 8002894:	1c29      	adds	r1, r5, #0
 8002896:	46e2      	mov	sl, ip
 8002898:	0f63      	lsrs	r3, r4, #29
 800289a:	00c9      	lsls	r1, r1, #3
 800289c:	4319      	orrs	r1, r3
 800289e:	00e4      	lsls	r4, r4, #3
 80028a0:	4d3b      	ldr	r5, [pc, #236]	; (8002990 <__aeabi_dsub+0x64c>)
 80028a2:	e57f      	b.n	80023a4 <__aeabi_dsub+0x60>
 80028a4:	4658      	mov	r0, fp
 80028a6:	4318      	orrs	r0, r3
 80028a8:	d100      	bne.n	80028ac <__aeabi_dsub+0x568>
 80028aa:	e57b      	b.n	80023a4 <__aeabi_dsub+0x60>
 80028ac:	465e      	mov	r6, fp
 80028ae:	1ba7      	subs	r7, r4, r6
 80028b0:	42bc      	cmp	r4, r7
 80028b2:	4192      	sbcs	r2, r2
 80028b4:	1ac8      	subs	r0, r1, r3
 80028b6:	4252      	negs	r2, r2
 80028b8:	1a80      	subs	r0, r0, r2
 80028ba:	0206      	lsls	r6, r0, #8
 80028bc:	d54c      	bpl.n	8002958 <__aeabi_dsub+0x614>
 80028be:	4658      	mov	r0, fp
 80028c0:	1b04      	subs	r4, r0, r4
 80028c2:	45a3      	cmp	fp, r4
 80028c4:	4192      	sbcs	r2, r2
 80028c6:	1a59      	subs	r1, r3, r1
 80028c8:	4252      	negs	r2, r2
 80028ca:	1a89      	subs	r1, r1, r2
 80028cc:	46e2      	mov	sl, ip
 80028ce:	e569      	b.n	80023a4 <__aeabi_dsub+0x60>
 80028d0:	4a2f      	ldr	r2, [pc, #188]	; (8002990 <__aeabi_dsub+0x64c>)
 80028d2:	4290      	cmp	r0, r2
 80028d4:	d1ae      	bne.n	8002834 <__aeabi_dsub+0x4f0>
 80028d6:	1c19      	adds	r1, r3, #0
 80028d8:	465c      	mov	r4, fp
 80028da:	1c05      	adds	r5, r0, #0
 80028dc:	e562      	b.n	80023a4 <__aeabi_dsub+0x60>
 80028de:	2800      	cmp	r0, #0
 80028e0:	d036      	beq.n	8002950 <__aeabi_dsub+0x60c>
 80028e2:	4658      	mov	r0, fp
 80028e4:	4318      	orrs	r0, r3
 80028e6:	d013      	beq.n	8002910 <__aeabi_dsub+0x5cc>
 80028e8:	2580      	movs	r5, #128	; 0x80
 80028ea:	0748      	lsls	r0, r1, #29
 80028ec:	08e4      	lsrs	r4, r4, #3
 80028ee:	08c9      	lsrs	r1, r1, #3
 80028f0:	032d      	lsls	r5, r5, #12
 80028f2:	4304      	orrs	r4, r0
 80028f4:	4229      	tst	r1, r5
 80028f6:	d0cf      	beq.n	8002898 <__aeabi_dsub+0x554>
 80028f8:	08d8      	lsrs	r0, r3, #3
 80028fa:	4228      	tst	r0, r5
 80028fc:	d1cc      	bne.n	8002898 <__aeabi_dsub+0x554>
 80028fe:	465d      	mov	r5, fp
 8002900:	08ea      	lsrs	r2, r5, #3
 8002902:	075c      	lsls	r4, r3, #29
 8002904:	4314      	orrs	r4, r2
 8002906:	1c01      	adds	r1, r0, #0
 8002908:	e7c6      	b.n	8002898 <__aeabi_dsub+0x554>
 800290a:	2300      	movs	r3, #0
 800290c:	2400      	movs	r4, #0
 800290e:	e569      	b.n	80023e4 <__aeabi_dsub+0xa0>
 8002910:	4d1f      	ldr	r5, [pc, #124]	; (8002990 <__aeabi_dsub+0x64c>)
 8002912:	e547      	b.n	80023a4 <__aeabi_dsub+0x60>
 8002914:	2300      	movs	r3, #0
 8002916:	e74f      	b.n	80027b8 <__aeabi_dsub+0x474>
 8002918:	2700      	movs	r7, #0
 800291a:	2200      	movs	r2, #0
 800291c:	e6f3      	b.n	8002706 <__aeabi_dsub+0x3c2>
 800291e:	1c3d      	adds	r5, r7, #0
 8002920:	3d20      	subs	r5, #32
 8002922:	1c0e      	adds	r6, r1, #0
 8002924:	40ee      	lsrs	r6, r5
 8002926:	1c35      	adds	r5, r6, #0
 8002928:	2f20      	cmp	r7, #32
 800292a:	d02d      	beq.n	8002988 <__aeabi_dsub+0x644>
 800292c:	2640      	movs	r6, #64	; 0x40
 800292e:	1bf7      	subs	r7, r6, r7
 8002930:	40b9      	lsls	r1, r7
 8002932:	430c      	orrs	r4, r1
 8002934:	1e61      	subs	r1, r4, #1
 8002936:	418c      	sbcs	r4, r1
 8002938:	432c      	orrs	r4, r5
 800293a:	2100      	movs	r1, #0
 800293c:	e6d0      	b.n	80026e0 <__aeabi_dsub+0x39c>
 800293e:	430c      	orrs	r4, r1
 8002940:	1e61      	subs	r1, r4, #1
 8002942:	418c      	sbcs	r4, r1
 8002944:	b2e4      	uxtb	r4, r4
 8002946:	2100      	movs	r1, #0
 8002948:	e78a      	b.n	8002860 <__aeabi_dsub+0x51c>
 800294a:	1c19      	adds	r1, r3, #0
 800294c:	465c      	mov	r4, fp
 800294e:	e529      	b.n	80023a4 <__aeabi_dsub+0x60>
 8002950:	1c19      	adds	r1, r3, #0
 8002952:	465c      	mov	r4, fp
 8002954:	4d0e      	ldr	r5, [pc, #56]	; (8002990 <__aeabi_dsub+0x64c>)
 8002956:	e525      	b.n	80023a4 <__aeabi_dsub+0x60>
 8002958:	1c03      	adds	r3, r0, #0
 800295a:	433b      	orrs	r3, r7
 800295c:	d0dc      	beq.n	8002918 <__aeabi_dsub+0x5d4>
 800295e:	1c01      	adds	r1, r0, #0
 8002960:	1c3c      	adds	r4, r7, #0
 8002962:	e51f      	b.n	80023a4 <__aeabi_dsub+0x60>
 8002964:	2620      	movs	r6, #32
 8002966:	4276      	negs	r6, r6
 8002968:	1976      	adds	r6, r6, r5
 800296a:	1c0a      	adds	r2, r1, #0
 800296c:	40f2      	lsrs	r2, r6
 800296e:	4690      	mov	r8, r2
 8002970:	2d20      	cmp	r5, #32
 8002972:	d00b      	beq.n	800298c <__aeabi_dsub+0x648>
 8002974:	2640      	movs	r6, #64	; 0x40
 8002976:	1b75      	subs	r5, r6, r5
 8002978:	40a9      	lsls	r1, r5
 800297a:	430c      	orrs	r4, r1
 800297c:	1e61      	subs	r1, r4, #1
 800297e:	418c      	sbcs	r4, r1
 8002980:	4645      	mov	r5, r8
 8002982:	432c      	orrs	r4, r5
 8002984:	2100      	movs	r1, #0
 8002986:	e76b      	b.n	8002860 <__aeabi_dsub+0x51c>
 8002988:	2100      	movs	r1, #0
 800298a:	e7d2      	b.n	8002932 <__aeabi_dsub+0x5ee>
 800298c:	2100      	movs	r1, #0
 800298e:	e7f4      	b.n	800297a <__aeabi_dsub+0x636>
 8002990:	000007ff 	.word	0x000007ff
 8002994:	ff7fffff 	.word	0xff7fffff

08002998 <__aeabi_d2iz>:
 8002998:	b570      	push	{r4, r5, r6, lr}
 800299a:	1c0b      	adds	r3, r1, #0
 800299c:	4c12      	ldr	r4, [pc, #72]	; (80029e8 <__aeabi_d2iz+0x50>)
 800299e:	0309      	lsls	r1, r1, #12
 80029a0:	0b0e      	lsrs	r6, r1, #12
 80029a2:	0059      	lsls	r1, r3, #1
 80029a4:	1c02      	adds	r2, r0, #0
 80029a6:	0d49      	lsrs	r1, r1, #21
 80029a8:	0fdd      	lsrs	r5, r3, #31
 80029aa:	2000      	movs	r0, #0
 80029ac:	42a1      	cmp	r1, r4
 80029ae:	dd11      	ble.n	80029d4 <__aeabi_d2iz+0x3c>
 80029b0:	480e      	ldr	r0, [pc, #56]	; (80029ec <__aeabi_d2iz+0x54>)
 80029b2:	4281      	cmp	r1, r0
 80029b4:	dc0f      	bgt.n	80029d6 <__aeabi_d2iz+0x3e>
 80029b6:	2080      	movs	r0, #128	; 0x80
 80029b8:	0340      	lsls	r0, r0, #13
 80029ba:	4306      	orrs	r6, r0
 80029bc:	480c      	ldr	r0, [pc, #48]	; (80029f0 <__aeabi_d2iz+0x58>)
 80029be:	1a40      	subs	r0, r0, r1
 80029c0:	281f      	cmp	r0, #31
 80029c2:	dd0b      	ble.n	80029dc <__aeabi_d2iz+0x44>
 80029c4:	4a0b      	ldr	r2, [pc, #44]	; (80029f4 <__aeabi_d2iz+0x5c>)
 80029c6:	1a52      	subs	r2, r2, r1
 80029c8:	40d6      	lsrs	r6, r2
 80029ca:	1c32      	adds	r2, r6, #0
 80029cc:	4250      	negs	r0, r2
 80029ce:	2d00      	cmp	r5, #0
 80029d0:	d100      	bne.n	80029d4 <__aeabi_d2iz+0x3c>
 80029d2:	1c10      	adds	r0, r2, #0
 80029d4:	bd70      	pop	{r4, r5, r6, pc}
 80029d6:	4b08      	ldr	r3, [pc, #32]	; (80029f8 <__aeabi_d2iz+0x60>)
 80029d8:	18e8      	adds	r0, r5, r3
 80029da:	e7fb      	b.n	80029d4 <__aeabi_d2iz+0x3c>
 80029dc:	4b07      	ldr	r3, [pc, #28]	; (80029fc <__aeabi_d2iz+0x64>)
 80029de:	40c2      	lsrs	r2, r0
 80029e0:	18c9      	adds	r1, r1, r3
 80029e2:	408e      	lsls	r6, r1
 80029e4:	4332      	orrs	r2, r6
 80029e6:	e7f1      	b.n	80029cc <__aeabi_d2iz+0x34>
 80029e8:	000003fe 	.word	0x000003fe
 80029ec:	0000041d 	.word	0x0000041d
 80029f0:	00000433 	.word	0x00000433
 80029f4:	00000413 	.word	0x00000413
 80029f8:	7fffffff 	.word	0x7fffffff
 80029fc:	fffffbed 	.word	0xfffffbed

08002a00 <__aeabi_i2d>:
 8002a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a02:	1e04      	subs	r4, r0, #0
 8002a04:	d031      	beq.n	8002a6a <__aeabi_i2d+0x6a>
 8002a06:	0fc7      	lsrs	r7, r0, #31
 8002a08:	d000      	beq.n	8002a0c <__aeabi_i2d+0xc>
 8002a0a:	4244      	negs	r4, r0
 8002a0c:	1c20      	adds	r0, r4, #0
 8002a0e:	f000 f947 	bl	8002ca0 <__clzsi2>
 8002a12:	4d18      	ldr	r5, [pc, #96]	; (8002a74 <__aeabi_i2d+0x74>)
 8002a14:	1a2d      	subs	r5, r5, r0
 8002a16:	280a      	cmp	r0, #10
 8002a18:	dd19      	ble.n	8002a4e <__aeabi_i2d+0x4e>
 8002a1a:	380b      	subs	r0, #11
 8002a1c:	4084      	lsls	r4, r0
 8002a1e:	0324      	lsls	r4, r4, #12
 8002a20:	056d      	lsls	r5, r5, #21
 8002a22:	0b24      	lsrs	r4, r4, #12
 8002a24:	0d6d      	lsrs	r5, r5, #21
 8002a26:	1c3a      	adds	r2, r7, #0
 8002a28:	2600      	movs	r6, #0
 8002a2a:	2000      	movs	r0, #0
 8002a2c:	2100      	movs	r1, #0
 8002a2e:	0d0b      	lsrs	r3, r1, #20
 8002a30:	0324      	lsls	r4, r4, #12
 8002a32:	0b24      	lsrs	r4, r4, #12
 8002a34:	051b      	lsls	r3, r3, #20
 8002a36:	4323      	orrs	r3, r4
 8002a38:	4c0f      	ldr	r4, [pc, #60]	; (8002a78 <__aeabi_i2d+0x78>)
 8002a3a:	052d      	lsls	r5, r5, #20
 8002a3c:	401c      	ands	r4, r3
 8002a3e:	432c      	orrs	r4, r5
 8002a40:	0064      	lsls	r4, r4, #1
 8002a42:	0864      	lsrs	r4, r4, #1
 8002a44:	07d3      	lsls	r3, r2, #31
 8002a46:	1c21      	adds	r1, r4, #0
 8002a48:	1c30      	adds	r0, r6, #0
 8002a4a:	4319      	orrs	r1, r3
 8002a4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a4e:	1c06      	adds	r6, r0, #0
 8002a50:	3615      	adds	r6, #21
 8002a52:	1c23      	adds	r3, r4, #0
 8002a54:	40b3      	lsls	r3, r6
 8002a56:	1c1e      	adds	r6, r3, #0
 8002a58:	230b      	movs	r3, #11
 8002a5a:	1a18      	subs	r0, r3, r0
 8002a5c:	40c4      	lsrs	r4, r0
 8002a5e:	0324      	lsls	r4, r4, #12
 8002a60:	056d      	lsls	r5, r5, #21
 8002a62:	0b24      	lsrs	r4, r4, #12
 8002a64:	0d6d      	lsrs	r5, r5, #21
 8002a66:	1c3a      	adds	r2, r7, #0
 8002a68:	e7df      	b.n	8002a2a <__aeabi_i2d+0x2a>
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	2500      	movs	r5, #0
 8002a6e:	2400      	movs	r4, #0
 8002a70:	2600      	movs	r6, #0
 8002a72:	e7da      	b.n	8002a2a <__aeabi_i2d+0x2a>
 8002a74:	0000041e 	.word	0x0000041e
 8002a78:	800fffff 	.word	0x800fffff

08002a7c <__aeabi_ui2d>:
 8002a7c:	b510      	push	{r4, lr}
 8002a7e:	1e04      	subs	r4, r0, #0
 8002a80:	d028      	beq.n	8002ad4 <__aeabi_ui2d+0x58>
 8002a82:	f000 f90d 	bl	8002ca0 <__clzsi2>
 8002a86:	4a15      	ldr	r2, [pc, #84]	; (8002adc <__aeabi_ui2d+0x60>)
 8002a88:	1a12      	subs	r2, r2, r0
 8002a8a:	280a      	cmp	r0, #10
 8002a8c:	dd15      	ble.n	8002aba <__aeabi_ui2d+0x3e>
 8002a8e:	380b      	subs	r0, #11
 8002a90:	4084      	lsls	r4, r0
 8002a92:	0324      	lsls	r4, r4, #12
 8002a94:	0552      	lsls	r2, r2, #21
 8002a96:	0b24      	lsrs	r4, r4, #12
 8002a98:	0d52      	lsrs	r2, r2, #21
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	2000      	movs	r0, #0
 8002a9e:	2100      	movs	r1, #0
 8002aa0:	0324      	lsls	r4, r4, #12
 8002aa2:	1c18      	adds	r0, r3, #0
 8002aa4:	0d0b      	lsrs	r3, r1, #20
 8002aa6:	0b24      	lsrs	r4, r4, #12
 8002aa8:	051b      	lsls	r3, r3, #20
 8002aaa:	4323      	orrs	r3, r4
 8002aac:	4c0c      	ldr	r4, [pc, #48]	; (8002ae0 <__aeabi_ui2d+0x64>)
 8002aae:	0512      	lsls	r2, r2, #20
 8002ab0:	401c      	ands	r4, r3
 8002ab2:	4314      	orrs	r4, r2
 8002ab4:	0064      	lsls	r4, r4, #1
 8002ab6:	0861      	lsrs	r1, r4, #1
 8002ab8:	bd10      	pop	{r4, pc}
 8002aba:	1c03      	adds	r3, r0, #0
 8002abc:	3315      	adds	r3, #21
 8002abe:	1c21      	adds	r1, r4, #0
 8002ac0:	4099      	lsls	r1, r3
 8002ac2:	1c0b      	adds	r3, r1, #0
 8002ac4:	210b      	movs	r1, #11
 8002ac6:	1a08      	subs	r0, r1, r0
 8002ac8:	40c4      	lsrs	r4, r0
 8002aca:	0324      	lsls	r4, r4, #12
 8002acc:	0552      	lsls	r2, r2, #21
 8002ace:	0b24      	lsrs	r4, r4, #12
 8002ad0:	0d52      	lsrs	r2, r2, #21
 8002ad2:	e7e3      	b.n	8002a9c <__aeabi_ui2d+0x20>
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	2400      	movs	r4, #0
 8002ad8:	2300      	movs	r3, #0
 8002ada:	e7df      	b.n	8002a9c <__aeabi_ui2d+0x20>
 8002adc:	0000041e 	.word	0x0000041e
 8002ae0:	800fffff 	.word	0x800fffff

08002ae4 <__aeabi_f2d>:
 8002ae4:	0043      	lsls	r3, r0, #1
 8002ae6:	0e1b      	lsrs	r3, r3, #24
 8002ae8:	1c5a      	adds	r2, r3, #1
 8002aea:	0241      	lsls	r1, r0, #9
 8002aec:	b2d2      	uxtb	r2, r2
 8002aee:	b570      	push	{r4, r5, r6, lr}
 8002af0:	0a4c      	lsrs	r4, r1, #9
 8002af2:	0fc5      	lsrs	r5, r0, #31
 8002af4:	2a01      	cmp	r2, #1
 8002af6:	dd17      	ble.n	8002b28 <__aeabi_f2d+0x44>
 8002af8:	22e0      	movs	r2, #224	; 0xe0
 8002afa:	0092      	lsls	r2, r2, #2
 8002afc:	0764      	lsls	r4, r4, #29
 8002afe:	0b09      	lsrs	r1, r1, #12
 8002b00:	1898      	adds	r0, r3, r2
 8002b02:	2200      	movs	r2, #0
 8002b04:	2300      	movs	r3, #0
 8002b06:	0d1e      	lsrs	r6, r3, #20
 8002b08:	1c22      	adds	r2, r4, #0
 8002b0a:	0534      	lsls	r4, r6, #20
 8002b0c:	430c      	orrs	r4, r1
 8002b0e:	491b      	ldr	r1, [pc, #108]	; (8002b7c <__aeabi_f2d+0x98>)
 8002b10:	0540      	lsls	r0, r0, #21
 8002b12:	0840      	lsrs	r0, r0, #1
 8002b14:	4021      	ands	r1, r4
 8002b16:	4301      	orrs	r1, r0
 8002b18:	0049      	lsls	r1, r1, #1
 8002b1a:	0849      	lsrs	r1, r1, #1
 8002b1c:	07ed      	lsls	r5, r5, #31
 8002b1e:	1c0b      	adds	r3, r1, #0
 8002b20:	432b      	orrs	r3, r5
 8002b22:	1c10      	adds	r0, r2, #0
 8002b24:	1c19      	adds	r1, r3, #0
 8002b26:	bd70      	pop	{r4, r5, r6, pc}
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d115      	bne.n	8002b58 <__aeabi_f2d+0x74>
 8002b2c:	2c00      	cmp	r4, #0
 8002b2e:	d01c      	beq.n	8002b6a <__aeabi_f2d+0x86>
 8002b30:	1c20      	adds	r0, r4, #0
 8002b32:	f000 f8b5 	bl	8002ca0 <__clzsi2>
 8002b36:	280a      	cmp	r0, #10
 8002b38:	dc1a      	bgt.n	8002b70 <__aeabi_f2d+0x8c>
 8002b3a:	210b      	movs	r1, #11
 8002b3c:	1a09      	subs	r1, r1, r0
 8002b3e:	1c23      	adds	r3, r4, #0
 8002b40:	40cb      	lsrs	r3, r1
 8002b42:	1c19      	adds	r1, r3, #0
 8002b44:	1c03      	adds	r3, r0, #0
 8002b46:	3315      	adds	r3, #21
 8002b48:	409c      	lsls	r4, r3
 8002b4a:	4b0d      	ldr	r3, [pc, #52]	; (8002b80 <__aeabi_f2d+0x9c>)
 8002b4c:	0309      	lsls	r1, r1, #12
 8002b4e:	1a18      	subs	r0, r3, r0
 8002b50:	0540      	lsls	r0, r0, #21
 8002b52:	0b09      	lsrs	r1, r1, #12
 8002b54:	0d40      	lsrs	r0, r0, #21
 8002b56:	e7d4      	b.n	8002b02 <__aeabi_f2d+0x1e>
 8002b58:	2c00      	cmp	r4, #0
 8002b5a:	d003      	beq.n	8002b64 <__aeabi_f2d+0x80>
 8002b5c:	0764      	lsls	r4, r4, #29
 8002b5e:	0b09      	lsrs	r1, r1, #12
 8002b60:	4808      	ldr	r0, [pc, #32]	; (8002b84 <__aeabi_f2d+0xa0>)
 8002b62:	e7ce      	b.n	8002b02 <__aeabi_f2d+0x1e>
 8002b64:	4807      	ldr	r0, [pc, #28]	; (8002b84 <__aeabi_f2d+0xa0>)
 8002b66:	2100      	movs	r1, #0
 8002b68:	e7cb      	b.n	8002b02 <__aeabi_f2d+0x1e>
 8002b6a:	2000      	movs	r0, #0
 8002b6c:	2100      	movs	r1, #0
 8002b6e:	e7c8      	b.n	8002b02 <__aeabi_f2d+0x1e>
 8002b70:	1c01      	adds	r1, r0, #0
 8002b72:	390b      	subs	r1, #11
 8002b74:	408c      	lsls	r4, r1
 8002b76:	1c21      	adds	r1, r4, #0
 8002b78:	2400      	movs	r4, #0
 8002b7a:	e7e6      	b.n	8002b4a <__aeabi_f2d+0x66>
 8002b7c:	800fffff 	.word	0x800fffff
 8002b80:	00000389 	.word	0x00000389
 8002b84:	000007ff 	.word	0x000007ff

08002b88 <__aeabi_d2f>:
 8002b88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b8a:	004b      	lsls	r3, r1, #1
 8002b8c:	030d      	lsls	r5, r1, #12
 8002b8e:	0f42      	lsrs	r2, r0, #29
 8002b90:	0d5b      	lsrs	r3, r3, #21
 8002b92:	0a6d      	lsrs	r5, r5, #9
 8002b94:	4315      	orrs	r5, r2
 8002b96:	1c5a      	adds	r2, r3, #1
 8002b98:	0552      	lsls	r2, r2, #21
 8002b9a:	0fcc      	lsrs	r4, r1, #31
 8002b9c:	00c6      	lsls	r6, r0, #3
 8002b9e:	0d52      	lsrs	r2, r2, #21
 8002ba0:	2a01      	cmp	r2, #1
 8002ba2:	dd27      	ble.n	8002bf4 <__aeabi_d2f+0x6c>
 8002ba4:	4f39      	ldr	r7, [pc, #228]	; (8002c8c <__aeabi_d2f+0x104>)
 8002ba6:	19da      	adds	r2, r3, r7
 8002ba8:	2afe      	cmp	r2, #254	; 0xfe
 8002baa:	dc1a      	bgt.n	8002be2 <__aeabi_d2f+0x5a>
 8002bac:	2a00      	cmp	r2, #0
 8002bae:	dd35      	ble.n	8002c1c <__aeabi_d2f+0x94>
 8002bb0:	0180      	lsls	r0, r0, #6
 8002bb2:	00ed      	lsls	r5, r5, #3
 8002bb4:	1e43      	subs	r3, r0, #1
 8002bb6:	4198      	sbcs	r0, r3
 8002bb8:	4328      	orrs	r0, r5
 8002bba:	0f76      	lsrs	r6, r6, #29
 8002bbc:	4330      	orrs	r0, r6
 8002bbe:	0743      	lsls	r3, r0, #29
 8002bc0:	d004      	beq.n	8002bcc <__aeabi_d2f+0x44>
 8002bc2:	230f      	movs	r3, #15
 8002bc4:	4003      	ands	r3, r0
 8002bc6:	2b04      	cmp	r3, #4
 8002bc8:	d000      	beq.n	8002bcc <__aeabi_d2f+0x44>
 8002bca:	3004      	adds	r0, #4
 8002bcc:	2180      	movs	r1, #128	; 0x80
 8002bce:	04c9      	lsls	r1, r1, #19
 8002bd0:	4001      	ands	r1, r0
 8002bd2:	d027      	beq.n	8002c24 <__aeabi_d2f+0x9c>
 8002bd4:	3201      	adds	r2, #1
 8002bd6:	2aff      	cmp	r2, #255	; 0xff
 8002bd8:	d01d      	beq.n	8002c16 <__aeabi_d2f+0x8e>
 8002bda:	0183      	lsls	r3, r0, #6
 8002bdc:	0a5b      	lsrs	r3, r3, #9
 8002bde:	b2d1      	uxtb	r1, r2
 8002be0:	e001      	b.n	8002be6 <__aeabi_d2f+0x5e>
 8002be2:	21ff      	movs	r1, #255	; 0xff
 8002be4:	2300      	movs	r3, #0
 8002be6:	0258      	lsls	r0, r3, #9
 8002be8:	05c9      	lsls	r1, r1, #23
 8002bea:	0a40      	lsrs	r0, r0, #9
 8002bec:	07e4      	lsls	r4, r4, #31
 8002bee:	4308      	orrs	r0, r1
 8002bf0:	4320      	orrs	r0, r4
 8002bf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d106      	bne.n	8002c06 <__aeabi_d2f+0x7e>
 8002bf8:	4335      	orrs	r5, r6
 8002bfa:	d111      	bne.n	8002c20 <__aeabi_d2f+0x98>
 8002bfc:	2100      	movs	r1, #0
 8002bfe:	2000      	movs	r0, #0
 8002c00:	0243      	lsls	r3, r0, #9
 8002c02:	0a5b      	lsrs	r3, r3, #9
 8002c04:	e7ef      	b.n	8002be6 <__aeabi_d2f+0x5e>
 8002c06:	432e      	orrs	r6, r5
 8002c08:	d0eb      	beq.n	8002be2 <__aeabi_d2f+0x5a>
 8002c0a:	2080      	movs	r0, #128	; 0x80
 8002c0c:	00ed      	lsls	r5, r5, #3
 8002c0e:	0480      	lsls	r0, r0, #18
 8002c10:	4328      	orrs	r0, r5
 8002c12:	22ff      	movs	r2, #255	; 0xff
 8002c14:	e7d3      	b.n	8002bbe <__aeabi_d2f+0x36>
 8002c16:	21ff      	movs	r1, #255	; 0xff
 8002c18:	2300      	movs	r3, #0
 8002c1a:	e7e4      	b.n	8002be6 <__aeabi_d2f+0x5e>
 8002c1c:	3217      	adds	r2, #23
 8002c1e:	da0d      	bge.n	8002c3c <__aeabi_d2f+0xb4>
 8002c20:	2005      	movs	r0, #5
 8002c22:	2200      	movs	r2, #0
 8002c24:	08c0      	lsrs	r0, r0, #3
 8002c26:	b2d1      	uxtb	r1, r2
 8002c28:	2aff      	cmp	r2, #255	; 0xff
 8002c2a:	d1e9      	bne.n	8002c00 <__aeabi_d2f+0x78>
 8002c2c:	2800      	cmp	r0, #0
 8002c2e:	d0d9      	beq.n	8002be4 <__aeabi_d2f+0x5c>
 8002c30:	2380      	movs	r3, #128	; 0x80
 8002c32:	03db      	lsls	r3, r3, #15
 8002c34:	4303      	orrs	r3, r0
 8002c36:	025b      	lsls	r3, r3, #9
 8002c38:	0a5b      	lsrs	r3, r3, #9
 8002c3a:	e7d4      	b.n	8002be6 <__aeabi_d2f+0x5e>
 8002c3c:	2280      	movs	r2, #128	; 0x80
 8002c3e:	4914      	ldr	r1, [pc, #80]	; (8002c90 <__aeabi_d2f+0x108>)
 8002c40:	0412      	lsls	r2, r2, #16
 8002c42:	4315      	orrs	r5, r2
 8002c44:	1ac9      	subs	r1, r1, r3
 8002c46:	291f      	cmp	r1, #31
 8002c48:	dc0d      	bgt.n	8002c66 <__aeabi_d2f+0xde>
 8002c4a:	4a12      	ldr	r2, [pc, #72]	; (8002c94 <__aeabi_d2f+0x10c>)
 8002c4c:	1c37      	adds	r7, r6, #0
 8002c4e:	189b      	adds	r3, r3, r2
 8002c50:	1c28      	adds	r0, r5, #0
 8002c52:	409f      	lsls	r7, r3
 8002c54:	4098      	lsls	r0, r3
 8002c56:	1c3b      	adds	r3, r7, #0
 8002c58:	1e5a      	subs	r2, r3, #1
 8002c5a:	4193      	sbcs	r3, r2
 8002c5c:	4318      	orrs	r0, r3
 8002c5e:	40ce      	lsrs	r6, r1
 8002c60:	4330      	orrs	r0, r6
 8002c62:	2200      	movs	r2, #0
 8002c64:	e7ab      	b.n	8002bbe <__aeabi_d2f+0x36>
 8002c66:	4f0c      	ldr	r7, [pc, #48]	; (8002c98 <__aeabi_d2f+0x110>)
 8002c68:	1c2a      	adds	r2, r5, #0
 8002c6a:	1aff      	subs	r7, r7, r3
 8002c6c:	40fa      	lsrs	r2, r7
 8002c6e:	1c17      	adds	r7, r2, #0
 8002c70:	2920      	cmp	r1, #32
 8002c72:	d009      	beq.n	8002c88 <__aeabi_d2f+0x100>
 8002c74:	4a09      	ldr	r2, [pc, #36]	; (8002c9c <__aeabi_d2f+0x114>)
 8002c76:	1898      	adds	r0, r3, r2
 8002c78:	4085      	lsls	r5, r0
 8002c7a:	1c28      	adds	r0, r5, #0
 8002c7c:	4330      	orrs	r0, r6
 8002c7e:	1e46      	subs	r6, r0, #1
 8002c80:	41b0      	sbcs	r0, r6
 8002c82:	4338      	orrs	r0, r7
 8002c84:	2200      	movs	r2, #0
 8002c86:	e79a      	b.n	8002bbe <__aeabi_d2f+0x36>
 8002c88:	2000      	movs	r0, #0
 8002c8a:	e7f7      	b.n	8002c7c <__aeabi_d2f+0xf4>
 8002c8c:	fffffc80 	.word	0xfffffc80
 8002c90:	0000039e 	.word	0x0000039e
 8002c94:	fffffc82 	.word	0xfffffc82
 8002c98:	0000037e 	.word	0x0000037e
 8002c9c:	fffffca2 	.word	0xfffffca2

08002ca0 <__clzsi2>:
 8002ca0:	211c      	movs	r1, #28
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	041b      	lsls	r3, r3, #16
 8002ca6:	4298      	cmp	r0, r3
 8002ca8:	d301      	bcc.n	8002cae <__clzsi2+0xe>
 8002caa:	0c00      	lsrs	r0, r0, #16
 8002cac:	3910      	subs	r1, #16
 8002cae:	0a1b      	lsrs	r3, r3, #8
 8002cb0:	4298      	cmp	r0, r3
 8002cb2:	d301      	bcc.n	8002cb8 <__clzsi2+0x18>
 8002cb4:	0a00      	lsrs	r0, r0, #8
 8002cb6:	3908      	subs	r1, #8
 8002cb8:	091b      	lsrs	r3, r3, #4
 8002cba:	4298      	cmp	r0, r3
 8002cbc:	d301      	bcc.n	8002cc2 <__clzsi2+0x22>
 8002cbe:	0900      	lsrs	r0, r0, #4
 8002cc0:	3904      	subs	r1, #4
 8002cc2:	a202      	add	r2, pc, #8	; (adr r2, 8002ccc <__clzsi2+0x2c>)
 8002cc4:	5c10      	ldrb	r0, [r2, r0]
 8002cc6:	1840      	adds	r0, r0, r1
 8002cc8:	4770      	bx	lr
 8002cca:	46c0      	nop			; (mov r8, r8)
 8002ccc:	02020304 	.word	0x02020304
 8002cd0:	01010101 	.word	0x01010101
	...

08002cdc <__aeabi_lmul>:
 8002cdc:	469c      	mov	ip, r3
 8002cde:	0403      	lsls	r3, r0, #16
 8002ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ce2:	0c1b      	lsrs	r3, r3, #16
 8002ce4:	0417      	lsls	r7, r2, #16
 8002ce6:	0c3f      	lsrs	r7, r7, #16
 8002ce8:	0c15      	lsrs	r5, r2, #16
 8002cea:	1c1e      	adds	r6, r3, #0
 8002cec:	1c04      	adds	r4, r0, #0
 8002cee:	0c00      	lsrs	r0, r0, #16
 8002cf0:	437e      	muls	r6, r7
 8002cf2:	436b      	muls	r3, r5
 8002cf4:	4347      	muls	r7, r0
 8002cf6:	4345      	muls	r5, r0
 8002cf8:	18fb      	adds	r3, r7, r3
 8002cfa:	0c30      	lsrs	r0, r6, #16
 8002cfc:	1818      	adds	r0, r3, r0
 8002cfe:	4287      	cmp	r7, r0
 8002d00:	d902      	bls.n	8002d08 <__aeabi_lmul+0x2c>
 8002d02:	2380      	movs	r3, #128	; 0x80
 8002d04:	025b      	lsls	r3, r3, #9
 8002d06:	18ed      	adds	r5, r5, r3
 8002d08:	0c03      	lsrs	r3, r0, #16
 8002d0a:	18ed      	adds	r5, r5, r3
 8002d0c:	4663      	mov	r3, ip
 8002d0e:	435c      	muls	r4, r3
 8002d10:	434a      	muls	r2, r1
 8002d12:	0436      	lsls	r6, r6, #16
 8002d14:	0c36      	lsrs	r6, r6, #16
 8002d16:	18a1      	adds	r1, r4, r2
 8002d18:	0400      	lsls	r0, r0, #16
 8002d1a:	1980      	adds	r0, r0, r6
 8002d1c:	1949      	adds	r1, r1, r5
 8002d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d20 <__divdi3>:
 8002d20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d22:	4644      	mov	r4, r8
 8002d24:	465f      	mov	r7, fp
 8002d26:	4656      	mov	r6, sl
 8002d28:	464d      	mov	r5, r9
 8002d2a:	b4f0      	push	{r4, r5, r6, r7}
 8002d2c:	1c1c      	adds	r4, r3, #0
 8002d2e:	b085      	sub	sp, #20
 8002d30:	2900      	cmp	r1, #0
 8002d32:	da00      	bge.n	8002d36 <__divdi3+0x16>
 8002d34:	e0db      	b.n	8002eee <__divdi3+0x1ce>
 8002d36:	1c0f      	adds	r7, r1, #0
 8002d38:	2100      	movs	r1, #0
 8002d3a:	1c06      	adds	r6, r0, #0
 8002d3c:	468a      	mov	sl, r1
 8002d3e:	1c10      	adds	r0, r2, #0
 8002d40:	1c19      	adds	r1, r3, #0
 8002d42:	2c00      	cmp	r4, #0
 8002d44:	da00      	bge.n	8002d48 <__divdi3+0x28>
 8002d46:	e0c9      	b.n	8002edc <__divdi3+0x1bc>
 8002d48:	9601      	str	r6, [sp, #4]
 8002d4a:	9000      	str	r0, [sp, #0]
 8002d4c:	4689      	mov	r9, r1
 8002d4e:	4680      	mov	r8, r0
 8002d50:	2900      	cmp	r1, #0
 8002d52:	d151      	bne.n	8002df8 <__divdi3+0xd8>
 8002d54:	42b8      	cmp	r0, r7
 8002d56:	d800      	bhi.n	8002d5a <__divdi3+0x3a>
 8002d58:	e071      	b.n	8002e3e <__divdi3+0x11e>
 8002d5a:	f7ff ffa1 	bl	8002ca0 <__clzsi2>
 8002d5e:	2800      	cmp	r0, #0
 8002d60:	d009      	beq.n	8002d76 <__divdi3+0x56>
 8002d62:	2320      	movs	r3, #32
 8002d64:	4645      	mov	r5, r8
 8002d66:	1c31      	adds	r1, r6, #0
 8002d68:	1a1b      	subs	r3, r3, r0
 8002d6a:	4085      	lsls	r5, r0
 8002d6c:	4087      	lsls	r7, r0
 8002d6e:	40d9      	lsrs	r1, r3
 8002d70:	46a8      	mov	r8, r5
 8002d72:	430f      	orrs	r7, r1
 8002d74:	4086      	lsls	r6, r0
 8002d76:	4642      	mov	r2, r8
 8002d78:	0c15      	lsrs	r5, r2, #16
 8002d7a:	0413      	lsls	r3, r2, #16
 8002d7c:	0c1b      	lsrs	r3, r3, #16
 8002d7e:	1c29      	adds	r1, r5, #0
 8002d80:	1c38      	adds	r0, r7, #0
 8002d82:	469b      	mov	fp, r3
 8002d84:	f7fd f9de 	bl	8000144 <__aeabi_uidiv>
 8002d88:	465b      	mov	r3, fp
 8002d8a:	4343      	muls	r3, r0
 8002d8c:	1c04      	adds	r4, r0, #0
 8002d8e:	1c29      	adds	r1, r5, #0
 8002d90:	1c38      	adds	r0, r7, #0
 8002d92:	4699      	mov	r9, r3
 8002d94:	f7fd fa1a 	bl	80001cc <__aeabi_uidivmod>
 8002d98:	0c33      	lsrs	r3, r6, #16
 8002d9a:	0408      	lsls	r0, r1, #16
 8002d9c:	4318      	orrs	r0, r3
 8002d9e:	4581      	cmp	r9, r0
 8002da0:	d909      	bls.n	8002db6 <__divdi3+0x96>
 8002da2:	4440      	add	r0, r8
 8002da4:	1e63      	subs	r3, r4, #1
 8002da6:	4580      	cmp	r8, r0
 8002da8:	d900      	bls.n	8002dac <__divdi3+0x8c>
 8002daa:	e178      	b.n	800309e <__divdi3+0x37e>
 8002dac:	4581      	cmp	r9, r0
 8002dae:	d800      	bhi.n	8002db2 <__divdi3+0x92>
 8002db0:	e175      	b.n	800309e <__divdi3+0x37e>
 8002db2:	3c02      	subs	r4, #2
 8002db4:	4440      	add	r0, r8
 8002db6:	4649      	mov	r1, r9
 8002db8:	1a41      	subs	r1, r0, r1
 8002dba:	4689      	mov	r9, r1
 8002dbc:	1c08      	adds	r0, r1, #0
 8002dbe:	1c29      	adds	r1, r5, #0
 8002dc0:	f7fd f9c0 	bl	8000144 <__aeabi_uidiv>
 8002dc4:	465a      	mov	r2, fp
 8002dc6:	4342      	muls	r2, r0
 8002dc8:	1c07      	adds	r7, r0, #0
 8002dca:	1c29      	adds	r1, r5, #0
 8002dcc:	4648      	mov	r0, r9
 8002dce:	4693      	mov	fp, r2
 8002dd0:	f7fd f9fc 	bl	80001cc <__aeabi_uidivmod>
 8002dd4:	0436      	lsls	r6, r6, #16
 8002dd6:	0409      	lsls	r1, r1, #16
 8002dd8:	0c36      	lsrs	r6, r6, #16
 8002dda:	430e      	orrs	r6, r1
 8002ddc:	45b3      	cmp	fp, r6
 8002dde:	d907      	bls.n	8002df0 <__divdi3+0xd0>
 8002de0:	4446      	add	r6, r8
 8002de2:	1e7b      	subs	r3, r7, #1
 8002de4:	45b0      	cmp	r8, r6
 8002de6:	d802      	bhi.n	8002dee <__divdi3+0xce>
 8002de8:	3f02      	subs	r7, #2
 8002dea:	45b3      	cmp	fp, r6
 8002dec:	d800      	bhi.n	8002df0 <__divdi3+0xd0>
 8002dee:	1c1f      	adds	r7, r3, #0
 8002df0:	0424      	lsls	r4, r4, #16
 8002df2:	4327      	orrs	r7, r4
 8002df4:	2400      	movs	r4, #0
 8002df6:	e003      	b.n	8002e00 <__divdi3+0xe0>
 8002df8:	42b9      	cmp	r1, r7
 8002dfa:	d911      	bls.n	8002e20 <__divdi3+0x100>
 8002dfc:	2400      	movs	r4, #0
 8002dfe:	2700      	movs	r7, #0
 8002e00:	4652      	mov	r2, sl
 8002e02:	1c38      	adds	r0, r7, #0
 8002e04:	1c21      	adds	r1, r4, #0
 8002e06:	2a00      	cmp	r2, #0
 8002e08:	d003      	beq.n	8002e12 <__divdi3+0xf2>
 8002e0a:	1c3b      	adds	r3, r7, #0
 8002e0c:	2100      	movs	r1, #0
 8002e0e:	4258      	negs	r0, r3
 8002e10:	41a1      	sbcs	r1, r4
 8002e12:	b005      	add	sp, #20
 8002e14:	bc3c      	pop	{r2, r3, r4, r5}
 8002e16:	4690      	mov	r8, r2
 8002e18:	4699      	mov	r9, r3
 8002e1a:	46a2      	mov	sl, r4
 8002e1c:	46ab      	mov	fp, r5
 8002e1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e20:	1c08      	adds	r0, r1, #0
 8002e22:	f7ff ff3d 	bl	8002ca0 <__clzsi2>
 8002e26:	1e04      	subs	r4, r0, #0
 8002e28:	d000      	beq.n	8002e2c <__divdi3+0x10c>
 8002e2a:	e0bf      	b.n	8002fac <__divdi3+0x28c>
 8002e2c:	45b9      	cmp	r9, r7
 8002e2e:	d200      	bcs.n	8002e32 <__divdi3+0x112>
 8002e30:	e142      	b.n	80030b8 <__divdi3+0x398>
 8002e32:	9d01      	ldr	r5, [sp, #4]
 8002e34:	9900      	ldr	r1, [sp, #0]
 8002e36:	1c07      	adds	r7, r0, #0
 8002e38:	428d      	cmp	r5, r1
 8002e3a:	4147      	adcs	r7, r0
 8002e3c:	e7e0      	b.n	8002e00 <__divdi3+0xe0>
 8002e3e:	2800      	cmp	r0, #0
 8002e40:	d104      	bne.n	8002e4c <__divdi3+0x12c>
 8002e42:	2001      	movs	r0, #1
 8002e44:	2100      	movs	r1, #0
 8002e46:	f7fd f97d 	bl	8000144 <__aeabi_uidiv>
 8002e4a:	4680      	mov	r8, r0
 8002e4c:	4640      	mov	r0, r8
 8002e4e:	f7ff ff27 	bl	8002ca0 <__clzsi2>
 8002e52:	2800      	cmp	r0, #0
 8002e54:	d152      	bne.n	8002efc <__divdi3+0x1dc>
 8002e56:	4641      	mov	r1, r8
 8002e58:	4644      	mov	r4, r8
 8002e5a:	040b      	lsls	r3, r1, #16
 8002e5c:	1b3c      	subs	r4, r7, r4
 8002e5e:	0c1b      	lsrs	r3, r3, #16
 8002e60:	46a3      	mov	fp, r4
 8002e62:	0c0d      	lsrs	r5, r1, #16
 8002e64:	9300      	str	r3, [sp, #0]
 8002e66:	2401      	movs	r4, #1
 8002e68:	1c29      	adds	r1, r5, #0
 8002e6a:	4658      	mov	r0, fp
 8002e6c:	f7fd f96a 	bl	8000144 <__aeabi_uidiv>
 8002e70:	9f00      	ldr	r7, [sp, #0]
 8002e72:	4681      	mov	r9, r0
 8002e74:	4347      	muls	r7, r0
 8002e76:	1c29      	adds	r1, r5, #0
 8002e78:	4658      	mov	r0, fp
 8002e7a:	f7fd f9a7 	bl	80001cc <__aeabi_uidivmod>
 8002e7e:	0c33      	lsrs	r3, r6, #16
 8002e80:	0409      	lsls	r1, r1, #16
 8002e82:	4319      	orrs	r1, r3
 8002e84:	428f      	cmp	r7, r1
 8002e86:	d908      	bls.n	8002e9a <__divdi3+0x17a>
 8002e88:	464b      	mov	r3, r9
 8002e8a:	4441      	add	r1, r8
 8002e8c:	3b01      	subs	r3, #1
 8002e8e:	4588      	cmp	r8, r1
 8002e90:	d802      	bhi.n	8002e98 <__divdi3+0x178>
 8002e92:	428f      	cmp	r7, r1
 8002e94:	d900      	bls.n	8002e98 <__divdi3+0x178>
 8002e96:	e11a      	b.n	80030ce <__divdi3+0x3ae>
 8002e98:	4699      	mov	r9, r3
 8002e9a:	1bc9      	subs	r1, r1, r7
 8002e9c:	468b      	mov	fp, r1
 8002e9e:	1c08      	adds	r0, r1, #0
 8002ea0:	1c29      	adds	r1, r5, #0
 8002ea2:	f7fd f94f 	bl	8000144 <__aeabi_uidiv>
 8002ea6:	9b00      	ldr	r3, [sp, #0]
 8002ea8:	1c29      	adds	r1, r5, #0
 8002eaa:	4343      	muls	r3, r0
 8002eac:	1c07      	adds	r7, r0, #0
 8002eae:	4658      	mov	r0, fp
 8002eb0:	9300      	str	r3, [sp, #0]
 8002eb2:	f7fd f98b 	bl	80001cc <__aeabi_uidivmod>
 8002eb6:	0436      	lsls	r6, r6, #16
 8002eb8:	9d00      	ldr	r5, [sp, #0]
 8002eba:	0409      	lsls	r1, r1, #16
 8002ebc:	0c36      	lsrs	r6, r6, #16
 8002ebe:	430e      	orrs	r6, r1
 8002ec0:	42b5      	cmp	r5, r6
 8002ec2:	d907      	bls.n	8002ed4 <__divdi3+0x1b4>
 8002ec4:	4446      	add	r6, r8
 8002ec6:	1e7b      	subs	r3, r7, #1
 8002ec8:	45b0      	cmp	r8, r6
 8002eca:	d802      	bhi.n	8002ed2 <__divdi3+0x1b2>
 8002ecc:	3f02      	subs	r7, #2
 8002ece:	42b5      	cmp	r5, r6
 8002ed0:	d800      	bhi.n	8002ed4 <__divdi3+0x1b4>
 8002ed2:	1c1f      	adds	r7, r3, #0
 8002ed4:	4649      	mov	r1, r9
 8002ed6:	040e      	lsls	r6, r1, #16
 8002ed8:	4337      	orrs	r7, r6
 8002eda:	e791      	b.n	8002e00 <__divdi3+0xe0>
 8002edc:	4652      	mov	r2, sl
 8002ede:	43d2      	mvns	r2, r2
 8002ee0:	1c03      	adds	r3, r0, #0
 8002ee2:	1c0c      	adds	r4, r1, #0
 8002ee4:	4692      	mov	sl, r2
 8002ee6:	2100      	movs	r1, #0
 8002ee8:	4258      	negs	r0, r3
 8002eea:	41a1      	sbcs	r1, r4
 8002eec:	e72c      	b.n	8002d48 <__divdi3+0x28>
 8002eee:	2700      	movs	r7, #0
 8002ef0:	4246      	negs	r6, r0
 8002ef2:	418f      	sbcs	r7, r1
 8002ef4:	2101      	movs	r1, #1
 8002ef6:	4249      	negs	r1, r1
 8002ef8:	468a      	mov	sl, r1
 8002efa:	e720      	b.n	8002d3e <__divdi3+0x1e>
 8002efc:	2320      	movs	r3, #32
 8002efe:	1a1b      	subs	r3, r3, r0
 8002f00:	4642      	mov	r2, r8
 8002f02:	1c35      	adds	r5, r6, #0
 8002f04:	4082      	lsls	r2, r0
 8002f06:	1c3c      	adds	r4, r7, #0
 8002f08:	40dd      	lsrs	r5, r3
 8002f0a:	40dc      	lsrs	r4, r3
 8002f0c:	4087      	lsls	r7, r0
 8002f0e:	1c2b      	adds	r3, r5, #0
 8002f10:	0c15      	lsrs	r5, r2, #16
 8002f12:	433b      	orrs	r3, r7
 8002f14:	1c29      	adds	r1, r5, #0
 8002f16:	4086      	lsls	r6, r0
 8002f18:	1c20      	adds	r0, r4, #0
 8002f1a:	9300      	str	r3, [sp, #0]
 8002f1c:	0417      	lsls	r7, r2, #16
 8002f1e:	4690      	mov	r8, r2
 8002f20:	f7fd f910 	bl	8000144 <__aeabi_uidiv>
 8002f24:	0c3f      	lsrs	r7, r7, #16
 8002f26:	1c01      	adds	r1, r0, #0
 8002f28:	4379      	muls	r1, r7
 8002f2a:	4681      	mov	r9, r0
 8002f2c:	468b      	mov	fp, r1
 8002f2e:	1c20      	adds	r0, r4, #0
 8002f30:	1c29      	adds	r1, r5, #0
 8002f32:	f7fd f94b 	bl	80001cc <__aeabi_uidivmod>
 8002f36:	9c00      	ldr	r4, [sp, #0]
 8002f38:	0409      	lsls	r1, r1, #16
 8002f3a:	0c23      	lsrs	r3, r4, #16
 8002f3c:	4319      	orrs	r1, r3
 8002f3e:	458b      	cmp	fp, r1
 8002f40:	d90c      	bls.n	8002f5c <__divdi3+0x23c>
 8002f42:	464b      	mov	r3, r9
 8002f44:	4441      	add	r1, r8
 8002f46:	3b01      	subs	r3, #1
 8002f48:	4588      	cmp	r8, r1
 8002f4a:	d900      	bls.n	8002f4e <__divdi3+0x22e>
 8002f4c:	e0bd      	b.n	80030ca <__divdi3+0x3aa>
 8002f4e:	458b      	cmp	fp, r1
 8002f50:	d800      	bhi.n	8002f54 <__divdi3+0x234>
 8002f52:	e0ba      	b.n	80030ca <__divdi3+0x3aa>
 8002f54:	2202      	movs	r2, #2
 8002f56:	4252      	negs	r2, r2
 8002f58:	4491      	add	r9, r2
 8002f5a:	4441      	add	r1, r8
 8002f5c:	465c      	mov	r4, fp
 8002f5e:	1b0c      	subs	r4, r1, r4
 8002f60:	1c20      	adds	r0, r4, #0
 8002f62:	1c29      	adds	r1, r5, #0
 8002f64:	9401      	str	r4, [sp, #4]
 8002f66:	f7fd f8ed 	bl	8000144 <__aeabi_uidiv>
 8002f6a:	1c39      	adds	r1, r7, #0
 8002f6c:	4341      	muls	r1, r0
 8002f6e:	1c04      	adds	r4, r0, #0
 8002f70:	468b      	mov	fp, r1
 8002f72:	9801      	ldr	r0, [sp, #4]
 8002f74:	1c29      	adds	r1, r5, #0
 8002f76:	f7fd f929 	bl	80001cc <__aeabi_uidivmod>
 8002f7a:	9a00      	ldr	r2, [sp, #0]
 8002f7c:	0409      	lsls	r1, r1, #16
 8002f7e:	0413      	lsls	r3, r2, #16
 8002f80:	0c1b      	lsrs	r3, r3, #16
 8002f82:	4319      	orrs	r1, r3
 8002f84:	458b      	cmp	fp, r1
 8002f86:	d909      	bls.n	8002f9c <__divdi3+0x27c>
 8002f88:	4441      	add	r1, r8
 8002f8a:	1e63      	subs	r3, r4, #1
 8002f8c:	4588      	cmp	r8, r1
 8002f8e:	d900      	bls.n	8002f92 <__divdi3+0x272>
 8002f90:	e097      	b.n	80030c2 <__divdi3+0x3a2>
 8002f92:	458b      	cmp	fp, r1
 8002f94:	d800      	bhi.n	8002f98 <__divdi3+0x278>
 8002f96:	e094      	b.n	80030c2 <__divdi3+0x3a2>
 8002f98:	3c02      	subs	r4, #2
 8002f9a:	4441      	add	r1, r8
 8002f9c:	465b      	mov	r3, fp
 8002f9e:	1acb      	subs	r3, r1, r3
 8002fa0:	4649      	mov	r1, r9
 8002fa2:	469b      	mov	fp, r3
 8002fa4:	040b      	lsls	r3, r1, #16
 8002fa6:	431c      	orrs	r4, r3
 8002fa8:	9700      	str	r7, [sp, #0]
 8002faa:	e75d      	b.n	8002e68 <__divdi3+0x148>
 8002fac:	9d00      	ldr	r5, [sp, #0]
 8002fae:	2320      	movs	r3, #32
 8002fb0:	1a1b      	subs	r3, r3, r0
 8002fb2:	464a      	mov	r2, r9
 8002fb4:	4082      	lsls	r2, r0
 8002fb6:	40dd      	lsrs	r5, r3
 8002fb8:	4315      	orrs	r5, r2
 8002fba:	1c39      	adds	r1, r7, #0
 8002fbc:	9a00      	ldr	r2, [sp, #0]
 8002fbe:	40d9      	lsrs	r1, r3
 8002fc0:	4082      	lsls	r2, r0
 8002fc2:	4688      	mov	r8, r1
 8002fc4:	1c31      	adds	r1, r6, #0
 8002fc6:	9200      	str	r2, [sp, #0]
 8002fc8:	40d9      	lsrs	r1, r3
 8002fca:	1c3a      	adds	r2, r7, #0
 8002fcc:	4082      	lsls	r2, r0
 8002fce:	1c0b      	adds	r3, r1, #0
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	9301      	str	r3, [sp, #4]
 8002fd4:	0c2f      	lsrs	r7, r5, #16
 8002fd6:	042b      	lsls	r3, r5, #16
 8002fd8:	0c1b      	lsrs	r3, r3, #16
 8002fda:	1c39      	adds	r1, r7, #0
 8002fdc:	4640      	mov	r0, r8
 8002fde:	9302      	str	r3, [sp, #8]
 8002fe0:	f7fd f8b0 	bl	8000144 <__aeabi_uidiv>
 8002fe4:	9a02      	ldr	r2, [sp, #8]
 8002fe6:	4681      	mov	r9, r0
 8002fe8:	4342      	muls	r2, r0
 8002fea:	1c39      	adds	r1, r7, #0
 8002fec:	4640      	mov	r0, r8
 8002fee:	4693      	mov	fp, r2
 8002ff0:	f7fd f8ec 	bl	80001cc <__aeabi_uidivmod>
 8002ff4:	9a01      	ldr	r2, [sp, #4]
 8002ff6:	0409      	lsls	r1, r1, #16
 8002ff8:	0c13      	lsrs	r3, r2, #16
 8002ffa:	4319      	orrs	r1, r3
 8002ffc:	458b      	cmp	fp, r1
 8002ffe:	d90a      	bls.n	8003016 <__divdi3+0x2f6>
 8003000:	464b      	mov	r3, r9
 8003002:	1949      	adds	r1, r1, r5
 8003004:	3b01      	subs	r3, #1
 8003006:	428d      	cmp	r5, r1
 8003008:	d85d      	bhi.n	80030c6 <__divdi3+0x3a6>
 800300a:	458b      	cmp	fp, r1
 800300c:	d95b      	bls.n	80030c6 <__divdi3+0x3a6>
 800300e:	2302      	movs	r3, #2
 8003010:	425b      	negs	r3, r3
 8003012:	4499      	add	r9, r3
 8003014:	1949      	adds	r1, r1, r5
 8003016:	465a      	mov	r2, fp
 8003018:	1a8a      	subs	r2, r1, r2
 800301a:	1c10      	adds	r0, r2, #0
 800301c:	1c39      	adds	r1, r7, #0
 800301e:	9203      	str	r2, [sp, #12]
 8003020:	f7fd f890 	bl	8000144 <__aeabi_uidiv>
 8003024:	9b02      	ldr	r3, [sp, #8]
 8003026:	4680      	mov	r8, r0
 8003028:	4343      	muls	r3, r0
 800302a:	1c39      	adds	r1, r7, #0
 800302c:	9803      	ldr	r0, [sp, #12]
 800302e:	469b      	mov	fp, r3
 8003030:	f7fd f8cc 	bl	80001cc <__aeabi_uidivmod>
 8003034:	9a01      	ldr	r2, [sp, #4]
 8003036:	0409      	lsls	r1, r1, #16
 8003038:	0413      	lsls	r3, r2, #16
 800303a:	0c1b      	lsrs	r3, r3, #16
 800303c:	4319      	orrs	r1, r3
 800303e:	458b      	cmp	fp, r1
 8003040:	d90a      	bls.n	8003058 <__divdi3+0x338>
 8003042:	4643      	mov	r3, r8
 8003044:	1949      	adds	r1, r1, r5
 8003046:	3b01      	subs	r3, #1
 8003048:	428d      	cmp	r5, r1
 800304a:	d838      	bhi.n	80030be <__divdi3+0x39e>
 800304c:	458b      	cmp	fp, r1
 800304e:	d936      	bls.n	80030be <__divdi3+0x39e>
 8003050:	2302      	movs	r3, #2
 8003052:	425b      	negs	r3, r3
 8003054:	4498      	add	r8, r3
 8003056:	1949      	adds	r1, r1, r5
 8003058:	465d      	mov	r5, fp
 800305a:	1b4d      	subs	r5, r1, r5
 800305c:	46ab      	mov	fp, r5
 800305e:	4649      	mov	r1, r9
 8003060:	9d00      	ldr	r5, [sp, #0]
 8003062:	040f      	lsls	r7, r1, #16
 8003064:	4642      	mov	r2, r8
 8003066:	4317      	orrs	r7, r2
 8003068:	042a      	lsls	r2, r5, #16
 800306a:	0c12      	lsrs	r2, r2, #16
 800306c:	043b      	lsls	r3, r7, #16
 800306e:	0c2d      	lsrs	r5, r5, #16
 8003070:	0c1b      	lsrs	r3, r3, #16
 8003072:	0c38      	lsrs	r0, r7, #16
 8003074:	1c11      	adds	r1, r2, #0
 8003076:	4359      	muls	r1, r3
 8003078:	4342      	muls	r2, r0
 800307a:	436b      	muls	r3, r5
 800307c:	4368      	muls	r0, r5
 800307e:	18d3      	adds	r3, r2, r3
 8003080:	0c0d      	lsrs	r5, r1, #16
 8003082:	195b      	adds	r3, r3, r5
 8003084:	468c      	mov	ip, r1
 8003086:	429a      	cmp	r2, r3
 8003088:	d902      	bls.n	8003090 <__divdi3+0x370>
 800308a:	2280      	movs	r2, #128	; 0x80
 800308c:	0252      	lsls	r2, r2, #9
 800308e:	1880      	adds	r0, r0, r2
 8003090:	0c1d      	lsrs	r5, r3, #16
 8003092:	1940      	adds	r0, r0, r5
 8003094:	4583      	cmp	fp, r0
 8003096:	d30c      	bcc.n	80030b2 <__divdi3+0x392>
 8003098:	d003      	beq.n	80030a2 <__divdi3+0x382>
 800309a:	2400      	movs	r4, #0
 800309c:	e6b0      	b.n	8002e00 <__divdi3+0xe0>
 800309e:	1c1c      	adds	r4, r3, #0
 80030a0:	e689      	b.n	8002db6 <__divdi3+0x96>
 80030a2:	4665      	mov	r5, ip
 80030a4:	042a      	lsls	r2, r5, #16
 80030a6:	041b      	lsls	r3, r3, #16
 80030a8:	0c12      	lsrs	r2, r2, #16
 80030aa:	189b      	adds	r3, r3, r2
 80030ac:	40a6      	lsls	r6, r4
 80030ae:	429e      	cmp	r6, r3
 80030b0:	d2f3      	bcs.n	800309a <__divdi3+0x37a>
 80030b2:	3f01      	subs	r7, #1
 80030b4:	2400      	movs	r4, #0
 80030b6:	e6a3      	b.n	8002e00 <__divdi3+0xe0>
 80030b8:	2400      	movs	r4, #0
 80030ba:	2701      	movs	r7, #1
 80030bc:	e6a0      	b.n	8002e00 <__divdi3+0xe0>
 80030be:	4698      	mov	r8, r3
 80030c0:	e7ca      	b.n	8003058 <__divdi3+0x338>
 80030c2:	1c1c      	adds	r4, r3, #0
 80030c4:	e76a      	b.n	8002f9c <__divdi3+0x27c>
 80030c6:	4699      	mov	r9, r3
 80030c8:	e7a5      	b.n	8003016 <__divdi3+0x2f6>
 80030ca:	4699      	mov	r9, r3
 80030cc:	e746      	b.n	8002f5c <__divdi3+0x23c>
 80030ce:	2202      	movs	r2, #2
 80030d0:	4252      	negs	r2, r2
 80030d2:	4491      	add	r9, r2
 80030d4:	4441      	add	r1, r8
 80030d6:	e6e0      	b.n	8002e9a <__divdi3+0x17a>

080030d8 <__udivdi3>:
 80030d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030da:	465f      	mov	r7, fp
 80030dc:	4656      	mov	r6, sl
 80030de:	464d      	mov	r5, r9
 80030e0:	4644      	mov	r4, r8
 80030e2:	b4f0      	push	{r4, r5, r6, r7}
 80030e4:	1c0d      	adds	r5, r1, #0
 80030e6:	b085      	sub	sp, #20
 80030e8:	1c06      	adds	r6, r0, #0
 80030ea:	4692      	mov	sl, r2
 80030ec:	4698      	mov	r8, r3
 80030ee:	9002      	str	r0, [sp, #8]
 80030f0:	9101      	str	r1, [sp, #4]
 80030f2:	9203      	str	r2, [sp, #12]
 80030f4:	1c1f      	adds	r7, r3, #0
 80030f6:	1c14      	adds	r4, r2, #0
 80030f8:	4683      	mov	fp, r0
 80030fa:	46a9      	mov	r9, r5
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d159      	bne.n	80031b4 <__udivdi3+0xdc>
 8003100:	42aa      	cmp	r2, r5
 8003102:	d969      	bls.n	80031d8 <__udivdi3+0x100>
 8003104:	1c10      	adds	r0, r2, #0
 8003106:	f7ff fdcb 	bl	8002ca0 <__clzsi2>
 800310a:	2800      	cmp	r0, #0
 800310c:	d00a      	beq.n	8003124 <__udivdi3+0x4c>
 800310e:	2320      	movs	r3, #32
 8003110:	1a1b      	subs	r3, r3, r0
 8003112:	1c31      	adds	r1, r6, #0
 8003114:	40d9      	lsrs	r1, r3
 8003116:	4085      	lsls	r5, r0
 8003118:	1c0b      	adds	r3, r1, #0
 800311a:	432b      	orrs	r3, r5
 800311c:	4086      	lsls	r6, r0
 800311e:	4084      	lsls	r4, r0
 8003120:	4699      	mov	r9, r3
 8003122:	46b3      	mov	fp, r6
 8003124:	0c25      	lsrs	r5, r4, #16
 8003126:	0423      	lsls	r3, r4, #16
 8003128:	0c1b      	lsrs	r3, r3, #16
 800312a:	1c29      	adds	r1, r5, #0
 800312c:	4648      	mov	r0, r9
 800312e:	4698      	mov	r8, r3
 8003130:	f7fd f808 	bl	8000144 <__aeabi_uidiv>
 8003134:	4646      	mov	r6, r8
 8003136:	1c07      	adds	r7, r0, #0
 8003138:	4346      	muls	r6, r0
 800313a:	1c29      	adds	r1, r5, #0
 800313c:	4648      	mov	r0, r9
 800313e:	f7fd f845 	bl	80001cc <__aeabi_uidivmod>
 8003142:	465a      	mov	r2, fp
 8003144:	0409      	lsls	r1, r1, #16
 8003146:	0c13      	lsrs	r3, r2, #16
 8003148:	4319      	orrs	r1, r3
 800314a:	428e      	cmp	r6, r1
 800314c:	d909      	bls.n	8003162 <__udivdi3+0x8a>
 800314e:	1909      	adds	r1, r1, r4
 8003150:	1e7b      	subs	r3, r7, #1
 8003152:	428c      	cmp	r4, r1
 8003154:	d900      	bls.n	8003158 <__udivdi3+0x80>
 8003156:	e157      	b.n	8003408 <__udivdi3+0x330>
 8003158:	428e      	cmp	r6, r1
 800315a:	d800      	bhi.n	800315e <__udivdi3+0x86>
 800315c:	e154      	b.n	8003408 <__udivdi3+0x330>
 800315e:	3f02      	subs	r7, #2
 8003160:	1909      	adds	r1, r1, r4
 8003162:	1b89      	subs	r1, r1, r6
 8003164:	4689      	mov	r9, r1
 8003166:	1c08      	adds	r0, r1, #0
 8003168:	1c29      	adds	r1, r5, #0
 800316a:	f7fc ffeb 	bl	8000144 <__aeabi_uidiv>
 800316e:	4643      	mov	r3, r8
 8003170:	4343      	muls	r3, r0
 8003172:	1c06      	adds	r6, r0, #0
 8003174:	1c29      	adds	r1, r5, #0
 8003176:	4648      	mov	r0, r9
 8003178:	4698      	mov	r8, r3
 800317a:	f7fd f827 	bl	80001cc <__aeabi_uidivmod>
 800317e:	465a      	mov	r2, fp
 8003180:	0413      	lsls	r3, r2, #16
 8003182:	0409      	lsls	r1, r1, #16
 8003184:	0c1b      	lsrs	r3, r3, #16
 8003186:	4319      	orrs	r1, r3
 8003188:	4588      	cmp	r8, r1
 800318a:	d908      	bls.n	800319e <__udivdi3+0xc6>
 800318c:	1909      	adds	r1, r1, r4
 800318e:	1e73      	subs	r3, r6, #1
 8003190:	428c      	cmp	r4, r1
 8003192:	d900      	bls.n	8003196 <__udivdi3+0xbe>
 8003194:	e136      	b.n	8003404 <__udivdi3+0x32c>
 8003196:	3e02      	subs	r6, #2
 8003198:	4588      	cmp	r8, r1
 800319a:	d800      	bhi.n	800319e <__udivdi3+0xc6>
 800319c:	e132      	b.n	8003404 <__udivdi3+0x32c>
 800319e:	0438      	lsls	r0, r7, #16
 80031a0:	4330      	orrs	r0, r6
 80031a2:	2700      	movs	r7, #0
 80031a4:	1c39      	adds	r1, r7, #0
 80031a6:	b005      	add	sp, #20
 80031a8:	bc3c      	pop	{r2, r3, r4, r5}
 80031aa:	4690      	mov	r8, r2
 80031ac:	4699      	mov	r9, r3
 80031ae:	46a2      	mov	sl, r4
 80031b0:	46ab      	mov	fp, r5
 80031b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031b4:	9a01      	ldr	r2, [sp, #4]
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d862      	bhi.n	8003280 <__udivdi3+0x1a8>
 80031ba:	1c18      	adds	r0, r3, #0
 80031bc:	f7ff fd70 	bl	8002ca0 <__clzsi2>
 80031c0:	1e04      	subs	r4, r0, #0
 80031c2:	d160      	bne.n	8003286 <__udivdi3+0x1ae>
 80031c4:	9b01      	ldr	r3, [sp, #4]
 80031c6:	429f      	cmp	r7, r3
 80031c8:	d200      	bcs.n	80031cc <__udivdi3+0xf4>
 80031ca:	e12c      	b.n	8003426 <__udivdi3+0x34e>
 80031cc:	9f02      	ldr	r7, [sp, #8]
 80031ce:	9903      	ldr	r1, [sp, #12]
 80031d0:	428f      	cmp	r7, r1
 80031d2:	4160      	adcs	r0, r4
 80031d4:	2700      	movs	r7, #0
 80031d6:	e7e5      	b.n	80031a4 <__udivdi3+0xcc>
 80031d8:	2a00      	cmp	r2, #0
 80031da:	d104      	bne.n	80031e6 <__udivdi3+0x10e>
 80031dc:	2001      	movs	r0, #1
 80031de:	2100      	movs	r1, #0
 80031e0:	f7fc ffb0 	bl	8000144 <__aeabi_uidiv>
 80031e4:	1c04      	adds	r4, r0, #0
 80031e6:	1c20      	adds	r0, r4, #0
 80031e8:	f7ff fd5a 	bl	8002ca0 <__clzsi2>
 80031ec:	2800      	cmp	r0, #0
 80031ee:	d000      	beq.n	80031f2 <__udivdi3+0x11a>
 80031f0:	e0b9      	b.n	8003366 <__udivdi3+0x28e>
 80031f2:	0423      	lsls	r3, r4, #16
 80031f4:	1b2d      	subs	r5, r5, r4
 80031f6:	0c1b      	lsrs	r3, r3, #16
 80031f8:	46a9      	mov	r9, r5
 80031fa:	0c26      	lsrs	r6, r4, #16
 80031fc:	4698      	mov	r8, r3
 80031fe:	2701      	movs	r7, #1
 8003200:	1c31      	adds	r1, r6, #0
 8003202:	4648      	mov	r0, r9
 8003204:	f7fc ff9e 	bl	8000144 <__aeabi_uidiv>
 8003208:	4641      	mov	r1, r8
 800320a:	4341      	muls	r1, r0
 800320c:	1c05      	adds	r5, r0, #0
 800320e:	468a      	mov	sl, r1
 8003210:	4648      	mov	r0, r9
 8003212:	1c31      	adds	r1, r6, #0
 8003214:	f7fc ffda 	bl	80001cc <__aeabi_uidivmod>
 8003218:	465a      	mov	r2, fp
 800321a:	0408      	lsls	r0, r1, #16
 800321c:	0c13      	lsrs	r3, r2, #16
 800321e:	4318      	orrs	r0, r3
 8003220:	4582      	cmp	sl, r0
 8003222:	d907      	bls.n	8003234 <__udivdi3+0x15c>
 8003224:	1900      	adds	r0, r0, r4
 8003226:	1e6b      	subs	r3, r5, #1
 8003228:	4284      	cmp	r4, r0
 800322a:	d802      	bhi.n	8003232 <__udivdi3+0x15a>
 800322c:	4582      	cmp	sl, r0
 800322e:	d900      	bls.n	8003232 <__udivdi3+0x15a>
 8003230:	e110      	b.n	8003454 <__udivdi3+0x37c>
 8003232:	1c1d      	adds	r5, r3, #0
 8003234:	4653      	mov	r3, sl
 8003236:	1ac3      	subs	r3, r0, r3
 8003238:	1c18      	adds	r0, r3, #0
 800323a:	1c31      	adds	r1, r6, #0
 800323c:	469a      	mov	sl, r3
 800323e:	f7fc ff81 	bl	8000144 <__aeabi_uidiv>
 8003242:	4641      	mov	r1, r8
 8003244:	4341      	muls	r1, r0
 8003246:	4681      	mov	r9, r0
 8003248:	4688      	mov	r8, r1
 800324a:	4650      	mov	r0, sl
 800324c:	1c31      	adds	r1, r6, #0
 800324e:	f7fc ffbd 	bl	80001cc <__aeabi_uidivmod>
 8003252:	465a      	mov	r2, fp
 8003254:	0413      	lsls	r3, r2, #16
 8003256:	0409      	lsls	r1, r1, #16
 8003258:	0c1b      	lsrs	r3, r3, #16
 800325a:	4319      	orrs	r1, r3
 800325c:	4588      	cmp	r8, r1
 800325e:	d90b      	bls.n	8003278 <__udivdi3+0x1a0>
 8003260:	464b      	mov	r3, r9
 8003262:	1909      	adds	r1, r1, r4
 8003264:	3b01      	subs	r3, #1
 8003266:	428c      	cmp	r4, r1
 8003268:	d900      	bls.n	800326c <__udivdi3+0x194>
 800326a:	e0cf      	b.n	800340c <__udivdi3+0x334>
 800326c:	4588      	cmp	r8, r1
 800326e:	d800      	bhi.n	8003272 <__udivdi3+0x19a>
 8003270:	e0cc      	b.n	800340c <__udivdi3+0x334>
 8003272:	2302      	movs	r3, #2
 8003274:	425b      	negs	r3, r3
 8003276:	4499      	add	r9, r3
 8003278:	0428      	lsls	r0, r5, #16
 800327a:	4649      	mov	r1, r9
 800327c:	4308      	orrs	r0, r1
 800327e:	e791      	b.n	80031a4 <__udivdi3+0xcc>
 8003280:	2700      	movs	r7, #0
 8003282:	2000      	movs	r0, #0
 8003284:	e78e      	b.n	80031a4 <__udivdi3+0xcc>
 8003286:	2320      	movs	r3, #32
 8003288:	1a1b      	subs	r3, r3, r0
 800328a:	4642      	mov	r2, r8
 800328c:	4657      	mov	r7, sl
 800328e:	4082      	lsls	r2, r0
 8003290:	40df      	lsrs	r7, r3
 8003292:	4317      	orrs	r7, r2
 8003294:	4652      	mov	r2, sl
 8003296:	4082      	lsls	r2, r0
 8003298:	9201      	str	r2, [sp, #4]
 800329a:	1c32      	adds	r2, r6, #0
 800329c:	40da      	lsrs	r2, r3
 800329e:	1c29      	adds	r1, r5, #0
 80032a0:	40d9      	lsrs	r1, r3
 80032a2:	4085      	lsls	r5, r0
 80032a4:	1c13      	adds	r3, r2, #0
 80032a6:	432b      	orrs	r3, r5
 80032a8:	9302      	str	r3, [sp, #8]
 80032aa:	0c3d      	lsrs	r5, r7, #16
 80032ac:	043b      	lsls	r3, r7, #16
 80032ae:	0c1b      	lsrs	r3, r3, #16
 80032b0:	4688      	mov	r8, r1
 80032b2:	1c08      	adds	r0, r1, #0
 80032b4:	1c29      	adds	r1, r5, #0
 80032b6:	469a      	mov	sl, r3
 80032b8:	f7fc ff44 	bl	8000144 <__aeabi_uidiv>
 80032bc:	4653      	mov	r3, sl
 80032be:	4343      	muls	r3, r0
 80032c0:	4681      	mov	r9, r0
 80032c2:	1c29      	adds	r1, r5, #0
 80032c4:	4640      	mov	r0, r8
 80032c6:	469b      	mov	fp, r3
 80032c8:	f7fc ff80 	bl	80001cc <__aeabi_uidivmod>
 80032cc:	9a02      	ldr	r2, [sp, #8]
 80032ce:	0409      	lsls	r1, r1, #16
 80032d0:	0c13      	lsrs	r3, r2, #16
 80032d2:	4319      	orrs	r1, r3
 80032d4:	458b      	cmp	fp, r1
 80032d6:	d906      	bls.n	80032e6 <__udivdi3+0x20e>
 80032d8:	464b      	mov	r3, r9
 80032da:	19c9      	adds	r1, r1, r7
 80032dc:	3b01      	subs	r3, #1
 80032de:	428f      	cmp	r7, r1
 80032e0:	d800      	bhi.n	80032e4 <__udivdi3+0x20c>
 80032e2:	e0ab      	b.n	800343c <__udivdi3+0x364>
 80032e4:	4699      	mov	r9, r3
 80032e6:	465a      	mov	r2, fp
 80032e8:	1a8a      	subs	r2, r1, r2
 80032ea:	1c10      	adds	r0, r2, #0
 80032ec:	1c29      	adds	r1, r5, #0
 80032ee:	4693      	mov	fp, r2
 80032f0:	f7fc ff28 	bl	8000144 <__aeabi_uidiv>
 80032f4:	4653      	mov	r3, sl
 80032f6:	4343      	muls	r3, r0
 80032f8:	1c29      	adds	r1, r5, #0
 80032fa:	4680      	mov	r8, r0
 80032fc:	4658      	mov	r0, fp
 80032fe:	469a      	mov	sl, r3
 8003300:	f7fc ff64 	bl	80001cc <__aeabi_uidivmod>
 8003304:	9a02      	ldr	r2, [sp, #8]
 8003306:	0409      	lsls	r1, r1, #16
 8003308:	0415      	lsls	r5, r2, #16
 800330a:	0c2d      	lsrs	r5, r5, #16
 800330c:	4329      	orrs	r1, r5
 800330e:	458a      	cmp	sl, r1
 8003310:	d906      	bls.n	8003320 <__udivdi3+0x248>
 8003312:	4643      	mov	r3, r8
 8003314:	19c9      	adds	r1, r1, r7
 8003316:	3b01      	subs	r3, #1
 8003318:	428f      	cmp	r7, r1
 800331a:	d800      	bhi.n	800331e <__udivdi3+0x246>
 800331c:	e086      	b.n	800342c <__udivdi3+0x354>
 800331e:	4698      	mov	r8, r3
 8003320:	4657      	mov	r7, sl
 8003322:	1bcf      	subs	r7, r1, r7
 8003324:	46ba      	mov	sl, r7
 8003326:	4649      	mov	r1, r9
 8003328:	9f01      	ldr	r7, [sp, #4]
 800332a:	0408      	lsls	r0, r1, #16
 800332c:	4642      	mov	r2, r8
 800332e:	4310      	orrs	r0, r2
 8003330:	043d      	lsls	r5, r7, #16
 8003332:	0c2d      	lsrs	r5, r5, #16
 8003334:	0403      	lsls	r3, r0, #16
 8003336:	0c3f      	lsrs	r7, r7, #16
 8003338:	0c1b      	lsrs	r3, r3, #16
 800333a:	0c02      	lsrs	r2, r0, #16
 800333c:	1c29      	adds	r1, r5, #0
 800333e:	4359      	muls	r1, r3
 8003340:	4355      	muls	r5, r2
 8003342:	437b      	muls	r3, r7
 8003344:	437a      	muls	r2, r7
 8003346:	18eb      	adds	r3, r5, r3
 8003348:	0c0f      	lsrs	r7, r1, #16
 800334a:	19db      	adds	r3, r3, r7
 800334c:	468c      	mov	ip, r1
 800334e:	429d      	cmp	r5, r3
 8003350:	d902      	bls.n	8003358 <__udivdi3+0x280>
 8003352:	2780      	movs	r7, #128	; 0x80
 8003354:	027f      	lsls	r7, r7, #9
 8003356:	19d2      	adds	r2, r2, r7
 8003358:	0c1d      	lsrs	r5, r3, #16
 800335a:	1952      	adds	r2, r2, r5
 800335c:	4592      	cmp	sl, r2
 800335e:	d35f      	bcc.n	8003420 <__udivdi3+0x348>
 8003360:	d056      	beq.n	8003410 <__udivdi3+0x338>
 8003362:	2700      	movs	r7, #0
 8003364:	e71e      	b.n	80031a4 <__udivdi3+0xcc>
 8003366:	2320      	movs	r3, #32
 8003368:	1a1b      	subs	r3, r3, r0
 800336a:	1c31      	adds	r1, r6, #0
 800336c:	1c2f      	adds	r7, r5, #0
 800336e:	40d9      	lsrs	r1, r3
 8003370:	40df      	lsrs	r7, r3
 8003372:	4085      	lsls	r5, r0
 8003374:	1c0b      	adds	r3, r1, #0
 8003376:	4084      	lsls	r4, r0
 8003378:	432b      	orrs	r3, r5
 800337a:	4086      	lsls	r6, r0
 800337c:	9301      	str	r3, [sp, #4]
 800337e:	46b3      	mov	fp, r6
 8003380:	0423      	lsls	r3, r4, #16
 8003382:	0c26      	lsrs	r6, r4, #16
 8003384:	0c1b      	lsrs	r3, r3, #16
 8003386:	1c38      	adds	r0, r7, #0
 8003388:	1c31      	adds	r1, r6, #0
 800338a:	4698      	mov	r8, r3
 800338c:	f7fc feda 	bl	8000144 <__aeabi_uidiv>
 8003390:	4642      	mov	r2, r8
 8003392:	4342      	muls	r2, r0
 8003394:	1c05      	adds	r5, r0, #0
 8003396:	1c31      	adds	r1, r6, #0
 8003398:	1c38      	adds	r0, r7, #0
 800339a:	4691      	mov	r9, r2
 800339c:	f7fc ff16 	bl	80001cc <__aeabi_uidivmod>
 80033a0:	9f01      	ldr	r7, [sp, #4]
 80033a2:	0409      	lsls	r1, r1, #16
 80033a4:	0c3b      	lsrs	r3, r7, #16
 80033a6:	4319      	orrs	r1, r3
 80033a8:	4589      	cmp	r9, r1
 80033aa:	d907      	bls.n	80033bc <__udivdi3+0x2e4>
 80033ac:	1909      	adds	r1, r1, r4
 80033ae:	1e6b      	subs	r3, r5, #1
 80033b0:	428c      	cmp	r4, r1
 80033b2:	d84d      	bhi.n	8003450 <__udivdi3+0x378>
 80033b4:	4589      	cmp	r9, r1
 80033b6:	d94b      	bls.n	8003450 <__udivdi3+0x378>
 80033b8:	3d02      	subs	r5, #2
 80033ba:	1909      	adds	r1, r1, r4
 80033bc:	464a      	mov	r2, r9
 80033be:	1a8a      	subs	r2, r1, r2
 80033c0:	1c10      	adds	r0, r2, #0
 80033c2:	1c31      	adds	r1, r6, #0
 80033c4:	4692      	mov	sl, r2
 80033c6:	f7fc febd 	bl	8000144 <__aeabi_uidiv>
 80033ca:	4643      	mov	r3, r8
 80033cc:	4343      	muls	r3, r0
 80033ce:	1c07      	adds	r7, r0, #0
 80033d0:	1c31      	adds	r1, r6, #0
 80033d2:	4650      	mov	r0, sl
 80033d4:	4699      	mov	r9, r3
 80033d6:	f7fc fef9 	bl	80001cc <__aeabi_uidivmod>
 80033da:	9a01      	ldr	r2, [sp, #4]
 80033dc:	0409      	lsls	r1, r1, #16
 80033de:	0413      	lsls	r3, r2, #16
 80033e0:	0c1b      	lsrs	r3, r3, #16
 80033e2:	4319      	orrs	r1, r3
 80033e4:	4589      	cmp	r9, r1
 80033e6:	d907      	bls.n	80033f8 <__udivdi3+0x320>
 80033e8:	1909      	adds	r1, r1, r4
 80033ea:	1e7b      	subs	r3, r7, #1
 80033ec:	428c      	cmp	r4, r1
 80033ee:	d82d      	bhi.n	800344c <__udivdi3+0x374>
 80033f0:	4589      	cmp	r9, r1
 80033f2:	d92b      	bls.n	800344c <__udivdi3+0x374>
 80033f4:	3f02      	subs	r7, #2
 80033f6:	1909      	adds	r1, r1, r4
 80033f8:	464b      	mov	r3, r9
 80033fa:	1acb      	subs	r3, r1, r3
 80033fc:	042d      	lsls	r5, r5, #16
 80033fe:	4699      	mov	r9, r3
 8003400:	432f      	orrs	r7, r5
 8003402:	e6fd      	b.n	8003200 <__udivdi3+0x128>
 8003404:	1c1e      	adds	r6, r3, #0
 8003406:	e6ca      	b.n	800319e <__udivdi3+0xc6>
 8003408:	1c1f      	adds	r7, r3, #0
 800340a:	e6aa      	b.n	8003162 <__udivdi3+0x8a>
 800340c:	4699      	mov	r9, r3
 800340e:	e733      	b.n	8003278 <__udivdi3+0x1a0>
 8003410:	4661      	mov	r1, ip
 8003412:	040a      	lsls	r2, r1, #16
 8003414:	041b      	lsls	r3, r3, #16
 8003416:	0c12      	lsrs	r2, r2, #16
 8003418:	189b      	adds	r3, r3, r2
 800341a:	40a6      	lsls	r6, r4
 800341c:	429e      	cmp	r6, r3
 800341e:	d2a0      	bcs.n	8003362 <__udivdi3+0x28a>
 8003420:	3801      	subs	r0, #1
 8003422:	2700      	movs	r7, #0
 8003424:	e6be      	b.n	80031a4 <__udivdi3+0xcc>
 8003426:	2700      	movs	r7, #0
 8003428:	2001      	movs	r0, #1
 800342a:	e6bb      	b.n	80031a4 <__udivdi3+0xcc>
 800342c:	458a      	cmp	sl, r1
 800342e:	d800      	bhi.n	8003432 <__udivdi3+0x35a>
 8003430:	e775      	b.n	800331e <__udivdi3+0x246>
 8003432:	2302      	movs	r3, #2
 8003434:	425b      	negs	r3, r3
 8003436:	4498      	add	r8, r3
 8003438:	19c9      	adds	r1, r1, r7
 800343a:	e771      	b.n	8003320 <__udivdi3+0x248>
 800343c:	458b      	cmp	fp, r1
 800343e:	d800      	bhi.n	8003442 <__udivdi3+0x36a>
 8003440:	e750      	b.n	80032e4 <__udivdi3+0x20c>
 8003442:	2302      	movs	r3, #2
 8003444:	425b      	negs	r3, r3
 8003446:	4499      	add	r9, r3
 8003448:	19c9      	adds	r1, r1, r7
 800344a:	e74c      	b.n	80032e6 <__udivdi3+0x20e>
 800344c:	1c1f      	adds	r7, r3, #0
 800344e:	e7d3      	b.n	80033f8 <__udivdi3+0x320>
 8003450:	1c1d      	adds	r5, r3, #0
 8003452:	e7b3      	b.n	80033bc <__udivdi3+0x2e4>
 8003454:	3d02      	subs	r5, #2
 8003456:	1900      	adds	r0, r0, r4
 8003458:	e6ec      	b.n	8003234 <__udivdi3+0x15c>
 800345a:	46c0      	nop			; (mov r8, r8)

0800345c <SysTick_Handler>:
/******************************************************************************/
/*            Cortex-M0+ Processor Interruption and Exception Handlers         */ 
/******************************************************************************/

void SysTick_Handler(void)
{
 800345c:	b508      	push	{r3, lr}
  HAL_IncTick();
 800345e:	f003 fdf5 	bl	800704c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8003462:	f003 fb60 	bl	8006b26 <HAL_SYSTICK_IRQHandler>
}
 8003466:	bd08      	pop	{r3, pc}

08003468 <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 8003468:	b508      	push	{r3, lr}
  HAL_UART_IRQHandler(&huart1);
 800346a:	4802      	ldr	r0, [pc, #8]	; (8003474 <USART1_IRQHandler+0xc>)
 800346c:	f001 ff62 	bl	8005334 <HAL_UART_IRQHandler>
}
 8003470:	bd08      	pop	{r3, pc}
 8003472:	46c0      	nop			; (mov r8, r8)
 8003474:	200006f4 	.word	0x200006f4

08003478 <TIM21_IRQHandler>:

void TIM21_IRQHandler(void)
{
 8003478:	b508      	push	{r3, lr}
  HAL_TIM_IRQHandler(&htim21);
 800347a:	4802      	ldr	r0, [pc, #8]	; (8003484 <TIM21_IRQHandler+0xc>)
 800347c:	f002 fb02 	bl	8005a84 <HAL_TIM_IRQHandler>
}
 8003480:	bd08      	pop	{r3, pc}
 8003482:	46c0      	nop			; (mov r8, r8)
 8003484:	2000081c 	.word	0x2000081c

08003488 <ADC1_COMP_IRQHandler>:

void ADC1_COMP_IRQHandler(void)
{
 8003488:	b508      	push	{r3, lr}
  HAL_ADC_IRQHandler(&AdcHandle);
 800348a:	4802      	ldr	r0, [pc, #8]	; (8003494 <ADC1_COMP_IRQHandler+0xc>)
 800348c:	f003 fcfa 	bl	8006e84 <HAL_ADC_IRQHandler>
}
 8003490:	bd08      	pop	{r3, pc}
 8003492:	46c0      	nop			; (mov r8, r8)
 8003494:	20000764 	.word	0x20000764

08003498 <EXTI4_15_IRQHandler>:

void EXTI4_15_IRQHandler(void)
{
 8003498:	b508      	push	{r3, lr}
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11);
 800349a:	20f0      	movs	r0, #240	; 0xf0
 800349c:	0100      	lsls	r0, r0, #4
 800349e:	f003 f9ef 	bl	8006880 <HAL_GPIO_EXTI_IRQHandler>
}
 80034a2:	bd08      	pop	{r3, pc}

080034a4 <HAL_MspInit>:
#define TIMPRIORITY		1
#define UARTPRIORITY	3

void HAL_MspInit(void)
{
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034a4:	4b07      	ldr	r3, [pc, #28]	; (80034c4 <HAL_MspInit+0x20>)
#define ADCPRIORITY		2
#define TIMPRIORITY		1
#define UARTPRIORITY	3

void HAL_MspInit(void)
{
 80034a6:	b510      	push	{r4, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034aa:	2101      	movs	r1, #1
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80034ac:	424c      	negs	r4, r1
#define TIMPRIORITY		1
#define UARTPRIORITY	3

void HAL_MspInit(void)
{
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034ae:	430a      	orrs	r2, r1
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80034b0:	2100      	movs	r1, #0
#define TIMPRIORITY		1
#define UARTPRIORITY	3

void HAL_MspInit(void)
{
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034b2:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80034b4:	1c20      	adds	r0, r4, #0
 80034b6:	1c0a      	adds	r2, r1, #0
 80034b8:	f003 fac2 	bl	8006a40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SysTick_IRQn);
 80034bc:	1c20      	adds	r0, r4, #0
 80034be:	f003 faf1 	bl	8006aa4 <HAL_NVIC_EnableIRQ>
}
 80034c2:	bd10      	pop	{r4, pc}
 80034c4:	40021000 	.word	0x40021000

080034c8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{

	__HAL_RCC_GPIOA_CLK_ENABLE();
 80034c8:	4b21      	ldr	r3, [pc, #132]	; (8003550 <HAL_ADC_MspInit+0x88>)
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(SysTick_IRQn);
}

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80034ca:	b570      	push	{r4, r5, r6, lr}

	__HAL_RCC_GPIOA_CLK_ENABLE();
 80034cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80034ce:	2201      	movs	r2, #1
 80034d0:	4311      	orrs	r1, r2
 80034d2:	62d9      	str	r1, [r3, #44]	; 0x2c
 80034d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(SysTick_IRQn);
}

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80034d6:	b088      	sub	sp, #32

	__HAL_RCC_GPIOA_CLK_ENABLE();
 80034d8:	400a      	ands	r2, r1
 80034da:	9200      	str	r2, [sp, #0]
 80034dc:	9a00      	ldr	r2, [sp, #0]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80034de:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80034e0:	2204      	movs	r2, #4
 80034e2:	4311      	orrs	r1, r2
 80034e4:	62d9      	str	r1, [r3, #44]	; 0x2c
 80034e6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80034e8:	2602      	movs	r6, #2

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{

	__HAL_RCC_GPIOA_CLK_ENABLE();
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80034ea:	400a      	ands	r2, r1
 80034ec:	9201      	str	r2, [sp, #4]
 80034ee:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80034f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
							GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|
							GPIO_PIN_6|GPIO_PIN_7;

	GPIO_InitStruct.Mode = 	GPIO_MODE_ANALOG;
	GPIO_InitStruct.Pull = 	GPIO_NOPULL;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034f2:	20a0      	movs	r0, #160	; 0xa0
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{

	__HAL_RCC_GPIOA_CLK_ENABLE();
	__HAL_RCC_GPIOC_CLK_ENABLE();
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80034f4:	4332      	orrs	r2, r6
 80034f6:	62da      	str	r2, [r3, #44]	; 0x2c
 80034f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	//GPIOA
	GPIO_InitStruct.Pin = 	GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|
							GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|
							GPIO_PIN_6|GPIO_PIN_7;

	GPIO_InitStruct.Mode = 	GPIO_MODE_ANALOG;
 80034fa:	2503      	movs	r5, #3
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{

	__HAL_RCC_GPIOA_CLK_ENABLE();
	__HAL_RCC_GPIOC_CLK_ENABLE();
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80034fc:	4032      	ands	r2, r6
 80034fe:	9202      	str	r2, [sp, #8]
 8003500:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_ADC1_CLK_ENABLE();
 8003502:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003504:	2280      	movs	r2, #128	; 0x80
 8003506:	40b2      	lsls	r2, r6
 8003508:	430a      	orrs	r2, r1
 800350a:	635a      	str	r2, [r3, #52]	; 0x34
	GPIO_InitStruct.Pin = 	GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|
							GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|
							GPIO_PIN_6|GPIO_PIN_7;

	GPIO_InitStruct.Mode = 	GPIO_MODE_ANALOG;
	GPIO_InitStruct.Pull = 	GPIO_NOPULL;
 800350c:	2400      	movs	r4, #0
	__HAL_RCC_ADC1_CLK_ENABLE();

	GPIO_InitTypeDef      	GPIO_InitStruct;

	//GPIOA
	GPIO_InitStruct.Pin = 	GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|
 800350e:	23ff      	movs	r3, #255	; 0xff
							GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|
							GPIO_PIN_6|GPIO_PIN_7;

	GPIO_InitStruct.Mode = 	GPIO_MODE_ANALOG;
	GPIO_InitStruct.Pull = 	GPIO_NOPULL;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003510:	a903      	add	r1, sp, #12
 8003512:	05c0      	lsls	r0, r0, #23
	__HAL_RCC_ADC1_CLK_ENABLE();

	GPIO_InitTypeDef      	GPIO_InitStruct;

	//GPIOA
	GPIO_InitStruct.Pin = 	GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|
 8003514:	9303      	str	r3, [sp, #12]
							GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|
							GPIO_PIN_6|GPIO_PIN_7;

	GPIO_InitStruct.Mode = 	GPIO_MODE_ANALOG;
 8003516:	9504      	str	r5, [sp, #16]
	GPIO_InitStruct.Pull = 	GPIO_NOPULL;
 8003518:	9405      	str	r4, [sp, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800351a:	f003 f8ed 	bl	80066f8 <HAL_GPIO_Init>
	//GPIOB
	GPIO_InitStruct.Pin = 	GPIO_PIN_0|GPIO_PIN_1;

	GPIO_InitStruct.Mode = 	GPIO_MODE_ANALOG;
	GPIO_InitStruct.Pull = 	GPIO_NOPULL;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800351e:	a903      	add	r1, sp, #12
 8003520:	480c      	ldr	r0, [pc, #48]	; (8003554 <HAL_ADC_MspInit+0x8c>)
	GPIO_InitStruct.Mode = 	GPIO_MODE_ANALOG;
	GPIO_InitStruct.Pull = 	GPIO_NOPULL;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

	//GPIOB
	GPIO_InitStruct.Pin = 	GPIO_PIN_0|GPIO_PIN_1;
 8003522:	9503      	str	r5, [sp, #12]

	GPIO_InitStruct.Mode = 	GPIO_MODE_ANALOG;
 8003524:	9504      	str	r5, [sp, #16]
	GPIO_InitStruct.Pull = 	GPIO_NOPULL;
 8003526:	9405      	str	r4, [sp, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003528:	f003 f8e6 	bl	80066f8 <HAL_GPIO_Init>

	//GPIOC
	GPIO_InitStruct.Pin = 	GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|
 800352c:	233f      	movs	r3, #63	; 0x3f
							GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;

	GPIO_InitStruct.Mode = 	GPIO_MODE_ANALOG;
	GPIO_InitStruct.Pull = 	GPIO_NOPULL;
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800352e:	a903      	add	r1, sp, #12
 8003530:	4809      	ldr	r0, [pc, #36]	; (8003558 <HAL_ADC_MspInit+0x90>)
	GPIO_InitStruct.Mode = 	GPIO_MODE_ANALOG;
	GPIO_InitStruct.Pull = 	GPIO_NOPULL;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

	//GPIOC
	GPIO_InitStruct.Pin = 	GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|
 8003532:	9303      	str	r3, [sp, #12]
							GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;

	GPIO_InitStruct.Mode = 	GPIO_MODE_ANALOG;
 8003534:	9504      	str	r5, [sp, #16]
	GPIO_InitStruct.Pull = 	GPIO_NOPULL;
 8003536:	9405      	str	r4, [sp, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003538:	f003 f8de 	bl	80066f8 <HAL_GPIO_Init>

	HAL_NVIC_SetPriority(ADC1_COMP_IRQn, ADCPRIORITY, 0);
 800353c:	1c31      	adds	r1, r6, #0
 800353e:	1c22      	adds	r2, r4, #0
 8003540:	200c      	movs	r0, #12
 8003542:	f003 fa7d 	bl	8006a40 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8003546:	200c      	movs	r0, #12
 8003548:	f003 faac 	bl	8006aa4 <HAL_NVIC_EnableIRQ>
}
 800354c:	b008      	add	sp, #32
 800354e:	bd70      	pop	{r4, r5, r6, pc}
 8003550:	40021000 	.word	0x40021000
 8003554:	50000400 	.word	0x50000400
 8003558:	50000800 	.word	0x50000800

0800355c <HAL_SPI_MspInit>:

  }
}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800355c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 800355e:	6803      	ldr	r3, [r0, #0]
 8003560:	4a12      	ldr	r2, [pc, #72]	; (80035ac <HAL_SPI_MspInit+0x50>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d107      	bne.n	8003576 <HAL_SPI_MspInit+0x1a>
  {
    __SPI1_CLK_ENABLE();
 8003566:	4b12      	ldr	r3, [pc, #72]	; (80035b0 <HAL_SPI_MspInit+0x54>)
 8003568:	2280      	movs	r2, #128	; 0x80
 800356a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800356c:	0152      	lsls	r2, r2, #5
 800356e:	430a      	orrs	r2, r1
 8003570:	635a      	str	r2, [r3, #52]	; 0x34
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8003572:	2338      	movs	r3, #56	; 0x38
 8003574:	e00a      	b.n	800358c <HAL_SPI_MspInit+0x30>
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  }
  else if(hspi->Instance==SPI2)
 8003576:	4a0f      	ldr	r2, [pc, #60]	; (80035b4 <HAL_SPI_MspInit+0x58>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d114      	bne.n	80035a6 <HAL_SPI_MspInit+0x4a>
  {
    __SPI2_CLK_ENABLE();
 800357c:	4b0c      	ldr	r3, [pc, #48]	; (80035b0 <HAL_SPI_MspInit+0x54>)
 800357e:	2280      	movs	r2, #128	; 0x80
 8003580:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003582:	01d2      	lsls	r2, r2, #7
 8003584:	430a      	orrs	r2, r1
 8003586:	639a      	str	r2, [r3, #56]	; 0x38
    /*
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_14;
 8003588:	23e0      	movs	r3, #224	; 0xe0
 800358a:	021b      	lsls	r3, r3, #8
 800358c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800358e:	2302      	movs	r3, #2
 8003590:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003592:	2301      	movs	r3, #1
 8003594:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8003596:	2303      	movs	r3, #3
 8003598:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800359a:	4807      	ldr	r0, [pc, #28]	; (80035b8 <HAL_SPI_MspInit+0x5c>)
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 800359c:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800359e:	a901      	add	r1, sp, #4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 80035a0:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035a2:	f003 f8a9 	bl	80066f8 <HAL_GPIO_Init>

  }

}
 80035a6:	b007      	add	sp, #28
 80035a8:	bd00      	pop	{pc}
 80035aa:	46c0      	nop			; (mov r8, r8)
 80035ac:	40013000 	.word	0x40013000
 80035b0:	40021000 	.word	0x40021000
 80035b4:	40003800 	.word	0x40003800
 80035b8:	50000400 	.word	0x50000400

080035bc <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80035bc:	b508      	push	{r3, lr}
  if(htim_base->Instance==TIM21)
 80035be:	6802      	ldr	r2, [r0, #0]
 80035c0:	4b08      	ldr	r3, [pc, #32]	; (80035e4 <HAL_TIM_Base_MspInit+0x28>)
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d10c      	bne.n	80035e0 <HAL_TIM_Base_MspInit+0x24>
  {
	  __TIM21_CLK_ENABLE();
 80035c6:	4b08      	ldr	r3, [pc, #32]	; (80035e8 <HAL_TIM_Base_MspInit+0x2c>)
 80035c8:	2104      	movs	r1, #4
 80035ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	  HAL_NVIC_SetPriority(TIM21_IRQn, TIMPRIORITY, 0);
 80035cc:	2014      	movs	r0, #20

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM21)
  {
	  __TIM21_CLK_ENABLE();
 80035ce:	430a      	orrs	r2, r1
 80035d0:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_NVIC_SetPriority(TIM21_IRQn, TIMPRIORITY, 0);
 80035d2:	2101      	movs	r1, #1
 80035d4:	2200      	movs	r2, #0
 80035d6:	f003 fa33 	bl	8006a40 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(TIM21_IRQn);
 80035da:	2014      	movs	r0, #20
 80035dc:	f003 fa62 	bl	8006aa4 <HAL_NVIC_EnableIRQ>
  }

}
 80035e0:	bd08      	pop	{r3, pc}
 80035e2:	46c0      	nop			; (mov r8, r8)
 80035e4:	40010800 	.word	0x40010800
 80035e8:	40021000 	.word	0x40021000

080035ec <HAL_UART_MspInit>:
   }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80035ec:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct;

  if(huart->Instance==USART1)
 80035ee:	6802      	ldr	r2, [r0, #0]
 80035f0:	4b10      	ldr	r3, [pc, #64]	; (8003634 <HAL_UART_MspInit+0x48>)
   }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80035f2:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct;

  if(huart->Instance==USART1)
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d11b      	bne.n	8003630 <HAL_UART_MspInit+0x44>
  {
    __USART1_CLK_ENABLE();
 80035f8:	4b0f      	ldr	r3, [pc, #60]	; (8003638 <HAL_UART_MspInit+0x4c>)
 80035fa:	2280      	movs	r2, #128	; 0x80
 80035fc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80035fe:	01d2      	lsls	r2, r2, #7
 8003600:	430a      	orrs	r2, r1
 8003602:	635a      	str	r2, [r3, #52]	; 0x34
    /*
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003604:	23c0      	movs	r3, #192	; 0xc0
 8003606:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003608:	2302      	movs	r3, #2
 800360a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800360c:	2503      	movs	r5, #3
    PB7     ------> USART1_RX 
    */

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800360e:	2301      	movs	r3, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8003610:	2400      	movs	r4, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003612:	480a      	ldr	r0, [pc, #40]	; (800363c <HAL_UART_MspInit+0x50>)
 8003614:	a901      	add	r1, sp, #4
    PB7     ------> USART1_RX 
    */

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003616:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8003618:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 800361a:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800361c:	f003 f86c 	bl	80066f8 <HAL_GPIO_Init>

    HAL_NVIC_SetPriority(USART1_IRQn, UARTPRIORITY, 0);
 8003620:	201b      	movs	r0, #27
 8003622:	1c29      	adds	r1, r5, #0
 8003624:	1c22      	adds	r2, r4, #0
 8003626:	f003 fa0b 	bl	8006a40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800362a:	201b      	movs	r0, #27
 800362c:	f003 fa3a 	bl	8006aa4 <HAL_NVIC_EnableIRQ>

  }

}
 8003630:	b007      	add	sp, #28
 8003632:	bd30      	pop	{r4, r5, pc}
 8003634:	40013800 	.word	0x40013800
 8003638:	40021000 	.word	0x40021000
 800363c:	50000400 	.word	0x50000400

08003640 <initProcesses>:
static process_t FRONT[MAXPROCESSES];

#define MAXCOUNTERS 5
long COUNTERS[MAXCOUNTERS];

void initProcesses(void){
 8003640:	2300      	movs	r3, #0
 8003642:	4a05      	ldr	r2, [pc, #20]	; (8003658 <initProcesses+0x18>)
	int i;
	for(i=0;i<MAXPROCESSES;i++){
		FRONT[i].PID = -1;
 8003644:	2101      	movs	r1, #1
 8003646:	18d2      	adds	r2, r2, r3
 8003648:	4249      	negs	r1, r1
 800364a:	6091      	str	r1, [r2, #8]
 800364c:	330c      	adds	r3, #12
		FRONT[i].Data = NULL;
 800364e:	2100      	movs	r1, #0
 8003650:	6051      	str	r1, [r2, #4]
#define MAXCOUNTERS 5
long COUNTERS[MAXCOUNTERS];

void initProcesses(void){
	int i;
	for(i=0;i<MAXPROCESSES;i++){
 8003652:	2bf0      	cmp	r3, #240	; 0xf0
 8003654:	d1f5      	bne.n	8003642 <initProcesses+0x2>
		FRONT[i].PID = -1;
		FRONT[i].Data = NULL;
	}
}
 8003656:	4770      	bx	lr
 8003658:	2000056c 	.word	0x2000056c

0800365c <addProcess>:
int addProcess(void * func,void * Data){
 800365c:	b570      	push	{r4, r5, r6, lr}
	int i;
	for(i = 0; i<MAXPROCESSES;i++){
 800365e:	2300      	movs	r3, #0
 8003660:	250c      	movs	r5, #12
 8003662:	435d      	muls	r5, r3
 8003664:	4c07      	ldr	r4, [pc, #28]	; (8003684 <addProcess+0x28>)
 8003666:	1962      	adds	r2, r4, r5
		if(FRONT[i].PID == -1){
 8003668:	6896      	ldr	r6, [r2, #8]
 800366a:	3601      	adds	r6, #1
 800366c:	d104      	bne.n	8003678 <addProcess+0x1c>
			FRONT[i].Data = Data;
 800366e:	6051      	str	r1, [r2, #4]
			FRONT[i].func = func;
 8003670:	5128      	str	r0, [r5, r4]
			FRONT[i].PID = i;
 8003672:	6093      	str	r3, [r2, #8]
			return FRONT[i].PID;
 8003674:	1c18      	adds	r0, r3, #0
 8003676:	e004      	b.n	8003682 <addProcess+0x26>
		FRONT[i].Data = NULL;
	}
}
int addProcess(void * func,void * Data){
	int i;
	for(i = 0; i<MAXPROCESSES;i++){
 8003678:	3301      	adds	r3, #1
 800367a:	2b14      	cmp	r3, #20
 800367c:	d1f0      	bne.n	8003660 <addProcess+0x4>
			FRONT[i].func = func;
			FRONT[i].PID = i;
			return FRONT[i].PID;
		}
	}
	return -1;
 800367e:	2001      	movs	r0, #1
 8003680:	4240      	negs	r0, r0
}
 8003682:	bd70      	pop	{r4, r5, r6, pc}
 8003684:	2000056c 	.word	0x2000056c

08003688 <removeProcess>:
void removeProcess(int PID){
 8003688:	b570      	push	{r4, r5, r6, lr}
	if(FRONT[PID].PID != -1){
 800368a:	260c      	movs	r6, #12
 800368c:	4346      	muls	r6, r0
 800368e:	4d07      	ldr	r5, [pc, #28]	; (80036ac <removeProcess+0x24>)
 8003690:	19ac      	adds	r4, r5, r6
 8003692:	68a3      	ldr	r3, [r4, #8]
 8003694:	3301      	adds	r3, #1
 8003696:	d008      	beq.n	80036aa <removeProcess+0x22>
		free(FRONT[PID].Data);
 8003698:	6860      	ldr	r0, [r4, #4]
 800369a:	f003 fd83 	bl	80071a4 <free>
		FRONT[PID].Data = NULL;
 800369e:	2300      	movs	r3, #0
 80036a0:	6063      	str	r3, [r4, #4]
		FRONT[PID].func = NULL;
 80036a2:	5173      	str	r3, [r6, r5]
		FRONT[PID].PID = -1;
 80036a4:	2301      	movs	r3, #1
 80036a6:	425b      	negs	r3, r3
 80036a8:	60a3      	str	r3, [r4, #8]
	}
}
 80036aa:	bd70      	pop	{r4, r5, r6, pc}
 80036ac:	2000056c 	.word	0x2000056c

080036b0 <initCounters>:

void initCounters(void){
	int i;
	for(i=0;i<MAXCOUNTERS;i++){
		COUNTERS[i] = -1;
 80036b0:	4b04      	ldr	r3, [pc, #16]	; (80036c4 <initCounters+0x14>)
 80036b2:	2201      	movs	r2, #1
 80036b4:	4252      	negs	r2, r2
 80036b6:	601a      	str	r2, [r3, #0]
 80036b8:	605a      	str	r2, [r3, #4]
 80036ba:	609a      	str	r2, [r3, #8]
 80036bc:	60da      	str	r2, [r3, #12]
 80036be:	611a      	str	r2, [r3, #16]
	}
}
 80036c0:	4770      	bx	lr
 80036c2:	46c0      	nop			; (mov r8, r8)
 80036c4:	20000954 	.word	0x20000954

080036c8 <addCounter>:
uint8_t addCounter(void){
	int i;
	for(i=0;i<MAXCOUNTERS;i++){
 80036c8:	2000      	movs	r0, #0
		if(COUNTERS[i] == -1){
 80036ca:	4b07      	ldr	r3, [pc, #28]	; (80036e8 <addCounter+0x20>)
 80036cc:	0082      	lsls	r2, r0, #2
 80036ce:	5899      	ldr	r1, [r3, r2]
 80036d0:	3101      	adds	r1, #1
 80036d2:	d103      	bne.n	80036dc <addCounter+0x14>
			COUNTERS[i] = 0;
 80036d4:	2100      	movs	r1, #0
 80036d6:	50d1      	str	r1, [r2, r3]
			return i;
 80036d8:	b2c0      	uxtb	r0, r0
 80036da:	e003      	b.n	80036e4 <addCounter+0x1c>
		COUNTERS[i] = -1;
	}
}
uint8_t addCounter(void){
	int i;
	for(i=0;i<MAXCOUNTERS;i++){
 80036dc:	3001      	adds	r0, #1
 80036de:	2805      	cmp	r0, #5
 80036e0:	d1f3      	bne.n	80036ca <addCounter+0x2>
		if(COUNTERS[i] == -1){
			COUNTERS[i] = 0;
			return i;
		}
	}
	return -1;
 80036e2:	20ff      	movs	r0, #255	; 0xff
}
 80036e4:	4770      	bx	lr
 80036e6:	46c0      	nop			; (mov r8, r8)
 80036e8:	20000954 	.word	0x20000954

080036ec <alert>:
	}
	removeProcess(PID);
}

void alert(int PID){
	DataAlert * Data = FRONT[PID].Data;
 80036ec:	230c      	movs	r3, #12
 80036ee:	4343      	muls	r3, r0
 80036f0:	4a12      	ldr	r2, [pc, #72]	; (800373c <alert+0x50>)
		HAL_UART_Transmit(&huart1,(uint8_t *)printStr,strlen(printStr),1000);
	}
	removeProcess(PID);
}

void alert(int PID){
 80036f2:	b570      	push	{r4, r5, r6, lr}
	DataAlert * Data = FRONT[PID].Data;
 80036f4:	18d3      	adds	r3, r2, r3
 80036f6:	685c      	ldr	r4, [r3, #4]
		HAL_UART_Transmit(&huart1,(uint8_t *)printStr,strlen(printStr),1000);
	}
	removeProcess(PID);
}

void alert(int PID){
 80036f8:	1c05      	adds	r5, r0, #0
	DataAlert * Data = FRONT[PID].Data;
	if(Data->counter == -1){
 80036fa:	6863      	ldr	r3, [r4, #4]
 80036fc:	4e10      	ldr	r6, [pc, #64]	; (8003740 <alert+0x54>)
 80036fe:	1c5a      	adds	r2, r3, #1
 8003700:	d106      	bne.n	8003710 <alert+0x24>
		Data->counter = addCounter();
 8003702:	f7ff ffe1 	bl	80036c8 <addCounter>
 8003706:	6060      	str	r0, [r4, #4]
		Data->i = COUNTERS[Data->counter];
 8003708:	0080      	lsls	r0, r0, #2
 800370a:	5833      	ldr	r3, [r6, r0]
 800370c:	7063      	strb	r3, [r4, #1]
 800370e:	e013      	b.n	8003738 <alert+0x4c>
	} else {
		if(Data->i!=COUNTERS[Data->counter]){
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	58f3      	ldr	r3, [r6, r3]
 8003714:	7862      	ldrb	r2, [r4, #1]
 8003716:	429a      	cmp	r2, r3
 8003718:	d00e      	beq.n	8003738 <alert+0x4c>
			Data->i=COUNTERS[Data->counter];
			HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_15);
 800371a:	20a0      	movs	r0, #160	; 0xa0
 800371c:	2180      	movs	r1, #128	; 0x80
	if(Data->counter == -1){
		Data->counter = addCounter();
		Data->i = COUNTERS[Data->counter];
	} else {
		if(Data->i!=COUNTERS[Data->counter]){
			Data->i=COUNTERS[Data->counter];
 800371e:	7063      	strb	r3, [r4, #1]
			HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_15);
 8003720:	05c0      	lsls	r0, r0, #23
 8003722:	0209      	lsls	r1, r1, #8
 8003724:	f003 f8a8 	bl	8006878 <HAL_GPIO_TogglePin>
			if(Data->i==Data->count*2) removeProcess(PID);
 8003728:	7823      	ldrb	r3, [r4, #0]
 800372a:	7862      	ldrb	r2, [r4, #1]
 800372c:	005b      	lsls	r3, r3, #1
 800372e:	429a      	cmp	r2, r3
 8003730:	d102      	bne.n	8003738 <alert+0x4c>
 8003732:	1c28      	adds	r0, r5, #0
 8003734:	f7ff ffa8 	bl	8003688 <removeProcess>
		}
	}
}
 8003738:	bd70      	pop	{r4, r5, r6, pc}
 800373a:	46c0      	nop			; (mov r8, r8)
 800373c:	2000056c 	.word	0x2000056c
 8003740:	20000954 	.word	0x20000954

08003744 <eepromFloatWrite>:

}


//******************UNIVERZALNE FUNKCIE**********************
int eepromFloatWrite(float * value, uint8_t addr){
 8003744:	b570      	push	{r4, r5, r6, lr}
 8003746:	1c0c      	adds	r4, r1, #0
 8003748:	1c06      	adds	r6, r0, #0
	int retval = 1;
	if(addr >= 0x00 && addr <= 0xFF){
		HAL_FLASHEx_DATAEEPROM_Unlock();
 800374a:	f003 f8a7 	bl	800689c <HAL_FLASHEx_DATAEEPROM_Unlock>
		if(HAL_FLASHEx_DATAEEPROM_Erase(EEPROM_OFFSET + addr*4) != HAL_OK) retval = 0;
 800374e:	4b0a      	ldr	r3, [pc, #40]	; (8003778 <eepromFloatWrite+0x34>)
 8003750:	18e4      	adds	r4, r4, r3
 8003752:	00a4      	lsls	r4, r4, #2
 8003754:	1c20      	adds	r0, r4, #0
 8003756:	f003 f8bd 	bl	80068d4 <HAL_FLASHEx_DATAEEPROM_Erase>
		if(HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD,EEPROM_OFFSET + addr*4,*(uint32_t *)value) != HAL_OK) retval = 0;
 800375a:	1c21      	adds	r1, r4, #0
//******************UNIVERZALNE FUNKCIE**********************
int eepromFloatWrite(float * value, uint8_t addr){
	int retval = 1;
	if(addr >= 0x00 && addr <= 0xFF){
		HAL_FLASHEx_DATAEEPROM_Unlock();
		if(HAL_FLASHEx_DATAEEPROM_Erase(EEPROM_OFFSET + addr*4) != HAL_OK) retval = 0;
 800375c:	1c05      	adds	r5, r0, #0
		if(HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD,EEPROM_OFFSET + addr*4,*(uint32_t *)value) != HAL_OK) retval = 0;
 800375e:	6832      	ldr	r2, [r6, #0]
 8003760:	2002      	movs	r0, #2
 8003762:	f003 f8c9 	bl	80068f8 <HAL_FLASHEx_DATAEEPROM_Program>
 8003766:	2400      	movs	r4, #0
 8003768:	42a0      	cmp	r0, r4
 800376a:	d101      	bne.n	8003770 <eepromFloatWrite+0x2c>
}


//******************UNIVERZALNE FUNKCIE**********************
int eepromFloatWrite(float * value, uint8_t addr){
	int retval = 1;
 800376c:	426c      	negs	r4, r5
 800376e:	416c      	adcs	r4, r5
	if(addr >= 0x00 && addr <= 0xFF){
		HAL_FLASHEx_DATAEEPROM_Unlock();
		if(HAL_FLASHEx_DATAEEPROM_Erase(EEPROM_OFFSET + addr*4) != HAL_OK) retval = 0;
		if(HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD,EEPROM_OFFSET + addr*4,*(uint32_t *)value) != HAL_OK) retval = 0;
		HAL_FLASHEx_DATAEEPROM_Lock();
 8003770:	f003 f8a6 	bl	80068c0 <HAL_FLASHEx_DATAEEPROM_Lock>
	} else retval = 0;
	return retval;
}
 8003774:	1c20      	adds	r0, r4, #0
 8003776:	bd70      	pop	{r4, r5, r6, pc}
 8003778:	02020000 	.word	0x02020000

0800377c <eepromIntWrite>:

float * eepromFloatRead(uint8_t addr){
	return (float *)(EEPROM_OFFSET + addr*4);
}

int eepromIntWrite(int * value, uint8_t addr){
 800377c:	b570      	push	{r4, r5, r6, lr}
 800377e:	1c0c      	adds	r4, r1, #0
 8003780:	1c06      	adds	r6, r0, #0
	int retval = 1;
	if(addr >= 0x00 && addr <= 0xFF){
		HAL_FLASHEx_DATAEEPROM_Unlock();
 8003782:	f003 f88b 	bl	800689c <HAL_FLASHEx_DATAEEPROM_Unlock>
		if(HAL_FLASHEx_DATAEEPROM_Erase(EEPROM_OFFSET + addr*4) != HAL_OK) retval = 0;
 8003786:	4b0a      	ldr	r3, [pc, #40]	; (80037b0 <eepromIntWrite+0x34>)
 8003788:	18e4      	adds	r4, r4, r3
 800378a:	00a4      	lsls	r4, r4, #2
 800378c:	1c20      	adds	r0, r4, #0
 800378e:	f003 f8a1 	bl	80068d4 <HAL_FLASHEx_DATAEEPROM_Erase>
		if(HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD,EEPROM_OFFSET + addr*4,*(uint32_t *)value) != HAL_OK) retval = 0;
 8003792:	1c21      	adds	r1, r4, #0

int eepromIntWrite(int * value, uint8_t addr){
	int retval = 1;
	if(addr >= 0x00 && addr <= 0xFF){
		HAL_FLASHEx_DATAEEPROM_Unlock();
		if(HAL_FLASHEx_DATAEEPROM_Erase(EEPROM_OFFSET + addr*4) != HAL_OK) retval = 0;
 8003794:	1c05      	adds	r5, r0, #0
		if(HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD,EEPROM_OFFSET + addr*4,*(uint32_t *)value) != HAL_OK) retval = 0;
 8003796:	6832      	ldr	r2, [r6, #0]
 8003798:	2002      	movs	r0, #2
 800379a:	f003 f8ad 	bl	80068f8 <HAL_FLASHEx_DATAEEPROM_Program>
 800379e:	2400      	movs	r4, #0
 80037a0:	42a0      	cmp	r0, r4
 80037a2:	d101      	bne.n	80037a8 <eepromIntWrite+0x2c>
float * eepromFloatRead(uint8_t addr){
	return (float *)(EEPROM_OFFSET + addr*4);
}

int eepromIntWrite(int * value, uint8_t addr){
	int retval = 1;
 80037a4:	426c      	negs	r4, r5
 80037a6:	416c      	adcs	r4, r5
	if(addr >= 0x00 && addr <= 0xFF){
		HAL_FLASHEx_DATAEEPROM_Unlock();
		if(HAL_FLASHEx_DATAEEPROM_Erase(EEPROM_OFFSET + addr*4) != HAL_OK) retval = 0;
		if(HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD,EEPROM_OFFSET + addr*4,*(uint32_t *)value) != HAL_OK) retval = 0;
		HAL_FLASHEx_DATAEEPROM_Lock();
 80037a8:	f003 f88a 	bl	80068c0 <HAL_FLASHEx_DATAEEPROM_Lock>
	} else retval = 0;
	return retval;
}
 80037ac:	1c20      	adds	r0, r4, #0
 80037ae:	bd70      	pop	{r4, r5, r6, pc}
 80037b0:	02020000 	.word	0x02020000
 80037b4:	00000000 	.word	0x00000000

080037b8 <getTemp>:

int * eepromIntRead(uint8_t addr){
	return (int *)(EEPROM_OFFSET + addr*4);
}

float getTemp(int measured){
 80037b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ba:	1c04      	adds	r4, r0, #0
	float val = (measured*33000)/(float)(4095-measured);
 80037bc:	4834      	ldr	r0, [pc, #208]	; (8003890 <getTemp+0xd8>)
 80037be:	4360      	muls	r0, r4
 80037c0:	f7fd fafe 	bl	8000dc0 <__aeabi_i2f>
 80037c4:	1c05      	adds	r5, r0, #0
 80037c6:	4833      	ldr	r0, [pc, #204]	; (8003894 <getTemp+0xdc>)
 80037c8:	1b00      	subs	r0, r0, r4
 80037ca:	f7fd faf9 	bl	8000dc0 <__aeabi_i2f>
 80037ce:	1c01      	adds	r1, r0, #0
 80037d0:	1c28      	adds	r0, r5, #0
 80037d2:	f7fc fe57 	bl	8000484 <__aeabi_fdiv>
	double l = log(val/100000);
 80037d6:	4930      	ldr	r1, [pc, #192]	; (8003898 <getTemp+0xe0>)
 80037d8:	f7fc fe54 	bl	8000484 <__aeabi_fdiv>
 80037dc:	f7ff f982 	bl	8002ae4 <__aeabi_f2d>
 80037e0:	f007 ffae 	bl	800b740 <log>
	float temp = A1 + B1*l + C1*l*l + D1*l*l*l;
 80037e4:	4b21      	ldr	r3, [pc, #132]	; (800386c <getTemp+0xb4>)
 80037e6:	4a20      	ldr	r2, [pc, #128]	; (8003868 <getTemp+0xb0>)
	return (int *)(EEPROM_OFFSET + addr*4);
}

float getTemp(int measured){
	float val = (measured*33000)/(float)(4095-measured);
	double l = log(val/100000);
 80037e8:	1c0d      	adds	r5, r1, #0
 80037ea:	1c04      	adds	r4, r0, #0
	float temp = A1 + B1*l + C1*l*l + D1*l*l*l;
 80037ec:	f7fe fb1a 	bl	8001e24 <__aeabi_dmul>
 80037f0:	4a1f      	ldr	r2, [pc, #124]	; (8003870 <getTemp+0xb8>)
 80037f2:	4b20      	ldr	r3, [pc, #128]	; (8003874 <getTemp+0xbc>)
 80037f4:	f7fd fb90 	bl	8000f18 <__aeabi_dadd>
 80037f8:	4a1f      	ldr	r2, [pc, #124]	; (8003878 <getTemp+0xc0>)
 80037fa:	4b20      	ldr	r3, [pc, #128]	; (800387c <getTemp+0xc4>)
 80037fc:	1c06      	adds	r6, r0, #0
 80037fe:	1c0f      	adds	r7, r1, #0
 8003800:	1c20      	adds	r0, r4, #0
 8003802:	1c29      	adds	r1, r5, #0
 8003804:	f7fe fb0e 	bl	8001e24 <__aeabi_dmul>
 8003808:	1c2b      	adds	r3, r5, #0
 800380a:	1c22      	adds	r2, r4, #0
 800380c:	f7fe fb0a 	bl	8001e24 <__aeabi_dmul>
 8003810:	1c02      	adds	r2, r0, #0
 8003812:	1c0b      	adds	r3, r1, #0
 8003814:	1c30      	adds	r0, r6, #0
 8003816:	1c39      	adds	r1, r7, #0
 8003818:	f7fd fb7e 	bl	8000f18 <__aeabi_dadd>
 800381c:	4a18      	ldr	r2, [pc, #96]	; (8003880 <getTemp+0xc8>)
 800381e:	4b19      	ldr	r3, [pc, #100]	; (8003884 <getTemp+0xcc>)
 8003820:	1c06      	adds	r6, r0, #0
 8003822:	1c0f      	adds	r7, r1, #0
 8003824:	1c20      	adds	r0, r4, #0
 8003826:	1c29      	adds	r1, r5, #0
 8003828:	f7fe fafc 	bl	8001e24 <__aeabi_dmul>
 800382c:	1c2b      	adds	r3, r5, #0
 800382e:	1c22      	adds	r2, r4, #0
 8003830:	f7fe faf8 	bl	8001e24 <__aeabi_dmul>
 8003834:	1c2b      	adds	r3, r5, #0
 8003836:	1c22      	adds	r2, r4, #0
 8003838:	f7fe faf4 	bl	8001e24 <__aeabi_dmul>
 800383c:	1c02      	adds	r2, r0, #0
 800383e:	1c0b      	adds	r3, r1, #0
 8003840:	1c30      	adds	r0, r6, #0
 8003842:	1c39      	adds	r1, r7, #0
 8003844:	f7fd fb68 	bl	8000f18 <__aeabi_dadd>
 8003848:	f7ff f99e 	bl	8002b88 <__aeabi_d2f>
 800384c:	1c01      	adds	r1, r0, #0
	temp = 1/temp - 273.15;
 800384e:	20fe      	movs	r0, #254	; 0xfe
 8003850:	0580      	lsls	r0, r0, #22
 8003852:	f7fc fe17 	bl	8000484 <__aeabi_fdiv>
 8003856:	f7ff f945 	bl	8002ae4 <__aeabi_f2d>
 800385a:	4a0b      	ldr	r2, [pc, #44]	; (8003888 <getTemp+0xd0>)
 800385c:	4b0b      	ldr	r3, [pc, #44]	; (800388c <getTemp+0xd4>)
 800385e:	f7fe fd71 	bl	8002344 <__aeabi_dsub>
 8003862:	f7ff f991 	bl	8002b88 <__aeabi_d2f>
	return temp;
}
 8003866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003868:	05c6ee85 	.word	0x05c6ee85
 800386c:	3f301fd6 	.word	0x3f301fd6
 8003870:	a0f7e55d 	.word	0xa0f7e55d
 8003874:	3f6b79e1 	.word	0x3f6b79e1
 8003878:	cde20c68 	.word	0xcde20c68
 800387c:	3ecc90fd 	.word	0x3ecc90fd
 8003880:	3fdc7563 	.word	0x3fdc7563
 8003884:	3e7bc33e 	.word	0x3e7bc33e
 8003888:	66666666 	.word	0x66666666
 800388c:	40711266 	.word	0x40711266
 8003890:	000080e8 	.word	0x000080e8
 8003894:	00000fff 	.word	0x00000fff
 8003898:	47c35000 	.word	0x47c35000
 800389c:	46c0      	nop			; (mov r8, r8)
 800389e:	46c0      	nop			; (mov r8, r8)

080038a0 <ErrorHandler>:
		case OFF:HAL_GPIO_WritePin(LEDSPORT,pin,RESET);break;
		case TGLE:HAL_GPIO_TogglePin(LEDSPORT,pin);break;
	}
}

void ErrorHandler(int error){
 80038a0:	b510      	push	{r4, lr}
 80038a2:	4c1d      	ldr	r4, [pc, #116]	; (8003918 <ErrorHandler+0x78>)
	switch(error){
 80038a4:	2805      	cmp	r0, #5
 80038a6:	d828      	bhi.n	80038fa <ErrorHandler+0x5a>
 80038a8:	f7fc fc38 	bl	800011c <__gnu_thumb1_case_uqi>
 80038ac:	1a141003 	.word	0x1a141003
 80038b0:	221e      	.short	0x221e
		case 0:{
			sprintf(printStr,"Couldn't start process at selected channel! ERRNO = %d\r\n",error);
 80038b2:	2200      	movs	r2, #0
 80038b4:	1c20      	adds	r0, r4, #0
 80038b6:	4919      	ldr	r1, [pc, #100]	; (800391c <ErrorHandler+0x7c>)
 80038b8:	f003 fe96 	bl	80075e8 <sprintf>
			LCD_GotoXY(0,1);
 80038bc:	2000      	movs	r0, #0
 80038be:	2101      	movs	r1, #1
 80038c0:	f001 fc4e 	bl	8005160 <LCD_GotoXY>
			LCD_Print("!used channel");
 80038c4:	4816      	ldr	r0, [pc, #88]	; (8003920 <ErrorHandler+0x80>)
 80038c6:	f001 fccf 	bl	8005268 <LCD_Print>
		} break;
 80038ca:	e01a      	b.n	8003902 <ErrorHandler+0x62>
		case 1:{
			sprintf(printStr,"There already is running process! ERRNO = %d\r\n",error);
 80038cc:	1c20      	adds	r0, r4, #0
 80038ce:	4915      	ldr	r1, [pc, #84]	; (8003924 <ErrorHandler+0x84>)
 80038d0:	2201      	movs	r2, #1
 80038d2:	e002      	b.n	80038da <ErrorHandler+0x3a>
		} break;
		case 2:{
			sprintf(printStr,"Couldn't kill process! ERRNO = %d\r\n",error);
 80038d4:	4914      	ldr	r1, [pc, #80]	; (8003928 <ErrorHandler+0x88>)
 80038d6:	1c20      	adds	r0, r4, #0
 80038d8:	2202      	movs	r2, #2
 80038da:	f003 fe85 	bl	80075e8 <sprintf>
		} break;
 80038de:	e010      	b.n	8003902 <ErrorHandler+0x62>
		case 3:{
			sprintf(printStr,"Error while writing to EEPROM! ERRNO = %d\r\n",error);
 80038e0:	1c20      	adds	r0, r4, #0
 80038e2:	4912      	ldr	r1, [pc, #72]	; (800392c <ErrorHandler+0x8c>)
 80038e4:	2203      	movs	r2, #3
 80038e6:	e7f8      	b.n	80038da <ErrorHandler+0x3a>
		} break;
		case 4:{
			sprintf(printStr,"Non existing process! ERRNO = %d\r\n",error);
 80038e8:	1c20      	adds	r0, r4, #0
 80038ea:	4911      	ldr	r1, [pc, #68]	; (8003930 <ErrorHandler+0x90>)
 80038ec:	2204      	movs	r2, #4
 80038ee:	e7f4      	b.n	80038da <ErrorHandler+0x3a>
		} break;
		case 5:{
			sprintf(printStr,"Selected channel is busy or not existing! ERRNO = %d\r\n",error);
 80038f0:	1c20      	adds	r0, r4, #0
 80038f2:	4910      	ldr	r1, [pc, #64]	; (8003934 <ErrorHandler+0x94>)
 80038f4:	2205      	movs	r2, #5
 80038f6:	f003 fe77 	bl	80075e8 <sprintf>
		}
		default:{
			sprintf(printStr,"Sorry bro, error occurred!\r\n");
 80038fa:	1c20      	adds	r0, r4, #0
 80038fc:	490e      	ldr	r1, [pc, #56]	; (8003938 <ErrorHandler+0x98>)
 80038fe:	f003 fe95 	bl	800762c <strcpy>
		}
	}
	HAL_UART_Transmit(&huart1,(uint8_t *)printStr,strlen(printStr),1000);;
 8003902:	1c20      	adds	r0, r4, #0
 8003904:	f003 fe9a 	bl	800763c <strlen>
 8003908:	23fa      	movs	r3, #250	; 0xfa
 800390a:	b282      	uxth	r2, r0
 800390c:	1c21      	adds	r1, r4, #0
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	480a      	ldr	r0, [pc, #40]	; (800393c <ErrorHandler+0x9c>)
 8003912:	f001 ffa9 	bl	8005868 <HAL_UART_Transmit>
}
 8003916:	bd10      	pop	{r4, pc}
 8003918:	20000854 	.word	0x20000854
 800391c:	0800bdb0 	.word	0x0800bdb0
 8003920:	0800bde9 	.word	0x0800bde9
 8003924:	0800bdf7 	.word	0x0800bdf7
 8003928:	0800be26 	.word	0x0800be26
 800392c:	0800be4a 	.word	0x0800be4a
 8003930:	0800be76 	.word	0x0800be76
 8003934:	0800be99 	.word	0x0800be99
 8003938:	0800bed0 	.word	0x0800bed0
 800393c:	200006f4 	.word	0x200006f4

08003940 <help>:

void help(){
 8003940:	b570      	push	{r4, r5, r6, lr}
	sprintf(printStr,"List of commands:\r\n\t-help\r\n");
 8003942:	4c4a      	ldr	r4, [pc, #296]	; (8003a6c <help+0x12c>)
 8003944:	494a      	ldr	r1, [pc, #296]	; (8003a70 <help+0x130>)
 8003946:	1c20      	adds	r0, r4, #0
 8003948:	f003 fe70 	bl	800762c <strcpy>
	HAL_UART_Transmit(&huart1,(uint8_t *)printStr,strlen(printStr),1000);
 800394c:	1c20      	adds	r0, r4, #0
 800394e:	f003 fe75 	bl	800763c <strlen>
 8003952:	25fa      	movs	r5, #250	; 0xfa
 8003954:	4e47      	ldr	r6, [pc, #284]	; (8003a74 <help+0x134>)
 8003956:	00ad      	lsls	r5, r5, #2
 8003958:	1c2b      	adds	r3, r5, #0
 800395a:	b282      	uxth	r2, r0
 800395c:	1c21      	adds	r1, r4, #0
 800395e:	1c30      	adds	r0, r6, #0
 8003960:	f001 ff82 	bl	8005868 <HAL_UART_Transmit>
	sprintf(printStr,"\t-charge [channel(1-4)] [current(mA)] [cutoff(mV)] [time(s)]\r\n");
 8003964:	4944      	ldr	r1, [pc, #272]	; (8003a78 <help+0x138>)
 8003966:	1c20      	adds	r0, r4, #0
 8003968:	f003 fe60 	bl	800762c <strcpy>
	HAL_UART_Transmit(&huart1,(uint8_t *)printStr,strlen(printStr),1000);
 800396c:	1c20      	adds	r0, r4, #0
 800396e:	f003 fe65 	bl	800763c <strlen>
 8003972:	1c2b      	adds	r3, r5, #0
 8003974:	b282      	uxth	r2, r0
 8003976:	1c21      	adds	r1, r4, #0
 8003978:	1c30      	adds	r0, r6, #0
 800397a:	f001 ff75 	bl	8005868 <HAL_UART_Transmit>
	sprintf(printStr,"\t-chargeli [channel(1-4)] [current(mA)] [voltage(mV)] \r\n\t\t[cutoff(mV)] [cutoff(mA)] [verbose(0/1)]\r\n");
 800397e:	493f      	ldr	r1, [pc, #252]	; (8003a7c <help+0x13c>)
 8003980:	1c20      	adds	r0, r4, #0
 8003982:	f003 fe53 	bl	800762c <strcpy>
	HAL_UART_Transmit(&huart1,(uint8_t *)printStr,strlen(printStr),1000);
 8003986:	1c20      	adds	r0, r4, #0
 8003988:	f003 fe58 	bl	800763c <strlen>
 800398c:	1c2b      	adds	r3, r5, #0
 800398e:	b282      	uxth	r2, r0
 8003990:	1c21      	adds	r1, r4, #0
 8003992:	1c30      	adds	r0, r6, #0
 8003994:	f001 ff68 	bl	8005868 <HAL_UART_Transmit>
	sprintf(printStr,"\t-discharge [channel(1-4)] [current(mA)] [cutoff(mV)] \r\n\t\t[verbose(0/1)]\r\n");
 8003998:	4939      	ldr	r1, [pc, #228]	; (8003a80 <help+0x140>)
 800399a:	1c20      	adds	r0, r4, #0
 800399c:	f003 fe46 	bl	800762c <strcpy>
	HAL_UART_Transmit(&huart1,(uint8_t *)printStr,strlen(printStr),1000);
 80039a0:	1c20      	adds	r0, r4, #0
 80039a2:	f003 fe4b 	bl	800763c <strlen>
 80039a6:	1c2b      	adds	r3, r5, #0
 80039a8:	b282      	uxth	r2, r0
 80039aa:	1c21      	adds	r1, r4, #0
 80039ac:	1c30      	adds	r0, r6, #0
 80039ae:	f001 ff5b 	bl	8005868 <HAL_UART_Transmit>
	sprintf(printStr,"\t-resistance [channel(1-4)] [current1(mA)] [current2(mA)]\r\n\t\t [samples(1-255)] [tolerance(uint)]\r\n");
 80039b2:	4934      	ldr	r1, [pc, #208]	; (8003a84 <help+0x144>)
 80039b4:	1c20      	adds	r0, r4, #0
 80039b6:	f003 fe39 	bl	800762c <strcpy>
	HAL_UART_Transmit(&huart1,(uint8_t *)printStr,strlen(printStr),1000);
 80039ba:	1c20      	adds	r0, r4, #0
 80039bc:	f003 fe3e 	bl	800763c <strlen>
 80039c0:	1c2b      	adds	r3, r5, #0
 80039c2:	b282      	uxth	r2, r0
 80039c4:	1c21      	adds	r1, r4, #0
 80039c6:	1c30      	adds	r0, r6, #0
 80039c8:	f001 ff4e 	bl	8005868 <HAL_UART_Transmit>
	sprintf(printStr,"\t-getconst [index(0-255)]\r\n");
 80039cc:	492e      	ldr	r1, [pc, #184]	; (8003a88 <help+0x148>)
 80039ce:	1c20      	adds	r0, r4, #0
 80039d0:	f003 fe2c 	bl	800762c <strcpy>
	HAL_UART_Transmit(&huart1,(uint8_t *)printStr,strlen(printStr),1000);
 80039d4:	1c20      	adds	r0, r4, #0
 80039d6:	f003 fe31 	bl	800763c <strlen>
 80039da:	1c2b      	adds	r3, r5, #0
 80039dc:	b282      	uxth	r2, r0
 80039de:	1c21      	adds	r1, r4, #0
 80039e0:	1c30      	adds	r0, r6, #0
 80039e2:	f001 ff41 	bl	8005868 <HAL_UART_Transmit>
	sprintf(printStr,"\t-setconst [index(0-255)]\r\n");
 80039e6:	4929      	ldr	r1, [pc, #164]	; (8003a8c <help+0x14c>)
 80039e8:	1c20      	adds	r0, r4, #0
 80039ea:	f003 fe1f 	bl	800762c <strcpy>
	HAL_UART_Transmit(&huart1,(uint8_t *)printStr,strlen(printStr),1000);
 80039ee:	1c20      	adds	r0, r4, #0
 80039f0:	f003 fe24 	bl	800763c <strlen>
 80039f4:	1c2b      	adds	r3, r5, #0
 80039f6:	b282      	uxth	r2, r0
 80039f8:	1c21      	adds	r1, r4, #0
 80039fa:	1c30      	adds	r0, r6, #0
 80039fc:	f001 ff34 	bl	8005868 <HAL_UART_Transmit>
	sprintf(printStr,"\t-calib [channel(1-4)]\r\n");
 8003a00:	4923      	ldr	r1, [pc, #140]	; (8003a90 <help+0x150>)
 8003a02:	1c20      	adds	r0, r4, #0
 8003a04:	f003 fe12 	bl	800762c <strcpy>
	HAL_UART_Transmit(&huart1,(uint8_t *)printStr,strlen(printStr),1000);
 8003a08:	1c20      	adds	r0, r4, #0
 8003a0a:	f003 fe17 	bl	800763c <strlen>
 8003a0e:	1c2b      	adds	r3, r5, #0
 8003a10:	b282      	uxth	r2, r0
 8003a12:	1c21      	adds	r1, r4, #0
 8003a14:	1c30      	adds	r0, r6, #0
 8003a16:	f001 ff27 	bl	8005868 <HAL_UART_Transmit>
	sprintf(printStr,"\t-ps [PID(0-19)]\r\n");
 8003a1a:	491e      	ldr	r1, [pc, #120]	; (8003a94 <help+0x154>)
 8003a1c:	1c20      	adds	r0, r4, #0
 8003a1e:	f003 fe05 	bl	800762c <strcpy>
	HAL_UART_Transmit(&huart1,(uint8_t *)printStr,strlen(printStr),1000);
 8003a22:	1c20      	adds	r0, r4, #0
 8003a24:	f003 fe0a 	bl	800763c <strlen>
 8003a28:	1c2b      	adds	r3, r5, #0
 8003a2a:	b282      	uxth	r2, r0
 8003a2c:	1c21      	adds	r1, r4, #0
 8003a2e:	1c30      	adds	r0, r6, #0
 8003a30:	f001 ff1a 	bl	8005868 <HAL_UART_Transmit>
	sprintf(printStr,"\t-kill [channel(1-4)]\r\n");
 8003a34:	4918      	ldr	r1, [pc, #96]	; (8003a98 <help+0x158>)
 8003a36:	1c20      	adds	r0, r4, #0
 8003a38:	f003 fdf8 	bl	800762c <strcpy>
	HAL_UART_Transmit(&huart1,(uint8_t *)printStr,strlen(printStr),1000);
 8003a3c:	1c20      	adds	r0, r4, #0
 8003a3e:	f003 fdfd 	bl	800763c <strlen>
 8003a42:	1c2b      	adds	r3, r5, #0
 8003a44:	b282      	uxth	r2, r0
 8003a46:	1c21      	adds	r1, r4, #0
 8003a48:	1c30      	adds	r0, r6, #0
 8003a4a:	f001 ff0d 	bl	8005868 <HAL_UART_Transmit>
	sprintf(printStr,"\t-reset\r\n");
 8003a4e:	4913      	ldr	r1, [pc, #76]	; (8003a9c <help+0x15c>)
 8003a50:	1c20      	adds	r0, r4, #0
 8003a52:	f003 fdeb 	bl	800762c <strcpy>
	HAL_UART_Transmit(&huart1,(uint8_t *)printStr,strlen(printStr),1000);
 8003a56:	1c20      	adds	r0, r4, #0
 8003a58:	f003 fdf0 	bl	800763c <strlen>
 8003a5c:	1c2b      	adds	r3, r5, #0
 8003a5e:	b282      	uxth	r2, r0
 8003a60:	1c21      	adds	r1, r4, #0
 8003a62:	1c30      	adds	r0, r6, #0
 8003a64:	f001 ff00 	bl	8005868 <HAL_UART_Transmit>
}
 8003a68:	bd70      	pop	{r4, r5, r6, pc}
 8003a6a:	46c0      	nop			; (mov r8, r8)
 8003a6c:	20000854 	.word	0x20000854
 8003a70:	0800beed 	.word	0x0800beed
 8003a74:	200006f4 	.word	0x200006f4
 8003a78:	0800bf09 	.word	0x0800bf09
 8003a7c:	0800bf48 	.word	0x0800bf48
 8003a80:	0800bfad 	.word	0x0800bfad
 8003a84:	0800bff8 	.word	0x0800bff8
 8003a88:	0800c05b 	.word	0x0800c05b
 8003a8c:	0800c077 	.word	0x0800c077
 8003a90:	0800c093 	.word	0x0800c093
 8003a94:	0800c0ac 	.word	0x0800c0ac
 8003a98:	0800c0bf 	.word	0x0800c0bf
 8003a9c:	0800c0d7 	.word	0x0800c0d7

08003aa0 <addAlert>:

void addAlert(){
 8003aa0:	b508      	push	{r3, lr}
	DataAlert * DataA = (DataAlert *) malloc(sizeof(DataAlert));
 8003aa2:	2008      	movs	r0, #8
 8003aa4:	f003 fb74 	bl	8007190 <malloc>
	DataA->i=0;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	7043      	strb	r3, [r0, #1]
	DataA->counter=-1;
 8003aac:	2301      	movs	r3, #1
 8003aae:	425b      	negs	r3, r3
 8003ab0:	6043      	str	r3, [r0, #4]
	DataA->count=3;
 8003ab2:	2303      	movs	r3, #3
	sprintf(printStr,"\t-reset\r\n");
	HAL_UART_Transmit(&huart1,(uint8_t *)printStr,strlen(printStr),1000);
}

void addAlert(){
	DataAlert * DataA = (DataAlert *) malloc(sizeof(DataAlert));
 8003ab4:	1c01      	adds	r1, r0, #0
	DataA->i=0;
	DataA->counter=-1;
	DataA->count=3;
 8003ab6:	7003      	strb	r3, [r0, #0]
	addProcess(&alert,DataA);
 8003ab8:	4801      	ldr	r0, [pc, #4]	; (8003ac0 <addAlert+0x20>)
 8003aba:	f7ff fdcf 	bl	800365c <addProcess>
}
 8003abe:	bd08      	pop	{r3, pc}
 8003ac0:	080036ed 	.word	0x080036ed

08003ac4 <vetvyUpdate>:
	vetvy[1].cCalibration = avg[1]/CALIBCOUNT;
	vetvy[2].cCalibration = avg[2]/CALIBCOUNT;
	vetvy[3].cCalibration = avg[3]/CALIBCOUNT;
}

void vetvyUpdate(void){
 8003ac4:	b570      	push	{r4, r5, r6, lr}
	if(vetvy[0].state != DEACTIVE){
 8003ac6:	4c5a      	ldr	r4, [pc, #360]	; (8003c30 <vetvyUpdate+0x16c>)
 8003ac8:	7863      	ldrb	r3, [r4, #1]
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d026      	beq.n	8003b1c <vetvyUpdate+0x58>
		vetvy[0].actVoltage = round(channels[10]*(float)*eepromFloatRead(0));
 8003ace:	4d59      	ldr	r5, [pc, #356]	; (8003c34 <vetvyUpdate+0x170>)
 8003ad0:	8aa8      	ldrh	r0, [r5, #20]
 8003ad2:	f7fd f975 	bl	8000dc0 <__aeabi_i2f>
 8003ad6:	4b58      	ldr	r3, [pc, #352]	; (8003c38 <vetvyUpdate+0x174>)
 8003ad8:	6819      	ldr	r1, [r3, #0]
 8003ada:	f7fc feb7 	bl	800084c <__aeabi_fmul>
 8003ade:	f7ff f801 	bl	8002ae4 <__aeabi_f2d>
 8003ae2:	f007 fdd9 	bl	800b698 <round>
 8003ae6:	f7fe ff57 	bl	8002998 <__aeabi_d2iz>
 8003aea:	6120      	str	r0, [r4, #16]
		vetvy[0].actCurrent = round((channels[11] - vetvy[0].cCalibration)**eepromFloatRead(1));
 8003aec:	6a23      	ldr	r3, [r4, #32]
 8003aee:	8ae8      	ldrh	r0, [r5, #22]
 8003af0:	1ac0      	subs	r0, r0, r3
 8003af2:	f7fd f965 	bl	8000dc0 <__aeabi_i2f>
 8003af6:	4b51      	ldr	r3, [pc, #324]	; (8003c3c <vetvyUpdate+0x178>)
 8003af8:	6819      	ldr	r1, [r3, #0]
 8003afa:	f7fc fea7 	bl	800084c <__aeabi_fmul>
 8003afe:	f7fe fff1 	bl	8002ae4 <__aeabi_f2d>
 8003b02:	f007 fdc9 	bl	800b698 <round>
 8003b06:	f7fe ff47 	bl	8002998 <__aeabi_d2iz>
 8003b0a:	6160      	str	r0, [r4, #20]
		vetvy[0].actTempHeat = getTemp(channels[12]);
 8003b0c:	8b28      	ldrh	r0, [r5, #24]
 8003b0e:	f7ff fe53 	bl	80037b8 <getTemp>
 8003b12:	61a0      	str	r0, [r4, #24]
		vetvy[0].actTempBatt = getTemp(channels[13]);
 8003b14:	8b68      	ldrh	r0, [r5, #26]
 8003b16:	f7ff fe4f 	bl	80037b8 <getTemp>
 8003b1a:	61e0      	str	r0, [r4, #28]
	}

	if(vetvy[1].state != DEACTIVE){
 8003b1c:	1da3      	adds	r3, r4, #6
 8003b1e:	7fdb      	ldrb	r3, [r3, #31]
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d026      	beq.n	8003b72 <vetvyUpdate+0xae>
		vetvy[1].actVoltage = round(channels[0]*(float)*eepromFloatRead(4));
 8003b24:	4d43      	ldr	r5, [pc, #268]	; (8003c34 <vetvyUpdate+0x170>)
 8003b26:	8828      	ldrh	r0, [r5, #0]
 8003b28:	f7fd f94a 	bl	8000dc0 <__aeabi_i2f>
 8003b2c:	4b44      	ldr	r3, [pc, #272]	; (8003c40 <vetvyUpdate+0x17c>)
 8003b2e:	6819      	ldr	r1, [r3, #0]
 8003b30:	f7fc fe8c 	bl	800084c <__aeabi_fmul>
 8003b34:	f7fe ffd6 	bl	8002ae4 <__aeabi_f2d>
 8003b38:	f007 fdae 	bl	800b698 <round>
 8003b3c:	f7fe ff2c 	bl	8002998 <__aeabi_d2iz>
 8003b40:	6360      	str	r0, [r4, #52]	; 0x34
		vetvy[1].actCurrent = round((channels[2] - vetvy[1].cCalibration)**eepromFloatRead(5));
 8003b42:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003b44:	88a8      	ldrh	r0, [r5, #4]
 8003b46:	1ac0      	subs	r0, r0, r3
 8003b48:	f7fd f93a 	bl	8000dc0 <__aeabi_i2f>
 8003b4c:	4b3d      	ldr	r3, [pc, #244]	; (8003c44 <vetvyUpdate+0x180>)
 8003b4e:	6819      	ldr	r1, [r3, #0]
 8003b50:	f7fc fe7c 	bl	800084c <__aeabi_fmul>
 8003b54:	f7fe ffc6 	bl	8002ae4 <__aeabi_f2d>
 8003b58:	f007 fd9e 	bl	800b698 <round>
 8003b5c:	f7fe ff1c 	bl	8002998 <__aeabi_d2iz>
 8003b60:	63a0      	str	r0, [r4, #56]	; 0x38
		vetvy[1].actTempHeat = getTemp(channels[3]);
 8003b62:	88e8      	ldrh	r0, [r5, #6]
 8003b64:	f7ff fe28 	bl	80037b8 <getTemp>
 8003b68:	63e0      	str	r0, [r4, #60]	; 0x3c
		vetvy[1].actTempBatt = getTemp(channels[1]);
 8003b6a:	8868      	ldrh	r0, [r5, #2]
 8003b6c:	f7ff fe24 	bl	80037b8 <getTemp>
 8003b70:	6420      	str	r0, [r4, #64]	; 0x40
	}

	if(vetvy[2].state != DEACTIVE){
 8003b72:	1c23      	adds	r3, r4, #0
 8003b74:	3349      	adds	r3, #73	; 0x49
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d026      	beq.n	8003bca <vetvyUpdate+0x106>
		vetvy[2].actVoltage = round(channels[6]*(float)*eepromFloatRead(8));
 8003b7c:	4d2d      	ldr	r5, [pc, #180]	; (8003c34 <vetvyUpdate+0x170>)
 8003b7e:	89a8      	ldrh	r0, [r5, #12]
 8003b80:	f7fd f91e 	bl	8000dc0 <__aeabi_i2f>
 8003b84:	4b30      	ldr	r3, [pc, #192]	; (8003c48 <vetvyUpdate+0x184>)
 8003b86:	6819      	ldr	r1, [r3, #0]
 8003b88:	f7fc fe60 	bl	800084c <__aeabi_fmul>
 8003b8c:	f7fe ffaa 	bl	8002ae4 <__aeabi_f2d>
 8003b90:	f007 fd82 	bl	800b698 <round>
 8003b94:	f7fe ff00 	bl	8002998 <__aeabi_d2iz>
 8003b98:	65a0      	str	r0, [r4, #88]	; 0x58
		vetvy[2].actCurrent = round((channels[5] - vetvy[2].cCalibration)**eepromFloatRead(9));
 8003b9a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8003b9c:	8968      	ldrh	r0, [r5, #10]
 8003b9e:	1ac0      	subs	r0, r0, r3
 8003ba0:	f7fd f90e 	bl	8000dc0 <__aeabi_i2f>
 8003ba4:	4b29      	ldr	r3, [pc, #164]	; (8003c4c <vetvyUpdate+0x188>)
 8003ba6:	6819      	ldr	r1, [r3, #0]
 8003ba8:	f7fc fe50 	bl	800084c <__aeabi_fmul>
 8003bac:	f7fe ff9a 	bl	8002ae4 <__aeabi_f2d>
 8003bb0:	f007 fd72 	bl	800b698 <round>
 8003bb4:	f7fe fef0 	bl	8002998 <__aeabi_d2iz>
 8003bb8:	65e0      	str	r0, [r4, #92]	; 0x5c
		vetvy[2].actTempHeat = getTemp(channels[4]);
 8003bba:	8928      	ldrh	r0, [r5, #8]
 8003bbc:	f7ff fdfc 	bl	80037b8 <getTemp>
 8003bc0:	6620      	str	r0, [r4, #96]	; 0x60
		vetvy[2].actTempBatt = getTemp(channels[7]);
 8003bc2:	89e8      	ldrh	r0, [r5, #14]
 8003bc4:	f7ff fdf8 	bl	80037b8 <getTemp>
 8003bc8:	6660      	str	r0, [r4, #100]	; 0x64
	}

	if(vetvy[3].state != DEACTIVE){
 8003bca:	1c23      	adds	r3, r4, #0
 8003bcc:	336d      	adds	r3, #109	; 0x6d
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d02c      	beq.n	8003c2e <vetvyUpdate+0x16a>
		vetvy[3].actVoltage = round(channels[8]*(float)*eepromFloatRead(12));;
 8003bd4:	4d17      	ldr	r5, [pc, #92]	; (8003c34 <vetvyUpdate+0x170>)
		vetvy[3].actCurrent = round((channels[9] - vetvy[3].cCalibration)**eepromFloatRead(13));
 8003bd6:	1d26      	adds	r6, r4, #4
		vetvy[2].actTempHeat = getTemp(channels[4]);
		vetvy[2].actTempBatt = getTemp(channels[7]);
	}

	if(vetvy[3].state != DEACTIVE){
		vetvy[3].actVoltage = round(channels[8]*(float)*eepromFloatRead(12));;
 8003bd8:	8a28      	ldrh	r0, [r5, #16]
 8003bda:	f7fd f8f1 	bl	8000dc0 <__aeabi_i2f>
 8003bde:	4b1c      	ldr	r3, [pc, #112]	; (8003c50 <vetvyUpdate+0x18c>)
 8003be0:	6819      	ldr	r1, [r3, #0]
 8003be2:	f7fc fe33 	bl	800084c <__aeabi_fmul>
 8003be6:	f7fe ff7d 	bl	8002ae4 <__aeabi_f2d>
 8003bea:	f007 fd55 	bl	800b698 <round>
 8003bee:	f7fe fed3 	bl	8002998 <__aeabi_d2iz>
		vetvy[3].actCurrent = round((channels[9] - vetvy[3].cCalibration)**eepromFloatRead(13));
 8003bf2:	1c23      	adds	r3, r4, #0
		vetvy[2].actTempHeat = getTemp(channels[4]);
		vetvy[2].actTempBatt = getTemp(channels[7]);
	}

	if(vetvy[3].state != DEACTIVE){
		vetvy[3].actVoltage = round(channels[8]*(float)*eepromFloatRead(12));;
 8003bf4:	67e0      	str	r0, [r4, #124]	; 0x7c
		vetvy[3].actCurrent = round((channels[9] - vetvy[3].cCalibration)**eepromFloatRead(13));
 8003bf6:	338c      	adds	r3, #140	; 0x8c
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	8a68      	ldrh	r0, [r5, #18]
 8003bfc:	1ac0      	subs	r0, r0, r3
 8003bfe:	f7fd f8df 	bl	8000dc0 <__aeabi_i2f>
 8003c02:	4b14      	ldr	r3, [pc, #80]	; (8003c54 <vetvyUpdate+0x190>)
 8003c04:	6819      	ldr	r1, [r3, #0]
 8003c06:	f7fc fe21 	bl	800084c <__aeabi_fmul>
 8003c0a:	f7fe ff6b 	bl	8002ae4 <__aeabi_f2d>
 8003c0e:	f007 fd43 	bl	800b698 <round>
 8003c12:	f7fe fec1 	bl	8002998 <__aeabi_d2iz>
 8003c16:	67f0      	str	r0, [r6, #124]	; 0x7c
		vetvy[3].actTempHeat = getTemp(channels[14]);
 8003c18:	8ba8      	ldrh	r0, [r5, #28]
 8003c1a:	f7ff fdcd 	bl	80037b8 <getTemp>
 8003c1e:	1c23      	adds	r3, r4, #0
 8003c20:	3308      	adds	r3, #8
 8003c22:	67d8      	str	r0, [r3, #124]	; 0x7c
		vetvy[3].actTempBatt = getTemp(channels[15]);
 8003c24:	8be8      	ldrh	r0, [r5, #30]
 8003c26:	f7ff fdc7 	bl	80037b8 <getTemp>
 8003c2a:	3488      	adds	r4, #136	; 0x88
 8003c2c:	6020      	str	r0, [r4, #0]
	}
}
 8003c2e:	bd70      	pop	{r4, r5, r6, pc}
 8003c30:	20000988 	.word	0x20000988
 8003c34:	20000968 	.word	0x20000968
 8003c38:	08080000 	.word	0x08080000
 8003c3c:	08080004 	.word	0x08080004
 8003c40:	08080010 	.word	0x08080010
 8003c44:	08080014 	.word	0x08080014
 8003c48:	08080020 	.word	0x08080020
 8003c4c:	08080024 	.word	0x08080024
 8003c50:	08080030 	.word	0x08080030
 8003c54:	08080034 	.word	0x08080034

08003c58 <vetvaSet>:

void vetvaSet(vetva_t * vetva, int setpoint){
 8003c58:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if(vetva->state == ACTIVE){
 8003c5a:	7843      	ldrb	r3, [r0, #1]
		vetvy[3].actTempHeat = getTemp(channels[14]);
		vetvy[3].actTempBatt = getTemp(channels[15]);
	}
}

void vetvaSet(vetva_t * vetva, int setpoint){
 8003c5c:	1c04      	adds	r4, r0, #0
	if(vetva->state == ACTIVE){
 8003c5e:	2b02      	cmp	r3, #2
 8003c60:	d121      	bne.n	8003ca6 <vetvaSet+0x4e>
		uint16_t data;
		uint8_t out;
		if(vetva->vetvaOut.vetvaOutState == OUTA){
 8003c62:	7902      	ldrb	r2, [r0, #4]
			out = 0;
 8003c64:	2300      	movs	r3, #0

void vetvaSet(vetva_t * vetva, int setpoint){
	if(vetva->state == ACTIVE){
		uint16_t data;
		uint8_t out;
		if(vetva->vetvaOut.vetvaOutState == OUTA){
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d003      	beq.n	8003c72 <vetvaSet+0x1a>
			out = 0;
		}
		else if(vetva->vetvaOut.vetvaOutState == OUTB){
			out = 1;
		} else {
			out = 0b11;
 8003c6a:	2303      	movs	r3, #3
		uint16_t data;
		uint8_t out;
		if(vetva->vetvaOut.vetvaOutState == OUTA){
			out = 0;
		}
		else if(vetva->vetvaOut.vetvaOutState == OUTB){
 8003c6c:	2a01      	cmp	r2, #1
 8003c6e:	d100      	bne.n	8003c72 <vetvaSet+0x1a>
			out = 1;
 8003c70:	1c13      	adds	r3, r2, #0
		} else {
			out = 0b11;
		}
		uint16_t setup = (out << 2 | 0b01) << 12;
 8003c72:	2501      	movs	r5, #1
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	432b      	orrs	r3, r5
		data = (setup)|(setpoint & 0xFFF);
 8003c78:	0509      	lsls	r1, r1, #20
 8003c7a:	0d09      	lsrs	r1, r1, #20
		else if(vetva->vetvaOut.vetvaOutState == OUTB){
			out = 1;
		} else {
			out = 0b11;
		}
		uint16_t setup = (out << 2 | 0b01) << 12;
 8003c7c:	031b      	lsls	r3, r3, #12
		data = (setup)|(setpoint & 0xFFF);
 8003c7e:	430b      	orrs	r3, r1
 8003c80:	466e      	mov	r6, sp
 8003c82:	80f3      	strh	r3, [r6, #6]

		HAL_GPIO_WritePin(vetva->vetvaOut.csPort,vetva->vetvaOut.csPin,0);
 8003c84:	89a1      	ldrh	r1, [r4, #12]
 8003c86:	68a0      	ldr	r0, [r4, #8]
 8003c88:	2200      	movs	r2, #0
			out = 1;
		} else {
			out = 0b11;
		}
		uint16_t setup = (out << 2 | 0b01) << 12;
		data = (setup)|(setpoint & 0xFFF);
 8003c8a:	3606      	adds	r6, #6

		HAL_GPIO_WritePin(vetva->vetvaOut.csPort,vetva->vetvaOut.csPin,0);
 8003c8c:	f002 fdee 	bl	800686c <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2,(uint8_t *)&data,sizeof(data),10);
 8003c90:	1c31      	adds	r1, r6, #0
 8003c92:	2202      	movs	r2, #2
 8003c94:	4804      	ldr	r0, [pc, #16]	; (8003ca8 <vetvaSet+0x50>)
 8003c96:	230a      	movs	r3, #10
 8003c98:	f002 f80e 	bl	8005cb8 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(vetva->vetvaOut.csPort,vetva->vetvaOut.csPin,1);
 8003c9c:	68a0      	ldr	r0, [r4, #8]
 8003c9e:	89a1      	ldrh	r1, [r4, #12]
 8003ca0:	1c2a      	adds	r2, r5, #0
 8003ca2:	f002 fde3 	bl	800686c <HAL_GPIO_WritePin>
	}
}
 8003ca6:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
 8003ca8:	2000069c 	.word	0x2000069c

08003cac <vetvaOff>:

void vetvaOff(vetva_t * vetva){
 8003cac:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint16_t data = ((0 << 2 | 0b01) << 12)|(4095 & 0xFFF);
 8003cae:	4b15      	ldr	r3, [pc, #84]	; (8003d04 <vetvaOff+0x58>)
 8003cb0:	466d      	mov	r5, sp
 8003cb2:	80eb      	strh	r3, [r5, #6]
		HAL_SPI_Transmit(&hspi2,(uint8_t *)&data,sizeof(data),10);
		HAL_GPIO_WritePin(vetva->vetvaOut.csPort,vetva->vetvaOut.csPin,1);
	}
}

void vetvaOff(vetva_t * vetva){
 8003cb4:	1c04      	adds	r4, r0, #0
	uint16_t data = ((0 << 2 | 0b01) << 12)|(4095 & 0xFFF);
	HAL_GPIO_WritePin(vetva->vetvaOut.csPort,vetva->vetvaOut.csPin,0);
 8003cb6:	8981      	ldrh	r1, [r0, #12]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	6880      	ldr	r0, [r0, #8]
 8003cbc:	f002 fdd6 	bl	800686c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)&data,sizeof(data),10);
 8003cc0:	4e11      	ldr	r6, [pc, #68]	; (8003d08 <vetvaOff+0x5c>)
		HAL_GPIO_WritePin(vetva->vetvaOut.csPort,vetva->vetvaOut.csPin,1);
	}
}

void vetvaOff(vetva_t * vetva){
	uint16_t data = ((0 << 2 | 0b01) << 12)|(4095 & 0xFFF);
 8003cc2:	3506      	adds	r5, #6
	HAL_GPIO_WritePin(vetva->vetvaOut.csPort,vetva->vetvaOut.csPin,0);
	HAL_SPI_Transmit(&hspi2,(uint8_t *)&data,sizeof(data),10);
 8003cc4:	1c29      	adds	r1, r5, #0
 8003cc6:	1c30      	adds	r0, r6, #0
 8003cc8:	230a      	movs	r3, #10
 8003cca:	2202      	movs	r2, #2
 8003ccc:	f001 fff4 	bl	8005cb8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(vetva->vetvaOut.csPort,vetva->vetvaOut.csPin,1);
 8003cd0:	89a1      	ldrh	r1, [r4, #12]
 8003cd2:	68a0      	ldr	r0, [r4, #8]
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	f002 fdc9 	bl	800686c <HAL_GPIO_WritePin>
	data = ((1 << 2 | 0b01) << 12)|(0 & 0xFFF);
 8003cda:	23a0      	movs	r3, #160	; 0xa0
 8003cdc:	01db      	lsls	r3, r3, #7
	HAL_GPIO_WritePin(vetva->vetvaOut.csPort,vetva->vetvaOut.csPin,0);
 8003cde:	89a1      	ldrh	r1, [r4, #12]
 8003ce0:	68a0      	ldr	r0, [r4, #8]
 8003ce2:	2200      	movs	r2, #0
void vetvaOff(vetva_t * vetva){
	uint16_t data = ((0 << 2 | 0b01) << 12)|(4095 & 0xFFF);
	HAL_GPIO_WritePin(vetva->vetvaOut.csPort,vetva->vetvaOut.csPin,0);
	HAL_SPI_Transmit(&hspi2,(uint8_t *)&data,sizeof(data),10);
	HAL_GPIO_WritePin(vetva->vetvaOut.csPort,vetva->vetvaOut.csPin,1);
	data = ((1 << 2 | 0b01) << 12)|(0 & 0xFFF);
 8003ce4:	802b      	strh	r3, [r5, #0]
	HAL_GPIO_WritePin(vetva->vetvaOut.csPort,vetva->vetvaOut.csPin,0);
 8003ce6:	f002 fdc1 	bl	800686c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t *)&data,sizeof(data),10);
 8003cea:	1c29      	adds	r1, r5, #0
 8003cec:	1c30      	adds	r0, r6, #0
 8003cee:	230a      	movs	r3, #10
 8003cf0:	2202      	movs	r2, #2
 8003cf2:	f001 ffe1 	bl	8005cb8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(vetva->vetvaOut.csPort,vetva->vetvaOut.csPin,1);
 8003cf6:	68a0      	ldr	r0, [r4, #8]
 8003cf8:	89a1      	ldrh	r1, [r4, #12]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f002 fdb6 	bl	800686c <HAL_GPIO_WritePin>
}
 8003d00:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
 8003d02:	46c0      	nop			; (mov r8, r8)
 8003d04:	00001fff 	.word	0x00001fff
 8003d08:	2000069c 	.word	0x2000069c

08003d0c <vetvyInit>:
	DataA->counter=-1;
	DataA->count=3;
	addProcess(&alert,DataA);
}
//*****************FUNKCIE PRE VETVY****************************
void vetvyInit(void){
 8003d0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	vetvy[0].vetvaOut.csPort = GPIOB;
 8003d0e:	4c35      	ldr	r4, [pc, #212]	; (8003de4 <vetvyInit+0xd8>)
	vetvy[0].vetvaOut.csPin = GPIO_PIN_2;
	vetvy[0].ID = 1;
	vetvy[0].state = IDLE;
	vetvy[1].vetvaOut.csPort = GPIOB;
	vetvy[1].vetvaOut.csPin = GPIO_PIN_10;
 8003d10:	2080      	movs	r0, #128	; 0x80
 8003d12:	00c0      	lsls	r0, r0, #3
}
//*****************FUNKCIE PRE VETVY****************************
void vetvyInit(void){
	vetvy[0].vetvaOut.csPort = GPIOB;
	vetvy[0].vetvaOut.csPin = GPIO_PIN_2;
	vetvy[0].ID = 1;
 8003d14:	2301      	movs	r3, #1
	vetvy[0].state = IDLE;
	vetvy[1].vetvaOut.csPort = GPIOB;
	vetvy[1].vetvaOut.csPin = GPIO_PIN_10;
	vetvy[1].ID = 2;
 8003d16:	2502      	movs	r5, #2
	vetvy[0].vetvaOut.csPort = GPIOB;
	vetvy[0].vetvaOut.csPin = GPIO_PIN_2;
	vetvy[0].ID = 1;
	vetvy[0].state = IDLE;
	vetvy[1].vetvaOut.csPort = GPIOB;
	vetvy[1].vetvaOut.csPin = GPIO_PIN_10;
 8003d18:	8620      	strh	r0, [r4, #48]	; 0x30
	vetvy[1].ID = 2;
 8003d1a:	1d60      	adds	r0, r4, #5
 8003d1c:	77c5      	strb	r5, [r0, #31]
}
//*****************FUNKCIE PRE VETVY****************************
void vetvyInit(void){
	vetvy[0].vetvaOut.csPort = GPIOB;
	vetvy[0].vetvaOut.csPin = GPIO_PIN_2;
	vetvy[0].ID = 1;
 8003d1e:	7023      	strb	r3, [r4, #0]
	vetvy[0].state = IDLE;
	vetvy[1].vetvaOut.csPort = GPIOB;
	vetvy[1].vetvaOut.csPin = GPIO_PIN_10;
	vetvy[1].ID = 2;
	vetvy[1].state = IDLE;
 8003d20:	1da0      	adds	r0, r4, #6
//*****************FUNKCIE PRE VETVY****************************
void vetvyInit(void){
	vetvy[0].vetvaOut.csPort = GPIOB;
	vetvy[0].vetvaOut.csPin = GPIO_PIN_2;
	vetvy[0].ID = 1;
	vetvy[0].state = IDLE;
 8003d22:	2300      	movs	r3, #0
	addProcess(&alert,DataA);
}
//*****************FUNKCIE PRE VETVY****************************
void vetvyInit(void){
	vetvy[0].vetvaOut.csPort = GPIOB;
	vetvy[0].vetvaOut.csPin = GPIO_PIN_2;
 8003d24:	2104      	movs	r1, #4
	vetvy[0].ID = 1;
	vetvy[0].state = IDLE;
	vetvy[1].vetvaOut.csPort = GPIOB;
	vetvy[1].vetvaOut.csPin = GPIO_PIN_10;
	vetvy[1].ID = 2;
	vetvy[1].state = IDLE;
 8003d26:	77c3      	strb	r3, [r0, #31]
	vetvy[2].vetvaOut.csPort = GPIOB;
	vetvy[2].vetvaOut.csPin = GPIO_PIN_11;
 8003d28:	2580      	movs	r5, #128	; 0x80
 8003d2a:	1c20      	adds	r0, r4, #0
 8003d2c:	3054      	adds	r0, #84	; 0x54
 8003d2e:	408d      	lsls	r5, r1
 8003d30:	8005      	strh	r5, [r0, #0]
	vetvy[2].ID = 3;
 8003d32:	1c20      	adds	r0, r4, #0
 8003d34:	3048      	adds	r0, #72	; 0x48
 8003d36:	2503      	movs	r5, #3
	DataA->count=3;
	addProcess(&alert,DataA);
}
//*****************FUNKCIE PRE VETVY****************************
void vetvyInit(void){
	vetvy[0].vetvaOut.csPort = GPIOB;
 8003d38:	4a2b      	ldr	r2, [pc, #172]	; (8003de8 <vetvyInit+0xdc>)
	vetvy[1].vetvaOut.csPin = GPIO_PIN_10;
	vetvy[1].ID = 2;
	vetvy[1].state = IDLE;
	vetvy[2].vetvaOut.csPort = GPIOB;
	vetvy[2].vetvaOut.csPin = GPIO_PIN_11;
	vetvy[2].ID = 3;
 8003d3a:	7005      	strb	r5, [r0, #0]
	vetvy[2].state = IDLE;
 8003d3c:	1c20      	adds	r0, r4, #0
 8003d3e:	3049      	adds	r0, #73	; 0x49
	DataA->count=3;
	addProcess(&alert,DataA);
}
//*****************FUNKCIE PRE VETVY****************************
void vetvyInit(void){
	vetvy[0].vetvaOut.csPort = GPIOB;
 8003d40:	60a2      	str	r2, [r4, #8]
	vetvy[0].vetvaOut.csPin = GPIO_PIN_2;
	vetvy[0].ID = 1;
	vetvy[0].state = IDLE;
	vetvy[1].vetvaOut.csPort = GPIOB;
 8003d42:	62e2      	str	r2, [r4, #44]	; 0x2c
	vetvy[1].vetvaOut.csPin = GPIO_PIN_10;
	vetvy[1].ID = 2;
	vetvy[1].state = IDLE;
	vetvy[2].vetvaOut.csPort = GPIOB;
 8003d44:	6522      	str	r2, [r4, #80]	; 0x50
	vetvy[2].vetvaOut.csPin = GPIO_PIN_11;
	vetvy[2].ID = 3;
	vetvy[2].state = IDLE;
 8003d46:	7003      	strb	r3, [r0, #0]
	vetvy[3].vetvaOut.csPort = GPIOB;
 8003d48:	6762      	str	r2, [r4, #116]	; 0x74
	vetvy[3].vetvaOut.csPin = GPIO_PIN_12;
 8003d4a:	2080      	movs	r0, #128	; 0x80
 8003d4c:	1c22      	adds	r2, r4, #0
 8003d4e:	3278      	adds	r2, #120	; 0x78
 8003d50:	0140      	lsls	r0, r0, #5
 8003d52:	8010      	strh	r0, [r2, #0]
	vetvy[3].ID = 4;
 8003d54:	1c22      	adds	r2, r4, #0
 8003d56:	326c      	adds	r2, #108	; 0x6c
 8003d58:	7011      	strb	r1, [r2, #0]
	vetvy[3].state = IDLE;
 8003d5a:	1c22      	adds	r2, r4, #0
 8003d5c:	326d      	adds	r2, #109	; 0x6d
	addProcess(&alert,DataA);
}
//*****************FUNKCIE PRE VETVY****************************
void vetvyInit(void){
	vetvy[0].vetvaOut.csPort = GPIOB;
	vetvy[0].vetvaOut.csPin = GPIO_PIN_2;
 8003d5e:	81a1      	strh	r1, [r4, #12]
	vetvy[0].ID = 1;
	vetvy[0].state = IDLE;
 8003d60:	7063      	strb	r3, [r4, #1]
	vetvy[2].ID = 3;
	vetvy[2].state = IDLE;
	vetvy[3].vetvaOut.csPort = GPIOB;
	vetvy[3].vetvaOut.csPin = GPIO_PIN_12;
	vetvy[3].ID = 4;
	vetvy[3].state = IDLE;
 8003d62:	7013      	strb	r3, [r2, #0]

	//plne vypnutie oboch tranzistorov na vsetkych vetvach
	int i,x;
	for(x=0;x<=2;x++){			//pre istotu viac krat
		for (i=0;i<=3;i++){
			vetvaOff(&vetvy[i]);
 8003d64:	1c20      	adds	r0, r4, #0
 8003d66:	f7ff ffa1 	bl	8003cac <vetvaOff>
 8003d6a:	1c20      	adds	r0, r4, #0
 8003d6c:	3024      	adds	r0, #36	; 0x24
 8003d6e:	f7ff ff9d 	bl	8003cac <vetvaOff>
 8003d72:	1c20      	adds	r0, r4, #0
 8003d74:	3048      	adds	r0, #72	; 0x48
 8003d76:	f7ff ff99 	bl	8003cac <vetvaOff>
 8003d7a:	1c20      	adds	r0, r4, #0
 8003d7c:	306c      	adds	r0, #108	; 0x6c
 8003d7e:	3d01      	subs	r5, #1
 8003d80:	f7ff ff94 	bl	8003cac <vetvaOff>
	vetvy[3].ID = 4;
	vetvy[3].state = IDLE;

	//plne vypnutie oboch tranzistorov na vsetkych vetvach
	int i,x;
	for(x=0;x<=2;x++){			//pre istotu viac krat
 8003d84:	2d00      	cmp	r5, #0
 8003d86:	d1ed      	bne.n	8003d64 <vetvyInit+0x58>
 8003d88:	2214      	movs	r2, #20
 8003d8a:	9201      	str	r2, [sp, #4]
 8003d8c:	1c2f      	adds	r7, r5, #0
 8003d8e:	1c2e      	adds	r6, r5, #0
 8003d90:	9500      	str	r5, [sp, #0]
		}
	}
	//kalibracia prudovych senzorov
	int avg[4] = {0, 0, 0, 0};
	for(i = 0; i< CALIBCOUNT;i++){
		HAL_Delay(10);
 8003d92:	200a      	movs	r0, #10
 8003d94:	f003 f968 	bl	8007068 <HAL_Delay>
		avg[0] += channels[11];
 8003d98:	4b14      	ldr	r3, [pc, #80]	; (8003dec <vetvyInit+0xe0>)
 8003d9a:	8ada      	ldrh	r2, [r3, #22]
 8003d9c:	18ad      	adds	r5, r5, r2
		avg[1] += channels[2];
 8003d9e:	889a      	ldrh	r2, [r3, #4]
 8003da0:	18bf      	adds	r7, r7, r2
		avg[2] += channels[5];
 8003da2:	895a      	ldrh	r2, [r3, #10]
		avg[3] += channels[9];
 8003da4:	8a5b      	ldrh	r3, [r3, #18]
	int avg[4] = {0, 0, 0, 0};
	for(i = 0; i< CALIBCOUNT;i++){
		HAL_Delay(10);
		avg[0] += channels[11];
		avg[1] += channels[2];
		avg[2] += channels[5];
 8003da6:	18b6      	adds	r6, r6, r2
		avg[3] += channels[9];
 8003da8:	9a00      	ldr	r2, [sp, #0]
 8003daa:	18d2      	adds	r2, r2, r3
 8003dac:	9b01      	ldr	r3, [sp, #4]
 8003dae:	9200      	str	r2, [sp, #0]
 8003db0:	3b01      	subs	r3, #1
 8003db2:	9301      	str	r3, [sp, #4]
			vetvaOff(&vetvy[i]);
		}
	}
	//kalibracia prudovych senzorov
	int avg[4] = {0, 0, 0, 0};
	for(i = 0; i< CALIBCOUNT;i++){
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d1ec      	bne.n	8003d92 <vetvyInit+0x86>
		avg[1] += channels[2];
		avg[2] += channels[5];
		avg[3] += channels[9];
		while(!ADC_FLAG_EOS);
	}
	vetvy[0].cCalibration = avg[0]/CALIBCOUNT;
 8003db8:	1c28      	adds	r0, r5, #0
 8003dba:	2114      	movs	r1, #20
 8003dbc:	f7fc fa10 	bl	80001e0 <__aeabi_idiv>
	vetvy[1].cCalibration = avg[1]/CALIBCOUNT;
 8003dc0:	2114      	movs	r1, #20
		avg[1] += channels[2];
		avg[2] += channels[5];
		avg[3] += channels[9];
		while(!ADC_FLAG_EOS);
	}
	vetvy[0].cCalibration = avg[0]/CALIBCOUNT;
 8003dc2:	6220      	str	r0, [r4, #32]
	vetvy[1].cCalibration = avg[1]/CALIBCOUNT;
 8003dc4:	1c38      	adds	r0, r7, #0
 8003dc6:	f7fc fa0b 	bl	80001e0 <__aeabi_idiv>
	vetvy[2].cCalibration = avg[2]/CALIBCOUNT;
 8003dca:	2114      	movs	r1, #20
		avg[2] += channels[5];
		avg[3] += channels[9];
		while(!ADC_FLAG_EOS);
	}
	vetvy[0].cCalibration = avg[0]/CALIBCOUNT;
	vetvy[1].cCalibration = avg[1]/CALIBCOUNT;
 8003dcc:	6460      	str	r0, [r4, #68]	; 0x44
	vetvy[2].cCalibration = avg[2]/CALIBCOUNT;
 8003dce:	1c30      	adds	r0, r6, #0
 8003dd0:	f7fc fa06 	bl	80001e0 <__aeabi_idiv>
	vetvy[3].cCalibration = avg[3]/CALIBCOUNT;
 8003dd4:	2114      	movs	r1, #20
		avg[3] += channels[9];
		while(!ADC_FLAG_EOS);
	}
	vetvy[0].cCalibration = avg[0]/CALIBCOUNT;
	vetvy[1].cCalibration = avg[1]/CALIBCOUNT;
	vetvy[2].cCalibration = avg[2]/CALIBCOUNT;
 8003dd6:	66a0      	str	r0, [r4, #104]	; 0x68
	vetvy[3].cCalibration = avg[3]/CALIBCOUNT;
 8003dd8:	9800      	ldr	r0, [sp, #0]
 8003dda:	f7fc fa01 	bl	80001e0 <__aeabi_idiv>
 8003dde:	348c      	adds	r4, #140	; 0x8c
 8003de0:	6020      	str	r0, [r4, #0]
}
 8003de2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8003de4:	20000988 	.word	0x20000988
 8003de8:	50000400 	.word	0x50000400
 8003dec:	20000968 	.word	0x20000968

08003df0 <main>:
dialog_s DIALOG = INIT;
uint8_t option = 0;
uint8_t selection[2];

int main(void)
{
 8003df0:	b538      	push	{r3, r4, r5, lr}
  HAL_Init();
 8003df2:	f003 f91b 	bl	800702c <HAL_Init>
  SystemClock_Config();
 8003df6:	f001 f8f3 	bl	8004fe0 <SystemClock_Config>
  ADC_Init();
 8003dfa:	f001 f811 	bl	8004e20 <ADC_Init>
  GPIO_Init();
 8003dfe:	f001 f883 	bl	8004f08 <GPIO_Init>
  SPI2_Init();
 8003e02:	f001 f837 	bl	8004e74 <SPI2_Init>
  USART1_UART_Init();
 8003e06:	f001 f867 	bl	8004ed8 <USART1_UART_Init>
  TIM21_Init();
 8003e0a:	f001 f851 	bl	8004eb0 <TIM21_Init>
  LCD_Init();
 8003e0e:	f001 f9bf 	bl	8005190 <LCD_Init>

  initProcesses();
 8003e12:	f7ff fc15 	bl	8003640 <initProcesses>
  initCounters();
 8003e16:	f7ff fc4b 	bl	80036b0 <initCounters>

  HAL_UART_Receive_IT(&huart1,(uint8_t *)&RxChar,sizeof(RxChar));
 8003e1a:	4d13      	ldr	r5, [pc, #76]	; (8003e68 <main+0x78>)
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	4913      	ldr	r1, [pc, #76]	; (8003e6c <main+0x7c>)
 8003e20:	1c28      	adds	r0, r5, #0
 8003e22:	f001 fa2d 	bl	8005280 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim21);
 8003e26:	4812      	ldr	r0, [pc, #72]	; (8003e70 <main+0x80>)
 8003e28:	f001 fe1e 	bl	8005a68 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_IT(&AdcHandle);
 8003e2c:	4811      	ldr	r0, [pc, #68]	; (8003e74 <main+0x84>)
 8003e2e:	f002 ffe9 	bl	8006e04 <HAL_ADC_Start_IT>

  vetvyInit();
 8003e32:	f7ff ff6b 	bl	8003d0c <vetvyInit>
  LCD_GotoXY(0,0);
 8003e36:	2000      	movs	r0, #0
 8003e38:	1c01      	adds	r1, r0, #0
 8003e3a:	f001 f991 	bl	8005160 <LCD_GotoXY>
  LCD_Print("dobry den");
 8003e3e:	480e      	ldr	r0, [pc, #56]	; (8003e78 <main+0x88>)
 8003e40:	f001 fa12 	bl	8005268 <LCD_Print>
  sprintf(printStr,"\r\nwelcome!\r\n");
 8003e44:	4c0d      	ldr	r4, [pc, #52]	; (8003e7c <main+0x8c>)
 8003e46:	490e      	ldr	r1, [pc, #56]	; (8003e80 <main+0x90>)
 8003e48:	1c20      	adds	r0, r4, #0
 8003e4a:	f003 fbef 	bl	800762c <strcpy>
  HAL_UART_Transmit(&huart1,(uint8_t *)printStr,strlen(printStr),1000);
 8003e4e:	1c20      	adds	r0, r4, #0
 8003e50:	f003 fbf4 	bl	800763c <strlen>
 8003e54:	23fa      	movs	r3, #250	; 0xfa
 8003e56:	b282      	uxth	r2, r0
 8003e58:	1c21      	adds	r1, r4, #0
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	1c28      	adds	r0, r5, #0
 8003e5e:	f001 fd03 	bl	8005868 <HAL_UART_Transmit>
  help();
 8003e62:	f7ff fd6d 	bl	8003940 <help>
 8003e66:	e7fe      	b.n	8003e66 <main+0x76>
 8003e68:	200006f4 	.word	0x200006f4
 8003e6c:	20000950 	.word	0x20000950
 8003e70:	2000081c 	.word	0x2000081c
 8003e74:	20000764 	.word	0x20000764
 8003e78:	0800c0e1 	.word	0x0800c0e1
 8003e7c:	20000854 	.word	0x20000854
 8003e80:	0800c0eb 	.word	0x0800c0eb

08003e84 <uart>:
		addAlert();
	} break;
	}
}

void uart(int PID){					//PROCES SPRACUVAJUCI PRIKAZY Z UART
 8003e84:	b5f0      	push	{r4, r5, r6, r7, lr}
	command[commandNumber][commandIndex] = '\0';
 8003e86:	4ad6      	ldr	r2, [pc, #856]	; (80041e0 <uart+0x35c>)
		addAlert();
	} break;
	}
}

void uart(int PID){					//PROCES SPRACUVAJUCI PRIKAZY Z UART
 8003e88:	b087      	sub	sp, #28
 8003e8a:	9003      	str	r0, [sp, #12]
	command[commandNumber][commandIndex] = '\0';
 8003e8c:	7810      	ldrb	r0, [r2, #0]
 8003e8e:	2514      	movs	r5, #20
 8003e90:	49d4      	ldr	r1, [pc, #848]	; (80041e4 <uart+0x360>)
 8003e92:	4368      	muls	r0, r5
 8003e94:	780b      	ldrb	r3, [r1, #0]
 8003e96:	4cd4      	ldr	r4, [pc, #848]	; (80041e8 <uart+0x364>)
 8003e98:	18c0      	adds	r0, r0, r3
	commandIndex = 0;
	commandNumber = 0;
	HAL_UART_Transmit(&huart1,(uint8_t *)"\r\n",2,1000);
 8003e9a:	4fd4      	ldr	r7, [pc, #848]	; (80041ec <uart+0x368>)
	} break;
	}
}

void uart(int PID){					//PROCES SPRACUVAJUCI PRIKAZY Z UART
	command[commandNumber][commandIndex] = '\0';
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	5503      	strb	r3, [r0, r4]
	commandIndex = 0;
 8003ea0:	700b      	strb	r3, [r1, #0]
	commandNumber = 0;
 8003ea2:	7013      	strb	r3, [r2, #0]
	HAL_UART_Transmit(&huart1,(uint8_t *)"\r\n",2,1000);
 8003ea4:	2202      	movs	r2, #2
 8003ea6:	23fa      	movs	r3, #250	; 0xfa
 8003ea8:	49d1      	ldr	r1, [pc, #836]	; (80041f0 <uart+0x36c>)
 8003eaa:	4093      	lsls	r3, r2
 8003eac:	1c38      	adds	r0, r7, #0
 8003eae:	f001 fcdb 	bl	8005868 <HAL_UART_Transmit>

	if(strcmp(command[0],"help") == 0){
 8003eb2:	1c20      	adds	r0, r4, #0
 8003eb4:	49cf      	ldr	r1, [pc, #828]	; (80041f4 <uart+0x370>)
 8003eb6:	f7fc f927 	bl	8000108 <strcmp>
 8003eba:	1c3e      	adds	r6, r7, #0
 8003ebc:	2800      	cmp	r0, #0
 8003ebe:	d102      	bne.n	8003ec6 <uart+0x42>
		help();
 8003ec0:	f7ff fd3e 	bl	8003940 <help>
 8003ec4:	e217      	b.n	80042f6 <uart+0x472>
	}
	else if(strcmp(command[0],"discharge") == 0){
 8003ec6:	1c20      	adds	r0, r4, #0
 8003ec8:	49cb      	ldr	r1, [pc, #812]	; (80041f8 <uart+0x374>)
 8003eca:	f7fc f91d 	bl	8000108 <strcmp>
 8003ece:	2800      	cmp	r0, #0
 8003ed0:	d12e      	bne.n	8003f30 <uart+0xac>
		int v = atoi(command[1]);
 8003ed2:	1c20      	adds	r0, r4, #0
 8003ed4:	3014      	adds	r0, #20
 8003ed6:	f003 f92f 	bl	8007138 <atoi>
		if(v >= 1 && v <=4 && vetvy[v - 1].state == IDLE){
 8003eda:	3801      	subs	r0, #1
 8003edc:	9002      	str	r0, [sp, #8]
 8003ede:	2803      	cmp	r0, #3
 8003ee0:	d833      	bhi.n	8003f4a <uart+0xc6>
 8003ee2:	2724      	movs	r7, #36	; 0x24
 8003ee4:	4347      	muls	r7, r0
 8003ee6:	4bc5      	ldr	r3, [pc, #788]	; (80041fc <uart+0x378>)
 8003ee8:	19df      	adds	r7, r3, r7
 8003eea:	787e      	ldrb	r6, [r7, #1]
 8003eec:	2e00      	cmp	r6, #0
 8003eee:	d12c      	bne.n	8003f4a <uart+0xc6>
			DataDischarge * Data = (DataDischarge *) malloc(sizeof(DataDischarge));
 8003ef0:	2018      	movs	r0, #24
 8003ef2:	f003 f94d 	bl	8007190 <malloc>
 8003ef6:	1c05      	adds	r5, r0, #0
			Data->vetva = &vetvy[v - 1];
 8003ef8:	6007      	str	r7, [r0, #0]
			Data->target = atoi(command[2]);
 8003efa:	1c20      	adds	r0, r4, #0
 8003efc:	3028      	adds	r0, #40	; 0x28
 8003efe:	f003 f91b 	bl	8007138 <atoi>
 8003f02:	6068      	str	r0, [r5, #4]
			Data->cutoff = atoi(command[3]);
 8003f04:	1c20      	adds	r0, r4, #0
 8003f06:	303c      	adds	r0, #60	; 0x3c
 8003f08:	f003 f916 	bl	8007138 <atoi>
 8003f0c:	60a8      	str	r0, [r5, #8]
			Data->tolerance = 0;
			Data->state = START;
			if(atoi(command[4]))verbose |= (1 << (v-1));
 8003f0e:	1c20      	adds	r0, r4, #0
		if(v >= 1 && v <=4 && vetvy[v - 1].state == IDLE){
			DataDischarge * Data = (DataDischarge *) malloc(sizeof(DataDischarge));
			Data->vetva = &vetvy[v - 1];
			Data->target = atoi(command[2]);
			Data->cutoff = atoi(command[3]);
			Data->tolerance = 0;
 8003f10:	60ee      	str	r6, [r5, #12]
			Data->state = START;
 8003f12:	752e      	strb	r6, [r5, #20]
			if(atoi(command[4]))verbose |= (1 << (v-1));
 8003f14:	3050      	adds	r0, #80	; 0x50
 8003f16:	f003 f90f 	bl	8007138 <atoi>
 8003f1a:	2800      	cmp	r0, #0
 8003f1c:	d006      	beq.n	8003f2c <uart+0xa8>
 8003f1e:	4bb8      	ldr	r3, [pc, #736]	; (8004200 <uart+0x37c>)
 8003f20:	9902      	ldr	r1, [sp, #8]
 8003f22:	2201      	movs	r2, #1
 8003f24:	408a      	lsls	r2, r1
 8003f26:	7819      	ldrb	r1, [r3, #0]
 8003f28:	430a      	orrs	r2, r1
 8003f2a:	701a      	strb	r2, [r3, #0]
			addProcess(&discharge,Data);
 8003f2c:	48b5      	ldr	r0, [pc, #724]	; (8004204 <uart+0x380>)
 8003f2e:	e06a      	b.n	8004006 <uart+0x182>
		} else {
			ErrorHandler(0);
		}
	}
	else if(strcmp(command[0],"charge") == 0){
 8003f30:	1c20      	adds	r0, r4, #0
 8003f32:	49b5      	ldr	r1, [pc, #724]	; (8004208 <uart+0x384>)
 8003f34:	f7fc f8e8 	bl	8000108 <strcmp>
 8003f38:	2800      	cmp	r0, #0
 8003f3a:	d127      	bne.n	8003f8c <uart+0x108>
		int v = atoi(command[1]);
 8003f3c:	1c20      	adds	r0, r4, #0
 8003f3e:	3014      	adds	r0, #20
 8003f40:	f003 f8fa 	bl	8007138 <atoi>
		if(v >= 1 && v <=4 && vetvy[v - 1].state == IDLE){
 8003f44:	3801      	subs	r0, #1
 8003f46:	2803      	cmp	r0, #3
 8003f48:	d901      	bls.n	8003f4e <uart+0xca>
			Data->tolerance = 0;
			Data->state = START;
			if(atoi(command[4]))verbose |= (1 << (v-1));
			addProcess(&discharge,Data);
		} else {
			ErrorHandler(0);
 8003f4a:	2000      	movs	r0, #0
 8003f4c:	e0a7      	b.n	800409e <uart+0x21a>
		}
	}
	else if(strcmp(command[0],"charge") == 0){
		int v = atoi(command[1]);
		if(v >= 1 && v <=4 && vetvy[v - 1].state == IDLE){
 8003f4e:	2724      	movs	r7, #36	; 0x24
 8003f50:	4378      	muls	r0, r7
 8003f52:	4faa      	ldr	r7, [pc, #680]	; (80041fc <uart+0x378>)
 8003f54:	183f      	adds	r7, r7, r0
 8003f56:	787e      	ldrb	r6, [r7, #1]
 8003f58:	2e00      	cmp	r6, #0
 8003f5a:	d1f6      	bne.n	8003f4a <uart+0xc6>
			DataCharge * Data = (DataCharge *) malloc(sizeof(DataCharge));
 8003f5c:	201c      	movs	r0, #28
 8003f5e:	f003 f917 	bl	8007190 <malloc>
 8003f62:	1c05      	adds	r5, r0, #0
			Data->vetva = &vetvy[v - 1];
 8003f64:	6147      	str	r7, [r0, #20]
			Data->target = atoi(command[2]);
 8003f66:	1c20      	adds	r0, r4, #0
 8003f68:	3028      	adds	r0, #40	; 0x28
 8003f6a:	f003 f8e5 	bl	8007138 <atoi>
 8003f6e:	60a8      	str	r0, [r5, #8]
			Data->cutoff = atoi(command[3]);
 8003f70:	1c20      	adds	r0, r4, #0
 8003f72:	303c      	adds	r0, #60	; 0x3c
 8003f74:	f003 f8e0 	bl	8007138 <atoi>
 8003f78:	60e8      	str	r0, [r5, #12]
			Data->limit = atoi(command[4]);
 8003f7a:	1c20      	adds	r0, r4, #0
 8003f7c:	3050      	adds	r0, #80	; 0x50
 8003f7e:	f003 f8db 	bl	8007138 <atoi>
			Data->tolerance = 0;
 8003f82:	606e      	str	r6, [r5, #4]
		if(v >= 1 && v <=4 && vetvy[v - 1].state == IDLE){
			DataCharge * Data = (DataCharge *) malloc(sizeof(DataCharge));
			Data->vetva = &vetvy[v - 1];
			Data->target = atoi(command[2]);
			Data->cutoff = atoi(command[3]);
			Data->limit = atoi(command[4]);
 8003f84:	6128      	str	r0, [r5, #16]
			Data->tolerance = 0;
			Data->state = START;
 8003f86:	762e      	strb	r6, [r5, #24]
			addProcess(&charge,Data);
 8003f88:	48a0      	ldr	r0, [pc, #640]	; (800420c <uart+0x388>)
 8003f8a:	e03c      	b.n	8004006 <uart+0x182>
		} else {
			ErrorHandler(0);
		}
	}
	else if(strcmp(command[0],"chargeli") == 0){
 8003f8c:	1c20      	adds	r0, r4, #0
 8003f8e:	49a0      	ldr	r1, [pc, #640]	; (8004210 <uart+0x38c>)
 8003f90:	f7fc f8ba 	bl	8000108 <strcmp>
 8003f94:	9002      	str	r0, [sp, #8]
 8003f96:	2800      	cmp	r0, #0
 8003f98:	d139      	bne.n	800400e <uart+0x18a>
		int v = atoi(command[1]);
 8003f9a:	1c20      	adds	r0, r4, #0
 8003f9c:	3014      	adds	r0, #20
 8003f9e:	f003 f8cb 	bl	8007138 <atoi>
		if(v >= 1 && v <=4){
 8003fa2:	1e46      	subs	r6, r0, #1
 8003fa4:	2e03      	cmp	r6, #3
 8003fa6:	d8d0      	bhi.n	8003f4a <uart+0xc6>
			DataChargeLithium * Data = (DataChargeLithium *) malloc(sizeof(DataChargeLithium));
 8003fa8:	2024      	movs	r0, #36	; 0x24
 8003faa:	f003 f8f1 	bl	8007190 <malloc>
			Data->vetva = &vetvy[v - 1];
 8003fae:	2324      	movs	r3, #36	; 0x24
 8003fb0:	4373      	muls	r3, r6
 8003fb2:	4a92      	ldr	r2, [pc, #584]	; (80041fc <uart+0x378>)
		}
	}
	else if(strcmp(command[0],"chargeli") == 0){
		int v = atoi(command[1]);
		if(v >= 1 && v <=4){
			DataChargeLithium * Data = (DataChargeLithium *) malloc(sizeof(DataChargeLithium));
 8003fb4:	1c05      	adds	r5, r0, #0
			Data->vetva = &vetvy[v - 1];
 8003fb6:	189b      	adds	r3, r3, r2
 8003fb8:	61c3      	str	r3, [r0, #28]
			Data->target[0] = atoi(command[2]);
 8003fba:	1c20      	adds	r0, r4, #0
 8003fbc:	3028      	adds	r0, #40	; 0x28
 8003fbe:	f003 f8bb 	bl	8007138 <atoi>
 8003fc2:	60a8      	str	r0, [r5, #8]
			Data->target[1] = atoi(command[3]);
 8003fc4:	1c20      	adds	r0, r4, #0
 8003fc6:	303c      	adds	r0, #60	; 0x3c
 8003fc8:	f003 f8b6 	bl	8007138 <atoi>
 8003fcc:	60e8      	str	r0, [r5, #12]
			Data->cutoff[0] = atoi(command[4]);
 8003fce:	1c20      	adds	r0, r4, #0
 8003fd0:	3050      	adds	r0, #80	; 0x50
 8003fd2:	f003 f8b1 	bl	8007138 <atoi>
 8003fd6:	6128      	str	r0, [r5, #16]
			Data->cutoff[1] = atoi(command[5]);
 8003fd8:	1c20      	adds	r0, r4, #0
 8003fda:	3064      	adds	r0, #100	; 0x64
 8003fdc:	f003 f8ac 	bl	8007138 <atoi>
			Data->tolerance = 0;
 8003fe0:	9a02      	ldr	r2, [sp, #8]
			DataChargeLithium * Data = (DataChargeLithium *) malloc(sizeof(DataChargeLithium));
			Data->vetva = &vetvy[v - 1];
			Data->target[0] = atoi(command[2]);
			Data->target[1] = atoi(command[3]);
			Data->cutoff[0] = atoi(command[4]);
			Data->cutoff[1] = atoi(command[5]);
 8003fe2:	6168      	str	r0, [r5, #20]
			Data->tolerance = 0;
			Data->state = START;
 8003fe4:	1c6b      	adds	r3, r5, #1
			if(atoi(command[6]))verbose |= (1 << (v-1));
 8003fe6:	1c20      	adds	r0, r4, #0
			Data->vetva = &vetvy[v - 1];
			Data->target[0] = atoi(command[2]);
			Data->target[1] = atoi(command[3]);
			Data->cutoff[0] = atoi(command[4]);
			Data->cutoff[1] = atoi(command[5]);
			Data->tolerance = 0;
 8003fe8:	606a      	str	r2, [r5, #4]
			Data->state = START;
			if(atoi(command[6]))verbose |= (1 << (v-1));
 8003fea:	3078      	adds	r0, #120	; 0x78
			Data->target[0] = atoi(command[2]);
			Data->target[1] = atoi(command[3]);
			Data->cutoff[0] = atoi(command[4]);
			Data->cutoff[1] = atoi(command[5]);
			Data->tolerance = 0;
			Data->state = START;
 8003fec:	77da      	strb	r2, [r3, #31]
			if(atoi(command[6]))verbose |= (1 << (v-1));
 8003fee:	f003 f8a3 	bl	8007138 <atoi>
 8003ff2:	2800      	cmp	r0, #0
 8003ff4:	d006      	beq.n	8004004 <uart+0x180>
 8003ff6:	4b82      	ldr	r3, [pc, #520]	; (8004200 <uart+0x37c>)
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	40b2      	lsls	r2, r6
 8003ffc:	1c16      	adds	r6, r2, #0
 8003ffe:	781a      	ldrb	r2, [r3, #0]
 8004000:	4316      	orrs	r6, r2
 8004002:	701e      	strb	r6, [r3, #0]
			addProcess(&chargeLithium,Data);
 8004004:	4883      	ldr	r0, [pc, #524]	; (8004214 <uart+0x390>)
 8004006:	1c29      	adds	r1, r5, #0
 8004008:	f7ff fb28 	bl	800365c <addProcess>
 800400c:	e173      	b.n	80042f6 <uart+0x472>
		} else {
			ErrorHandler(0);
		}
	}
	else if(strcmp(command[0],"resistance") == 0){
 800400e:	1c20      	adds	r0, r4, #0
 8004010:	4981      	ldr	r1, [pc, #516]	; (8004218 <uart+0x394>)
 8004012:	f7fc f879 	bl	8000108 <strcmp>
 8004016:	2800      	cmp	r0, #0
 8004018:	d129      	bne.n	800406e <uart+0x1ea>
		int v = atoi(command[1]);
 800401a:	1c20      	adds	r0, r4, #0
 800401c:	3014      	adds	r0, #20
 800401e:	f003 f88b 	bl	8007138 <atoi>
		if(v >= 1 && v <=4 && vetvy[v - 1].state == IDLE){
 8004022:	1e46      	subs	r6, r0, #1
 8004024:	2e03      	cmp	r6, #3
 8004026:	d890      	bhi.n	8003f4a <uart+0xc6>
 8004028:	2024      	movs	r0, #36	; 0x24
 800402a:	4346      	muls	r6, r0
 800402c:	4b73      	ldr	r3, [pc, #460]	; (80041fc <uart+0x378>)
 800402e:	199e      	adds	r6, r3, r6
 8004030:	7877      	ldrb	r7, [r6, #1]
 8004032:	2f00      	cmp	r7, #0
 8004034:	d189      	bne.n	8003f4a <uart+0xc6>
			DataResistance * Data = (DataResistance *) malloc(sizeof(DataResistance));
 8004036:	f003 f8ab 	bl	8007190 <malloc>
 800403a:	1c05      	adds	r5, r0, #0
			Data->vetva = &vetvy[v - 1];
 800403c:	61c6      	str	r6, [r0, #28]
			Data->target[0] = atoi(command[2]);
 800403e:	1c20      	adds	r0, r4, #0
 8004040:	3028      	adds	r0, #40	; 0x28
 8004042:	f003 f879 	bl	8007138 <atoi>
 8004046:	6068      	str	r0, [r5, #4]
			Data->target[1] = atoi(command[3]);
 8004048:	1c20      	adds	r0, r4, #0
 800404a:	303c      	adds	r0, #60	; 0x3c
 800404c:	f003 f874 	bl	8007138 <atoi>
 8004050:	60a8      	str	r0, [r5, #8]
			Data->samples = atoi(command[4]);
 8004052:	1c20      	adds	r0, r4, #0
 8004054:	3050      	adds	r0, #80	; 0x50
 8004056:	f003 f86f 	bl	8007138 <atoi>
 800405a:	7668      	strb	r0, [r5, #25]
			Data->tolerance = atoi(command[5]);
 800405c:	1c20      	adds	r0, r4, #0
 800405e:	3064      	adds	r0, #100	; 0x64
 8004060:	f003 f86a 	bl	8007138 <atoi>
			Data->state = START;
 8004064:	1c6b      	adds	r3, r5, #1
			DataResistance * Data = (DataResistance *) malloc(sizeof(DataResistance));
			Data->vetva = &vetvy[v - 1];
			Data->target[0] = atoi(command[2]);
			Data->target[1] = atoi(command[3]);
			Data->samples = atoi(command[4]);
			Data->tolerance = atoi(command[5]);
 8004066:	6168      	str	r0, [r5, #20]
			Data->state = START;
 8004068:	77df      	strb	r7, [r3, #31]
			addProcess(&resistance,Data);
 800406a:	486c      	ldr	r0, [pc, #432]	; (800421c <uart+0x398>)
 800406c:	e7cb      	b.n	8004006 <uart+0x182>
		} else {
			ErrorHandler(0);
		}
	}
	else if(strcmp(command[0],"setconst") == 0){
 800406e:	1c20      	adds	r0, r4, #0
 8004070:	496b      	ldr	r1, [pc, #428]	; (8004220 <uart+0x39c>)
 8004072:	f7fc f849 	bl	8000108 <strcmp>
 8004076:	2800      	cmp	r0, #0
 8004078:	d114      	bne.n	80040a4 <uart+0x220>
		uint8_t addr = atoi(command[1]);
 800407a:	1c20      	adds	r0, r4, #0
 800407c:	3014      	adds	r0, #20
 800407e:	f003 f85b 	bl	8007138 <atoi>
 8004082:	1c05      	adds	r5, r0, #0
		float val = atoff(command[2]);
 8004084:	1c20      	adds	r0, r4, #0
 8004086:	3028      	adds	r0, #40	; 0x28
 8004088:	f003 f851 	bl	800712e <atoff>
		if(!eepromFloatWrite(&val,addr)){
 800408c:	b2e9      	uxtb	r1, r5
			ErrorHandler(0);
		}
	}
	else if(strcmp(command[0],"setconst") == 0){
		uint8_t addr = atoi(command[1]);
		float val = atoff(command[2]);
 800408e:	9005      	str	r0, [sp, #20]
		if(!eepromFloatWrite(&val,addr)){
 8004090:	a805      	add	r0, sp, #20
 8004092:	f7ff fb57 	bl	8003744 <eepromFloatWrite>
 8004096:	2800      	cmp	r0, #0
 8004098:	d000      	beq.n	800409c <uart+0x218>
 800409a:	e12c      	b.n	80042f6 <uart+0x472>
			ErrorHandler(3);
 800409c:	2003      	movs	r0, #3
 800409e:	f7ff fbff 	bl	80038a0 <ErrorHandler>
 80040a2:	e128      	b.n	80042f6 <uart+0x472>
		}
	}
	else if(strcmp(command[0],"setconsti") == 0){
 80040a4:	1c20      	adds	r0, r4, #0
 80040a6:	495f      	ldr	r1, [pc, #380]	; (8004224 <uart+0x3a0>)
 80040a8:	f7fc f82e 	bl	8000108 <strcmp>
 80040ac:	2800      	cmp	r0, #0
 80040ae:	d10e      	bne.n	80040ce <uart+0x24a>
		uint8_t addr = atoi(command[1]);
 80040b0:	1c20      	adds	r0, r4, #0
 80040b2:	3014      	adds	r0, #20
 80040b4:	f003 f840 	bl	8007138 <atoi>
 80040b8:	1c05      	adds	r5, r0, #0
		int val = atoi(command[2]);
 80040ba:	1c20      	adds	r0, r4, #0
 80040bc:	3028      	adds	r0, #40	; 0x28
 80040be:	f003 f83b 	bl	8007138 <atoi>
		if(!eepromIntWrite(&val,addr)){
 80040c2:	b2e9      	uxtb	r1, r5
			ErrorHandler(3);
		}
	}
	else if(strcmp(command[0],"setconsti") == 0){
		uint8_t addr = atoi(command[1]);
		int val = atoi(command[2]);
 80040c4:	9005      	str	r0, [sp, #20]
		if(!eepromIntWrite(&val,addr)){
 80040c6:	a805      	add	r0, sp, #20
 80040c8:	f7ff fb58 	bl	800377c <eepromIntWrite>
 80040cc:	e7e3      	b.n	8004096 <uart+0x212>
			ErrorHandler(3);
		}
	}
	else if(strcmp(command[0],"getconst") == 0){
 80040ce:	1c20      	adds	r0, r4, #0
 80040d0:	4955      	ldr	r1, [pc, #340]	; (8004228 <uart+0x3a4>)
 80040d2:	f7fc f819 	bl	8000108 <strcmp>
 80040d6:	2800      	cmp	r0, #0
 80040d8:	d113      	bne.n	8004102 <uart+0x27e>
		uint8_t addr = atoi(command[1]);
 80040da:	1c20      	adds	r0, r4, #0
 80040dc:	3014      	adds	r0, #20
 80040de:	f003 f82b 	bl	8007138 <atoi>
	} else retval = 0;
	return retval;
}

float * eepromFloatRead(uint8_t addr){
	return (float *)(EEPROM_OFFSET + addr*4);
 80040e2:	4952      	ldr	r1, [pc, #328]	; (800422c <uart+0x3a8>)
			ErrorHandler(3);
		}
	}
	else if(strcmp(command[0],"getconst") == 0){
		uint8_t addr = atoi(command[1]);
		sprintf(printStr,"constant @ %d: %f\r\n",addr,*eepromFloatRead(addr));
 80040e4:	b2c5      	uxtb	r5, r0
	} else retval = 0;
	return retval;
}

float * eepromFloatRead(uint8_t addr){
	return (float *)(EEPROM_OFFSET + addr*4);
 80040e6:	186b      	adds	r3, r5, r1
			ErrorHandler(3);
		}
	}
	else if(strcmp(command[0],"getconst") == 0){
		uint8_t addr = atoi(command[1]);
		sprintf(printStr,"constant @ %d: %f\r\n",addr,*eepromFloatRead(addr));
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	6818      	ldr	r0, [r3, #0]
 80040ec:	f7fe fcfa 	bl	8002ae4 <__aeabi_f2d>
 80040f0:	4c4f      	ldr	r4, [pc, #316]	; (8004230 <uart+0x3ac>)
 80040f2:	9000      	str	r0, [sp, #0]
 80040f4:	9101      	str	r1, [sp, #4]
 80040f6:	1c2a      	adds	r2, r5, #0
 80040f8:	1c20      	adds	r0, r4, #0
 80040fa:	494e      	ldr	r1, [pc, #312]	; (8004234 <uart+0x3b0>)
 80040fc:	f003 fa74 	bl	80075e8 <sprintf>
 8004100:	e013      	b.n	800412a <uart+0x2a6>
		HAL_UART_Transmit(&huart1,(uint8_t *)printStr,strlen(printStr),1000);
	}
	else if(strcmp(command[0],"getconsti") == 0){
 8004102:	1c20      	adds	r0, r4, #0
 8004104:	494c      	ldr	r1, [pc, #304]	; (8004238 <uart+0x3b4>)
 8004106:	f7fb ffff 	bl	8000108 <strcmp>
 800410a:	2800      	cmp	r0, #0
 800410c:	d113      	bne.n	8004136 <uart+0x2b2>
		uint8_t addr = atoi(command[1]);
 800410e:	1c20      	adds	r0, r4, #0
 8004110:	3014      	adds	r0, #20
 8004112:	f003 f811 	bl	8007138 <atoi>
	} else retval = 0;
	return retval;
}

int * eepromIntRead(uint8_t addr){
	return (int *)(EEPROM_OFFSET + addr*4);
 8004116:	4945      	ldr	r1, [pc, #276]	; (800422c <uart+0x3a8>)
		sprintf(printStr,"constant @ %d: %f\r\n",addr,*eepromFloatRead(addr));
		HAL_UART_Transmit(&huart1,(uint8_t *)printStr,strlen(printStr),1000);
	}
	else if(strcmp(command[0],"getconsti") == 0){
		uint8_t addr = atoi(command[1]);
		sprintf(printStr,"constant @ %d: %d\r\n",addr,*eepromIntRead(addr));
 8004118:	b2c2      	uxtb	r2, r0
	} else retval = 0;
	return retval;
}

int * eepromIntRead(uint8_t addr){
	return (int *)(EEPROM_OFFSET + addr*4);
 800411a:	1853      	adds	r3, r2, r1
		sprintf(printStr,"constant @ %d: %f\r\n",addr,*eepromFloatRead(addr));
		HAL_UART_Transmit(&huart1,(uint8_t *)printStr,strlen(printStr),1000);
	}
	else if(strcmp(command[0],"getconsti") == 0){
		uint8_t addr = atoi(command[1]);
		sprintf(printStr,"constant @ %d: %d\r\n",addr,*eepromIntRead(addr));
 800411c:	4c44      	ldr	r4, [pc, #272]	; (8004230 <uart+0x3ac>)
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	1c20      	adds	r0, r4, #0
 8004124:	4945      	ldr	r1, [pc, #276]	; (800423c <uart+0x3b8>)
 8004126:	f003 fa5f 	bl	80075e8 <sprintf>
		HAL_UART_Transmit(&huart1,(uint8_t *)printStr,strlen(printStr),1000);
 800412a:	1c20      	adds	r0, r4, #0
 800412c:	f003 fa86 	bl	800763c <strlen>
 8004130:	b282      	uxth	r2, r0
 8004132:	1c38      	adds	r0, r7, #0
 8004134:	e0da      	b.n	80042ec <uart+0x468>
	}
	else if(strcmp(command[0],"calib") == 0){
 8004136:	1c20      	adds	r0, r4, #0
 8004138:	4941      	ldr	r1, [pc, #260]	; (8004240 <uart+0x3bc>)
 800413a:	f7fb ffe5 	bl	8000108 <strcmp>
 800413e:	2800      	cmp	r0, #0
 8004140:	d114      	bne.n	800416c <uart+0x2e8>
		int v = atoi(command[1]);
 8004142:	4840      	ldr	r0, [pc, #256]	; (8004244 <uart+0x3c0>)
 8004144:	f002 fff8 	bl	8007138 <atoi>
		if(v >= 1 && v <=4 && vetvy[v - 1].state == IDLE){
 8004148:	3801      	subs	r0, #1
 800414a:	2803      	cmp	r0, #3
 800414c:	d81b      	bhi.n	8004186 <uart+0x302>
 800414e:	2324      	movs	r3, #36	; 0x24
 8004150:	4358      	muls	r0, r3
 8004152:	4b2a      	ldr	r3, [pc, #168]	; (80041fc <uart+0x378>)
 8004154:	1818      	adds	r0, r3, r0
 8004156:	7843      	ldrb	r3, [r0, #1]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d114      	bne.n	8004186 <uart+0x302>
			sprintf(printStr,"v:\t %dmV\r\nc:\t %dmA\r\n",vetvy[v - 1].actVoltage,vetvy[v - 1].actCurrent);
 800415c:	4c34      	ldr	r4, [pc, #208]	; (8004230 <uart+0x3ac>)
 800415e:	6902      	ldr	r2, [r0, #16]
 8004160:	6943      	ldr	r3, [r0, #20]
 8004162:	4939      	ldr	r1, [pc, #228]	; (8004248 <uart+0x3c4>)
 8004164:	1c20      	adds	r0, r4, #0
 8004166:	f003 fa3f 	bl	80075e8 <sprintf>
 800416a:	e0ba      	b.n	80042e2 <uart+0x45e>
			HAL_UART_Transmit(&huart1,(uint8_t *)printStr,strlen(printStr),1000);
		} else {
			ErrorHandler(5);
		}
	}
	else if(strcmp(command[0],"gettemp") == 0){
 800416c:	1c20      	adds	r0, r4, #0
 800416e:	4937      	ldr	r1, [pc, #220]	; (800424c <uart+0x3c8>)
 8004170:	f7fb ffca 	bl	8000108 <strcmp>
 8004174:	2800      	cmp	r0, #0
 8004176:	d16d      	bne.n	8004254 <uart+0x3d0>
		int v = atoi(command[1]);
 8004178:	1c20      	adds	r0, r4, #0
 800417a:	3014      	adds	r0, #20
 800417c:	f002 ffdc 	bl	8007138 <atoi>
		if(v >= 1 && v <=4 && vetvy[v - 1].state == IDLE){
 8004180:	3801      	subs	r0, #1
 8004182:	2803      	cmp	r0, #3
 8004184:	d901      	bls.n	800418a <uart+0x306>
		int v = atoi(command[1]);
		if(v >= 1 && v <=4 && vetvy[v - 1].state == IDLE){
			sprintf(printStr,"v:\t %dmV\r\nc:\t %dmA\r\n",vetvy[v - 1].actVoltage,vetvy[v - 1].actCurrent);
			HAL_UART_Transmit(&huart1,(uint8_t *)printStr,strlen(printStr),1000);
		} else {
			ErrorHandler(5);
 8004186:	2005      	movs	r0, #5
 8004188:	e789      	b.n	800409e <uart+0x21a>
		}
	}
	else if(strcmp(command[0],"gettemp") == 0){
		int v = atoi(command[1]);
		if(v >= 1 && v <=4 && vetvy[v - 1].state == IDLE){
 800418a:	2524      	movs	r5, #36	; 0x24
 800418c:	4368      	muls	r0, r5
 800418e:	4d1b      	ldr	r5, [pc, #108]	; (80041fc <uart+0x378>)
 8004190:	182d      	adds	r5, r5, r0
 8004192:	786b      	ldrb	r3, [r5, #1]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d1f6      	bne.n	8004186 <uart+0x302>
			sprintf(printStr,"t1:\t%f\r\nt2:\t%f\r\n",getTemp(vetvy[v - 1].actTempBatt),getTemp(vetvy[v - 1].actTempHeat));
 8004198:	69e8      	ldr	r0, [r5, #28]
 800419a:	f7fc fdf1 	bl	8000d80 <__aeabi_f2iz>
 800419e:	f7ff fb0b 	bl	80037b8 <getTemp>
 80041a2:	1c04      	adds	r4, r0, #0
 80041a4:	69a8      	ldr	r0, [r5, #24]
 80041a6:	f7fc fdeb 	bl	8000d80 <__aeabi_f2iz>
 80041aa:	f7ff fb05 	bl	80037b8 <getTemp>
 80041ae:	9002      	str	r0, [sp, #8]
 80041b0:	1c20      	adds	r0, r4, #0
 80041b2:	f7fe fc97 	bl	8002ae4 <__aeabi_f2d>
 80041b6:	1c04      	adds	r4, r0, #0
 80041b8:	9802      	ldr	r0, [sp, #8]
 80041ba:	1c0d      	adds	r5, r1, #0
 80041bc:	f7fe fc92 	bl	8002ae4 <__aeabi_f2d>
 80041c0:	4f1b      	ldr	r7, [pc, #108]	; (8004230 <uart+0x3ac>)
 80041c2:	9000      	str	r0, [sp, #0]
 80041c4:	9101      	str	r1, [sp, #4]
 80041c6:	1c22      	adds	r2, r4, #0
 80041c8:	4921      	ldr	r1, [pc, #132]	; (8004250 <uart+0x3cc>)
 80041ca:	1c2b      	adds	r3, r5, #0
 80041cc:	1c38      	adds	r0, r7, #0
 80041ce:	f003 fa0b 	bl	80075e8 <sprintf>
			HAL_UART_Transmit(&huart1,(uint8_t *)printStr,strlen(printStr),1000);
 80041d2:	1c38      	adds	r0, r7, #0
 80041d4:	f003 fa32 	bl	800763c <strlen>
 80041d8:	1c39      	adds	r1, r7, #0
 80041da:	b282      	uxth	r2, r0
 80041dc:	1c30      	adds	r0, r6, #0
 80041de:	e086      	b.n	80042ee <uart+0x46a>
 80041e0:	20000566 	.word	0x20000566
 80041e4:	20000567 	.word	0x20000567
 80041e8:	20000886 	.word	0x20000886
 80041ec:	200006f4 	.word	0x200006f4
 80041f0:	0800beea 	.word	0x0800beea
 80041f4:	0800c0f8 	.word	0x0800c0f8
 80041f8:	0800c0fd 	.word	0x0800c0fd
 80041fc:	20000988 	.word	0x20000988
 8004200:	20000569 	.word	0x20000569
 8004204:	0800431d 	.word	0x0800431d
 8004208:	0800c100 	.word	0x0800c100
 800420c:	08004885 	.word	0x08004885
 8004210:	0800c107 	.word	0x0800c107
 8004214:	08004689 	.word	0x08004689
 8004218:	0800c110 	.word	0x0800c110
 800421c:	0800453d 	.word	0x0800453d
 8004220:	0800c11b 	.word	0x0800c11b
 8004224:	0800c124 	.word	0x0800c124
 8004228:	0800c12e 	.word	0x0800c12e
 800422c:	02020000 	.word	0x02020000
 8004230:	20000854 	.word	0x20000854
 8004234:	0800c137 	.word	0x0800c137
 8004238:	0800c14b 	.word	0x0800c14b
 800423c:	0800c155 	.word	0x0800c155
 8004240:	0800c169 	.word	0x0800c169
 8004244:	2000089a 	.word	0x2000089a
 8004248:	0800c16f 	.word	0x0800c16f
 800424c:	0800c184 	.word	0x0800c184
 8004250:	0800c18c 	.word	0x0800c18c
		} else {
			ErrorHandler(5);
		}
	}
	else if(strcmp(command[0],"ps") == 0){
 8004254:	1c20      	adds	r0, r4, #0
 8004256:	492a      	ldr	r1, [pc, #168]	; (8004300 <uart+0x47c>)
 8004258:	f7fb ff56 	bl	8000108 <strcmp>
 800425c:	2800      	cmp	r0, #0
 800425e:	d118      	bne.n	8004292 <uart+0x40e>
 8004260:	1c04      	adds	r4, r0, #0
 8004262:	4b28      	ldr	r3, [pc, #160]	; (8004304 <uart+0x480>)
 8004264:	191b      	adds	r3, r3, r4
		int i;
		for(i = 0; i<MAXPROCESSES;i++){
			if(FRONT[i].PID != -1){
 8004266:	689a      	ldr	r2, [r3, #8]
 8004268:	1c53      	adds	r3, r2, #1
 800426a:	d00e      	beq.n	800428a <uart+0x406>
				sprintf(printStr,"PID:\t%d\r\n",FRONT[i].PID);
 800426c:	4d26      	ldr	r5, [pc, #152]	; (8004308 <uart+0x484>)
 800426e:	4927      	ldr	r1, [pc, #156]	; (800430c <uart+0x488>)
 8004270:	1c28      	adds	r0, r5, #0
 8004272:	f003 f9b9 	bl	80075e8 <sprintf>
				HAL_UART_Transmit(&huart1,(uint8_t *)printStr,strlen(printStr),1000);
 8004276:	1c28      	adds	r0, r5, #0
 8004278:	f003 f9e0 	bl	800763c <strlen>
 800427c:	23fa      	movs	r3, #250	; 0xfa
 800427e:	b282      	uxth	r2, r0
 8004280:	1c29      	adds	r1, r5, #0
 8004282:	1c30      	adds	r0, r6, #0
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	f001 faef 	bl	8005868 <HAL_UART_Transmit>
 800428a:	340c      	adds	r4, #12
			ErrorHandler(5);
		}
	}
	else if(strcmp(command[0],"ps") == 0){
		int i;
		for(i = 0; i<MAXPROCESSES;i++){
 800428c:	2cf0      	cmp	r4, #240	; 0xf0
 800428e:	d1e8      	bne.n	8004262 <uart+0x3de>
 8004290:	e031      	b.n	80042f6 <uart+0x472>
				sprintf(printStr,"PID:\t%d\r\n",FRONT[i].PID);
				HAL_UART_Transmit(&huart1,(uint8_t *)printStr,strlen(printStr),1000);
			}
		}
	}
	else if(strcmp(command[0],"kill") == 0){
 8004292:	1c20      	adds	r0, r4, #0
 8004294:	491e      	ldr	r1, [pc, #120]	; (8004310 <uart+0x48c>)
 8004296:	f7fb ff37 	bl	8000108 <strcmp>
 800429a:	2800      	cmp	r0, #0
 800429c:	d113      	bne.n	80042c6 <uart+0x442>
		int v = atoi(command[1]);
 800429e:	1c20      	adds	r0, r4, #0
 80042a0:	3014      	adds	r0, #20
 80042a2:	f002 ff49 	bl	8007138 <atoi>
		if(v >= 0 && v < MAXPROCESSES && FRONT[v].PID != -1){
 80042a6:	2813      	cmp	r0, #19
 80042a8:	d80b      	bhi.n	80042c2 <uart+0x43e>
 80042aa:	230c      	movs	r3, #12
 80042ac:	4343      	muls	r3, r0
 80042ae:	4a15      	ldr	r2, [pc, #84]	; (8004304 <uart+0x480>)
 80042b0:	18d3      	adds	r3, r2, r3
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	3301      	adds	r3, #1
 80042b6:	d004      	beq.n	80042c2 <uart+0x43e>
			removeProcess(v);
 80042b8:	f7ff f9e6 	bl	8003688 <removeProcess>
			vetvyInit();
 80042bc:	f7ff fd26 	bl	8003d0c <vetvyInit>
 80042c0:	e019      	b.n	80042f6 <uart+0x472>
		} else {
			ErrorHandler(4);
 80042c2:	2004      	movs	r0, #4
 80042c4:	e6eb      	b.n	800409e <uart+0x21a>
		}
	}
	else if(strcmp(command[0],"reset") == 0){
 80042c6:	1c20      	adds	r0, r4, #0
 80042c8:	4912      	ldr	r1, [pc, #72]	; (8004314 <uart+0x490>)
 80042ca:	f7fb ff1d 	bl	8000108 <strcmp>
 80042ce:	2800      	cmp	r0, #0
 80042d0:	d102      	bne.n	80042d8 <uart+0x454>
		HAL_NVIC_SystemReset();
 80042d2:	f002 fbf1 	bl	8006ab8 <HAL_NVIC_SystemReset>
 80042d6:	e00e      	b.n	80042f6 <uart+0x472>
	}
	else {
		sprintf(printStr,"unknow command\r\n");
 80042d8:	4c0b      	ldr	r4, [pc, #44]	; (8004308 <uart+0x484>)
 80042da:	490f      	ldr	r1, [pc, #60]	; (8004318 <uart+0x494>)
 80042dc:	1c20      	adds	r0, r4, #0
 80042de:	f003 f9a5 	bl	800762c <strcpy>
		HAL_UART_Transmit(&huart1,(uint8_t *)printStr,strlen(printStr),1000);
 80042e2:	1c20      	adds	r0, r4, #0
 80042e4:	f003 f9aa 	bl	800763c <strlen>
 80042e8:	b282      	uxth	r2, r0
 80042ea:	1c30      	adds	r0, r6, #0
 80042ec:	1c21      	adds	r1, r4, #0
 80042ee:	23fa      	movs	r3, #250	; 0xfa
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	f001 fab9 	bl	8005868 <HAL_UART_Transmit>
	}
	removeProcess(PID);
 80042f6:	9803      	ldr	r0, [sp, #12]
 80042f8:	f7ff f9c6 	bl	8003688 <removeProcess>
}
 80042fc:	b007      	add	sp, #28
 80042fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004300:	0800c19d 	.word	0x0800c19d
 8004304:	2000056c 	.word	0x2000056c
 8004308:	20000854 	.word	0x20000854
 800430c:	0800c1a0 	.word	0x0800c1a0
 8004310:	0800c1aa 	.word	0x0800c1aa
 8004314:	0800c1af 	.word	0x0800c1af
 8004318:	0800c1b5 	.word	0x0800c1b5

0800431c <discharge>:
}

//**************PROCESY*****************************

void discharge(int PID){
	DataDischarge * Data = (DataDischarge *)FRONT[PID].Data;
 800431c:	230c      	movs	r3, #12
 800431e:	4343      	muls	r3, r0
	}
}

//**************PROCESY*****************************

void discharge(int PID){
 8004320:	b5f0      	push	{r4, r5, r6, r7, lr}
	DataDischarge * Data = (DataDischarge *)FRONT[PID].Data;
 8004322:	4a79      	ldr	r2, [pc, #484]	; (8004508 <discharge+0x1ec>)
	}
}

//**************PROCESY*****************************

void discharge(int PID){
 8004324:	b089      	sub	sp, #36	; 0x24
	DataDischarge * Data = (DataDischarge *)FRONT[PID].Data;
 8004326:	18d3      	adds	r3, r2, r3
 8004328:	685c      	ldr	r4, [r3, #4]
	}
}

//**************PROCESY*****************************

void discharge(int PID){
 800432a:	1c06      	adds	r6, r0, #0
	DataDischarge * Data = (DataDischarge *)FRONT[PID].Data;

	switch(Data->state){
 800432c:	7d23      	ldrb	r3, [r4, #20]
 800432e:	2b01      	cmp	r3, #1
 8004330:	d029      	beq.n	8004386 <discharge+0x6a>
 8004332:	2b00      	cmp	r3, #0
 8004334:	d003      	beq.n	800433e <discharge+0x22>
 8004336:	2b02      	cmp	r3, #2
 8004338:	d100      	bne.n	800433c <discharge+0x20>
 800433a:	e0a3      	b.n	8004484 <discharge+0x168>
 800433c:	e0e1      	b.n	8004502 <discharge+0x1e6>
	case START:{
		if(verbose & (1 << (Data->vetva->ID - 1))){
 800433e:	6821      	ldr	r1, [r4, #0]
 8004340:	4b72      	ldr	r3, [pc, #456]	; (800450c <discharge+0x1f0>)
 8004342:	780a      	ldrb	r2, [r1, #0]
 8004344:	7819      	ldrb	r1, [r3, #0]
 8004346:	1e53      	subs	r3, r2, #1
 8004348:	4119      	asrs	r1, r3
 800434a:	1c0b      	adds	r3, r1, #0
 800434c:	07d9      	lsls	r1, r3, #31
 800434e:	d50e      	bpl.n	800436e <discharge+0x52>
			sprintf(printStr,"ID:%d[Time;Voltage;Current;T1;T2]\r\n",Data->vetva->ID);
 8004350:	4d6f      	ldr	r5, [pc, #444]	; (8004510 <discharge+0x1f4>)
 8004352:	4970      	ldr	r1, [pc, #448]	; (8004514 <discharge+0x1f8>)
 8004354:	1c28      	adds	r0, r5, #0
 8004356:	f003 f947 	bl	80075e8 <sprintf>
			HAL_UART_Transmit(&huart1,(uint8_t *)printStr,strlen(printStr),1000);
 800435a:	1c28      	adds	r0, r5, #0
 800435c:	f003 f96e 	bl	800763c <strlen>
 8004360:	23fa      	movs	r3, #250	; 0xfa
 8004362:	b282      	uxth	r2, r0
 8004364:	1c29      	adds	r1, r5, #0
 8004366:	486c      	ldr	r0, [pc, #432]	; (8004518 <discharge+0x1fc>)
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	f001 fa7d 	bl	8005868 <HAL_UART_Transmit>
		}
		Data->set = 0;
		Data->vetva->state = ACTIVE;
 800436e:	6822      	ldr	r2, [r4, #0]
	case START:{
		if(verbose & (1 << (Data->vetva->ID - 1))){
			sprintf(printStr,"ID:%d[Time;Voltage;Current;T1;T2]\r\n",Data->vetva->ID);
			HAL_UART_Transmit(&huart1,(uint8_t *)printStr,strlen(printStr),1000);
		}
		Data->set = 0;
 8004370:	2500      	movs	r5, #0
		Data->vetva->state = ACTIVE;
 8004372:	2302      	movs	r3, #2
	case START:{
		if(verbose & (1 << (Data->vetva->ID - 1))){
			sprintf(printStr,"ID:%d[Time;Voltage;Current;T1;T2]\r\n",Data->vetva->ID);
			HAL_UART_Transmit(&huart1,(uint8_t *)printStr,strlen(printStr),1000);
		}
		Data->set = 0;
 8004374:	6125      	str	r5, [r4, #16]
		Data->vetva->state = ACTIVE;
 8004376:	7053      	strb	r3, [r2, #1]
		Data->vetva->vetvaOut.vetvaOutState = OUTB;
 8004378:	2301      	movs	r3, #1
 800437a:	7113      	strb	r3, [r2, #4]
		Data->state = REGULATE;
 800437c:	7523      	strb	r3, [r4, #20]
		Data->counter = addCounter();
 800437e:	f7ff f9a3 	bl	80036c8 <addCounter>
		Data->flag = 0;
 8004382:	75a5      	strb	r5, [r4, #22]
		}
		Data->set = 0;
		Data->vetva->state = ACTIVE;
		Data->vetva->vetvaOut.vetvaOutState = OUTB;
		Data->state = REGULATE;
		Data->counter = addCounter();
 8004384:	7560      	strb	r0, [r4, #21]
		Data->flag = 0;
	}
	case REGULATE:{
		if(verbose & (1 << (Data->vetva->ID - 1))){
 8004386:	6825      	ldr	r5, [r4, #0]
 8004388:	4b60      	ldr	r3, [pc, #384]	; (800450c <discharge+0x1f0>)
 800438a:	782f      	ldrb	r7, [r5, #0]
 800438c:	781a      	ldrb	r2, [r3, #0]
 800438e:	1e7b      	subs	r3, r7, #1
 8004390:	411a      	asrs	r2, r3
 8004392:	1c13      	adds	r3, r2, #0
 8004394:	07da      	lsls	r2, r3, #31
 8004396:	d533      	bpl.n	8004400 <discharge+0xe4>
			uint8_t mod = COUNTERS[Data->counter] % 2;
 8004398:	7d62      	ldrb	r2, [r4, #21]
 800439a:	4b60      	ldr	r3, [pc, #384]	; (800451c <discharge+0x200>)
 800439c:	0092      	lsls	r2, r2, #2
 800439e:	58d2      	ldr	r2, [r2, r3]
 80043a0:	4b5f      	ldr	r3, [pc, #380]	; (8004520 <discharge+0x204>)
 80043a2:	9206      	str	r2, [sp, #24]
 80043a4:	4013      	ands	r3, r2
 80043a6:	d504      	bpl.n	80043b2 <discharge+0x96>
 80043a8:	2202      	movs	r2, #2
 80043aa:	3b01      	subs	r3, #1
 80043ac:	4252      	negs	r2, r2
 80043ae:	4313      	orrs	r3, r2
 80043b0:	3301      	adds	r3, #1
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	9307      	str	r3, [sp, #28]
			if(Data->flag  != mod){
 80043b6:	7da3      	ldrb	r3, [r4, #22]
 80043b8:	9907      	ldr	r1, [sp, #28]
 80043ba:	428b      	cmp	r3, r1
 80043bc:	d020      	beq.n	8004400 <discharge+0xe4>
				sprintf(printStr,"ID:%d[%d;%d;%d;%f;%f]\r\n",Data->vetva->ID,(int)COUNTERS[Data->counter],Data->vetva->actVoltage,Data->vetva->actCurrent,Data->vetva->actTempBatt,Data->vetva->actTempHeat);
 80043be:	692a      	ldr	r2, [r5, #16]
 80043c0:	4e53      	ldr	r6, [pc, #332]	; (8004510 <discharge+0x1f4>)
 80043c2:	9200      	str	r2, [sp, #0]
 80043c4:	696b      	ldr	r3, [r5, #20]
 80043c6:	9301      	str	r3, [sp, #4]
 80043c8:	69e8      	ldr	r0, [r5, #28]
 80043ca:	f7fe fb8b 	bl	8002ae4 <__aeabi_f2d>
 80043ce:	9002      	str	r0, [sp, #8]
 80043d0:	9103      	str	r1, [sp, #12]
 80043d2:	69a8      	ldr	r0, [r5, #24]
 80043d4:	f7fe fb86 	bl	8002ae4 <__aeabi_f2d>
 80043d8:	1c3a      	adds	r2, r7, #0
 80043da:	9004      	str	r0, [sp, #16]
 80043dc:	9105      	str	r1, [sp, #20]
 80043de:	9b06      	ldr	r3, [sp, #24]
 80043e0:	4950      	ldr	r1, [pc, #320]	; (8004524 <discharge+0x208>)
 80043e2:	1c30      	adds	r0, r6, #0
 80043e4:	f003 f900 	bl	80075e8 <sprintf>
				HAL_UART_Transmit(&huart1,(uint8_t *)printStr,strlen(printStr),1000);
 80043e8:	1c30      	adds	r0, r6, #0
 80043ea:	f003 f927 	bl	800763c <strlen>
 80043ee:	23fa      	movs	r3, #250	; 0xfa
 80043f0:	b282      	uxth	r2, r0
 80043f2:	1c31      	adds	r1, r6, #0
 80043f4:	4848      	ldr	r0, [pc, #288]	; (8004518 <discharge+0x1fc>)
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	f001 fa36 	bl	8005868 <HAL_UART_Transmit>
				Data->flag = mod;
 80043fc:	9907      	ldr	r1, [sp, #28]
 80043fe:	75a1      	strb	r1, [r4, #22]
			}
		}
		if(Data->vetva->actVoltage <= Data->cutoff){
 8004400:	6825      	ldr	r5, [r4, #0]
 8004402:	68a3      	ldr	r3, [r4, #8]
 8004404:	692a      	ldr	r2, [r5, #16]
 8004406:	429a      	cmp	r2, r3
 8004408:	dd1a      	ble.n	8004440 <discharge+0x124>
			Data->state = STOP;
		}
		else if(Data->vetva->actTempBatt >= MAXTEMPLI || Data->vetva->actTempHeat >= MAXTEMPTR){
 800440a:	69e8      	ldr	r0, [r5, #28]
 800440c:	4946      	ldr	r1, [pc, #280]	; (8004528 <discharge+0x20c>)
 800440e:	f7fb ffb7 	bl	8000380 <__aeabi_fcmpge>
 8004412:	2800      	cmp	r0, #0
 8004414:	d105      	bne.n	8004422 <discharge+0x106>
 8004416:	69a8      	ldr	r0, [r5, #24]
 8004418:	4944      	ldr	r1, [pc, #272]	; (800452c <discharge+0x210>)
 800441a:	f7fb ffb1 	bl	8000380 <__aeabi_fcmpge>
 800441e:	2800      	cmp	r0, #0
 8004420:	d011      	beq.n	8004446 <discharge+0x12a>
			sprintf(printStr,"ERROR! OVERTEMPERATURE. STOPPING PROCESS\r\n");
 8004422:	4d3b      	ldr	r5, [pc, #236]	; (8004510 <discharge+0x1f4>)
 8004424:	4942      	ldr	r1, [pc, #264]	; (8004530 <discharge+0x214>)
 8004426:	1c28      	adds	r0, r5, #0
 8004428:	f003 f900 	bl	800762c <strcpy>
			HAL_UART_Transmit(&huart1,(uint8_t *)printStr,strlen(printStr),1000);
 800442c:	1c28      	adds	r0, r5, #0
 800442e:	f003 f905 	bl	800763c <strlen>
 8004432:	23fa      	movs	r3, #250	; 0xfa
 8004434:	b282      	uxth	r2, r0
 8004436:	1c29      	adds	r1, r5, #0
 8004438:	4837      	ldr	r0, [pc, #220]	; (8004518 <discharge+0x1fc>)
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	f001 fa14 	bl	8005868 <HAL_UART_Transmit>
			Data->state = STOP;
 8004440:	2302      	movs	r3, #2
 8004442:	7523      	strb	r3, [r4, #20]
 8004444:	e05d      	b.n	8004502 <discharge+0x1e6>
		}
		else {
			int rate, error = Data->target + Data->vetva->actCurrent;
 8004446:	6861      	ldr	r1, [r4, #4]
 8004448:	696b      	ldr	r3, [r5, #20]
 800444a:	18ca      	adds	r2, r1, r3

			if(error >= 100 || error <= -100){
 800444c:	1c11      	adds	r1, r2, #0
 800444e:	3163      	adds	r1, #99	; 0x63
				rate = 10;
			} else {
				rate = 1;
 8004450:	2301      	movs	r3, #1
			Data->state = STOP;
		}
		else {
			int rate, error = Data->target + Data->vetva->actCurrent;

			if(error >= 100 || error <= -100){
 8004452:	29c6      	cmp	r1, #198	; 0xc6
 8004454:	d900      	bls.n	8004458 <discharge+0x13c>
				rate = 10;
 8004456:	230a      	movs	r3, #10
			} else {
				rate = 1;
			}

			if(error > 0 + Data->tolerance && Data->set < 4095){
 8004458:	68e1      	ldr	r1, [r4, #12]
 800445a:	428a      	cmp	r2, r1
 800445c:	dd05      	ble.n	800446a <discharge+0x14e>
 800445e:	6920      	ldr	r0, [r4, #16]
 8004460:	4e34      	ldr	r6, [pc, #208]	; (8004534 <discharge+0x218>)
 8004462:	42b0      	cmp	r0, r6
 8004464:	dc01      	bgt.n	800446a <discharge+0x14e>
				Data->set += rate;
 8004466:	18c0      	adds	r0, r0, r3
 8004468:	6120      	str	r0, [r4, #16]
			}
			if(error < 0 - Data->tolerance && Data->set > 0){
 800446a:	4249      	negs	r1, r1
 800446c:	428a      	cmp	r2, r1
 800446e:	da04      	bge.n	800447a <discharge+0x15e>
 8004470:	6922      	ldr	r2, [r4, #16]
 8004472:	2a00      	cmp	r2, #0
 8004474:	dd01      	ble.n	800447a <discharge+0x15e>
				Data->set -= rate;
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	6123      	str	r3, [r4, #16]
			}

			vetvaSet(Data->vetva,Data->set);
 800447a:	6921      	ldr	r1, [r4, #16]
 800447c:	1c28      	adds	r0, r5, #0
 800447e:	f7ff fbeb 	bl	8003c58 <vetvaSet>
 8004482:	e03e      	b.n	8004502 <discharge+0x1e6>
		}
	}break;
	case STOP:{
		int capacity = Data->target * COUNTERS[Data->counter] / 3600;
 8004484:	7d63      	ldrb	r3, [r4, #21]
 8004486:	4925      	ldr	r1, [pc, #148]	; (800451c <discharge+0x200>)
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	585f      	ldr	r7, [r3, r1]
 800448c:	6860      	ldr	r0, [r4, #4]
 800448e:	21e1      	movs	r1, #225	; 0xe1
 8004490:	0109      	lsls	r1, r1, #4
 8004492:	4378      	muls	r0, r7
 8004494:	f7fb fea4 	bl	80001e0 <__aeabi_idiv>
		sprintf(printStr,"capacity: %d,t = %d s\r\n", capacity,(int)COUNTERS[Data->counter]);
 8004498:	4d1d      	ldr	r5, [pc, #116]	; (8004510 <discharge+0x1f4>)

			vetvaSet(Data->vetva,Data->set);
		}
	}break;
	case STOP:{
		int capacity = Data->target * COUNTERS[Data->counter] / 3600;
 800449a:	1c02      	adds	r2, r0, #0
		sprintf(printStr,"capacity: %d,t = %d s\r\n", capacity,(int)COUNTERS[Data->counter]);
 800449c:	4926      	ldr	r1, [pc, #152]	; (8004538 <discharge+0x21c>)
 800449e:	1c3b      	adds	r3, r7, #0
 80044a0:	1c28      	adds	r0, r5, #0
 80044a2:	f003 f8a1 	bl	80075e8 <sprintf>
		HAL_UART_Transmit(&huart1,(uint8_t *)printStr,strlen(printStr),1000);
 80044a6:	1c28      	adds	r0, r5, #0
 80044a8:	f003 f8c8 	bl	800763c <strlen>
 80044ac:	23fa      	movs	r3, #250	; 0xfa
 80044ae:	b282      	uxth	r2, r0
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	1c29      	adds	r1, r5, #0
 80044b4:	4818      	ldr	r0, [pc, #96]	; (8004518 <discharge+0x1fc>)
 80044b6:	f001 f9d7 	bl	8005868 <HAL_UART_Transmit>
		LCD_GotoXY(0,1);
 80044ba:	2101      	movs	r1, #1
 80044bc:	2000      	movs	r0, #0
 80044be:	f000 fe4f 	bl	8005160 <LCD_GotoXY>
		LCD_Print(printStr);
 80044c2:	1c28      	adds	r0, r5, #0
 80044c4:	f000 fed0 	bl	8005268 <LCD_Print>
		}
	}
	return -1;
}
void removeCounter(uint8_t i){
	COUNTERS[i] = -1;
 80044c8:	7d63      	ldrb	r3, [r4, #21]
 80044ca:	4914      	ldr	r1, [pc, #80]	; (800451c <discharge+0x200>)
 80044cc:	2201      	movs	r2, #1
		sprintf(printStr,"capacity: %d,t = %d s\r\n", capacity,(int)COUNTERS[Data->counter]);
		HAL_UART_Transmit(&huart1,(uint8_t *)printStr,strlen(printStr),1000);
		LCD_GotoXY(0,1);
		LCD_Print(printStr);
		removeCounter(Data->counter);
		Data->vetva->state = IDLE;
 80044ce:	6820      	ldr	r0, [r4, #0]
		}
	}
	return -1;
}
void removeCounter(uint8_t i){
	COUNTERS[i] = -1;
 80044d0:	4252      	negs	r2, r2
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	505a      	str	r2, [r3, r1]
		sprintf(printStr,"capacity: %d,t = %d s\r\n", capacity,(int)COUNTERS[Data->counter]);
		HAL_UART_Transmit(&huart1,(uint8_t *)printStr,strlen(printStr),1000);
		LCD_GotoXY(0,1);
		LCD_Print(printStr);
		removeCounter(Data->counter);
		Data->vetva->state = IDLE;
 80044d6:	2300      	movs	r3, #0
 80044d8:	7043      	strb	r3, [r0, #1]
		vetvaOff(Data->vetva);
 80044da:	f7ff fbe7 	bl	8003cac <vetvaOff>
		if(verbose & (1 << (Data->vetva->ID - 1)))verbose &= ~(1 << (Data->vetva->ID -1));
 80044de:	6821      	ldr	r1, [r4, #0]
 80044e0:	4b0a      	ldr	r3, [pc, #40]	; (800450c <discharge+0x1f0>)
 80044e2:	7809      	ldrb	r1, [r1, #0]
 80044e4:	781a      	ldrb	r2, [r3, #0]
 80044e6:	3901      	subs	r1, #1
 80044e8:	1c14      	adds	r4, r2, #0
 80044ea:	410c      	asrs	r4, r1
 80044ec:	2001      	movs	r0, #1
 80044ee:	4204      	tst	r4, r0
 80044f0:	d002      	beq.n	80044f8 <discharge+0x1dc>
 80044f2:	4088      	lsls	r0, r1
 80044f4:	4382      	bics	r2, r0
 80044f6:	701a      	strb	r2, [r3, #0]
		removeProcess(PID);
 80044f8:	1c30      	adds	r0, r6, #0
 80044fa:	f7ff f8c5 	bl	8003688 <removeProcess>
		addAlert();
 80044fe:	f7ff facf 	bl	8003aa0 <addAlert>
	} break;
	}
}
 8004502:	b009      	add	sp, #36	; 0x24
 8004504:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004506:	46c0      	nop			; (mov r8, r8)
 8004508:	2000056c 	.word	0x2000056c
 800450c:	20000569 	.word	0x20000569
 8004510:	20000854 	.word	0x20000854
 8004514:	0800c1c6 	.word	0x0800c1c6
 8004518:	200006f4 	.word	0x200006f4
 800451c:	20000954 	.word	0x20000954
 8004520:	80000001 	.word	0x80000001
 8004524:	0800c1ea 	.word	0x0800c1ea
 8004528:	42700000 	.word	0x42700000
 800452c:	43020000 	.word	0x43020000
 8004530:	0800c202 	.word	0x0800c202
 8004534:	00000ffe 	.word	0x00000ffe
 8004538:	0800c22d 	.word	0x0800c22d

0800453c <resistance>:

void resistance(int PID){
	DataResistance * Data = (DataResistance *)FRONT[PID].Data;
 800453c:	230c      	movs	r3, #12
 800453e:	4343      	muls	r3, r0
		addAlert();
	} break;
	}
}

void resistance(int PID){
 8004540:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	DataResistance * Data = (DataResistance *)FRONT[PID].Data;
 8004542:	4a4c      	ldr	r2, [pc, #304]	; (8004674 <resistance+0x138>)
		addAlert();
	} break;
	}
}

void resistance(int PID){
 8004544:	1c06      	adds	r6, r0, #0
	DataResistance * Data = (DataResistance *)FRONT[PID].Data;
 8004546:	18d3      	adds	r3, r2, r3
 8004548:	685c      	ldr	r4, [r3, #4]

	switch(Data->state){
 800454a:	1c61      	adds	r1, r4, #1
 800454c:	7fcb      	ldrb	r3, [r1, #31]
 800454e:	468c      	mov	ip, r1
 8004550:	2b01      	cmp	r3, #1
 8004552:	d057      	beq.n	8004604 <resistance+0xc8>
 8004554:	2b00      	cmp	r3, #0
 8004556:	d048      	beq.n	80045ea <resistance+0xae>
 8004558:	2b02      	cmp	r3, #2
 800455a:	d000      	beq.n	800455e <resistance+0x22>
 800455c:	e089      	b.n	8004672 <resistance+0x136>
		}

		vetvaSet(Data->vetva,Data->set);
	} break;
	case STOP:{
		float va = Data->v[1]/(float)Data->samples;
 800455e:	7e60      	ldrb	r0, [r4, #25]
 8004560:	f7fc fc8a 	bl	8000e78 <__aeabi_ui2f>
 8004564:	1c07      	adds	r7, r0, #0
 8004566:	6920      	ldr	r0, [r4, #16]
 8004568:	f7fc fc2a 	bl	8000dc0 <__aeabi_i2f>
 800456c:	1c39      	adds	r1, r7, #0
 800456e:	f7fb ff89 	bl	8000484 <__aeabi_fdiv>
 8004572:	9001      	str	r0, [sp, #4]
		float vb = Data->v[0]/(float)Data->samples;
 8004574:	68e0      	ldr	r0, [r4, #12]
 8004576:	f7fc fc23 	bl	8000dc0 <__aeabi_i2f>
 800457a:	1c39      	adds	r1, r7, #0
 800457c:	f7fb ff82 	bl	8000484 <__aeabi_fdiv>
 8004580:	1c01      	adds	r1, r0, #0
		float resistance = fabsf((va-vb)/(Data->target[1]-Data->target[0]));
 8004582:	9801      	ldr	r0, [sp, #4]
 8004584:	f7fc fa8c 	bl	8000aa0 <__aeabi_fsub>
 8004588:	68a2      	ldr	r2, [r4, #8]
 800458a:	6863      	ldr	r3, [r4, #4]
 800458c:	1c07      	adds	r7, r0, #0
 800458e:	1ad0      	subs	r0, r2, r3
 8004590:	f7fc fc16 	bl	8000dc0 <__aeabi_i2f>
 8004594:	1c01      	adds	r1, r0, #0
 8004596:	1c38      	adds	r0, r7, #0
 8004598:	f7fb ff74 	bl	8000484 <__aeabi_fdiv>
 800459c:	0040      	lsls	r0, r0, #1
 800459e:	0840      	lsrs	r0, r0, #1
		sprintf(printStr,"Ri = %f ohm\r\n", resistance);
 80045a0:	f7fe faa0 	bl	8002ae4 <__aeabi_f2d>
 80045a4:	4d34      	ldr	r5, [pc, #208]	; (8004678 <resistance+0x13c>)
 80045a6:	1c02      	adds	r2, r0, #0
 80045a8:	1c0b      	adds	r3, r1, #0
 80045aa:	1c28      	adds	r0, r5, #0
 80045ac:	4933      	ldr	r1, [pc, #204]	; (800467c <resistance+0x140>)
 80045ae:	f003 f81b 	bl	80075e8 <sprintf>
		HAL_UART_Transmit(&huart1,(uint8_t *)printStr,strlen(printStr),1000);
 80045b2:	1c28      	adds	r0, r5, #0
 80045b4:	f003 f842 	bl	800763c <strlen>
 80045b8:	23fa      	movs	r3, #250	; 0xfa
 80045ba:	b282      	uxth	r2, r0
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	1c29      	adds	r1, r5, #0
 80045c0:	482f      	ldr	r0, [pc, #188]	; (8004680 <resistance+0x144>)
 80045c2:	f001 f951 	bl	8005868 <HAL_UART_Transmit>
		LCD_GotoXY(0,1);
 80045c6:	2101      	movs	r1, #1
 80045c8:	2000      	movs	r0, #0
 80045ca:	f000 fdc9 	bl	8005160 <LCD_GotoXY>
		LCD_Print(printStr);
 80045ce:	1c28      	adds	r0, r5, #0
 80045d0:	f000 fe4a 	bl	8005268 <LCD_Print>
		Data->vetva->state = IDLE;
 80045d4:	69e0      	ldr	r0, [r4, #28]
 80045d6:	2300      	movs	r3, #0
 80045d8:	7043      	strb	r3, [r0, #1]
		vetvaOff(Data->vetva);
 80045da:	f7ff fb67 	bl	8003cac <vetvaOff>
		removeProcess(PID);
 80045de:	1c30      	adds	r0, r6, #0
 80045e0:	f7ff f852 	bl	8003688 <removeProcess>
		addAlert();
 80045e4:	f7ff fa5c 	bl	8003aa0 <addAlert>
	} break;
 80045e8:	e043      	b.n	8004672 <resistance+0x136>
	DataResistance * Data = (DataResistance *)FRONT[PID].Data;

	switch(Data->state){
	case START:{
		Data->set = 0;
		Data->vetva->state = ACTIVE;
 80045ea:	69e0      	ldr	r0, [r4, #28]
 80045ec:	2102      	movs	r1, #2
void resistance(int PID){
	DataResistance * Data = (DataResistance *)FRONT[PID].Data;

	switch(Data->state){
	case START:{
		Data->set = 0;
 80045ee:	6023      	str	r3, [r4, #0]
		Data->phase = 0;
		Data->samplesI = 0;
		Data->v[0] = 0;
		Data->v[1] = 0;
		//Data->samples = 20;
		Data->state = REGULATE;
 80045f0:	4662      	mov	r2, ip
	DataResistance * Data = (DataResistance *)FRONT[PID].Data;

	switch(Data->state){
	case START:{
		Data->set = 0;
		Data->vetva->state = ACTIVE;
 80045f2:	7041      	strb	r1, [r0, #1]
		Data->vetva->vetvaOut.vetvaOutState = OUTB;
 80045f4:	2101      	movs	r1, #1
 80045f6:	7101      	strb	r1, [r0, #4]
		Data->phase = 0;
 80045f8:	7623      	strb	r3, [r4, #24]
		Data->samplesI = 0;
 80045fa:	76a3      	strb	r3, [r4, #26]
		Data->v[0] = 0;
 80045fc:	60e3      	str	r3, [r4, #12]
		Data->v[1] = 0;
 80045fe:	6123      	str	r3, [r4, #16]
		//Data->samples = 20;
		Data->state = REGULATE;
 8004600:	77d1      	strb	r1, [r2, #31]
	} break;
 8004602:	e036      	b.n	8004672 <resistance+0x136>
	case REGULATE:{
		int rate, error = Data->target[Data->phase] + Data->vetva->actCurrent;
 8004604:	7e25      	ldrb	r5, [r4, #24]
 8004606:	69e0      	ldr	r0, [r4, #28]
 8004608:	00ae      	lsls	r6, r5, #2
 800460a:	19a6      	adds	r6, r4, r6
 800460c:	6877      	ldr	r7, [r6, #4]
 800460e:	6942      	ldr	r2, [r0, #20]
 8004610:	18b9      	adds	r1, r7, r2

		if(abs(error) <= Data->tolerance){
 8004612:	17ca      	asrs	r2, r1, #31
 8004614:	188f      	adds	r7, r1, r2
 8004616:	4057      	eors	r7, r2
 8004618:	6962      	ldr	r2, [r4, #20]
 800461a:	4297      	cmp	r7, r2
 800461c:	dc13      	bgt.n	8004646 <resistance+0x10a>
			Data->v[Data->phase] += Data->vetva->actVoltage;
 800461e:	6901      	ldr	r1, [r0, #16]
 8004620:	68f7      	ldr	r7, [r6, #12]
 8004622:	1879      	adds	r1, r7, r1
 8004624:	60f1      	str	r1, [r6, #12]
			Data->samplesI++;
 8004626:	7ea1      	ldrb	r1, [r4, #26]
			if(Data->samplesI >= Data->samples){
 8004628:	7e60      	ldrb	r0, [r4, #25]
	case REGULATE:{
		int rate, error = Data->target[Data->phase] + Data->vetva->actCurrent;

		if(abs(error) <= Data->tolerance){
			Data->v[Data->phase] += Data->vetva->actVoltage;
			Data->samplesI++;
 800462a:	3101      	adds	r1, #1
 800462c:	b2c9      	uxtb	r1, r1
 800462e:	76a1      	strb	r1, [r4, #26]
			if(Data->samplesI >= Data->samples){
 8004630:	4288      	cmp	r0, r1
 8004632:	d81e      	bhi.n	8004672 <resistance+0x136>
				if(Data->phase == 0){
 8004634:	2d00      	cmp	r5, #0
 8004636:	d102      	bne.n	800463e <resistance+0x102>
					Data->phase++;
 8004638:	7623      	strb	r3, [r4, #24]
					Data->samplesI = 0;
 800463a:	76a5      	strb	r5, [r4, #26]
 800463c:	e019      	b.n	8004672 <resistance+0x136>
				}
				else Data->state = STOP;
 800463e:	2302      	movs	r3, #2
 8004640:	4661      	mov	r1, ip
 8004642:	77cb      	strb	r3, [r1, #31]
 8004644:	e015      	b.n	8004672 <resistance+0x136>
			}
			return;
		}

		if(error >= 100 || error <= -100){
 8004646:	1c0a      	adds	r2, r1, #0
 8004648:	3263      	adds	r2, #99	; 0x63
 800464a:	2ac6      	cmp	r2, #198	; 0xc6
 800464c:	d900      	bls.n	8004650 <resistance+0x114>
			rate = 10;
 800464e:	230a      	movs	r3, #10
 8004650:	6822      	ldr	r2, [r4, #0]
		} else {
			rate = 1;
		}

		if(error > 0 && Data->set < 4095){
 8004652:	2900      	cmp	r1, #0
 8004654:	dd04      	ble.n	8004660 <resistance+0x124>
 8004656:	490b      	ldr	r1, [pc, #44]	; (8004684 <resistance+0x148>)
			Data->set += rate;
 8004658:	18d3      	adds	r3, r2, r3
			rate = 10;
		} else {
			rate = 1;
		}

		if(error > 0 && Data->set < 4095){
 800465a:	428a      	cmp	r2, r1
 800465c:	dd05      	ble.n	800466a <resistance+0x12e>
 800465e:	e005      	b.n	800466c <resistance+0x130>
			Data->set += rate;
		}
		if(error < 0  && Data->set > 0){
 8004660:	2900      	cmp	r1, #0
 8004662:	d003      	beq.n	800466c <resistance+0x130>
 8004664:	2a00      	cmp	r2, #0
 8004666:	dd01      	ble.n	800466c <resistance+0x130>
			Data->set -= rate;
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	6023      	str	r3, [r4, #0]
		}

		vetvaSet(Data->vetva,Data->set);
 800466c:	6821      	ldr	r1, [r4, #0]
 800466e:	f7ff faf3 	bl	8003c58 <vetvaSet>
		removeProcess(PID);
		addAlert();
	} break;
	}

}
 8004672:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8004674:	2000056c 	.word	0x2000056c
 8004678:	20000854 	.word	0x20000854
 800467c:	0800c245 	.word	0x0800c245
 8004680:	200006f4 	.word	0x200006f4
 8004684:	00000ffe 	.word	0x00000ffe

08004688 <chargeLithium>:

void chargeLithium(int PID){
	DataChargeLithium * Data = (DataChargeLithium *)FRONT[PID].Data;
 8004688:	230c      	movs	r3, #12
 800468a:	4343      	muls	r3, r0
 800468c:	4a72      	ldr	r2, [pc, #456]	; (8004858 <chargeLithium+0x1d0>)
	} break;
	}

}

void chargeLithium(int PID){
 800468e:	b5f0      	push	{r4, r5, r6, r7, lr}
	DataChargeLithium * Data = (DataChargeLithium *)FRONT[PID].Data;
 8004690:	18d3      	adds	r3, r2, r3
 8004692:	685c      	ldr	r4, [r3, #4]
	} break;
	}

}

void chargeLithium(int PID){
 8004694:	b08b      	sub	sp, #44	; 0x2c
	DataChargeLithium * Data = (DataChargeLithium *)FRONT[PID].Data;
	vetva_t * vetva = Data->vetva;

	switch(Data->state){
 8004696:	1c66      	adds	r6, r4, #1
 8004698:	7ff3      	ldrb	r3, [r6, #31]
	} break;
	}

}

void chargeLithium(int PID){
 800469a:	1c07      	adds	r7, r0, #0
	DataChargeLithium * Data = (DataChargeLithium *)FRONT[PID].Data;
	vetva_t * vetva = Data->vetva;
 800469c:	69e5      	ldr	r5, [r4, #28]

	switch(Data->state){
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d029      	beq.n	80046f6 <chargeLithium+0x6e>
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d003      	beq.n	80046ae <chargeLithium+0x26>
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	d100      	bne.n	80046ac <chargeLithium+0x24>
 80046aa:	e09f      	b.n	80047ec <chargeLithium+0x164>
 80046ac:	e0d1      	b.n	8004852 <chargeLithium+0x1ca>
	case START:{
		if(verbose & (1 << (Data->vetva->ID - 1))){
 80046ae:	4b6b      	ldr	r3, [pc, #428]	; (800485c <chargeLithium+0x1d4>)
 80046b0:	782a      	ldrb	r2, [r5, #0]
 80046b2:	7819      	ldrb	r1, [r3, #0]
 80046b4:	1e53      	subs	r3, r2, #1
 80046b6:	4119      	asrs	r1, r3
 80046b8:	07c8      	lsls	r0, r1, #31
 80046ba:	d50e      	bpl.n	80046da <chargeLithium+0x52>
			sprintf(printStr,"ID:%d[Time;Voltage;Current;T1;T2]\r\n",Data->vetva->ID);
 80046bc:	4f68      	ldr	r7, [pc, #416]	; (8004860 <chargeLithium+0x1d8>)
 80046be:	4969      	ldr	r1, [pc, #420]	; (8004864 <chargeLithium+0x1dc>)
 80046c0:	1c38      	adds	r0, r7, #0
 80046c2:	f002 ff91 	bl	80075e8 <sprintf>
			HAL_UART_Transmit(&huart1,(uint8_t *)printStr,strlen(printStr),1000);
 80046c6:	1c38      	adds	r0, r7, #0
 80046c8:	f002 ffb8 	bl	800763c <strlen>
 80046cc:	23fa      	movs	r3, #250	; 0xfa
 80046ce:	b282      	uxth	r2, r0
 80046d0:	1c39      	adds	r1, r7, #0
 80046d2:	4865      	ldr	r0, [pc, #404]	; (8004868 <chargeLithium+0x1e0>)
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	f001 f8c7 	bl	8005868 <HAL_UART_Transmit>
		}
		Data->set = 4095;
 80046da:	4b64      	ldr	r3, [pc, #400]	; (800486c <chargeLithium+0x1e4>)
 80046dc:	6023      	str	r3, [r4, #0]
		Data->phase = 0;
 80046de:	2300      	movs	r3, #0
 80046e0:	7623      	strb	r3, [r4, #24]
		vetva->vetvaOut.vetvaOutState = OUTA;
 80046e2:	712b      	strb	r3, [r5, #4]
		vetva->state = ACTIVE;
 80046e4:	2302      	movs	r3, #2
 80046e6:	706b      	strb	r3, [r5, #1]
		Data->state = REGULATE;
 80046e8:	2301      	movs	r3, #1
 80046ea:	77f3      	strb	r3, [r6, #31]
		Data->counter = addCounter();
 80046ec:	f7fe ffec 	bl	80036c8 <addCounter>
 80046f0:	3402      	adds	r4, #2
 80046f2:	77e0      	strb	r0, [r4, #31]
	} break;
 80046f4:	e0ad      	b.n	8004852 <chargeLithium+0x1ca>
	case REGULATE:{
		if(verbose & (1 << (Data->vetva->ID - 1))){
 80046f6:	4a59      	ldr	r2, [pc, #356]	; (800485c <chargeLithium+0x1d4>)
 80046f8:	782f      	ldrb	r7, [r5, #0]
 80046fa:	7811      	ldrb	r1, [r2, #0]
 80046fc:	1e7a      	subs	r2, r7, #1
 80046fe:	4111      	asrs	r1, r2
 8004700:	4219      	tst	r1, r3
 8004702:	d037      	beq.n	8004774 <chargeLithium+0xec>
			uint8_t mod = COUNTERS[Data->counter] % 2;
 8004704:	1ca3      	adds	r3, r4, #2
 8004706:	7fda      	ldrb	r2, [r3, #31]
 8004708:	4b59      	ldr	r3, [pc, #356]	; (8004870 <chargeLithium+0x1e8>)
 800470a:	0092      	lsls	r2, r2, #2
 800470c:	58d2      	ldr	r2, [r2, r3]
 800470e:	4b59      	ldr	r3, [pc, #356]	; (8004874 <chargeLithium+0x1ec>)
 8004710:	9207      	str	r2, [sp, #28]
 8004712:	4013      	ands	r3, r2
 8004714:	d504      	bpl.n	8004720 <chargeLithium+0x98>
 8004716:	2202      	movs	r2, #2
 8004718:	3b01      	subs	r3, #1
 800471a:	4252      	negs	r2, r2
 800471c:	4313      	orrs	r3, r2
 800471e:	3301      	adds	r3, #1
 8004720:	b2db      	uxtb	r3, r3
			if(Data->flag  != mod){
 8004722:	1ce1      	adds	r1, r4, #3
		Data->state = REGULATE;
		Data->counter = addCounter();
	} break;
	case REGULATE:{
		if(verbose & (1 << (Data->vetva->ID - 1))){
			uint8_t mod = COUNTERS[Data->counter] % 2;
 8004724:	9308      	str	r3, [sp, #32]
			if(Data->flag  != mod){
 8004726:	9109      	str	r1, [sp, #36]	; 0x24
 8004728:	7fcb      	ldrb	r3, [r1, #31]
 800472a:	9a08      	ldr	r2, [sp, #32]
 800472c:	4293      	cmp	r3, r2
 800472e:	d021      	beq.n	8004774 <chargeLithium+0xec>
				sprintf(printStr,"ID:%d[%d;%d;%d;%f;%f]\r\n",Data->vetva->ID,(int)COUNTERS[Data->counter],Data->vetva->actVoltage,Data->vetva->actCurrent,Data->vetva->actTempBatt,Data->vetva->actTempHeat);
 8004730:	692b      	ldr	r3, [r5, #16]
 8004732:	4e4b      	ldr	r6, [pc, #300]	; (8004860 <chargeLithium+0x1d8>)
 8004734:	9300      	str	r3, [sp, #0]
 8004736:	6968      	ldr	r0, [r5, #20]
 8004738:	9001      	str	r0, [sp, #4]
 800473a:	69e8      	ldr	r0, [r5, #28]
 800473c:	f7fe f9d2 	bl	8002ae4 <__aeabi_f2d>
 8004740:	9002      	str	r0, [sp, #8]
 8004742:	9103      	str	r1, [sp, #12]
 8004744:	69a8      	ldr	r0, [r5, #24]
 8004746:	f7fe f9cd 	bl	8002ae4 <__aeabi_f2d>
 800474a:	1c3a      	adds	r2, r7, #0
 800474c:	9004      	str	r0, [sp, #16]
 800474e:	9105      	str	r1, [sp, #20]
 8004750:	9b07      	ldr	r3, [sp, #28]
 8004752:	4949      	ldr	r1, [pc, #292]	; (8004878 <chargeLithium+0x1f0>)
 8004754:	1c30      	adds	r0, r6, #0
 8004756:	f002 ff47 	bl	80075e8 <sprintf>
				HAL_UART_Transmit(&huart1,(uint8_t *)printStr,strlen(printStr),1000);
 800475a:	1c30      	adds	r0, r6, #0
 800475c:	f002 ff6e 	bl	800763c <strlen>
 8004760:	23fa      	movs	r3, #250	; 0xfa
 8004762:	b282      	uxth	r2, r0
 8004764:	1c31      	adds	r1, r6, #0
 8004766:	4840      	ldr	r0, [pc, #256]	; (8004868 <chargeLithium+0x1e0>)
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	f001 f87d 	bl	8005868 <HAL_UART_Transmit>
				Data->flag = mod;
 800476e:	9a08      	ldr	r2, [sp, #32]
 8004770:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004772:	77ca      	strb	r2, [r1, #31]
			}
		}
		if(Data->phase==0?(vetva->actVoltage >= Data->cutoff[Data->phase]):(abs(vetva->actCurrent) <= Data->cutoff[Data->phase])){
 8004774:	7e23      	ldrb	r3, [r4, #24]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d106      	bne.n	8004788 <chargeLithium+0x100>
 800477a:	6928      	ldr	r0, [r5, #16]
 800477c:	6921      	ldr	r1, [r4, #16]
 800477e:	4288      	cmp	r0, r1
 8004780:	db0f      	blt.n	80047a2 <chargeLithium+0x11a>
			if(Data->phase == 0){
				Data->phase++;
 8004782:	2301      	movs	r3, #1
 8004784:	7623      	strb	r3, [r4, #24]
 8004786:	e064      	b.n	8004852 <chargeLithium+0x1ca>
				sprintf(printStr,"ID:%d[%d;%d;%d;%f;%f]\r\n",Data->vetva->ID,(int)COUNTERS[Data->counter],Data->vetva->actVoltage,Data->vetva->actCurrent,Data->vetva->actTempBatt,Data->vetva->actTempHeat);
				HAL_UART_Transmit(&huart1,(uint8_t *)printStr,strlen(printStr),1000);
				Data->flag = mod;
			}
		}
		if(Data->phase==0?(vetva->actVoltage >= Data->cutoff[Data->phase]):(abs(vetva->actCurrent) <= Data->cutoff[Data->phase])){
 8004788:	696a      	ldr	r2, [r5, #20]
 800478a:	17d0      	asrs	r0, r2, #31
 800478c:	1811      	adds	r1, r2, r0
 800478e:	1d1a      	adds	r2, r3, #4
 8004790:	0092      	lsls	r2, r2, #2
 8004792:	5912      	ldr	r2, [r2, r4]
 8004794:	4041      	eors	r1, r0
 8004796:	4291      	cmp	r1, r2
 8004798:	dc03      	bgt.n	80047a2 <chargeLithium+0x11a>
			if(Data->phase == 0){
				Data->phase++;
			} else {
				Data->state = STOP;
 800479a:	3401      	adds	r4, #1
 800479c:	2302      	movs	r3, #2
 800479e:	77e3      	strb	r3, [r4, #31]
 80047a0:	e057      	b.n	8004852 <chargeLithium+0x1ca>
			}
		} else {
			int rate, error = Data->target[Data->phase] - (Data->phase==0?vetva->actCurrent:vetva->actVoltage);
 80047a2:	1c9a      	adds	r2, r3, #2
 80047a4:	0092      	lsls	r2, r2, #2
 80047a6:	5912      	ldr	r2, [r2, r4]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d101      	bne.n	80047b0 <chargeLithium+0x128>
 80047ac:	696b      	ldr	r3, [r5, #20]
 80047ae:	e000      	b.n	80047b2 <chargeLithium+0x12a>
 80047b0:	692b      	ldr	r3, [r5, #16]
 80047b2:	1ad2      	subs	r2, r2, r3
			if(error >= 100 || error <= -100){
 80047b4:	1c11      	adds	r1, r2, #0
 80047b6:	3163      	adds	r1, #99	; 0x63
				rate = 10;
			} else {
				rate = 1;
 80047b8:	2301      	movs	r3, #1
			} else {
				Data->state = STOP;
			}
		} else {
			int rate, error = Data->target[Data->phase] - (Data->phase==0?vetva->actCurrent:vetva->actVoltage);
			if(error >= 100 || error <= -100){
 80047ba:	29c6      	cmp	r1, #198	; 0xc6
 80047bc:	d900      	bls.n	80047c0 <chargeLithium+0x138>
				rate = 10;
 80047be:	230a      	movs	r3, #10
			} else {
				rate = 1;
			}

			if((error > (0 + Data->tolerance) ) && Data->set > 0){
 80047c0:	6861      	ldr	r1, [r4, #4]
 80047c2:	428a      	cmp	r2, r1
 80047c4:	dd04      	ble.n	80047d0 <chargeLithium+0x148>
 80047c6:	6820      	ldr	r0, [r4, #0]
 80047c8:	2800      	cmp	r0, #0
 80047ca:	dd01      	ble.n	80047d0 <chargeLithium+0x148>
				Data->set -= rate;
 80047cc:	1ac0      	subs	r0, r0, r3
 80047ce:	6020      	str	r0, [r4, #0]
			}
			if((error < (0  - Data->tolerance) ) && Data->set < 4905){
 80047d0:	4249      	negs	r1, r1
 80047d2:	428a      	cmp	r2, r1
 80047d4:	da05      	bge.n	80047e2 <chargeLithium+0x15a>
 80047d6:	6822      	ldr	r2, [r4, #0]
 80047d8:	4928      	ldr	r1, [pc, #160]	; (800487c <chargeLithium+0x1f4>)
 80047da:	428a      	cmp	r2, r1
 80047dc:	dc01      	bgt.n	80047e2 <chargeLithium+0x15a>
				Data->set += rate;
 80047de:	18d3      	adds	r3, r2, r3
 80047e0:	6023      	str	r3, [r4, #0]
			}
			vetvaSet(vetva,Data->set);
 80047e2:	6821      	ldr	r1, [r4, #0]
 80047e4:	1c28      	adds	r0, r5, #0
 80047e6:	f7ff fa37 	bl	8003c58 <vetvaSet>
 80047ea:	e032      	b.n	8004852 <chargeLithium+0x1ca>
		}
	} break;
	case STOP:{
		sprintf(printStr,"charging done, time = %d s!\r\n",(int)COUNTERS[Data->counter]);
 80047ec:	1ca1      	adds	r1, r4, #2
 80047ee:	9107      	str	r1, [sp, #28]
 80047f0:	7fcb      	ldrb	r3, [r1, #31]
 80047f2:	4e1b      	ldr	r6, [pc, #108]	; (8004860 <chargeLithium+0x1d8>)
 80047f4:	481e      	ldr	r0, [pc, #120]	; (8004870 <chargeLithium+0x1e8>)
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	581a      	ldr	r2, [r3, r0]
 80047fa:	4921      	ldr	r1, [pc, #132]	; (8004880 <chargeLithium+0x1f8>)
 80047fc:	1c30      	adds	r0, r6, #0
 80047fe:	f002 fef3 	bl	80075e8 <sprintf>
		HAL_UART_Transmit(&huart1,(uint8_t *)printStr,strlen(printStr),1000);
 8004802:	1c30      	adds	r0, r6, #0
 8004804:	f002 ff1a 	bl	800763c <strlen>
 8004808:	23fa      	movs	r3, #250	; 0xfa
 800480a:	b282      	uxth	r2, r0
 800480c:	1c31      	adds	r1, r6, #0
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	4815      	ldr	r0, [pc, #84]	; (8004868 <chargeLithium+0x1e0>)
 8004812:	f001 f829 	bl	8005868 <HAL_UART_Transmit>
		}
	}
	return -1;
}
void removeCounter(uint8_t i){
	COUNTERS[i] = -1;
 8004816:	9907      	ldr	r1, [sp, #28]
 8004818:	4815      	ldr	r0, [pc, #84]	; (8004870 <chargeLithium+0x1e8>)
 800481a:	7fcb      	ldrb	r3, [r1, #31]
 800481c:	2201      	movs	r2, #1
 800481e:	4252      	negs	r2, r2
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	501a      	str	r2, [r3, r0]
	} break;
	case STOP:{
		sprintf(printStr,"charging done, time = %d s!\r\n",(int)COUNTERS[Data->counter]);
		HAL_UART_Transmit(&huart1,(uint8_t *)printStr,strlen(printStr),1000);
		removeCounter(Data->counter);
		vetva->state = IDLE;
 8004824:	2300      	movs	r3, #0
 8004826:	706b      	strb	r3, [r5, #1]
		vetvaOff(vetva);
 8004828:	1c28      	adds	r0, r5, #0
 800482a:	f7ff fa3f 	bl	8003cac <vetvaOff>
		if(verbose & (1 << (Data->vetva->ID - 1)))verbose &= ~(1 << (Data->vetva->ID -1));
 800482e:	69e1      	ldr	r1, [r4, #28]
 8004830:	4b0a      	ldr	r3, [pc, #40]	; (800485c <chargeLithium+0x1d4>)
 8004832:	7809      	ldrb	r1, [r1, #0]
 8004834:	781a      	ldrb	r2, [r3, #0]
 8004836:	3901      	subs	r1, #1
 8004838:	1c14      	adds	r4, r2, #0
 800483a:	410c      	asrs	r4, r1
 800483c:	2001      	movs	r0, #1
 800483e:	4204      	tst	r4, r0
 8004840:	d002      	beq.n	8004848 <chargeLithium+0x1c0>
 8004842:	4088      	lsls	r0, r1
 8004844:	4382      	bics	r2, r0
 8004846:	701a      	strb	r2, [r3, #0]
		removeProcess(PID);
 8004848:	1c38      	adds	r0, r7, #0
 800484a:	f7fe ff1d 	bl	8003688 <removeProcess>
		addAlert();
 800484e:	f7ff f927 	bl	8003aa0 <addAlert>
	} break;
	}
}
 8004852:	b00b      	add	sp, #44	; 0x2c
 8004854:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004856:	46c0      	nop			; (mov r8, r8)
 8004858:	2000056c 	.word	0x2000056c
 800485c:	20000569 	.word	0x20000569
 8004860:	20000854 	.word	0x20000854
 8004864:	0800c1c6 	.word	0x0800c1c6
 8004868:	200006f4 	.word	0x200006f4
 800486c:	00000fff 	.word	0x00000fff
 8004870:	20000954 	.word	0x20000954
 8004874:	80000001 	.word	0x80000001
 8004878:	0800c1ea 	.word	0x0800c1ea
 800487c:	00001328 	.word	0x00001328
 8004880:	0800c253 	.word	0x0800c253

08004884 <charge>:

void charge(int PID){
 8004884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	DataCharge * Data = (DataCharge *)FRONT[PID].Data;
 8004886:	230c      	movs	r3, #12
 8004888:	4343      	muls	r3, r0
 800488a:	4a33      	ldr	r2, [pc, #204]	; (8004958 <charge+0xd4>)
		addAlert();
	} break;
	}
}

void charge(int PID){
 800488c:	1c07      	adds	r7, r0, #0
	DataCharge * Data = (DataCharge *)FRONT[PID].Data;
 800488e:	18d3      	adds	r3, r2, r3
 8004890:	685c      	ldr	r4, [r3, #4]
	vetva_t * vetva = Data->vetva;

	switch(Data->state){
 8004892:	7e23      	ldrb	r3, [r4, #24]
	}
}

void charge(int PID){
	DataCharge * Data = (DataCharge *)FRONT[PID].Data;
	vetva_t * vetva = Data->vetva;
 8004894:	6965      	ldr	r5, [r4, #20]

	switch(Data->state){
 8004896:	2b01      	cmp	r3, #1
 8004898:	d032      	beq.n	8004900 <charge+0x7c>
 800489a:	2b00      	cmp	r3, #0
 800489c:	d025      	beq.n	80048ea <charge+0x66>
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d159      	bne.n	8004956 <charge+0xd2>
			}
			vetvaSet(vetva,Data->set);
		}
	} break;
	case STOP:{
		sprintf(printStr,"charging done, time = %d s!\r\n",(int)COUNTERS[Data->counter]);
 80048a2:	7e63      	ldrb	r3, [r4, #25]
 80048a4:	4e2d      	ldr	r6, [pc, #180]	; (800495c <charge+0xd8>)
 80048a6:	482e      	ldr	r0, [pc, #184]	; (8004960 <charge+0xdc>)
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	581a      	ldr	r2, [r3, r0]
 80048ac:	492d      	ldr	r1, [pc, #180]	; (8004964 <charge+0xe0>)
 80048ae:	1c30      	adds	r0, r6, #0
 80048b0:	f002 fe9a 	bl	80075e8 <sprintf>
		HAL_UART_Transmit(&huart1,(uint8_t *)printStr,strlen(printStr),1000);
 80048b4:	1c30      	adds	r0, r6, #0
 80048b6:	f002 fec1 	bl	800763c <strlen>
 80048ba:	23fa      	movs	r3, #250	; 0xfa
 80048bc:	b282      	uxth	r2, r0
 80048be:	1c31      	adds	r1, r6, #0
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	4829      	ldr	r0, [pc, #164]	; (8004968 <charge+0xe4>)
 80048c4:	f000 ffd0 	bl	8005868 <HAL_UART_Transmit>
		}
	}
	return -1;
}
void removeCounter(uint8_t i){
	COUNTERS[i] = -1;
 80048c8:	7e63      	ldrb	r3, [r4, #25]
 80048ca:	4925      	ldr	r1, [pc, #148]	; (8004960 <charge+0xdc>)
 80048cc:	2201      	movs	r2, #1
 80048ce:	4252      	negs	r2, r2
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	505a      	str	r2, [r3, r1]
	} break;
	case STOP:{
		sprintf(printStr,"charging done, time = %d s!\r\n",(int)COUNTERS[Data->counter]);
		HAL_UART_Transmit(&huart1,(uint8_t *)printStr,strlen(printStr),1000);
		removeCounter(Data->counter);
		vetva->state = IDLE;
 80048d4:	2300      	movs	r3, #0
 80048d6:	706b      	strb	r3, [r5, #1]
		vetvaOff(vetva);
 80048d8:	1c28      	adds	r0, r5, #0
 80048da:	f7ff f9e7 	bl	8003cac <vetvaOff>
		removeProcess(PID);
 80048de:	1c38      	adds	r0, r7, #0
 80048e0:	f7fe fed2 	bl	8003688 <removeProcess>
		addAlert();
 80048e4:	f7ff f8dc 	bl	8003aa0 <addAlert>
	} break;
 80048e8:	e035      	b.n	8004956 <charge+0xd2>
	DataCharge * Data = (DataCharge *)FRONT[PID].Data;
	vetva_t * vetva = Data->vetva;

	switch(Data->state){
	case START:{
		Data->set = 4095;
 80048ea:	4a20      	ldr	r2, [pc, #128]	; (800496c <charge+0xe8>)
 80048ec:	6022      	str	r2, [r4, #0]
		vetva->vetvaOut.vetvaOutState = OUTA;
 80048ee:	712b      	strb	r3, [r5, #4]
		vetva->state = ACTIVE;
 80048f0:	2302      	movs	r3, #2
 80048f2:	706b      	strb	r3, [r5, #1]
		Data->state = REGULATE;
 80048f4:	2301      	movs	r3, #1
 80048f6:	7623      	strb	r3, [r4, #24]
		Data->counter = addCounter();
 80048f8:	f7fe fee6 	bl	80036c8 <addCounter>
 80048fc:	7660      	strb	r0, [r4, #25]
	} break;
 80048fe:	e02a      	b.n	8004956 <charge+0xd2>
	case REGULATE:{
		if(COUNTERS[Data->counter] >= Data->limit || vetva->actVoltage >= Data->cutoff){
 8004900:	7e61      	ldrb	r1, [r4, #25]
 8004902:	4a17      	ldr	r2, [pc, #92]	; (8004960 <charge+0xdc>)
 8004904:	0089      	lsls	r1, r1, #2
 8004906:	588a      	ldr	r2, [r1, r2]
 8004908:	6920      	ldr	r0, [r4, #16]
 800490a:	4282      	cmp	r2, r0
 800490c:	da03      	bge.n	8004916 <charge+0x92>
 800490e:	6929      	ldr	r1, [r5, #16]
 8004910:	68e2      	ldr	r2, [r4, #12]
 8004912:	4291      	cmp	r1, r2
 8004914:	db02      	blt.n	800491c <charge+0x98>
			Data->state = STOP;
 8004916:	2302      	movs	r3, #2
 8004918:	7623      	strb	r3, [r4, #24]
 800491a:	e01c      	b.n	8004956 <charge+0xd2>
		} else {
			int rate, error = Data->target - vetva->actCurrent;
 800491c:	6969      	ldr	r1, [r5, #20]
 800491e:	68a0      	ldr	r0, [r4, #8]
 8004920:	1a42      	subs	r2, r0, r1
			if(error >= 100 || error <= -100){
 8004922:	1c11      	adds	r1, r2, #0
 8004924:	3163      	adds	r1, #99	; 0x63
 8004926:	29c6      	cmp	r1, #198	; 0xc6
 8004928:	d900      	bls.n	800492c <charge+0xa8>
				rate = 10;
 800492a:	230a      	movs	r3, #10
			} else {
				rate = 1;
			}

			if((error > (0 + Data->tolerance) ) && Data->set > 0){
 800492c:	6861      	ldr	r1, [r4, #4]
 800492e:	428a      	cmp	r2, r1
 8004930:	dd04      	ble.n	800493c <charge+0xb8>
 8004932:	6820      	ldr	r0, [r4, #0]
 8004934:	2800      	cmp	r0, #0
 8004936:	dd01      	ble.n	800493c <charge+0xb8>
				Data->set -= rate;
 8004938:	1ac0      	subs	r0, r0, r3
 800493a:	6020      	str	r0, [r4, #0]
			}
			if((error < (0  - Data->tolerance) ) && Data->set < 4905){
 800493c:	4249      	negs	r1, r1
 800493e:	428a      	cmp	r2, r1
 8004940:	da05      	bge.n	800494e <charge+0xca>
 8004942:	6822      	ldr	r2, [r4, #0]
 8004944:	490a      	ldr	r1, [pc, #40]	; (8004970 <charge+0xec>)
 8004946:	428a      	cmp	r2, r1
 8004948:	dc01      	bgt.n	800494e <charge+0xca>
				Data->set += rate;
 800494a:	18d3      	adds	r3, r2, r3
 800494c:	6023      	str	r3, [r4, #0]
			}
			vetvaSet(vetva,Data->set);
 800494e:	6821      	ldr	r1, [r4, #0]
 8004950:	1c28      	adds	r0, r5, #0
 8004952:	f7ff f981 	bl	8003c58 <vetvaSet>
		vetvaOff(vetva);
		removeProcess(PID);
		addAlert();
	} break;
	}
}
 8004956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004958:	2000056c 	.word	0x2000056c
 800495c:	20000854 	.word	0x20000854
 8004960:	20000954 	.word	0x20000954
 8004964:	0800c253 	.word	0x0800c253
 8004968:	200006f4 	.word	0x200006f4
 800496c:	00000fff 	.word	0x00000fff
 8004970:	00001328 	.word	0x00001328

08004974 <HAL_TIM_PeriodElapsedCallback>:
		channels_i = 0;
		HAL_ADC_Start_IT(AdcHandle);
	}
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim21){	//kazda sekunda
 8004974:	2300      	movs	r3, #0
	int i;
	for(i=0;i<MAXCOUNTERS;i++){
		if(COUNTERS[i] != -1){
 8004976:	4a05      	ldr	r2, [pc, #20]	; (800498c <HAL_TIM_PeriodElapsedCallback+0x18>)
 8004978:	189a      	adds	r2, r3, r2
 800497a:	6811      	ldr	r1, [r2, #0]
 800497c:	1c48      	adds	r0, r1, #1
 800497e:	d001      	beq.n	8004984 <HAL_TIM_PeriodElapsedCallback+0x10>
			COUNTERS[i]++;
 8004980:	3101      	adds	r1, #1
 8004982:	6011      	str	r1, [r2, #0]
 8004984:	3304      	adds	r3, #4
	}
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim21){	//kazda sekunda
	int i;
	for(i=0;i<MAXCOUNTERS;i++){
 8004986:	2b14      	cmp	r3, #20
 8004988:	d1f5      	bne.n	8004976 <HAL_TIM_PeriodElapsedCallback+0x2>
		if(COUNTERS[i] != -1){
			COUNTERS[i]++;
		}
	}
}
 800498a:	4770      	bx	lr
 800498c:	20000954 	.word	0x20000954

08004990 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
 8004990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	HAL_UART_Transmit(&huart1,(uint8_t *)&RxChar,sizeof(RxChar),100);
 8004992:	4d19      	ldr	r5, [pc, #100]	; (80049f8 <HAL_UART_RxCpltCallback+0x68>)
 8004994:	4c19      	ldr	r4, [pc, #100]	; (80049fc <HAL_UART_RxCpltCallback+0x6c>)
 8004996:	2364      	movs	r3, #100	; 0x64
 8004998:	1c28      	adds	r0, r5, #0
 800499a:	1c21      	adds	r1, r4, #0
 800499c:	2201      	movs	r2, #1
 800499e:	f000 ff63 	bl	8005868 <HAL_UART_Transmit>
	if(commandIndex < CMDSIZE - 1 && RxChar != '\r'){
 80049a2:	4e17      	ldr	r6, [pc, #92]	; (8004a00 <HAL_UART_RxCpltCallback+0x70>)
 80049a4:	7833      	ldrb	r3, [r6, #0]
 80049a6:	46b4      	mov	ip, r6
 80049a8:	2b12      	cmp	r3, #18
 80049aa:	d81b      	bhi.n	80049e4 <HAL_UART_RxCpltCallback+0x54>
 80049ac:	7822      	ldrb	r2, [r4, #0]
 80049ae:	2a0d      	cmp	r2, #13
 80049b0:	d018      	beq.n	80049e4 <HAL_UART_RxCpltCallback+0x54>
 80049b2:	4914      	ldr	r1, [pc, #80]	; (8004a04 <HAL_UART_RxCpltCallback+0x74>)
 80049b4:	4f14      	ldr	r7, [pc, #80]	; (8004a08 <HAL_UART_RxCpltCallback+0x78>)
		if (RxChar == 0x20 && commandNumber < CMDCOUNT){
 80049b6:	2a20      	cmp	r2, #32
 80049b8:	d10b      	bne.n	80049d2 <HAL_UART_RxCpltCallback+0x42>
 80049ba:	7808      	ldrb	r0, [r1, #0]
 80049bc:	2809      	cmp	r0, #9
 80049be:	d808      	bhi.n	80049d2 <HAL_UART_RxCpltCallback+0x42>
			command[commandNumber][commandIndex] = '\0';
 80049c0:	2214      	movs	r2, #20
 80049c2:	4342      	muls	r2, r0
			commandIndex = 0;
			commandNumber++;
 80049c4:	3001      	adds	r0, #1
void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
	HAL_UART_Transmit(&huart1,(uint8_t *)&RxChar,sizeof(RxChar),100);
	if(commandIndex < CMDSIZE - 1 && RxChar != '\r'){
		if (RxChar == 0x20 && commandNumber < CMDCOUNT){
			command[commandNumber][commandIndex] = '\0';
 80049c6:	18d3      	adds	r3, r2, r3
 80049c8:	2200      	movs	r2, #0
 80049ca:	54fa      	strb	r2, [r7, r3]
			commandIndex = 0;
 80049cc:	7032      	strb	r2, [r6, #0]
			commandNumber++;
 80049ce:	7008      	strb	r0, [r1, #0]
 80049d0:	e00c      	b.n	80049ec <HAL_UART_RxCpltCallback+0x5c>
		} else {
			command[commandNumber][commandIndex++] = RxChar;
 80049d2:	1c58      	adds	r0, r3, #1
 80049d4:	7809      	ldrb	r1, [r1, #0]
 80049d6:	4666      	mov	r6, ip
 80049d8:	7030      	strb	r0, [r6, #0]
 80049da:	2014      	movs	r0, #20
 80049dc:	4341      	muls	r1, r0
 80049de:	18cb      	adds	r3, r1, r3
 80049e0:	54fa      	strb	r2, [r7, r3]
 80049e2:	e003      	b.n	80049ec <HAL_UART_RxCpltCallback+0x5c>
		}
	} else {
		addProcess(&uart,NULL);
 80049e4:	4809      	ldr	r0, [pc, #36]	; (8004a0c <HAL_UART_RxCpltCallback+0x7c>)
 80049e6:	2100      	movs	r1, #0
 80049e8:	f7fe fe38 	bl	800365c <addProcess>
	}
	HAL_UART_Receive_IT(&huart1,(uint8_t *)&RxChar,sizeof(RxChar));
 80049ec:	1c28      	adds	r0, r5, #0
 80049ee:	1c21      	adds	r1, r4, #0
 80049f0:	2201      	movs	r2, #1
 80049f2:	f000 fc45 	bl	8005280 <HAL_UART_Receive_IT>
}
 80049f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049f8:	200006f4 	.word	0x200006f4
 80049fc:	20000950 	.word	0x20000950
 8004a00:	20000567 	.word	0x20000567
 8004a04:	20000566 	.word	0x20000566
 8004a08:	20000886 	.word	0x20000886
 8004a0c:	08003e85 	.word	0x08003e85

08004a10 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
	switch(~((GPIOA->IDR & GPIO_Pin) | ~GPIO_Pin)){
 8004a10:	23a0      	movs	r3, #160	; 0xa0
 8004a12:	05db      	lsls	r3, r3, #23
 8004a14:	691b      	ldr	r3, [r3, #16]
 8004a16:	4003      	ands	r3, r0
 8004a18:	4398      	bics	r0, r3
 8004a1a:	2380      	movs	r3, #128	; 0x80
 8004a1c:	009b      	lsls	r3, r3, #2
 8004a1e:	4298      	cmp	r0, r3
 8004a20:	d014      	beq.n	8004a4c <HAL_GPIO_EXTI_Callback+0x3c>
 8004a22:	d807      	bhi.n	8004a34 <HAL_GPIO_EXTI_Callback+0x24>
 8004a24:	2380      	movs	r3, #128	; 0x80
 8004a26:	005b      	lsls	r3, r3, #1
 8004a28:	4298      	cmp	r0, r3
 8004a2a:	d118      	bne.n	8004a5e <HAL_GPIO_EXTI_Callback+0x4e>
		case GPIO_PIN_8:{
			GPIO_FLAG |= (1 << 0);
 8004a2c:	4b0c      	ldr	r3, [pc, #48]	; (8004a60 <HAL_GPIO_EXTI_Callback+0x50>)
 8004a2e:	2101      	movs	r1, #1
 8004a30:	781a      	ldrb	r2, [r3, #0]
 8004a32:	e012      	b.n	8004a5a <HAL_GPIO_EXTI_Callback+0x4a>
	}
	HAL_UART_Receive_IT(&huart1,(uint8_t *)&RxChar,sizeof(RxChar));
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
	switch(~((GPIOA->IDR & GPIO_Pin) | ~GPIO_Pin)){
 8004a34:	2380      	movs	r3, #128	; 0x80
 8004a36:	00db      	lsls	r3, r3, #3
 8004a38:	4298      	cmp	r0, r3
 8004a3a:	d00b      	beq.n	8004a54 <HAL_GPIO_EXTI_Callback+0x44>
 8004a3c:	2380      	movs	r3, #128	; 0x80
 8004a3e:	011b      	lsls	r3, r3, #4
 8004a40:	4298      	cmp	r0, r3
 8004a42:	d10c      	bne.n	8004a5e <HAL_GPIO_EXTI_Callback+0x4e>
		}break;
		case GPIO_PIN_10:{
			GPIO_FLAG |= (1 << 2);
		}break;
		case GPIO_PIN_11:{
			GPIO_FLAG |= (1 << 3);
 8004a44:	4b06      	ldr	r3, [pc, #24]	; (8004a60 <HAL_GPIO_EXTI_Callback+0x50>)
 8004a46:	2108      	movs	r1, #8
 8004a48:	781a      	ldrb	r2, [r3, #0]
 8004a4a:	e006      	b.n	8004a5a <HAL_GPIO_EXTI_Callback+0x4a>
	switch(~((GPIOA->IDR & GPIO_Pin) | ~GPIO_Pin)){
		case GPIO_PIN_8:{
			GPIO_FLAG |= (1 << 0);
		}break;
		case GPIO_PIN_9:{
			GPIO_FLAG |= (1 << 1);
 8004a4c:	4b04      	ldr	r3, [pc, #16]	; (8004a60 <HAL_GPIO_EXTI_Callback+0x50>)
 8004a4e:	2102      	movs	r1, #2
 8004a50:	781a      	ldrb	r2, [r3, #0]
 8004a52:	e002      	b.n	8004a5a <HAL_GPIO_EXTI_Callback+0x4a>
		}break;
		case GPIO_PIN_10:{
			GPIO_FLAG |= (1 << 2);
 8004a54:	4b02      	ldr	r3, [pc, #8]	; (8004a60 <HAL_GPIO_EXTI_Callback+0x50>)
 8004a56:	2104      	movs	r1, #4
 8004a58:	781a      	ldrb	r2, [r3, #0]
		}break;
		case GPIO_PIN_11:{
			GPIO_FLAG |= (1 << 3);
 8004a5a:	430a      	orrs	r2, r1
 8004a5c:	701a      	strb	r2, [r3, #0]
		}break;
	}
}
 8004a5e:	4770      	bx	lr
 8004a60:	20000568 	.word	0x20000568

08004a64 <dialog>:
		}
	}
}

void dialog(void){
	switch(DIALOG){
 8004a64:	4bae      	ldr	r3, [pc, #696]	; (8004d20 <dialog+0x2bc>)
			if(Data->i==Data->count*2) removeProcess(PID);
		}
	}
}

void dialog(void){
 8004a66:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	switch(DIALOG){
 8004a68:	7818      	ldrb	r0, [r3, #0]
 8004a6a:	2803      	cmp	r0, #3
 8004a6c:	d900      	bls.n	8004a70 <dialog+0xc>
 8004a6e:	e155      	b.n	8004d1c <dialog+0x2b8>
 8004a70:	2201      	movs	r2, #1
 8004a72:	4cac      	ldr	r4, [pc, #688]	; (8004d24 <dialog+0x2c0>)
 8004a74:	f7fb fb52 	bl	800011c <__gnu_thumb1_case_uqi>
 8004a78:	9a551202 	.word	0x9a551202
	case INIT:{
		LCD_Cls();
 8004a7c:	f000 fb7a 	bl	8005174 <LCD_Cls>
		LCD_GotoXY(0,0);
 8004a80:	2000      	movs	r0, #0
 8004a82:	1c01      	adds	r1, r0, #0
 8004a84:	f000 fb6c 	bl	8005160 <LCD_GotoXY>
		LCD_Print("action:");
 8004a88:	48a7      	ldr	r0, [pc, #668]	; (8004d28 <dialog+0x2c4>)
 8004a8a:	f000 fbed 	bl	8005268 <LCD_Print>
		DIALOG = SELECT;
 8004a8e:	49a4      	ldr	r1, [pc, #656]	; (8004d20 <dialog+0x2bc>)
 8004a90:	2301      	movs	r3, #1
		option = 0;
 8004a92:	4aa6      	ldr	r2, [pc, #664]	; (8004d2c <dialog+0x2c8>)
	switch(DIALOG){
	case INIT:{
		LCD_Cls();
		LCD_GotoXY(0,0);
		LCD_Print("action:");
		DIALOG = SELECT;
 8004a94:	700b      	strb	r3, [r1, #0]
		option = 0;
 8004a96:	2300      	movs	r3, #0
 8004a98:	7013      	strb	r3, [r2, #0]
		GPIO_FLAG = 0;
 8004a9a:	7023      	strb	r3, [r4, #0]
	}
	case SELECT:{
		if(GPIO_FLAG & 1){
 8004a9c:	7823      	ldrb	r3, [r4, #0]
 8004a9e:	07da      	lsls	r2, r3, #31
 8004aa0:	d505      	bpl.n	8004aae <dialog+0x4a>
			if(option < 3)option++;
 8004aa2:	4ba2      	ldr	r3, [pc, #648]	; (8004d2c <dialog+0x2c8>)
 8004aa4:	781a      	ldrb	r2, [r3, #0]
 8004aa6:	2a02      	cmp	r2, #2
 8004aa8:	d825      	bhi.n	8004af6 <dialog+0x92>
 8004aaa:	3201      	adds	r2, #1
 8004aac:	e008      	b.n	8004ac0 <dialog+0x5c>
		} else if(GPIO_FLAG & 2){
 8004aae:	2602      	movs	r6, #2
 8004ab0:	1c1d      	adds	r5, r3, #0
 8004ab2:	4035      	ands	r5, r6
 8004ab4:	d006      	beq.n	8004ac4 <dialog+0x60>
			if(option > 0)option--;
 8004ab6:	4b9d      	ldr	r3, [pc, #628]	; (8004d2c <dialog+0x2c8>)
 8004ab8:	781a      	ldrb	r2, [r3, #0]
 8004aba:	2a00      	cmp	r2, #0
 8004abc:	d01b      	beq.n	8004af6 <dialog+0x92>
 8004abe:	3a01      	subs	r2, #1
 8004ac0:	701a      	strb	r2, [r3, #0]
 8004ac2:	e018      	b.n	8004af6 <dialog+0x92>
		} else if(GPIO_FLAG & 4){
 8004ac4:	2204      	movs	r2, #4
 8004ac6:	401a      	ands	r2, r3
 8004ac8:	d010      	beq.n	8004aec <dialog+0x88>
			LCD_GotoXY(0,0);
 8004aca:	1c29      	adds	r1, r5, #0
 8004acc:	1c28      	adds	r0, r5, #0
 8004ace:	f000 fb47 	bl	8005160 <LCD_GotoXY>
			LCD_Print("channel:");
 8004ad2:	4897      	ldr	r0, [pc, #604]	; (8004d30 <dialog+0x2cc>)
 8004ad4:	f000 fbc8 	bl	8005268 <LCD_Print>
			selection[0]=option;
 8004ad8:	4b94      	ldr	r3, [pc, #592]	; (8004d2c <dialog+0x2c8>)
 8004ada:	4a96      	ldr	r2, [pc, #600]	; (8004d34 <dialog+0x2d0>)
 8004adc:	7819      	ldrb	r1, [r3, #0]
			option = 0;
 8004ade:	701d      	strb	r5, [r3, #0]
			GPIO_FLAG = 0x10;
 8004ae0:	2310      	movs	r3, #16
 8004ae2:	7023      	strb	r3, [r4, #0]
			DIALOG = CHANNEL;
 8004ae4:	4b8e      	ldr	r3, [pc, #568]	; (8004d20 <dialog+0x2bc>)
		} else if(GPIO_FLAG & 2){
			if(option > 0)option--;
		} else if(GPIO_FLAG & 4){
			LCD_GotoXY(0,0);
			LCD_Print("channel:");
			selection[0]=option;
 8004ae6:	7011      	strb	r1, [r2, #0]
			option = 0;
			GPIO_FLAG = 0x10;
			DIALOG = CHANNEL;
 8004ae8:	701e      	strb	r6, [r3, #0]
			break;
 8004aea:	e117      	b.n	8004d1c <dialog+0x2b8>
		} else if(GPIO_FLAG & 8){
 8004aec:	0719      	lsls	r1, r3, #28
 8004aee:	d502      	bpl.n	8004af6 <dialog+0x92>
			DIALOG = INIT;
 8004af0:	4b8b      	ldr	r3, [pc, #556]	; (8004d20 <dialog+0x2bc>)
 8004af2:	701a      	strb	r2, [r3, #0]
 8004af4:	e10b      	b.n	8004d0e <dialog+0x2aa>
			GPIO_FLAG = 0x10;
			break;
		}
		GPIO_FLAG = 0;
 8004af6:	2000      	movs	r0, #0
		LCD_GotoXY(0,1);
 8004af8:	2101      	movs	r1, #1
		} else if(GPIO_FLAG & 8){
			DIALOG = INIT;
			GPIO_FLAG = 0x10;
			break;
		}
		GPIO_FLAG = 0;
 8004afa:	7020      	strb	r0, [r4, #0]
		LCD_GotoXY(0,1);
 8004afc:	f000 fb30 	bl	8005160 <LCD_GotoXY>
		switch(option){
 8004b00:	4b8a      	ldr	r3, [pc, #552]	; (8004d2c <dialog+0x2c8>)
 8004b02:	7818      	ldrb	r0, [r3, #0]
 8004b04:	2803      	cmp	r0, #3
 8004b06:	d900      	bls.n	8004b0a <dialog+0xa6>
 8004b08:	e108      	b.n	8004d1c <dialog+0x2b8>
 8004b0a:	f7fb fb07 	bl	800011c <__gnu_thumb1_case_uqi>
 8004b0e:	0402      	.short	0x0402
 8004b10:	0806      	.short	0x0806
			case 0:{LCD_Print("resistance      ");}break;
 8004b12:	4889      	ldr	r0, [pc, #548]	; (8004d38 <dialog+0x2d4>)
 8004b14:	e047      	b.n	8004ba6 <dialog+0x142>
			case 1:{LCD_Print("capacity        ");}break;
 8004b16:	4889      	ldr	r0, [pc, #548]	; (8004d3c <dialog+0x2d8>)
 8004b18:	e045      	b.n	8004ba6 <dialog+0x142>
			case 2:{LCD_Print("charge          ");}break;
 8004b1a:	4889      	ldr	r0, [pc, #548]	; (8004d40 <dialog+0x2dc>)
 8004b1c:	e043      	b.n	8004ba6 <dialog+0x142>
			case 3:{LCD_Print("charge li       ");}break;
 8004b1e:	4889      	ldr	r0, [pc, #548]	; (8004d44 <dialog+0x2e0>)
 8004b20:	e041      	b.n	8004ba6 <dialog+0x142>
		}
	} break;
	case CHANNEL:{
		if(GPIO_FLAG & 1){
 8004b22:	7823      	ldrb	r3, [r4, #0]
 8004b24:	4213      	tst	r3, r2
 8004b26:	d005      	beq.n	8004b34 <dialog+0xd0>
			if(option < 3)option++;
 8004b28:	4b80      	ldr	r3, [pc, #512]	; (8004d2c <dialog+0x2c8>)
 8004b2a:	781a      	ldrb	r2, [r3, #0]
 8004b2c:	2a02      	cmp	r2, #2
 8004b2e:	d825      	bhi.n	8004b7c <dialog+0x118>
 8004b30:	3201      	adds	r2, #1
 8004b32:	e007      	b.n	8004b44 <dialog+0xe0>
		} else if(GPIO_FLAG & 2){
 8004b34:	2502      	movs	r5, #2
 8004b36:	401d      	ands	r5, r3
 8004b38:	d006      	beq.n	8004b48 <dialog+0xe4>
			if(option > 0)option--;
 8004b3a:	4b7c      	ldr	r3, [pc, #496]	; (8004d2c <dialog+0x2c8>)
 8004b3c:	781a      	ldrb	r2, [r3, #0]
 8004b3e:	2a00      	cmp	r2, #0
 8004b40:	d01c      	beq.n	8004b7c <dialog+0x118>
 8004b42:	3a01      	subs	r2, #1
 8004b44:	701a      	strb	r2, [r3, #0]
 8004b46:	e019      	b.n	8004b7c <dialog+0x118>
		} else if(GPIO_FLAG & 4){
 8004b48:	0759      	lsls	r1, r3, #29
 8004b4a:	d511      	bpl.n	8004b70 <dialog+0x10c>
			LCD_GotoXY(0,0);
 8004b4c:	1c29      	adds	r1, r5, #0
 8004b4e:	1c28      	adds	r0, r5, #0
 8004b50:	f000 fb06 	bl	8005160 <LCD_GotoXY>
			LCD_Print("start:  ");
 8004b54:	487c      	ldr	r0, [pc, #496]	; (8004d48 <dialog+0x2e4>)
 8004b56:	f000 fb87 	bl	8005268 <LCD_Print>
			selection[1]=option;
 8004b5a:	4b74      	ldr	r3, [pc, #464]	; (8004d2c <dialog+0x2c8>)
 8004b5c:	4a75      	ldr	r2, [pc, #468]	; (8004d34 <dialog+0x2d0>)
 8004b5e:	7819      	ldrb	r1, [r3, #0]
			option = 0;
 8004b60:	701d      	strb	r5, [r3, #0]
		} else if(GPIO_FLAG & 2){
			if(option > 0)option--;
		} else if(GPIO_FLAG & 4){
			LCD_GotoXY(0,0);
			LCD_Print("start:  ");
			selection[1]=option;
 8004b62:	7051      	strb	r1, [r2, #1]
			option = 0;
			GPIO_FLAG = 0x10;
 8004b64:	2310      	movs	r3, #16
			DIALOG = BEGIN;
 8004b66:	4a6e      	ldr	r2, [pc, #440]	; (8004d20 <dialog+0x2bc>)
		} else if(GPIO_FLAG & 4){
			LCD_GotoXY(0,0);
			LCD_Print("start:  ");
			selection[1]=option;
			option = 0;
			GPIO_FLAG = 0x10;
 8004b68:	7023      	strb	r3, [r4, #0]
			DIALOG = BEGIN;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	7013      	strb	r3, [r2, #0]
			break;
 8004b6e:	e0d5      	b.n	8004d1c <dialog+0x2b8>
		} else if(GPIO_FLAG & 8){
 8004b70:	0719      	lsls	r1, r3, #28
 8004b72:	d503      	bpl.n	8004b7c <dialog+0x118>
			DIALOG = INIT;
 8004b74:	4a6a      	ldr	r2, [pc, #424]	; (8004d20 <dialog+0x2bc>)
 8004b76:	2300      	movs	r3, #0
 8004b78:	7013      	strb	r3, [r2, #0]
 8004b7a:	e0c8      	b.n	8004d0e <dialog+0x2aa>
			GPIO_FLAG = 0x10;
			break;
		}
		GPIO_FLAG = 0;
 8004b7c:	2000      	movs	r0, #0
		LCD_GotoXY(0,1);
 8004b7e:	2101      	movs	r1, #1
		} else if(GPIO_FLAG & 8){
			DIALOG = INIT;
			GPIO_FLAG = 0x10;
			break;
		}
		GPIO_FLAG = 0;
 8004b80:	7020      	strb	r0, [r4, #0]
		LCD_GotoXY(0,1);
 8004b82:	f000 faed 	bl	8005160 <LCD_GotoXY>
		switch(option){
 8004b86:	4b69      	ldr	r3, [pc, #420]	; (8004d2c <dialog+0x2c8>)
 8004b88:	7818      	ldrb	r0, [r3, #0]
 8004b8a:	2803      	cmp	r0, #3
 8004b8c:	d900      	bls.n	8004b90 <dialog+0x12c>
 8004b8e:	e0c5      	b.n	8004d1c <dialog+0x2b8>
 8004b90:	f7fb fac4 	bl	800011c <__gnu_thumb1_case_uqi>
 8004b94:	08060402 	.word	0x08060402
			case 0:{LCD_Print("channel 1 ");}break;
 8004b98:	486c      	ldr	r0, [pc, #432]	; (8004d4c <dialog+0x2e8>)
 8004b9a:	e004      	b.n	8004ba6 <dialog+0x142>
			case 1:{LCD_Print("channel 2 ");}break;
 8004b9c:	486c      	ldr	r0, [pc, #432]	; (8004d50 <dialog+0x2ec>)
 8004b9e:	e002      	b.n	8004ba6 <dialog+0x142>
			case 2:{LCD_Print("channel 3 ");}break;
 8004ba0:	486c      	ldr	r0, [pc, #432]	; (8004d54 <dialog+0x2f0>)
 8004ba2:	e000      	b.n	8004ba6 <dialog+0x142>
			case 3:{LCD_Print("channel 4 ");}break;
 8004ba4:	486c      	ldr	r0, [pc, #432]	; (8004d58 <dialog+0x2f4>)
 8004ba6:	f000 fb5f 	bl	8005268 <LCD_Print>
 8004baa:	e0b7      	b.n	8004d1c <dialog+0x2b8>
		}
	} break;
	case BEGIN:{
		if(GPIO_FLAG & 1){
 8004bac:	7823      	ldrb	r3, [r4, #0]
 8004bae:	4213      	tst	r3, r2
 8004bb0:	d006      	beq.n	8004bc0 <dialog+0x15c>
			if(option < 3)option++;
 8004bb2:	4b5e      	ldr	r3, [pc, #376]	; (8004d2c <dialog+0x2c8>)
 8004bb4:	781a      	ldrb	r2, [r3, #0]
 8004bb6:	2a02      	cmp	r2, #2
 8004bb8:	d900      	bls.n	8004bbc <dialog+0x158>
 8004bba:	e0ad      	b.n	8004d18 <dialog+0x2b4>
 8004bbc:	3201      	adds	r2, #1
 8004bbe:	e007      	b.n	8004bd0 <dialog+0x16c>
		} else if(GPIO_FLAG & 2){
 8004bc0:	0799      	lsls	r1, r3, #30
 8004bc2:	d507      	bpl.n	8004bd4 <dialog+0x170>
			if(option > 0)option--;
 8004bc4:	4b59      	ldr	r3, [pc, #356]	; (8004d2c <dialog+0x2c8>)
 8004bc6:	781a      	ldrb	r2, [r3, #0]
 8004bc8:	2a00      	cmp	r2, #0
 8004bca:	d100      	bne.n	8004bce <dialog+0x16a>
 8004bcc:	e0a4      	b.n	8004d18 <dialog+0x2b4>
 8004bce:	3a01      	subs	r2, #1
 8004bd0:	701a      	strb	r2, [r3, #0]
 8004bd2:	e0a1      	b.n	8004d18 <dialog+0x2b4>
		} else if(GPIO_FLAG & 4){
 8004bd4:	075a      	lsls	r2, r3, #29
 8004bd6:	d400      	bmi.n	8004bda <dialog+0x176>
 8004bd8:	e09b      	b.n	8004d12 <dialog+0x2ae>
			int v = selection[1]+1;
 8004bda:	4b56      	ldr	r3, [pc, #344]	; (8004d34 <dialog+0x2d0>)
			switch(selection[0]){
 8004bdc:	7818      	ldrb	r0, [r3, #0]
		if(GPIO_FLAG & 1){
			if(option < 3)option++;
		} else if(GPIO_FLAG & 2){
			if(option > 0)option--;
		} else if(GPIO_FLAG & 4){
			int v = selection[1]+1;
 8004bde:	785d      	ldrb	r5, [r3, #1]
			switch(selection[0]){
 8004be0:	2803      	cmp	r0, #3
 8004be2:	d900      	bls.n	8004be6 <dialog+0x182>
 8004be4:	e090      	b.n	8004d08 <dialog+0x2a4>
 8004be6:	f7fb fa99 	bl	800011c <__gnu_thumb1_case_uqi>
 8004bea:	1f02      	.short	0x1f02
 8004bec:	6449      	.short	0x6449
			case 0:{	//pridaj do fronty meranie vnutorneho odporu
				if(v >= 1 && v <=4 && vetvy[v - 1].state == IDLE){
 8004bee:	2d03      	cmp	r5, #3
 8004bf0:	d81c      	bhi.n	8004c2c <dialog+0x1c8>
 8004bf2:	2024      	movs	r0, #36	; 0x24
 8004bf4:	4345      	muls	r5, r0
 8004bf6:	4b59      	ldr	r3, [pc, #356]	; (8004d5c <dialog+0x2f8>)
 8004bf8:	195d      	adds	r5, r3, r5
 8004bfa:	786e      	ldrb	r6, [r5, #1]
 8004bfc:	2e00      	cmp	r6, #0
 8004bfe:	d115      	bne.n	8004c2c <dialog+0x1c8>
					DataResistance * Data = (DataResistance *) malloc(sizeof(DataResistance));
 8004c00:	f002 fac6 	bl	8007190 <malloc>
					Data->vetva = &vetvy[v - 1];
					Data->target[0] = *eepromIntRead(16);
 8004c04:	4b56      	ldr	r3, [pc, #344]	; (8004d60 <dialog+0x2fc>)
			int v = selection[1]+1;
			switch(selection[0]){
			case 0:{	//pridaj do fronty meranie vnutorneho odporu
				if(v >= 1 && v <=4 && vetvy[v - 1].state == IDLE){
					DataResistance * Data = (DataResistance *) malloc(sizeof(DataResistance));
					Data->vetva = &vetvy[v - 1];
 8004c06:	61c5      	str	r5, [r0, #28]
					Data->target[0] = *eepromIntRead(16);
 8004c08:	681b      	ldr	r3, [r3, #0]
		} else if(GPIO_FLAG & 4){
			int v = selection[1]+1;
			switch(selection[0]){
			case 0:{	//pridaj do fronty meranie vnutorneho odporu
				if(v >= 1 && v <=4 && vetvy[v - 1].state == IDLE){
					DataResistance * Data = (DataResistance *) malloc(sizeof(DataResistance));
 8004c0a:	1c01      	adds	r1, r0, #0
					Data->vetva = &vetvy[v - 1];
					Data->target[0] = *eepromIntRead(16);
 8004c0c:	6043      	str	r3, [r0, #4]
					Data->target[1] = *eepromIntRead(17);
 8004c0e:	4b55      	ldr	r3, [pc, #340]	; (8004d64 <dialog+0x300>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	6083      	str	r3, [r0, #8]
					Data->samples = *eepromIntRead(18);
 8004c14:	4b54      	ldr	r3, [pc, #336]	; (8004d68 <dialog+0x304>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	7643      	strb	r3, [r0, #25]
					Data->tolerance = *eepromIntRead(19);
 8004c1a:	4b54      	ldr	r3, [pc, #336]	; (8004d6c <dialog+0x308>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	6143      	str	r3, [r0, #20]
					Data->state = START;
 8004c20:	1c43      	adds	r3, r0, #1
 8004c22:	77de      	strb	r6, [r3, #31]
					addProcess(&resistance,Data);
 8004c24:	4852      	ldr	r0, [pc, #328]	; (8004d70 <dialog+0x30c>)
 8004c26:	e06d      	b.n	8004d04 <dialog+0x2a0>
				} else {
					ErrorHandler(0);
				}
			} break;
			case 1:{
				if(v >= 1 && v <=4 && vetvy[v - 1].state == IDLE){
 8004c28:	2d03      	cmp	r5, #3
 8004c2a:	d903      	bls.n	8004c34 <dialog+0x1d0>
					Data->samples = *eepromIntRead(18);
					Data->tolerance = *eepromIntRead(19);
					Data->state = START;
					addProcess(&resistance,Data);
				} else {
					ErrorHandler(0);
 8004c2c:	2000      	movs	r0, #0
 8004c2e:	f7fe fe37 	bl	80038a0 <ErrorHandler>
 8004c32:	e069      	b.n	8004d08 <dialog+0x2a4>
				}
			} break;
			case 1:{
				if(v >= 1 && v <=4 && vetvy[v - 1].state == IDLE){
 8004c34:	2724      	movs	r7, #36	; 0x24
 8004c36:	436f      	muls	r7, r5
 8004c38:	4b48      	ldr	r3, [pc, #288]	; (8004d5c <dialog+0x2f8>)
 8004c3a:	19df      	adds	r7, r3, r7
 8004c3c:	9701      	str	r7, [sp, #4]
 8004c3e:	787f      	ldrb	r7, [r7, #1]
 8004c40:	2f00      	cmp	r7, #0
 8004c42:	d1f3      	bne.n	8004c2c <dialog+0x1c8>
					DataDischarge * Data = (DataDischarge *) malloc(sizeof(DataDischarge));
 8004c44:	2018      	movs	r0, #24
 8004c46:	f002 faa3 	bl	8007190 <malloc>
					Data->vetva = &vetvy[v - 1];
 8004c4a:	9b01      	ldr	r3, [sp, #4]
					ErrorHandler(0);
				}
			} break;
			case 1:{
				if(v >= 1 && v <=4 && vetvy[v - 1].state == IDLE){
					DataDischarge * Data = (DataDischarge *) malloc(sizeof(DataDischarge));
 8004c4c:	1c06      	adds	r6, r0, #0
					Data->vetva = &vetvy[v - 1];
 8004c4e:	6003      	str	r3, [r0, #0]
					Data->target = *eepromIntRead(20);
 8004c50:	4b48      	ldr	r3, [pc, #288]	; (8004d74 <dialog+0x310>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	6043      	str	r3, [r0, #4]
					Data->cutoff = *eepromIntRead(21);
 8004c56:	4b48      	ldr	r3, [pc, #288]	; (8004d78 <dialog+0x314>)
 8004c58:	681b      	ldr	r3, [r3, #0]
					Data->tolerance = 0;
 8004c5a:	60c7      	str	r7, [r0, #12]
			case 1:{
				if(v >= 1 && v <=4 && vetvy[v - 1].state == IDLE){
					DataDischarge * Data = (DataDischarge *) malloc(sizeof(DataDischarge));
					Data->vetva = &vetvy[v - 1];
					Data->target = *eepromIntRead(20);
					Data->cutoff = *eepromIntRead(21);
 8004c5c:	6083      	str	r3, [r0, #8]
					Data->tolerance = 0;
					Data->state = START;
 8004c5e:	7507      	strb	r7, [r0, #20]
					if(atoi(command[4]))verbose |= (1 << (v-1));
 8004c60:	4846      	ldr	r0, [pc, #280]	; (8004d7c <dialog+0x318>)
 8004c62:	f002 fa69 	bl	8007138 <atoi>
 8004c66:	2800      	cmp	r0, #0
 8004c68:	d006      	beq.n	8004c78 <dialog+0x214>
 8004c6a:	4b45      	ldr	r3, [pc, #276]	; (8004d80 <dialog+0x31c>)
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	40aa      	lsls	r2, r5
 8004c70:	1c15      	adds	r5, r2, #0
 8004c72:	781a      	ldrb	r2, [r3, #0]
 8004c74:	4315      	orrs	r5, r2
 8004c76:	701d      	strb	r5, [r3, #0]
					addProcess(&discharge,Data);
 8004c78:	4842      	ldr	r0, [pc, #264]	; (8004d84 <dialog+0x320>)
 8004c7a:	e042      	b.n	8004d02 <dialog+0x29e>
				} else {
					ErrorHandler(0);
				}
			} break;
			case 2:{
				if(v >= 1 && v <=4 && vetvy[v - 1].state == IDLE){
 8004c7c:	2d03      	cmp	r5, #3
 8004c7e:	d8d5      	bhi.n	8004c2c <dialog+0x1c8>
 8004c80:	2324      	movs	r3, #36	; 0x24
 8004c82:	435d      	muls	r5, r3
 8004c84:	4b35      	ldr	r3, [pc, #212]	; (8004d5c <dialog+0x2f8>)
 8004c86:	195d      	adds	r5, r3, r5
 8004c88:	786e      	ldrb	r6, [r5, #1]
 8004c8a:	2e00      	cmp	r6, #0
 8004c8c:	d1ce      	bne.n	8004c2c <dialog+0x1c8>
					DataCharge * Data = (DataCharge *) malloc(sizeof(DataCharge));
 8004c8e:	201c      	movs	r0, #28
 8004c90:	f002 fa7e 	bl	8007190 <malloc>
					Data->vetva = &vetvy[v - 1];
					Data->target = *eepromIntRead(22);
 8004c94:	4b3c      	ldr	r3, [pc, #240]	; (8004d88 <dialog+0x324>)
					ErrorHandler(0);
				}
			} break;
			case 2:{
				if(v >= 1 && v <=4 && vetvy[v - 1].state == IDLE){
					DataCharge * Data = (DataCharge *) malloc(sizeof(DataCharge));
 8004c96:	1c01      	adds	r1, r0, #0
					Data->vetva = &vetvy[v - 1];
					Data->target = *eepromIntRead(22);
 8004c98:	681b      	ldr	r3, [r3, #0]
				}
			} break;
			case 2:{
				if(v >= 1 && v <=4 && vetvy[v - 1].state == IDLE){
					DataCharge * Data = (DataCharge *) malloc(sizeof(DataCharge));
					Data->vetva = &vetvy[v - 1];
 8004c9a:	6145      	str	r5, [r0, #20]
					Data->target = *eepromIntRead(22);
 8004c9c:	6083      	str	r3, [r0, #8]
					Data->cutoff = *eepromIntRead(23);
 8004c9e:	4b3b      	ldr	r3, [pc, #236]	; (8004d8c <dialog+0x328>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	60c3      	str	r3, [r0, #12]
					Data->limit = *eepromIntRead(24);
 8004ca4:	4b3a      	ldr	r3, [pc, #232]	; (8004d90 <dialog+0x32c>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
					Data->tolerance = 0;
 8004ca8:	6046      	str	r6, [r0, #4]
				if(v >= 1 && v <=4 && vetvy[v - 1].state == IDLE){
					DataCharge * Data = (DataCharge *) malloc(sizeof(DataCharge));
					Data->vetva = &vetvy[v - 1];
					Data->target = *eepromIntRead(22);
					Data->cutoff = *eepromIntRead(23);
					Data->limit = *eepromIntRead(24);
 8004caa:	6103      	str	r3, [r0, #16]
					Data->tolerance = 0;
					Data->state = START;
 8004cac:	7606      	strb	r6, [r0, #24]
					addProcess(&charge,Data);
 8004cae:	4839      	ldr	r0, [pc, #228]	; (8004d94 <dialog+0x330>)
 8004cb0:	e028      	b.n	8004d04 <dialog+0x2a0>
				} else {
					ErrorHandler(0);
				}
			} break;
			case 3:{
				if(v >= 1 && v <=4){
 8004cb2:	2d03      	cmp	r5, #3
 8004cb4:	d8ba      	bhi.n	8004c2c <dialog+0x1c8>
					DataChargeLithium * Data = (DataChargeLithium *) malloc(sizeof(DataChargeLithium));
 8004cb6:	2024      	movs	r0, #36	; 0x24
 8004cb8:	f002 fa6a 	bl	8007190 <malloc>
					Data->vetva = &vetvy[v - 1];
 8004cbc:	2324      	movs	r3, #36	; 0x24
 8004cbe:	436b      	muls	r3, r5
 8004cc0:	4a26      	ldr	r2, [pc, #152]	; (8004d5c <dialog+0x2f8>)
					ErrorHandler(0);
				}
			} break;
			case 3:{
				if(v >= 1 && v <=4){
					DataChargeLithium * Data = (DataChargeLithium *) malloc(sizeof(DataChargeLithium));
 8004cc2:	1c06      	adds	r6, r0, #0
					Data->vetva = &vetvy[v - 1];
 8004cc4:	189b      	adds	r3, r3, r2
 8004cc6:	61c3      	str	r3, [r0, #28]
					Data->target[0] = *eepromIntRead(25);
 8004cc8:	4b33      	ldr	r3, [pc, #204]	; (8004d98 <dialog+0x334>)
					Data->target[1] = *eepromIntRead(26);
					Data->cutoff[0] = *eepromIntRead(27);
					Data->cutoff[1] = *eepromIntRead(28);
					Data->tolerance = 0;
					Data->state = START;
 8004cca:	1c42      	adds	r2, r0, #1
			} break;
			case 3:{
				if(v >= 1 && v <=4){
					DataChargeLithium * Data = (DataChargeLithium *) malloc(sizeof(DataChargeLithium));
					Data->vetva = &vetvy[v - 1];
					Data->target[0] = *eepromIntRead(25);
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	6083      	str	r3, [r0, #8]
					Data->target[1] = *eepromIntRead(26);
 8004cd0:	4b32      	ldr	r3, [pc, #200]	; (8004d9c <dialog+0x338>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	60c3      	str	r3, [r0, #12]
					Data->cutoff[0] = *eepromIntRead(27);
 8004cd6:	4b32      	ldr	r3, [pc, #200]	; (8004da0 <dialog+0x33c>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	6103      	str	r3, [r0, #16]
					Data->cutoff[1] = *eepromIntRead(28);
 8004cdc:	4b31      	ldr	r3, [pc, #196]	; (8004da4 <dialog+0x340>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	6143      	str	r3, [r0, #20]
					Data->tolerance = 0;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	6043      	str	r3, [r0, #4]
					Data->state = START;
 8004ce6:	77d3      	strb	r3, [r2, #31]
					if(atoi(command[6]))verbose |= (1 << (v-1));
 8004ce8:	482f      	ldr	r0, [pc, #188]	; (8004da8 <dialog+0x344>)
 8004cea:	f002 fa25 	bl	8007138 <atoi>
 8004cee:	2800      	cmp	r0, #0
 8004cf0:	d006      	beq.n	8004d00 <dialog+0x29c>
 8004cf2:	4b23      	ldr	r3, [pc, #140]	; (8004d80 <dialog+0x31c>)
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	40aa      	lsls	r2, r5
 8004cf8:	1c15      	adds	r5, r2, #0
 8004cfa:	781a      	ldrb	r2, [r3, #0]
 8004cfc:	4315      	orrs	r5, r2
 8004cfe:	701d      	strb	r5, [r3, #0]
					addProcess(&chargeLithium,Data);
 8004d00:	482a      	ldr	r0, [pc, #168]	; (8004dac <dialog+0x348>)
 8004d02:	1c31      	adds	r1, r6, #0
 8004d04:	f7fe fcaa 	bl	800365c <addProcess>
				} else {
					ErrorHandler(0);
				}
			} break;
			}
			DIALOG = INIT;
 8004d08:	4905      	ldr	r1, [pc, #20]	; (8004d20 <dialog+0x2bc>)
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	700b      	strb	r3, [r1, #0]
			GPIO_FLAG = 0x10;
 8004d0e:	2310      	movs	r3, #16
 8004d10:	e003      	b.n	8004d1a <dialog+0x2b6>
			break;
		} else if(GPIO_FLAG & 8){
 8004d12:	071a      	lsls	r2, r3, #28
 8004d14:	d500      	bpl.n	8004d18 <dialog+0x2b4>
 8004d16:	e72d      	b.n	8004b74 <dialog+0x110>
			DIALOG = INIT;
			GPIO_FLAG = 0x10;
			break;
		}
		GPIO_FLAG = 0;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	7023      	strb	r3, [r4, #0]
	} break;
	}
}
 8004d1c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8004d1e:	46c0      	nop			; (mov r8, r8)
 8004d20:	2000056a 	.word	0x2000056a
 8004d24:	20000568 	.word	0x20000568
 8004d28:	0800c271 	.word	0x0800c271
 8004d2c:	2000065c 	.word	0x2000065c
 8004d30:	0800c279 	.word	0x0800c279
 8004d34:	2000094e 	.word	0x2000094e
 8004d38:	0800c282 	.word	0x0800c282
 8004d3c:	0800c293 	.word	0x0800c293
 8004d40:	0800c2a4 	.word	0x0800c2a4
 8004d44:	0800c2b5 	.word	0x0800c2b5
 8004d48:	0800c2c6 	.word	0x0800c2c6
 8004d4c:	0800c2cf 	.word	0x0800c2cf
 8004d50:	0800c2da 	.word	0x0800c2da
 8004d54:	0800c2e5 	.word	0x0800c2e5
 8004d58:	0800c2f0 	.word	0x0800c2f0
 8004d5c:	20000988 	.word	0x20000988
 8004d60:	08080040 	.word	0x08080040
 8004d64:	08080044 	.word	0x08080044
 8004d68:	08080048 	.word	0x08080048
 8004d6c:	0808004c 	.word	0x0808004c
 8004d70:	0800453d 	.word	0x0800453d
 8004d74:	08080050 	.word	0x08080050
 8004d78:	08080054 	.word	0x08080054
 8004d7c:	200008d6 	.word	0x200008d6
 8004d80:	20000569 	.word	0x20000569
 8004d84:	0800431d 	.word	0x0800431d
 8004d88:	08080058 	.word	0x08080058
 8004d8c:	0808005c 	.word	0x0808005c
 8004d90:	08080060 	.word	0x08080060
 8004d94:	08004885 	.word	0x08004885
 8004d98:	08080064 	.word	0x08080064
 8004d9c:	08080068 	.word	0x08080068
 8004da0:	0808006c 	.word	0x0808006c
 8004da4:	08080070 	.word	0x08080070
 8004da8:	200008fe 	.word	0x200008fe
 8004dac:	08004689 	.word	0x08004689

08004db0 <HAL_ADC_ConvCpltCallback>:
	HAL_GPIO_WritePin(vetva->vetvaOut.csPort,vetva->vetvaOut.csPin,1);
}

//*******************INTERRUPTS CALLBACKS******************
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* AdcHandle)
{
 8004db0:	b570      	push	{r4, r5, r6, lr}
	channels[channels_i++] = HAL_ADC_GetValue(AdcHandle);
 8004db2:	4c16      	ldr	r4, [pc, #88]	; (8004e0c <HAL_ADC_ConvCpltCallback+0x5c>)
	HAL_GPIO_WritePin(vetva->vetvaOut.csPort,vetva->vetvaOut.csPin,1);
}

//*******************INTERRUPTS CALLBACKS******************
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* AdcHandle)
{
 8004db4:	1c05      	adds	r5, r0, #0
	channels[channels_i++] = HAL_ADC_GetValue(AdcHandle);
 8004db6:	8826      	ldrh	r6, [r4, #0]
 8004db8:	1c73      	adds	r3, r6, #1
 8004dba:	8023      	strh	r3, [r4, #0]
 8004dbc:	f002 f85c 	bl	8006e78 <HAL_ADC_GetValue>
 8004dc0:	4b13      	ldr	r3, [pc, #76]	; (8004e10 <HAL_ADC_ConvCpltCallback+0x60>)
 8004dc2:	0076      	lsls	r6, r6, #1
 8004dc4:	52f0      	strh	r0, [r6, r3]
	if (channels_i >= CHANNELS) {
 8004dc6:	8823      	ldrh	r3, [r4, #0]
 8004dc8:	1c26      	adds	r6, r4, #0
 8004dca:	2b0f      	cmp	r3, #15
 8004dcc:	d91c      	bls.n	8004e08 <HAL_ADC_ConvCpltCallback+0x58>
		//conversion complete
		//aktualizuje namerane hodnoty v strukturach
		vetvyUpdate();
 8004dce:	f7fe fe79 	bl	8003ac4 <vetvyUpdate>
 8004dd2:	2400      	movs	r4, #0
 8004dd4:	4b0f      	ldr	r3, [pc, #60]	; (8004e14 <HAL_ADC_ConvCpltCallback+0x64>)
 8004dd6:	191a      	adds	r2, r3, r4
		int i;
		for(i=0;i<MAXPROCESSES;i++){
			if(FRONT[i].PID != -1){
 8004dd8:	6890      	ldr	r0, [r2, #8]
 8004dda:	1c42      	adds	r2, r0, #1
 8004ddc:	d001      	beq.n	8004de2 <HAL_ADC_ConvCpltCallback+0x32>
				void (*func)(int PID) = FRONT[i].func;
				func(FRONT[i].PID);
 8004dde:	58e3      	ldr	r3, [r4, r3]
 8004de0:	4798      	blx	r3
 8004de2:	340c      	adds	r4, #12
	if (channels_i >= CHANNELS) {
		//conversion complete
		//aktualizuje namerane hodnoty v strukturach
		vetvyUpdate();
		int i;
		for(i=0;i<MAXPROCESSES;i++){
 8004de4:	2cf0      	cmp	r4, #240	; 0xf0
 8004de6:	d1f5      	bne.n	8004dd4 <HAL_ADC_ConvCpltCallback+0x24>
				void (*func)(int PID) = FRONT[i].func;
				func(FRONT[i].PID);
			}
		}
		//display a tlacitka
		if(GPIO_FLAG)dialog();
 8004de8:	4b0b      	ldr	r3, [pc, #44]	; (8004e18 <HAL_ADC_ConvCpltCallback+0x68>)
 8004dea:	781b      	ldrb	r3, [r3, #0]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d001      	beq.n	8004df4 <HAL_ADC_ConvCpltCallback+0x44>
 8004df0:	f7ff fe38 	bl	8004a64 <dialog>

void led(led_cmd cmd,uint32_t pin){
	switch(cmd){
		case ON:HAL_GPIO_WritePin(LEDSPORT,pin,SET);break;
		case OFF:HAL_GPIO_WritePin(LEDSPORT,pin,RESET);break;
		case TGLE:HAL_GPIO_TogglePin(LEDSPORT,pin);break;
 8004df4:	2180      	movs	r1, #128	; 0x80
 8004df6:	4809      	ldr	r0, [pc, #36]	; (8004e1c <HAL_ADC_ConvCpltCallback+0x6c>)
 8004df8:	0109      	lsls	r1, r1, #4
 8004dfa:	f001 fd3d 	bl	8006878 <HAL_GPIO_TogglePin>
		}
		//display a tlacitka
		if(GPIO_FLAG)dialog();

		led(TGLE,LED2);
		channels_i = 0;
 8004dfe:	2300      	movs	r3, #0
		HAL_ADC_Start_IT(AdcHandle);
 8004e00:	1c28      	adds	r0, r5, #0
		}
		//display a tlacitka
		if(GPIO_FLAG)dialog();

		led(TGLE,LED2);
		channels_i = 0;
 8004e02:	8033      	strh	r3, [r6, #0]
		HAL_ADC_Start_IT(AdcHandle);
 8004e04:	f001 fffe 	bl	8006e04 <HAL_ADC_Start_IT>
	}
}
 8004e08:	bd70      	pop	{r4, r5, r6, pc}
 8004e0a:	46c0      	nop			; (mov r8, r8)
 8004e0c:	20000564 	.word	0x20000564
 8004e10:	20000968 	.word	0x20000968
 8004e14:	2000056c 	.word	0x2000056c
 8004e18:	20000568 	.word	0x20000568
 8004e1c:	50000800 	.word	0x50000800

08004e20 <ADC_Init>:
#include "stm32l0xx_hal.h"
#include "hw.h"

void ADC_Init(){
 8004e20:	b537      	push	{r0, r1, r2, r4, r5, lr}
	AdcHandle.Instance = ADC1;
 8004e22:	4b11      	ldr	r3, [pc, #68]	; (8004e68 <ADC_Init+0x48>)
 8004e24:	4c11      	ldr	r4, [pc, #68]	; (8004e6c <ADC_Init+0x4c>)
	ADC_ChannelConfTypeDef   sConfig;

	AdcHandle.Instance = ADC1;
	AdcHandle.Init.OversamplingMode = DISABLE;
 8004e26:	2500      	movs	r5, #0
#include "stm32l0xx_hal.h"
#include "hw.h"

void ADC_Init(){
	AdcHandle.Instance = ADC1;
 8004e28:	6023      	str	r3, [r4, #0]
	ADC_ChannelConfTypeDef   sConfig;

	AdcHandle.Instance = ADC1;
	AdcHandle.Init.OversamplingMode = DISABLE;
	AdcHandle.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV64;//500khz
 8004e2a:	2390      	movs	r3, #144	; 0x90
 8004e2c:	039b      	lsls	r3, r3, #14
 8004e2e:	6163      	str	r3, [r4, #20]
	AdcHandle.Init.Resolution = ADC_RESOLUTION12b;
	AdcHandle.Init.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 8004e30:	2304      	movs	r3, #4
 8004e32:	61e3      	str	r3, [r4, #28]
	AdcHandle.Init.ContinuousConvMode = DISABLE;
	AdcHandle.Init.DiscontinuousConvMode = DISABLE;
	AdcHandle.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIG_EDGE_NONE;
	AdcHandle.Init.DMAContinuousRequests = DISABLE;

	HAL_ADC_Init(&AdcHandle);
 8004e34:	1c20      	adds	r0, r4, #0
	AdcHandle.Instance = ADC1;
	AdcHandle.Init.OversamplingMode = DISABLE;
	AdcHandle.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV64;//500khz
	AdcHandle.Init.Resolution = ADC_RESOLUTION12b;
	AdcHandle.Init.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
	AdcHandle.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8004e36:	2301      	movs	r3, #1
 8004e38:	6223      	str	r3, [r4, #32]
void ADC_Init(){
	AdcHandle.Instance = ADC1;
	ADC_ChannelConfTypeDef   sConfig;

	AdcHandle.Instance = ADC1;
	AdcHandle.Init.OversamplingMode = DISABLE;
 8004e3a:	6065      	str	r5, [r4, #4]
	AdcHandle.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV64;//500khz
	AdcHandle.Init.Resolution = ADC_RESOLUTION12b;
 8004e3c:	61a5      	str	r5, [r4, #24]
	AdcHandle.Init.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
	AdcHandle.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
	AdcHandle.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004e3e:	6265      	str	r5, [r4, #36]	; 0x24
	AdcHandle.Init.ContinuousConvMode = DISABLE;
 8004e40:	62a5      	str	r5, [r4, #40]	; 0x28
	AdcHandle.Init.DiscontinuousConvMode = DISABLE;
 8004e42:	62e5      	str	r5, [r4, #44]	; 0x2c
	AdcHandle.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIG_EDGE_NONE;
 8004e44:	6365      	str	r5, [r4, #52]	; 0x34
	AdcHandle.Init.DMAContinuousRequests = DISABLE;
 8004e46:	63a5      	str	r5, [r4, #56]	; 0x38

	HAL_ADC_Init(&AdcHandle);
 8004e48:	f001 ff06 	bl	8006c58 <HAL_ADC_Init>
	HAL_ADCEx_Calibration_Start(&AdcHandle, ADC_SINGLE_ENDED);
 8004e4c:	1c29      	adds	r1, r5, #0
 8004e4e:	1c20      	adds	r0, r4, #0
 8004e50:	f001 fe6e 	bl	8006b30 <HAL_ADCEx_Calibration_Start>

	sConfig.Channel = 	ADC_CHANNEL_0|ADC_CHANNEL_1|ADC_CHANNEL_2|
 8004e54:	4b06      	ldr	r3, [pc, #24]	; (8004e70 <ADC_Init+0x50>)
						ADC_CHANNEL_9|ADC_CHANNEL_10|ADC_CHANNEL_11|
						ADC_CHANNEL_12|ADC_CHANNEL_13|ADC_CHANNEL_14|
						ADC_CHANNEL_15;

	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
	HAL_ADC_ConfigChannel(&AdcHandle, &sConfig);
 8004e56:	1c20      	adds	r0, r4, #0
	AdcHandle.Init.DMAContinuousRequests = DISABLE;

	HAL_ADC_Init(&AdcHandle);
	HAL_ADCEx_Calibration_Start(&AdcHandle, ADC_SINGLE_ENDED);

	sConfig.Channel = 	ADC_CHANNEL_0|ADC_CHANNEL_1|ADC_CHANNEL_2|
 8004e58:	9300      	str	r3, [sp, #0]
						ADC_CHANNEL_6|ADC_CHANNEL_7|ADC_CHANNEL_8|
						ADC_CHANNEL_9|ADC_CHANNEL_10|ADC_CHANNEL_11|
						ADC_CHANNEL_12|ADC_CHANNEL_13|ADC_CHANNEL_14|
						ADC_CHANNEL_15;

	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8004e5a:	2380      	movs	r3, #128	; 0x80
 8004e5c:	015b      	lsls	r3, r3, #5
	HAL_ADC_ConfigChannel(&AdcHandle, &sConfig);
 8004e5e:	4669      	mov	r1, sp
						ADC_CHANNEL_6|ADC_CHANNEL_7|ADC_CHANNEL_8|
						ADC_CHANNEL_9|ADC_CHANNEL_10|ADC_CHANNEL_11|
						ADC_CHANNEL_12|ADC_CHANNEL_13|ADC_CHANNEL_14|
						ADC_CHANNEL_15;

	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8004e60:	9301      	str	r3, [sp, #4]
	HAL_ADC_ConfigChannel(&AdcHandle, &sConfig);
 8004e62:	f002 f87d 	bl	8006f60 <HAL_ADC_ConfigChannel>

}
 8004e66:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 8004e68:	40012400 	.word	0x40012400
 8004e6c:	20000764 	.word	0x20000764
 8004e70:	3c00ffff 	.word	0x3c00ffff

08004e74 <SPI2_Init>:
  HAL_SPI_Init(&hspi1);

}

void SPI2_Init(void)
{
 8004e74:	b508      	push	{r3, lr}

  hspi2.Instance = SPI2;
 8004e76:	480c      	ldr	r0, [pc, #48]	; (8004ea8 <SPI2_Init+0x34>)
 8004e78:	4b0c      	ldr	r3, [pc, #48]	; (8004eac <SPI2_Init+0x38>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8004e7a:	2280      	movs	r2, #128	; 0x80
 8004e7c:	0112      	lsls	r2, r2, #4
}

void SPI2_Init(void)
{

  hspi2.Instance = SPI2;
 8004e7e:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8004e80:	60c2      	str	r2, [r0, #12]

void SPI2_Init(void)
{

  hspi2.Instance = SPI2;
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8004e82:	2382      	movs	r3, #130	; 0x82
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8004e84:	2280      	movs	r2, #128	; 0x80

void SPI2_Init(void)
{

  hspi2.Instance = SPI2;
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8004e86:	005b      	lsls	r3, r3, #1
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8004e88:	0092      	lsls	r2, r2, #2

void SPI2_Init(void)
{

  hspi2.Instance = SPI2;
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8004e8a:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8004e8c:	6182      	str	r2, [r0, #24]
void SPI2_Init(void)
{

  hspi2.Instance = SPI2;
  hspi2.Init.Mode = SPI_MODE_MASTER;
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004e8e:	2300      	movs	r3, #0
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi2.Init.NSS = SPI_NSS_SOFT;
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8004e90:	2230      	movs	r2, #48	; 0x30
void SPI2_Init(void)
{

  hspi2.Instance = SPI2;
  hspi2.Init.Mode = SPI_MODE_MASTER;
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004e92:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e94:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004e96:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8004e98:	61c2      	str	r2, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004e9a:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLED;
 8004e9c:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8004e9e:	6283      	str	r3, [r0, #40]	; 0x28
  HAL_SPI_Init(&hspi2);
 8004ea0:	f000 feca 	bl	8005c38 <HAL_SPI_Init>

}
 8004ea4:	bd08      	pop	{r3, pc}
 8004ea6:	46c0      	nop			; (mov r8, r8)
 8004ea8:	2000069c 	.word	0x2000069c
 8004eac:	40003800 	.word	0x40003800

08004eb0 <TIM21_Init>:

void TIM21_Init(void)
{
 8004eb0:	b508      	push	{r3, lr}
   htim21.Instance = TIM21;
 8004eb2:	4807      	ldr	r0, [pc, #28]	; (8004ed0 <TIM21_Init+0x20>)
 8004eb4:	4b07      	ldr	r3, [pc, #28]	; (8004ed4 <TIM21_Init+0x24>)
 8004eb6:	6003      	str	r3, [r0, #0]
   htim21.Init.Prescaler = 64000;	//500/s
 8004eb8:	23fa      	movs	r3, #250	; 0xfa
 8004eba:	021b      	lsls	r3, r3, #8
 8004ebc:	6043      	str	r3, [r0, #4]
   htim21.Init.Period = 500;		//1s
 8004ebe:	23fa      	movs	r3, #250	; 0xfa
 8004ec0:	005b      	lsls	r3, r3, #1
 8004ec2:	60c3      	str	r3, [r0, #12]
   htim21.Init.ClockDivision = 0;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	6103      	str	r3, [r0, #16]
   htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ec8:	6083      	str	r3, [r0, #8]
   HAL_TIM_Base_Init(&htim21);
 8004eca:	f000 fdb3 	bl	8005a34 <HAL_TIM_Base_Init>

}
 8004ece:	bd08      	pop	{r3, pc}
 8004ed0:	2000081c 	.word	0x2000081c
 8004ed4:	40010800 	.word	0x40010800

08004ed8 <USART1_UART_Init>:

void USART1_UART_Init(void)
{
 8004ed8:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
 8004eda:	4809      	ldr	r0, [pc, #36]	; (8004f00 <USART1_UART_Init+0x28>)
 8004edc:	4b09      	ldr	r3, [pc, #36]	; (8004f04 <USART1_UART_Init+0x2c>)
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004ede:	220c      	movs	r2, #12
}

void USART1_UART_Init(void)
{

  huart1.Instance = USART1;
 8004ee0:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8004ee2:	23e1      	movs	r3, #225	; 0xe1
 8004ee4:	025b      	lsls	r3, r3, #9
 8004ee6:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004eec:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004eee:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004ef0:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004ef2:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004ef4:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 8004ef6:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004ef8:	6243      	str	r3, [r0, #36]	; 0x24
  HAL_UART_Init(&huart1);
 8004efa:	f000 fd3b 	bl	8005974 <HAL_UART_Init>

}
 8004efe:	bd08      	pop	{r3, pc}
 8004f00:	200006f4 	.word	0x200006f4
 8004f04:	40013800 	.word	0x40013800

08004f08 <GPIO_Init>:
void GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct;

  __GPIOA_CLK_ENABLE();
 8004f08:	4b2f      	ldr	r3, [pc, #188]	; (8004fc8 <GPIO_Init+0xc0>)
  HAL_UART_Init(&huart1);

}

void GPIO_Init(void)
{
 8004f0a:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;

  __GPIOA_CLK_ENABLE();
 8004f0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f0e:	2401      	movs	r4, #1
 8004f10:	4322      	orrs	r2, r4
 8004f12:	62da      	str	r2, [r3, #44]	; 0x2c
 8004f14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  HAL_UART_Init(&huart1);

}

void GPIO_Init(void)
{
 8004f16:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct;

  __GPIOA_CLK_ENABLE();
 8004f18:	4022      	ands	r2, r4
 8004f1a:	9201      	str	r2, [sp, #4]
 8004f1c:	9a01      	ldr	r2, [sp, #4]
  __GPIOB_CLK_ENABLE();
 8004f1e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004f20:	2202      	movs	r2, #2
 8004f22:	4311      	orrs	r1, r2
 8004f24:	62d9      	str	r1, [r3, #44]	; 0x2c
 8004f26:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  __GPIOC_CLK_ENABLE();
 8004f28:	2604      	movs	r6, #4
{

  GPIO_InitTypeDef GPIO_InitStruct;

  __GPIOA_CLK_ENABLE();
  __GPIOB_CLK_ENABLE();
 8004f2a:	400a      	ands	r2, r1
 8004f2c:	9202      	str	r2, [sp, #8]
 8004f2e:	9a02      	ldr	r2, [sp, #8]
  __GPIOC_CLK_ENABLE();
 8004f30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  __GPIOD_CLK_ENABLE();

  //GPIOC
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f32:	2500      	movs	r5, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  __GPIOA_CLK_ENABLE();
  __GPIOB_CLK_ENABLE();
  __GPIOC_CLK_ENABLE();
 8004f34:	4332      	orrs	r2, r6
 8004f36:	62da      	str	r2, [r3, #44]	; 0x2c
 8004f38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  //GPIOC
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f3a:	4824      	ldr	r0, [pc, #144]	; (8004fcc <GPIO_Init+0xc4>)

  GPIO_InitTypeDef GPIO_InitStruct;

  __GPIOA_CLK_ENABLE();
  __GPIOB_CLK_ENABLE();
  __GPIOC_CLK_ENABLE();
 8004f3c:	4032      	ands	r2, r6
 8004f3e:	9203      	str	r2, [sp, #12]
 8004f40:	9a03      	ldr	r2, [sp, #12]
  __GPIOD_CLK_ENABLE();
 8004f42:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004f44:	2208      	movs	r2, #8
 8004f46:	4311      	orrs	r1, r2
 8004f48:	62d9      	str	r1, [r3, #44]	; 0x2c
 8004f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  //GPIOC
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f4c:	a905      	add	r1, sp, #20
  GPIO_InitTypeDef GPIO_InitStruct;

  __GPIOA_CLK_ENABLE();
  __GPIOB_CLK_ENABLE();
  __GPIOC_CLK_ENABLE();
  __GPIOD_CLK_ENABLE();
 8004f4e:	401a      	ands	r2, r3
 8004f50:	9204      	str	r2, [sp, #16]
 8004f52:	9b04      	ldr	r3, [sp, #16]

  //GPIOC
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8004f54:	23f0      	movs	r3, #240	; 0xf0
 8004f56:	019b      	lsls	r3, r3, #6
 8004f58:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f5a:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f5c:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8004f5e:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f60:	f001 fbca 	bl	80066f8 <HAL_GPIO_Init>

  //GPIOB
  GPIO_InitStruct.Pin = GPIO_PIN_2|
 8004f64:	4b1a      	ldr	r3, [pc, #104]	; (8004fd0 <GPIO_Init+0xc8>)
		  	  	  	  	GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;

  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f66:	a905      	add	r1, sp, #20
 8004f68:	481a      	ldr	r0, [pc, #104]	; (8004fd4 <GPIO_Init+0xcc>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  //GPIOB
  GPIO_InitStruct.Pin = GPIO_PIN_2|
 8004f6a:	9305      	str	r3, [sp, #20]
		  	  	  	  	GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;

  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f6c:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004f6e:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8004f70:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f72:	f001 fbc1 	bl	80066f8 <HAL_GPIO_Init>

  //TLACITKA
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8004f76:	23f0      	movs	r3, #240	; 0xf0
 8004f78:	40b3      	lsls	r3, r6
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f7a:	27a0      	movs	r7, #160	; 0xa0
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  //TLACITKA
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8004f7c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f7e:	05ff      	lsls	r7, r7, #23
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  //TLACITKA
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004f80:	4b15      	ldr	r3, [pc, #84]	; (8004fd8 <GPIO_Init+0xd0>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f82:	1c38      	adds	r0, r7, #0
 8004f84:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  //TLACITKA
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004f86:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004f88:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8004f8a:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f8c:	f001 fbb4 	bl	80066f8 <HAL_GPIO_Init>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 3, 0);
 8004f90:	1c2a      	adds	r2, r5, #0
 8004f92:	2103      	movs	r1, #3
 8004f94:	2007      	movs	r0, #7
 8004f96:	f001 fd53 	bl	8006a40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8004f9a:	2007      	movs	r0, #7
 8004f9c:	f001 fd82 	bl	8006aa4 <HAL_NVIC_EnableIRQ>

  //GPIOA
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004fa0:	2380      	movs	r3, #128	; 0x80
 8004fa2:	021b      	lsls	r3, r3, #8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fa4:	1c38      	adds	r0, r7, #0
 8004fa6:	a905      	add	r1, sp, #20

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 3, 0);
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);

  //GPIOA
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004fa8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004faa:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fac:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8004fae:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fb0:	f001 fba2 	bl	80066f8 <HAL_GPIO_Init>
  //PD2
  GPIO_InitStruct.Pin = GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004fb4:	4809      	ldr	r0, [pc, #36]	; (8004fdc <GPIO_Init+0xd4>)
 8004fb6:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  //PD2
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004fb8:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004fba:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004fbc:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8004fbe:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004fc0:	f001 fb9a 	bl	80066f8 <HAL_GPIO_Init>

}
 8004fc4:	b00b      	add	sp, #44	; 0x2c
 8004fc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fc8:	40021000 	.word	0x40021000
 8004fcc:	50000800 	.word	0x50000800
 8004fd0:	00001c04 	.word	0x00001c04
 8004fd4:	50000400 	.word	0x50000400
 8004fd8:	10210000 	.word	0x10210000
 8004fdc:	50000c00 	.word	0x50000c00

08004fe0 <SystemClock_Config>:

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

  __PWR_CLK_ENABLE();
 8004fe0:	4b24      	ldr	r3, [pc, #144]	; (8005074 <SystemClock_Config+0x94>)
 8004fe2:	2280      	movs	r2, #128	; 0x80
 8004fe4:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004fe6:	0552      	lsls	r2, r2, #21
 8004fe8:	430a      	orrs	r2, r1
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

}

void SystemClock_Config(void)
{
 8004fea:	b530      	push	{r4, r5, lr}

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

  __PWR_CLK_ENABLE();
 8004fec:	639a      	str	r2, [r3, #56]	; 0x38

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004fee:	4b22      	ldr	r3, [pc, #136]	; (8005078 <SystemClock_Config+0x98>)
 8004ff0:	4a22      	ldr	r2, [pc, #136]	; (800507c <SystemClock_Config+0x9c>)
 8004ff2:	6819      	ldr	r1, [r3, #0]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

}

void SystemClock_Config(void)
{
 8004ff4:	b09d      	sub	sp, #116	; 0x74
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

  __PWR_CLK_ENABLE();

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004ff6:	400a      	ands	r2, r1
 8004ff8:	2180      	movs	r1, #128	; 0x80
 8004ffa:	0109      	lsls	r1, r1, #4
 8004ffc:	430a      	orrs	r2, r1
 8004ffe:	601a      	str	r2, [r3, #0]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005000:	2380      	movs	r3, #128	; 0x80
 8005002:	025b      	lsls	r3, r3, #9
 8005004:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005006:	9319      	str	r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8005008:	2380      	movs	r3, #128	; 0x80
 800500a:	02db      	lsls	r3, r3, #11
 800500c:	931a      	str	r3, [sp, #104]	; 0x68
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800500e:	2210      	movs	r2, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8005010:	2380      	movs	r3, #128	; 0x80
 8005012:	03db      	lsls	r3, r3, #15

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005014:	2501      	movs	r5, #1

  __PWR_CLK_ENABLE();

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8005016:	2403      	movs	r4, #3
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8005018:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800501a:	a80e      	add	r0, sp, #56	; 0x38

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800501c:	2202      	movs	r2, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 800501e:	931b      	str	r3, [sp, #108]	; 0x6c

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005020:	9218      	str	r2, [sp, #96]	; 0x60

  __PWR_CLK_ENABLE();

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8005022:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005024:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8005026:	f000 ffb1 	bl	8005f8c <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1);
 800502a:	1c29      	adds	r1, r5, #0
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
  HAL_RCC_OscConfig(&RCC_OscInitStruct);

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800502c:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1);
 800502e:	a801      	add	r0, sp, #4
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
  HAL_RCC_OscConfig(&RCC_OscInitStruct);

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005030:	2400      	movs	r4, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
  HAL_RCC_OscConfig(&RCC_OscInitStruct);

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK;
 8005032:	9501      	str	r5, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005034:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005036:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005038:	9405      	str	r4, [sp, #20]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1);
 800503a:	f001 f9e3 	bl	8006404 <HAL_RCC_ClockConfig>

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800503e:	a806      	add	r0, sp, #24
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1);

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005040:	9506      	str	r5, [sp, #24]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8005042:	9407      	str	r4, [sp, #28]
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8005044:	f000 fefc 	bl	8005e40 <HAL_RCCEx_PeriphCLKConfig>

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8005048:	f001 fb22 	bl	8006690 <HAL_RCC_GetHCLKFreq>
 800504c:	21fa      	movs	r1, #250	; 0xfa
 800504e:	0089      	lsls	r1, r1, #2
 8005050:	f7fb f878 	bl	8000144 <__aeabi_uidiv>
 8005054:	f001 fd3e 	bl	8006ad4 <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8005058:	426d      	negs	r5, r5
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800505a:	2004      	movs	r0, #4
 800505c:	f001 fd54 	bl	8006b08 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8005060:	1c28      	adds	r0, r5, #0
 8005062:	1c21      	adds	r1, r4, #0
 8005064:	1c22      	adds	r2, r4, #0
 8005066:	f001 fceb 	bl	8006a40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SysTick_IRQn);
 800506a:	1c28      	adds	r0, r5, #0
 800506c:	f001 fd1a 	bl	8006aa4 <HAL_NVIC_EnableIRQ>
}
 8005070:	b01d      	add	sp, #116	; 0x74
 8005072:	bd30      	pop	{r4, r5, pc}
 8005074:	40021000 	.word	0x40021000
 8005078:	40007000 	.word	0x40007000
 800507c:	ffffe7ff 	.word	0xffffe7ff

08005080 <LCD_strobe>:

GPIO_InitTypeDef DisplayGPIO;


// Send strobe to LCD via E line
void LCD_strobe(void){
 8005080:	b538      	push	{r3, r4, r5, lr}
	HAL_GPIO_WritePin(E_REG,E_PIN,SET);
 8005082:	4d0a      	ldr	r5, [pc, #40]	; (80050ac <LCD_strobe+0x2c>)
 8005084:	2480      	movs	r4, #128	; 0x80
 8005086:	0224      	lsls	r4, r4, #8
 8005088:	1c28      	adds	r0, r5, #0
 800508a:	1c21      	adds	r1, r4, #0
 800508c:	2201      	movs	r2, #1
 800508e:	f001 fbed 	bl	800686c <HAL_GPIO_WritePin>
	HAL_Delay(4); // Due to datasheet E cycle time is about ~500ns
 8005092:	2004      	movs	r0, #4
 8005094:	f001 ffe8 	bl	8007068 <HAL_Delay>
	HAL_GPIO_WritePin(E_REG,E_PIN,RESET);
 8005098:	1c28      	adds	r0, r5, #0
 800509a:	1c21      	adds	r1, r4, #0
 800509c:	2200      	movs	r2, #0
 800509e:	f001 fbe5 	bl	800686c <HAL_GPIO_WritePin>
	HAL_Delay(4); // Due to datasheet E cycle time is about ~500ns
 80050a2:	2004      	movs	r0, #4
 80050a4:	f001 ffe0 	bl	8007068 <HAL_Delay>
}
 80050a8:	bd38      	pop	{r3, r4, r5, pc}
 80050aa:	46c0      	nop			; (mov r8, r8)
 80050ac:	50000800 	.word	0x50000800

080050b0 <LCD_send_4bit>:

// Send low nibble of cmd to LCD via 4bit bus
void LCD_send_4bit(uint8_t cmd) {
 80050b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	HAL_GPIO_WritePin(D1_REG,D1_PIN,cmd & (1<<0) ? SET : RESET);
 80050b2:	4f11      	ldr	r7, [pc, #68]	; (80050f8 <LCD_send_4bit+0x48>)
 80050b4:	2680      	movs	r6, #128	; 0x80
 80050b6:	2401      	movs	r4, #1
 80050b8:	0076      	lsls	r6, r6, #1
 80050ba:	1c02      	adds	r2, r0, #0
	HAL_GPIO_WritePin(E_REG,E_PIN,RESET);
	HAL_Delay(4); // Due to datasheet E cycle time is about ~500ns
}

// Send low nibble of cmd to LCD via 4bit bus
void LCD_send_4bit(uint8_t cmd) {
 80050bc:	1c05      	adds	r5, r0, #0
	HAL_GPIO_WritePin(D1_REG,D1_PIN,cmd & (1<<0) ? SET : RESET);
 80050be:	1c31      	adds	r1, r6, #0
 80050c0:	1c38      	adds	r0, r7, #0
 80050c2:	4022      	ands	r2, r4
 80050c4:	f001 fbd2 	bl	800686c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D2_REG,D2_PIN,cmd & (1<<1) ? SET : RESET);
 80050c8:	086a      	lsrs	r2, r5, #1
 80050ca:	2180      	movs	r1, #128	; 0x80
 80050cc:	1c38      	adds	r0, r7, #0
 80050ce:	4022      	ands	r2, r4
 80050d0:	0089      	lsls	r1, r1, #2
 80050d2:	f001 fbcb 	bl	800686c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_REG,D3_PIN,cmd & (1<<2) ? SET : RESET);
 80050d6:	08aa      	lsrs	r2, r5, #2
 80050d8:	20a0      	movs	r0, #160	; 0xa0
 80050da:	2180      	movs	r1, #128	; 0x80
 80050dc:	4022      	ands	r2, r4
 80050de:	05c0      	lsls	r0, r0, #23
 80050e0:	0149      	lsls	r1, r1, #5
 80050e2:	f001 fbc3 	bl	800686c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_REG,D4_PIN,cmd & (1<<3) ? SET : RESET);
 80050e6:	08ea      	lsrs	r2, r5, #3
 80050e8:	1c31      	adds	r1, r6, #0
 80050ea:	4022      	ands	r2, r4
 80050ec:	4803      	ldr	r0, [pc, #12]	; (80050fc <LCD_send_4bit+0x4c>)
 80050ee:	f001 fbbd 	bl	800686c <HAL_GPIO_WritePin>
	LCD_strobe();
 80050f2:	f7ff ffc5 	bl	8005080 <LCD_strobe>
}
 80050f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050f8:	50000800 	.word	0x50000800
 80050fc:	50000400 	.word	0x50000400

08005100 <LCD_cmd_4bit>:

// Send command to LCD via 4bit bus
void LCD_cmd_4bit(uint8_t cmd) {
 8005100:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(RS_REG,RS_PIN,RESET);
 8005102:	2180      	movs	r1, #128	; 0x80
 8005104:	0089      	lsls	r1, r1, #2
 8005106:	2200      	movs	r2, #0
	HAL_GPIO_WritePin(D4_REG,D4_PIN,cmd & (1<<3) ? SET : RESET);
	LCD_strobe();
}

// Send command to LCD via 4bit bus
void LCD_cmd_4bit(uint8_t cmd) {
 8005108:	1c04      	adds	r4, r0, #0
	HAL_GPIO_WritePin(RS_REG,RS_PIN,RESET);
 800510a:	4806      	ldr	r0, [pc, #24]	; (8005124 <LCD_cmd_4bit+0x24>)
 800510c:	f001 fbae 	bl	800686c <HAL_GPIO_WritePin>
    LCD_send_4bit(cmd>>4); // send high nibble
 8005110:	0920      	lsrs	r0, r4, #4
 8005112:	f7ff ffcd 	bl	80050b0 <LCD_send_4bit>
    LCD_send_4bit(cmd); // send low nibble
 8005116:	1c20      	adds	r0, r4, #0
 8005118:	f7ff ffca 	bl	80050b0 <LCD_send_4bit>
    HAL_Delay(1); // typical command takes about 39us
 800511c:	2001      	movs	r0, #1
 800511e:	f001 ffa3 	bl	8007068 <HAL_Delay>
}
 8005122:	bd10      	pop	{r4, pc}
 8005124:	50000400 	.word	0x50000400

08005128 <LCD_data_4bit>:

// Send data to LCD via 4bit bus
void LCD_data_4bit(uint8_t data) {
 8005128:	b570      	push	{r4, r5, r6, lr}
	HAL_GPIO_WritePin(RS_REG,RS_PIN,SET);
 800512a:	4d0c      	ldr	r5, [pc, #48]	; (800515c <LCD_data_4bit+0x34>)
 800512c:	2480      	movs	r4, #128	; 0x80
 800512e:	00a4      	lsls	r4, r4, #2
    LCD_send_4bit(cmd); // send low nibble
    HAL_Delay(1); // typical command takes about 39us
}

// Send data to LCD via 4bit bus
void LCD_data_4bit(uint8_t data) {
 8005130:	1c06      	adds	r6, r0, #0
	HAL_GPIO_WritePin(RS_REG,RS_PIN,SET);
 8005132:	1c21      	adds	r1, r4, #0
 8005134:	1c28      	adds	r0, r5, #0
 8005136:	2201      	movs	r2, #1
 8005138:	f001 fb98 	bl	800686c <HAL_GPIO_WritePin>
    LCD_send_4bit(data>>4);                 // send high nibble
 800513c:	0930      	lsrs	r0, r6, #4
 800513e:	f7ff ffb7 	bl	80050b0 <LCD_send_4bit>
    LCD_send_4bit(data);                    // send low nibble
 8005142:	1c30      	adds	r0, r6, #0
 8005144:	f7ff ffb4 	bl	80050b0 <LCD_send_4bit>
    HAL_GPIO_WritePin(RS_REG,RS_PIN,RESET);
 8005148:	1c28      	adds	r0, r5, #0
 800514a:	1c21      	adds	r1, r4, #0
 800514c:	2200      	movs	r2, #0
 800514e:	f001 fb8d 	bl	800686c <HAL_GPIO_WritePin>
    HAL_Delay(1);                           // write data to RAM takes about 43us
 8005152:	2001      	movs	r0, #1
 8005154:	f001 ff88 	bl	8007068 <HAL_Delay>
}
 8005158:	bd70      	pop	{r4, r5, r6, pc}
 800515a:	46c0      	nop			; (mov r8, r8)
 800515c:	50000400 	.word	0x50000400

08005160 <LCD_GotoXY>:

// Set cursor position on LCD
// column : Column position
// line   : Line position
void LCD_GotoXY(int column, int line) {
 8005160:	b508      	push	{r3, lr}
    LCD_cmd_4bit((column+(line<<6)) | 0x80);  // Set DDRAM address with coordinates
 8005162:	0189      	lsls	r1, r1, #6
 8005164:	2380      	movs	r3, #128	; 0x80
 8005166:	1808      	adds	r0, r1, r0
 8005168:	425b      	negs	r3, r3
 800516a:	4318      	orrs	r0, r3
 800516c:	b2c0      	uxtb	r0, r0
 800516e:	f7ff ffc7 	bl	8005100 <LCD_cmd_4bit>
}
 8005172:	bd08      	pop	{r3, pc}

08005174 <LCD_Cls>:
	LCD_GotoXY(0,0);
	LCD_Cls();
}

// Clear LCD display and set cursor at first position
void LCD_Cls(void) {
 8005174:	b508      	push	{r3, lr}
	LCD_cmd_4bit(0x01); // Clear display command
 8005176:	2001      	movs	r0, #1
 8005178:	f7ff ffc2 	bl	8005100 <LCD_cmd_4bit>
	HAL_Delay(2); // Numb display does it at least 1.53ms
 800517c:	2002      	movs	r0, #2
 800517e:	f001 ff73 	bl	8007068 <HAL_Delay>
	LCD_cmd_4bit(0x02); // Return Home command
 8005182:	2002      	movs	r0, #2
 8005184:	f7ff ffbc 	bl	8005100 <LCD_cmd_4bit>
	HAL_Delay(2); // Numb display does it at least 1.53ms
 8005188:	2002      	movs	r0, #2
 800518a:	f001 ff6d 	bl	8007068 <HAL_Delay>
}
 800518e:	bd08      	pop	{r3, pc}

08005190 <LCD_Init>:
// line   : Line position
void LCD_GotoXY(int column, int line) {
    LCD_cmd_4bit((column+(line<<6)) | 0x80);  // Set DDRAM address with coordinates
}

void LCD_Init(){
 8005190:	b5f0      	push	{r4, r5, r6, r7, lr}
	//inicializacia GPIO
	__GPIOC_CLK_ENABLE();
 8005192:	4d31      	ldr	r5, [pc, #196]	; (8005258 <LCD_Init+0xc8>)
 8005194:	2304      	movs	r3, #4
 8005196:	6aea      	ldr	r2, [r5, #44]	; 0x2c
// line   : Line position
void LCD_GotoXY(int column, int line) {
    LCD_cmd_4bit((column+(line<<6)) | 0x80);  // Set DDRAM address with coordinates
}

void LCD_Init(){
 8005198:	b085      	sub	sp, #20
	//inicializacia GPIO
	__GPIOC_CLK_ENABLE();
 800519a:	431a      	orrs	r2, r3
 800519c:	62ea      	str	r2, [r5, #44]	; 0x2c
 800519e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
	DisplayGPIO.Pin = 	GPIO_PIN_8|GPIO_PIN_9|
 80051a0:	4c2e      	ldr	r4, [pc, #184]	; (800525c <LCD_Init+0xcc>)
    LCD_cmd_4bit((column+(line<<6)) | 0x80);  // Set DDRAM address with coordinates
}

void LCD_Init(){
	//inicializacia GPIO
	__GPIOC_CLK_ENABLE();
 80051a2:	4013      	ands	r3, r2
 80051a4:	9301      	str	r3, [sp, #4]
 80051a6:	9b01      	ldr	r3, [sp, #4]
	DisplayGPIO.Pin = 	GPIO_PIN_8|GPIO_PIN_9|
 80051a8:	23c3      	movs	r3, #195	; 0xc3
 80051aa:	021b      	lsls	r3, r3, #8
							GPIO_PIN_14|GPIO_PIN_15;
	DisplayGPIO.Mode = GPIO_MODE_OUTPUT_PP;
	DisplayGPIO.Pull = GPIO_PULLDOWN;
 80051ac:	2602      	movs	r6, #2
void LCD_Init(){
	//inicializacia GPIO
	__GPIOC_CLK_ENABLE();
	DisplayGPIO.Pin = 	GPIO_PIN_8|GPIO_PIN_9|
							GPIO_PIN_14|GPIO_PIN_15;
	DisplayGPIO.Mode = GPIO_MODE_OUTPUT_PP;
 80051ae:	2701      	movs	r7, #1
}

void LCD_Init(){
	//inicializacia GPIO
	__GPIOC_CLK_ENABLE();
	DisplayGPIO.Pin = 	GPIO_PIN_8|GPIO_PIN_9|
 80051b0:	6023      	str	r3, [r4, #0]
							GPIO_PIN_14|GPIO_PIN_15;
	DisplayGPIO.Mode = GPIO_MODE_OUTPUT_PP;
	DisplayGPIO.Pull = GPIO_PULLDOWN;
	DisplayGPIO.Speed = GPIO_SPEED_LOW;
	HAL_GPIO_Init(GPIOC, &DisplayGPIO);
 80051b2:	1c21      	adds	r1, r4, #0
	__GPIOC_CLK_ENABLE();
	DisplayGPIO.Pin = 	GPIO_PIN_8|GPIO_PIN_9|
							GPIO_PIN_14|GPIO_PIN_15;
	DisplayGPIO.Mode = GPIO_MODE_OUTPUT_PP;
	DisplayGPIO.Pull = GPIO_PULLDOWN;
	DisplayGPIO.Speed = GPIO_SPEED_LOW;
 80051b4:	2300      	movs	r3, #0
	HAL_GPIO_Init(GPIOC, &DisplayGPIO);
 80051b6:	482a      	ldr	r0, [pc, #168]	; (8005260 <LCD_Init+0xd0>)
	__GPIOC_CLK_ENABLE();
	DisplayGPIO.Pin = 	GPIO_PIN_8|GPIO_PIN_9|
							GPIO_PIN_14|GPIO_PIN_15;
	DisplayGPIO.Mode = GPIO_MODE_OUTPUT_PP;
	DisplayGPIO.Pull = GPIO_PULLDOWN;
	DisplayGPIO.Speed = GPIO_SPEED_LOW;
 80051b8:	60e3      	str	r3, [r4, #12]
void LCD_Init(){
	//inicializacia GPIO
	__GPIOC_CLK_ENABLE();
	DisplayGPIO.Pin = 	GPIO_PIN_8|GPIO_PIN_9|
							GPIO_PIN_14|GPIO_PIN_15;
	DisplayGPIO.Mode = GPIO_MODE_OUTPUT_PP;
 80051ba:	6067      	str	r7, [r4, #4]
	DisplayGPIO.Pull = GPIO_PULLDOWN;
 80051bc:	60a6      	str	r6, [r4, #8]
	DisplayGPIO.Speed = GPIO_SPEED_LOW;
	HAL_GPIO_Init(GPIOC, &DisplayGPIO);
 80051be:	f001 fa9b 	bl	80066f8 <HAL_GPIO_Init>

	__GPIOB_CLK_ENABLE();
 80051c2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	DisplayGPIO.Pin = GPIO_PIN_8|GPIO_PIN_9;
	DisplayGPIO.Mode = GPIO_MODE_OUTPUT_PP;
	DisplayGPIO.Pull = GPIO_PULLDOWN;
	DisplayGPIO.Speed = GPIO_SPEED_LOW;
	HAL_GPIO_Init(GPIOB, &DisplayGPIO);
 80051c4:	1c21      	adds	r1, r4, #0
	DisplayGPIO.Mode = GPIO_MODE_OUTPUT_PP;
	DisplayGPIO.Pull = GPIO_PULLDOWN;
	DisplayGPIO.Speed = GPIO_SPEED_LOW;
	HAL_GPIO_Init(GPIOC, &DisplayGPIO);

	__GPIOB_CLK_ENABLE();
 80051c6:	4333      	orrs	r3, r6
 80051c8:	62eb      	str	r3, [r5, #44]	; 0x2c
 80051ca:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	DisplayGPIO.Pin = GPIO_PIN_8|GPIO_PIN_9;
	DisplayGPIO.Mode = GPIO_MODE_OUTPUT_PP;
	DisplayGPIO.Pull = GPIO_PULLDOWN;
	DisplayGPIO.Speed = GPIO_SPEED_LOW;
	HAL_GPIO_Init(GPIOB, &DisplayGPIO);
 80051cc:	4825      	ldr	r0, [pc, #148]	; (8005264 <LCD_Init+0xd4>)
	DisplayGPIO.Mode = GPIO_MODE_OUTPUT_PP;
	DisplayGPIO.Pull = GPIO_PULLDOWN;
	DisplayGPIO.Speed = GPIO_SPEED_LOW;
	HAL_GPIO_Init(GPIOC, &DisplayGPIO);

	__GPIOB_CLK_ENABLE();
 80051ce:	4033      	ands	r3, r6
 80051d0:	9302      	str	r3, [sp, #8]
 80051d2:	9b02      	ldr	r3, [sp, #8]
	DisplayGPIO.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80051d4:	23c0      	movs	r3, #192	; 0xc0
 80051d6:	40b3      	lsls	r3, r6
 80051d8:	6023      	str	r3, [r4, #0]
	DisplayGPIO.Mode = GPIO_MODE_OUTPUT_PP;
	DisplayGPIO.Pull = GPIO_PULLDOWN;
	DisplayGPIO.Speed = GPIO_SPEED_LOW;
 80051da:	2300      	movs	r3, #0
 80051dc:	60e3      	str	r3, [r4, #12]
	DisplayGPIO.Speed = GPIO_SPEED_LOW;
	HAL_GPIO_Init(GPIOC, &DisplayGPIO);

	__GPIOB_CLK_ENABLE();
	DisplayGPIO.Pin = GPIO_PIN_8|GPIO_PIN_9;
	DisplayGPIO.Mode = GPIO_MODE_OUTPUT_PP;
 80051de:	6067      	str	r7, [r4, #4]
	DisplayGPIO.Pull = GPIO_PULLDOWN;
 80051e0:	60a6      	str	r6, [r4, #8]
	DisplayGPIO.Speed = GPIO_SPEED_LOW;
	HAL_GPIO_Init(GPIOB, &DisplayGPIO);
 80051e2:	f001 fa89 	bl	80066f8 <HAL_GPIO_Init>

	__GPIOA_CLK_ENABLE();
 80051e6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	DisplayGPIO.Pin = GPIO_PIN_12;
	DisplayGPIO.Mode = GPIO_MODE_OUTPUT_PP;
	DisplayGPIO.Pull = GPIO_PULLDOWN;
	DisplayGPIO.Speed = GPIO_SPEED_LOW;
	HAL_GPIO_Init(GPIOA, &DisplayGPIO);
 80051e8:	20a0      	movs	r0, #160	; 0xa0
	DisplayGPIO.Mode = GPIO_MODE_OUTPUT_PP;
	DisplayGPIO.Pull = GPIO_PULLDOWN;
	DisplayGPIO.Speed = GPIO_SPEED_LOW;
	HAL_GPIO_Init(GPIOB, &DisplayGPIO);

	__GPIOA_CLK_ENABLE();
 80051ea:	433b      	orrs	r3, r7
 80051ec:	62eb      	str	r3, [r5, #44]	; 0x2c
 80051ee:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	DisplayGPIO.Pin = GPIO_PIN_12;
	DisplayGPIO.Mode = GPIO_MODE_OUTPUT_PP;
	DisplayGPIO.Pull = GPIO_PULLDOWN;
	DisplayGPIO.Speed = GPIO_SPEED_LOW;
	HAL_GPIO_Init(GPIOA, &DisplayGPIO);
 80051f0:	1c21      	adds	r1, r4, #0
	DisplayGPIO.Mode = GPIO_MODE_OUTPUT_PP;
	DisplayGPIO.Pull = GPIO_PULLDOWN;
	DisplayGPIO.Speed = GPIO_SPEED_LOW;
	HAL_GPIO_Init(GPIOB, &DisplayGPIO);

	__GPIOA_CLK_ENABLE();
 80051f2:	403b      	ands	r3, r7
 80051f4:	9303      	str	r3, [sp, #12]
 80051f6:	9b03      	ldr	r3, [sp, #12]
	DisplayGPIO.Pin = GPIO_PIN_12;
 80051f8:	2380      	movs	r3, #128	; 0x80
 80051fa:	015b      	lsls	r3, r3, #5
 80051fc:	6023      	str	r3, [r4, #0]
	DisplayGPIO.Mode = GPIO_MODE_OUTPUT_PP;
	DisplayGPIO.Pull = GPIO_PULLDOWN;
	DisplayGPIO.Speed = GPIO_SPEED_LOW;
	HAL_GPIO_Init(GPIOA, &DisplayGPIO);
 80051fe:	05c0      	lsls	r0, r0, #23

	__GPIOA_CLK_ENABLE();
	DisplayGPIO.Pin = GPIO_PIN_12;
	DisplayGPIO.Mode = GPIO_MODE_OUTPUT_PP;
	DisplayGPIO.Pull = GPIO_PULLDOWN;
	DisplayGPIO.Speed = GPIO_SPEED_LOW;
 8005200:	2300      	movs	r3, #0
 8005202:	60e3      	str	r3, [r4, #12]
	DisplayGPIO.Speed = GPIO_SPEED_LOW;
	HAL_GPIO_Init(GPIOB, &DisplayGPIO);

	__GPIOA_CLK_ENABLE();
	DisplayGPIO.Pin = GPIO_PIN_12;
	DisplayGPIO.Mode = GPIO_MODE_OUTPUT_PP;
 8005204:	6067      	str	r7, [r4, #4]
	DisplayGPIO.Pull = GPIO_PULLDOWN;
 8005206:	60a6      	str	r6, [r4, #8]
	DisplayGPIO.Speed = GPIO_SPEED_LOW;
	HAL_GPIO_Init(GPIOA, &DisplayGPIO);
 8005208:	f001 fa76 	bl	80066f8 <HAL_GPIO_Init>

	HAL_Delay(30);              // must wait >=30us after LCD Vdd rises to 4.5V
 800520c:	201e      	movs	r0, #30
 800520e:	f001 ff2b 	bl	8007068 <HAL_Delay>
	LCD_send_4bit(0b00000011); // select 4-bit bus (still 8bit)
 8005212:	2003      	movs	r0, #3
 8005214:	f7ff ff4c 	bl	80050b0 <LCD_send_4bit>
	HAL_Delay(5);               // must wait more than 4.1ms
 8005218:	2005      	movs	r0, #5
 800521a:	f001 ff25 	bl	8007068 <HAL_Delay>
	LCD_send_4bit(0b00000011); // select 4-bit bus (still 8bit)
 800521e:	2003      	movs	r0, #3
 8005220:	f7ff ff46 	bl	80050b0 <LCD_send_4bit>
	HAL_Delay(150);             // must wait more than 100us
 8005224:	2096      	movs	r0, #150	; 0x96
 8005226:	f001 ff1f 	bl	8007068 <HAL_Delay>
	LCD_send_4bit(0b00000011); // select 4-bit bus (still 8bit)
 800522a:	2003      	movs	r0, #3
 800522c:	f7ff ff40 	bl	80050b0 <LCD_send_4bit>
	LCD_send_4bit(0b00000010); // Function set: 4-bit bus (gotcha!)
 8005230:	1c30      	adds	r0, r6, #0
 8005232:	f7ff ff3d 	bl	80050b0 <LCD_send_4bit>

	LCD_cmd_4bit(0x28); // LCD Function: 2 Lines, 5x8 matrix
 8005236:	2028      	movs	r0, #40	; 0x28
 8005238:	f7ff ff62 	bl	8005100 <LCD_cmd_4bit>
	LCD_cmd_4bit(0x0C); // Display control: Display: on, cursor: off
 800523c:	200c      	movs	r0, #12
 800523e:	f7ff ff5f 	bl	8005100 <LCD_cmd_4bit>
	LCD_cmd_4bit(0x06); // Entry mode: increment, shift disabled
 8005242:	2006      	movs	r0, #6
 8005244:	f7ff ff5c 	bl	8005100 <LCD_cmd_4bit>

// Set cursor position on LCD
// column : Column position
// line   : Line position
void LCD_GotoXY(int column, int line) {
    LCD_cmd_4bit((column+(line<<6)) | 0x80);  // Set DDRAM address with coordinates
 8005248:	2080      	movs	r0, #128	; 0x80
 800524a:	f7ff ff59 	bl	8005100 <LCD_cmd_4bit>
	LCD_cmd_4bit(0x28); // LCD Function: 2 Lines, 5x8 matrix
	LCD_cmd_4bit(0x0C); // Display control: Display: on, cursor: off
	LCD_cmd_4bit(0x06); // Entry mode: increment, shift disabled

	LCD_GotoXY(0,0);
	LCD_Cls();
 800524e:	f7ff ff91 	bl	8005174 <LCD_Cls>
}
 8005252:	b005      	add	sp, #20
 8005254:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005256:	46c0      	nop			; (mov r8, r8)
 8005258:	40021000 	.word	0x40021000
 800525c:	20000a18 	.word	0x20000a18
 8005260:	50000800 	.word	0x50000800
 8005264:	50000400 	.word	0x50000400

08005268 <LCD_Print>:
	LCD_cmd_4bit(0x02); // Return Home command
	HAL_Delay(2); // Numb display does it at least 1.53ms
}

// Send string to LCD
void LCD_Print(char *string) {
 8005268:	b510      	push	{r4, lr}
 800526a:	1c04      	adds	r4, r0, #0
    while (*string) { LCD_data_4bit(*string++); }
 800526c:	7820      	ldrb	r0, [r4, #0]
 800526e:	2800      	cmp	r0, #0
 8005270:	d003      	beq.n	800527a <LCD_Print+0x12>
 8005272:	3401      	adds	r4, #1
 8005274:	f7ff ff58 	bl	8005128 <LCD_data_4bit>
 8005278:	e7f8      	b.n	800526c <LCD_Print+0x4>
}
 800527a:	bd10      	pop	{r4, pc}

0800527c <HAL_UARTEx_WakeupCallback>:
 __weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_WakeupCallback can be implemented in the user file
   */
}
 800527c:	4770      	bx	lr
	...

08005280 <HAL_UART_Receive_IT>:
  * @param pData: pointer to data buffer
  * @param Size: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005280:	b570      	push	{r4, r5, r6, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8005282:	1c04      	adds	r4, r0, #0
 8005284:	3469      	adds	r4, #105	; 0x69
  * @param pData: pointer to data buffer
  * @param Size: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005286:	1c03      	adds	r3, r0, #0
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8005288:	7820      	ldrb	r0, [r4, #0]
 800528a:	2801      	cmp	r0, #1
 800528c:	d003      	beq.n	8005296 <HAL_UART_Receive_IT+0x16>
 800528e:	7825      	ldrb	r5, [r4, #0]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY; 
 8005290:	2002      	movs	r0, #2
  * @param Size: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8005292:	2d12      	cmp	r5, #18
 8005294:	d148      	bne.n	8005328 <HAL_UART_Receive_IT+0xa8>
  {
    if((pData == NULL ) || (Size == 0)) 
    {
      return HAL_ERROR;
 8005296:	2001      	movs	r0, #1
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
  {
    if((pData == NULL ) || (Size == 0)) 
 8005298:	2900      	cmp	r1, #0
 800529a:	d045      	beq.n	8005328 <HAL_UART_Receive_IT+0xa8>
 800529c:	2a00      	cmp	r2, #0
 800529e:	d043      	beq.n	8005328 <HAL_UART_Receive_IT+0xa8>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80052a0:	1c1d      	adds	r5, r3, #0
 80052a2:	3568      	adds	r5, #104	; 0x68
 80052a4:	782e      	ldrb	r6, [r5, #0]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY; 
 80052a6:	2002      	movs	r0, #2
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80052a8:	2e01      	cmp	r6, #1
 80052aa:	d03d      	beq.n	8005328 <HAL_UART_Receive_IT+0xa8>
 80052ac:	2001      	movs	r0, #1
 80052ae:	7028      	strb	r0, [r5, #0]

    huart->pRxBuffPtr = pData;
 80052b0:	6559      	str	r1, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 80052b2:	1c19      	adds	r1, r3, #0
 80052b4:	3158      	adds	r1, #88	; 0x58
 80052b6:	800a      	strh	r2, [r1, #0]
    huart->RxXferCount = Size;
 80052b8:	804a      	strh	r2, [r1, #2]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80052ba:	689a      	ldr	r2, [r3, #8]
 80052bc:	2180      	movs	r1, #128	; 0x80
 80052be:	0149      	lsls	r1, r1, #5
 80052c0:	428a      	cmp	r2, r1
 80052c2:	d104      	bne.n	80052ce <HAL_UART_Receive_IT+0x4e>
 80052c4:	691a      	ldr	r2, [r3, #16]
 80052c6:	2a00      	cmp	r2, #0
 80052c8:	d106      	bne.n	80052d8 <HAL_UART_Receive_IT+0x58>
 80052ca:	4918      	ldr	r1, [pc, #96]	; (800532c <HAL_UART_Receive_IT+0xac>)
 80052cc:	e010      	b.n	80052f0 <HAL_UART_Receive_IT+0x70>
 80052ce:	2a00      	cmp	r2, #0
 80052d0:	d106      	bne.n	80052e0 <HAL_UART_Receive_IT+0x60>
 80052d2:	691a      	ldr	r2, [r3, #16]
 80052d4:	2a00      	cmp	r2, #0
 80052d6:	d101      	bne.n	80052dc <HAL_UART_Receive_IT+0x5c>
 80052d8:	21ff      	movs	r1, #255	; 0xff
 80052da:	e009      	b.n	80052f0 <HAL_UART_Receive_IT+0x70>
 80052dc:	217f      	movs	r1, #127	; 0x7f
 80052de:	e007      	b.n	80052f0 <HAL_UART_Receive_IT+0x70>
 80052e0:	2180      	movs	r1, #128	; 0x80
 80052e2:	0549      	lsls	r1, r1, #21
 80052e4:	428a      	cmp	r2, r1
 80052e6:	d106      	bne.n	80052f6 <HAL_UART_Receive_IT+0x76>
 80052e8:	691a      	ldr	r2, [r3, #16]
 80052ea:	2a00      	cmp	r2, #0
 80052ec:	d0f6      	beq.n	80052dc <HAL_UART_Receive_IT+0x5c>
 80052ee:	213f      	movs	r1, #63	; 0x3f
 80052f0:	1c1a      	adds	r2, r3, #0
 80052f2:	325c      	adds	r2, #92	; 0x5c
 80052f4:	8011      	strh	r1, [r2, #0]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052f6:	2200      	movs	r2, #0
 80052f8:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Check if a transmit process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX) 
 80052fa:	7822      	ldrb	r2, [r4, #0]
 80052fc:	2a12      	cmp	r2, #18
 80052fe:	d101      	bne.n	8005304 <HAL_UART_Receive_IT+0x84>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8005300:	2232      	movs	r2, #50	; 0x32
 8005302:	e000      	b.n	8005306 <HAL_UART_Receive_IT+0x86>
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
 8005304:	2222      	movs	r2, #34	; 0x22
    }

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005306:	681b      	ldr	r3, [r3, #0]
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
 8005308:	7022      	strb	r2, [r4, #0]
    }

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800530a:	6819      	ldr	r1, [r3, #0]
 800530c:	2280      	movs	r2, #128	; 0x80
 800530e:	0052      	lsls	r2, r2, #1
 8005310:	430a      	orrs	r2, r1
 8005312:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005314:	689a      	ldr	r2, [r3, #8]
 8005316:	2101      	movs	r1, #1
 8005318:	430a      	orrs	r2, r1
 800531a:	609a      	str	r2, [r3, #8]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	2120      	movs	r1, #32

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005320:	2000      	movs	r0, #0

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005322:	430a      	orrs	r2, r1

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005324:	7028      	strb	r0, [r5, #0]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005326:	601a      	str	r2, [r3, #0]
  }
  else
  {
    return HAL_BUSY; 
  }
}
 8005328:	bd70      	pop	{r4, r5, r6, pc}
 800532a:	46c0      	nop			; (mov r8, r8)
 800532c:	000001ff 	.word	0x000001ff

08005330 <HAL_UART_TxCpltCallback>:
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback could be implemented in the user file
   */ 
}
 8005330:	4770      	bx	lr

08005332 <HAL_UART_ErrorCallback>:
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file
   */ 
}
 8005332:	4770      	bx	lr

08005334 <HAL_UART_IRQHandler>:
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
  /* UART parity error interrupt occurred ------------------------------------*/

  if((__HAL_UART_GET_IT(huart, UART_IT_PE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE) != RESET))
 8005334:	6803      	ldr	r3, [r0, #0]
 8005336:	2201      	movs	r2, #1
 8005338:	69d9      	ldr	r1, [r3, #28]
  * @brief This function handles UART interrupt request.
  * @param huart: uart handle
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800533a:	b570      	push	{r4, r5, r6, lr}
 800533c:	1c04      	adds	r4, r0, #0
  /* UART parity error interrupt occurred ------------------------------------*/

  if((__HAL_UART_GET_IT(huart, UART_IT_PE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE) != RESET))
 800533e:	4211      	tst	r1, r2
 8005340:	d009      	beq.n	8005356 <HAL_UART_IRQHandler+0x22>
 8005342:	6819      	ldr	r1, [r3, #0]
 8005344:	05c8      	lsls	r0, r1, #23
 8005346:	d506      	bpl.n	8005356 <HAL_UART_IRQHandler+0x22>
  { 
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8005348:	621a      	str	r2, [r3, #32]
    
    huart->ErrorCode |= HAL_UART_ERROR_PE;
 800534a:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800534c:	4311      	orrs	r1, r2
 800534e:	66e1      	str	r1, [r4, #108]	; 0x6c
    /* Set the UART state ready to be able to start again the process */
    huart->State = HAL_UART_STATE_READY;
 8005350:	1c21      	adds	r1, r4, #0
 8005352:	3169      	adds	r1, #105	; 0x69
 8005354:	700a      	strb	r2, [r1, #0]
  }
  
  /* UART frame error interrupt occured --------------------------------------*/
  if((__HAL_UART_GET_IT(huart, UART_IT_FE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8005356:	69da      	ldr	r2, [r3, #28]
 8005358:	2102      	movs	r1, #2
 800535a:	420a      	tst	r2, r1
 800535c:	d00b      	beq.n	8005376 <HAL_UART_IRQHandler+0x42>
 800535e:	6898      	ldr	r0, [r3, #8]
 8005360:	2201      	movs	r2, #1
 8005362:	4210      	tst	r0, r2
 8005364:	d007      	beq.n	8005376 <HAL_UART_IRQHandler+0x42>
  { 
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8005366:	6219      	str	r1, [r3, #32]
    
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005368:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800536a:	2004      	movs	r0, #4
 800536c:	4301      	orrs	r1, r0
 800536e:	66e1      	str	r1, [r4, #108]	; 0x6c
    /* Set the UART state ready to be able to start again the process */
    huart->State = HAL_UART_STATE_READY;
 8005370:	1c21      	adds	r1, r4, #0
 8005372:	3169      	adds	r1, #105	; 0x69
 8005374:	700a      	strb	r2, [r1, #0]
  }
  
  /* UART noise error interrupt occured --------------------------------------*/
  if((__HAL_UART_GET_IT(huart, UART_IT_NE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8005376:	69da      	ldr	r2, [r3, #28]
 8005378:	2104      	movs	r1, #4
 800537a:	420a      	tst	r2, r1
 800537c:	d00b      	beq.n	8005396 <HAL_UART_IRQHandler+0x62>
 800537e:	6898      	ldr	r0, [r3, #8]
 8005380:	2201      	movs	r2, #1
 8005382:	4210      	tst	r0, r2
 8005384:	d007      	beq.n	8005396 <HAL_UART_IRQHandler+0x62>
  { 
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8005386:	6219      	str	r1, [r3, #32]
    
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005388:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800538a:	2002      	movs	r0, #2
 800538c:	4301      	orrs	r1, r0
 800538e:	66e1      	str	r1, [r4, #108]	; 0x6c
    /* Set the UART state ready to be able to start again the process */
    huart->State = HAL_UART_STATE_READY;
 8005390:	1c21      	adds	r1, r4, #0
 8005392:	3169      	adds	r1, #105	; 0x69
 8005394:	700a      	strb	r2, [r1, #0]
  }
  
  /* UART Over-Run interrupt occured -----------------------------------------*/
  if((__HAL_UART_GET_IT(huart, UART_IT_ORE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8005396:	69d9      	ldr	r1, [r3, #28]
 8005398:	2208      	movs	r2, #8
 800539a:	4211      	tst	r1, r2
 800539c:	d00a      	beq.n	80053b4 <HAL_UART_IRQHandler+0x80>
 800539e:	6898      	ldr	r0, [r3, #8]
 80053a0:	2101      	movs	r1, #1
 80053a2:	4208      	tst	r0, r1
 80053a4:	d006      	beq.n	80053b4 <HAL_UART_IRQHandler+0x80>
  { 
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 80053a6:	621a      	str	r2, [r3, #32]
    
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80053a8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80053aa:	431a      	orrs	r2, r3
    /* Set the UART state ready to be able to start again the process */
    huart->State = HAL_UART_STATE_READY;
 80053ac:	1c23      	adds	r3, r4, #0
 80053ae:	3369      	adds	r3, #105	; 0x69
  /* UART Over-Run interrupt occured -----------------------------------------*/
  if((__HAL_UART_GET_IT(huart, UART_IT_ORE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
  { 
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
    
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80053b0:	66e2      	str	r2, [r4, #108]	; 0x6c
    /* Set the UART state ready to be able to start again the process */
    huart->State = HAL_UART_STATE_READY;
 80053b2:	7019      	strb	r1, [r3, #0]
  }

   /* Call UART Error Call back function if need be --------------------------*/
  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80053b4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d002      	beq.n	80053c0 <HAL_UART_IRQHandler+0x8c>
  {
    HAL_UART_ErrorCallback(huart);
 80053ba:	1c20      	adds	r0, r4, #0
 80053bc:	f7ff ffb9 	bl	8005332 <HAL_UART_ErrorCallback>
  }

  /* UART Wake Up interrupt occured ------------------------------------------*/
  if((__HAL_UART_GET_IT(huart, UART_IT_WUF) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_WUF) != RESET))
 80053c0:	6823      	ldr	r3, [r4, #0]
 80053c2:	2280      	movs	r2, #128	; 0x80
 80053c4:	69d9      	ldr	r1, [r3, #28]
 80053c6:	0352      	lsls	r2, r2, #13
 80053c8:	4211      	tst	r1, r2
 80053ca:	d00a      	beq.n	80053e2 <HAL_UART_IRQHandler+0xae>
 80053cc:	6899      	ldr	r1, [r3, #8]
 80053ce:	024d      	lsls	r5, r1, #9
 80053d0:	d507      	bpl.n	80053e2 <HAL_UART_IRQHandler+0xae>
  { 
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 80053d2:	621a      	str	r2, [r3, #32]
    /* Set the UART state ready to be able to start again the process */
    huart->State = HAL_UART_STATE_READY;
 80053d4:	1c23      	adds	r3, r4, #0
 80053d6:	2201      	movs	r2, #1
 80053d8:	3369      	adds	r3, #105	; 0x69
 80053da:	701a      	strb	r2, [r3, #0]
    HAL_UARTEx_WakeupCallback(huart);
 80053dc:	1c20      	adds	r0, r4, #0
 80053de:	f7ff ff4d 	bl	800527c <HAL_UARTEx_WakeupCallback>
  }
  
  /* UART in mode Receiver ---------------------------------------------------*/
  if((__HAL_UART_GET_IT(huart, UART_IT_RXNE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE) != RESET))
 80053e2:	6821      	ldr	r1, [r4, #0]
 80053e4:	2320      	movs	r3, #32
 80053e6:	69ca      	ldr	r2, [r1, #28]
 80053e8:	421a      	tst	r2, r3
 80053ea:	d043      	beq.n	8005474 <HAL_UART_IRQHandler+0x140>
 80053ec:	680a      	ldr	r2, [r1, #0]
 80053ee:	421a      	tst	r2, r3
 80053f0:	d040      	beq.n	8005474 <HAL_UART_IRQHandler+0x140>
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  uint16_t uhMask = huart->Mask;
 80053f2:	1c23      	adds	r3, r4, #0

  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 80053f4:	1c22      	adds	r2, r4, #0
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  uint16_t uhMask = huart->Mask;
 80053f6:	335c      	adds	r3, #92	; 0x5c

  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 80053f8:	3269      	adds	r2, #105	; 0x69
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  uint16_t uhMask = huart->Mask;
 80053fa:	8818      	ldrh	r0, [r3, #0]

  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 80053fc:	7813      	ldrb	r3, [r2, #0]
 80053fe:	2b22      	cmp	r3, #34	; 0x22
 8005400:	d002      	beq.n	8005408 <HAL_UART_IRQHandler+0xd4>
 8005402:	7813      	ldrb	r3, [r2, #0]
 8005404:	2b32      	cmp	r3, #50	; 0x32
 8005406:	d135      	bne.n	8005474 <HAL_UART_IRQHandler+0x140>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005408:	68a6      	ldr	r6, [r4, #8]
 800540a:	2580      	movs	r5, #128	; 0x80
 800540c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800540e:	016d      	lsls	r5, r5, #5
 8005410:	42ae      	cmp	r6, r5
 8005412:	d108      	bne.n	8005426 <HAL_UART_IRQHandler+0xf2>
 8005414:	6925      	ldr	r5, [r4, #16]
 8005416:	2d00      	cmp	r5, #0
 8005418:	d105      	bne.n	8005426 <HAL_UART_IRQHandler+0xf2>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr ;
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 800541a:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800541c:	4008      	ands	r0, r1
 800541e:	8018      	strh	r0, [r3, #0]
      huart->pRxBuffPtr +=2;
 8005420:	3302      	adds	r3, #2
 8005422:	6563      	str	r3, [r4, #84]	; 0x54
 8005424:	e004      	b.n	8005430 <HAL_UART_IRQHandler+0xfc>
    }
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask); 
 8005426:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8005428:	1c5d      	adds	r5, r3, #1
 800542a:	4008      	ands	r0, r1
 800542c:	6565      	str	r5, [r4, #84]	; 0x54
 800542e:	7018      	strb	r0, [r3, #0]
    }

    if(--huart->RxXferCount == 0)
 8005430:	1c21      	adds	r1, r4, #0
 8005432:	315a      	adds	r1, #90	; 0x5a
 8005434:	880b      	ldrh	r3, [r1, #0]
 8005436:	3b01      	subs	r3, #1
 8005438:	b29b      	uxth	r3, r3
 800543a:	800b      	strh	r3, [r1, #0]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d119      	bne.n	8005474 <HAL_UART_IRQHandler+0x140>
    {
      while(HAL_IS_BIT_SET(huart->Instance->ISR, UART_FLAG_RXNE))
 8005440:	6823      	ldr	r3, [r4, #0]
 8005442:	69d8      	ldr	r0, [r3, #28]
 8005444:	2120      	movs	r1, #32
 8005446:	4208      	tst	r0, r1
 8005448:	d1fb      	bne.n	8005442 <HAL_UART_IRQHandler+0x10e>
      {
      }
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800544a:	6818      	ldr	r0, [r3, #0]
 800544c:	4388      	bics	r0, r1
 800544e:	6018      	str	r0, [r3, #0]

      /* Check if a transmit Process is ongoing or not */
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 8005450:	7811      	ldrb	r1, [r2, #0]
 8005452:	2932      	cmp	r1, #50	; 0x32
 8005454:	d102      	bne.n	800545c <HAL_UART_IRQHandler+0x128>
      {
        huart->State = HAL_UART_STATE_BUSY_TX;
 8005456:	2312      	movs	r3, #18
 8005458:	7013      	strb	r3, [r2, #0]
 800545a:	e008      	b.n	800546e <HAL_UART_IRQHandler+0x13a>
      }
      else
      {
        /* Disable the UART Parity Error Interrupt */
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800545c:	6818      	ldr	r0, [r3, #0]
 800545e:	492b      	ldr	r1, [pc, #172]	; (800550c <HAL_UART_IRQHandler+0x1d8>)
 8005460:	4001      	ands	r1, r0
 8005462:	6019      	str	r1, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005464:	6898      	ldr	r0, [r3, #8]
 8005466:	2101      	movs	r1, #1
 8005468:	4388      	bics	r0, r1
 800546a:	6098      	str	r0, [r3, #8]

        huart->State = HAL_UART_STATE_READY;
 800546c:	7011      	strb	r1, [r2, #0]
      }
      HAL_UART_RxCpltCallback(huart);
 800546e:	1c20      	adds	r0, r4, #0
 8005470:	f7ff fa8e 	bl	8004990 <HAL_UART_RxCpltCallback>
  { 
    UART_Receive_IT(huart);
  }
  
  /* UART in mode Transmitter ------------------------------------------------*/
  if((__HAL_UART_GET_IT(huart, UART_IT_TXE) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE) != RESET))
 8005474:	6823      	ldr	r3, [r4, #0]
 8005476:	2280      	movs	r2, #128	; 0x80
 8005478:	69d9      	ldr	r1, [r3, #28]
 800547a:	4211      	tst	r1, r2
 800547c:	d02e      	beq.n	80054dc <HAL_UART_IRQHandler+0x1a8>
 800547e:	6819      	ldr	r1, [r3, #0]
 8005480:	4211      	tst	r1, r2
 8005482:	d02b      	beq.n	80054dc <HAL_UART_IRQHandler+0x1a8>
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8005484:	1c22      	adds	r2, r4, #0
 8005486:	3269      	adds	r2, #105	; 0x69
 8005488:	7811      	ldrb	r1, [r2, #0]
 800548a:	2912      	cmp	r1, #18
 800548c:	d002      	beq.n	8005494 <HAL_UART_IRQHandler+0x160>
 800548e:	7812      	ldrb	r2, [r2, #0]
 8005490:	2a32      	cmp	r2, #50	; 0x32
 8005492:	d123      	bne.n	80054dc <HAL_UART_IRQHandler+0x1a8>
  {
    if(huart->TxXferCount == 0)
 8005494:	1c21      	adds	r1, r4, #0
 8005496:	3152      	adds	r1, #82	; 0x52
 8005498:	8808      	ldrh	r0, [r1, #0]
 800549a:	2800      	cmp	r0, #0
 800549c:	d108      	bne.n	80054b0 <HAL_UART_IRQHandler+0x17c>
    {
      /* Disable the UART TXE Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	2180      	movs	r1, #128	; 0x80
 80054a2:	438a      	bics	r2, r1
 80054a4:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */    
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	2140      	movs	r1, #64	; 0x40
 80054aa:	430a      	orrs	r2, r1
 80054ac:	601a      	str	r2, [r3, #0]
 80054ae:	e015      	b.n	80054dc <HAL_UART_IRQHandler+0x1a8>
      return HAL_OK;
      
    }
    else
    {
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054b0:	68a6      	ldr	r6, [r4, #8]
 80054b2:	2580      	movs	r5, #128	; 0x80
 80054b4:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80054b6:	016d      	lsls	r5, r5, #5
 80054b8:	42ae      	cmp	r6, r5
 80054ba:	d109      	bne.n	80054d0 <HAL_UART_IRQHandler+0x19c>
 80054bc:	6925      	ldr	r5, [r4, #16]
 80054be:	2d00      	cmp	r5, #0
 80054c0:	d106      	bne.n	80054d0 <HAL_UART_IRQHandler+0x19c>
      {
        tmp = (uint16_t*) huart->pTxBuffPtr;
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 80054c2:	8815      	ldrh	r5, [r2, #0]
        huart->pTxBuffPtr += 2;
 80054c4:	3202      	adds	r2, #2
    else
    {
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
      {
        tmp = (uint16_t*) huart->pTxBuffPtr;
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 80054c6:	05ed      	lsls	r5, r5, #23
 80054c8:	0ded      	lsrs	r5, r5, #23
 80054ca:	629d      	str	r5, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2;
 80054cc:	64e2      	str	r2, [r4, #76]	; 0x4c
 80054ce:	e003      	b.n	80054d8 <HAL_UART_IRQHandler+0x1a4>
      } 
      else
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFF);
 80054d0:	1c55      	adds	r5, r2, #1
 80054d2:	64e5      	str	r5, [r4, #76]	; 0x4c
 80054d4:	7812      	ldrb	r2, [r2, #0]
 80054d6:	629a      	str	r2, [r3, #40]	; 0x28
      }

      huart->TxXferCount--;
 80054d8:	3801      	subs	r0, #1
 80054da:	8008      	strh	r0, [r1, #0]
  {
    UART_Transmit_IT(huart);
  }

  /* UART in mode Transmitter -- TC ------------------------------------------*/
 if((__HAL_UART_GET_IT(huart, UART_IT_TC) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC) != RESET))
 80054dc:	69d9      	ldr	r1, [r3, #28]
 80054de:	2240      	movs	r2, #64	; 0x40
 80054e0:	4211      	tst	r1, r2
 80054e2:	d011      	beq.n	8005508 <HAL_UART_IRQHandler+0x1d4>
 80054e4:	6819      	ldr	r1, [r3, #0]
 80054e6:	4211      	tst	r1, r2
 80054e8:	d00e      	beq.n	8005508 <HAL_UART_IRQHandler+0x1d4>
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */    
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80054ea:	6819      	ldr	r1, [r3, #0]
 80054ec:	4391      	bics	r1, r2
 80054ee:	6019      	str	r1, [r3, #0]
  
  /* Check if a receive process is ongoing or not */
  if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 80054f0:	1c23      	adds	r3, r4, #0
 80054f2:	3369      	adds	r3, #105	; 0x69
 80054f4:	781a      	ldrb	r2, [r3, #0]
 80054f6:	2a32      	cmp	r2, #50	; 0x32
 80054f8:	d101      	bne.n	80054fe <HAL_UART_IRQHandler+0x1ca>
  {
    huart->State = HAL_UART_STATE_BUSY_RX;
 80054fa:	2222      	movs	r2, #34	; 0x22
 80054fc:	e000      	b.n	8005500 <HAL_UART_IRQHandler+0x1cc>
  }
  else
  {
    huart->State = HAL_UART_STATE_READY;
 80054fe:	2201      	movs	r2, #1
 8005500:	701a      	strb	r2, [r3, #0]
  }
  
  HAL_UART_TxCpltCallback(huart);
 8005502:	1c20      	adds	r0, r4, #0
 8005504:	f7ff ff14 	bl	8005330 <HAL_UART_TxCpltCallback>
  /* UART in mode Transmitter -- TC ------------------------------------------*/
 if((__HAL_UART_GET_IT(huart, UART_IT_TC) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC) != RESET))
  {
    UART_EndTransmit_IT(huart);
  }    
}
 8005508:	bd70      	pop	{r4, r5, r6, pc}
 800550a:	46c0      	nop			; (mov r8, r8)
 800550c:	fffffeff 	.word	0xfffffeff

08005510 <UART_SetConfig>:
  * @brief Configure the UART peripheral 
  * @param huart: uart handle
  * @retval None
  */
void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005512:	1c06      	adds	r6, r0, #0
   *  the UART Word Length, Parity, Mode and oversampling: 
   *  set the M bits according to huart->Init.WordLength value 
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005514:	68b3      	ldr	r3, [r6, #8]
 8005516:	6931      	ldr	r1, [r6, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8005518:	6807      	ldr	r7, [r0, #0]
   *  the UART Word Length, Parity, Mode and oversampling: 
   *  set the M bits according to huart->Init.WordLength value 
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800551a:	4319      	orrs	r1, r3
 800551c:	6973      	ldr	r3, [r6, #20]
 800551e:	69c2      	ldr	r2, [r0, #28]
 8005520:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8005522:	6838      	ldr	r0, [r7, #0]
 8005524:	4b6a      	ldr	r3, [pc, #424]	; (80056d0 <UART_SetConfig+0x1c0>)
   *  the UART Word Length, Parity, Mode and oversampling: 
   *  set the M bits according to huart->Init.WordLength value 
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005526:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8005528:	4003      	ands	r3, r0
 800552a:	430b      	orrs	r3, r1
 800552c:	603b      	str	r3, [r7, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800552e:	6879      	ldr	r1, [r7, #4]
 8005530:	4b68      	ldr	r3, [pc, #416]	; (80056d4 <UART_SetConfig+0x1c4>)
 8005532:	68f0      	ldr	r0, [r6, #12]
 8005534:	400b      	ands	r3, r1
   * - UART HardWare Flow Control: set CTSE and RTSE bits according 
   *   to huart->Init.HwFlowCtl value 
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005536:	4968      	ldr	r1, [pc, #416]	; (80056d8 <UART_SetConfig+0x1c8>)
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005538:	4303      	orrs	r3, r0
 800553a:	607b      	str	r3, [r7, #4]
  /* Configure 
   * - UART HardWare Flow Control: set CTSE and RTSE bits according 
   *   to huart->Init.HwFlowCtl value 
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800553c:	69b3      	ldr	r3, [r6, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800553e:	428f      	cmp	r7, r1
 8005540:	d001      	beq.n	8005546 <UART_SetConfig+0x36>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005542:	6a30      	ldr	r0, [r6, #32]
 8005544:	4303      	orrs	r3, r0
  }
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8005546:	68bc      	ldr	r4, [r7, #8]
 8005548:	4864      	ldr	r0, [pc, #400]	; (80056dc <UART_SetConfig+0x1cc>)
 800554a:	4020      	ands	r0, r4
 800554c:	4303      	orrs	r3, r0
 800554e:	60bb      	str	r3, [r7, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005550:	4b63      	ldr	r3, [pc, #396]	; (80056e0 <UART_SetConfig+0x1d0>)
 8005552:	429f      	cmp	r7, r3
 8005554:	d105      	bne.n	8005562 <UART_SetConfig+0x52>
 8005556:	4b63      	ldr	r3, [pc, #396]	; (80056e4 <UART_SetConfig+0x1d4>)
 8005558:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800555a:	2303      	movs	r3, #3
 800555c:	400b      	ands	r3, r1
 800555e:	4962      	ldr	r1, [pc, #392]	; (80056e8 <UART_SetConfig+0x1d8>)
 8005560:	e00b      	b.n	800557a <UART_SetConfig+0x6a>
 8005562:	4b62      	ldr	r3, [pc, #392]	; (80056ec <UART_SetConfig+0x1dc>)
 8005564:	429f      	cmp	r7, r3
 8005566:	d10a      	bne.n	800557e <UART_SetConfig+0x6e>
 8005568:	4b5e      	ldr	r3, [pc, #376]	; (80056e4 <UART_SetConfig+0x1d4>)
 800556a:	2000      	movs	r0, #0
 800556c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800556e:	230c      	movs	r3, #12
 8005570:	400b      	ands	r3, r1
 8005572:	3b04      	subs	r3, #4
 8005574:	2b08      	cmp	r3, #8
 8005576:	d847      	bhi.n	8005608 <UART_SetConfig+0xf8>
 8005578:	495d      	ldr	r1, [pc, #372]	; (80056f0 <UART_SetConfig+0x1e0>)
 800557a:	5cc8      	ldrb	r0, [r1, r3]
 800557c:	e044      	b.n	8005608 <UART_SetConfig+0xf8>
 800557e:	2000      	movs	r0, #0
 8005580:	428f      	cmp	r7, r1
 8005582:	d141      	bne.n	8005608 <UART_SetConfig+0xf8>
 8005584:	4a57      	ldr	r2, [pc, #348]	; (80056e4 <UART_SetConfig+0x1d4>)
 8005586:	21c0      	movs	r1, #192	; 0xc0
 8005588:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800558a:	0109      	lsls	r1, r1, #4
 800558c:	2080      	movs	r0, #128	; 0x80
 800558e:	400b      	ands	r3, r1
 8005590:	0100      	lsls	r0, r0, #4
 8005592:	4283      	cmp	r3, r0
 8005594:	d008      	beq.n	80055a8 <UART_SetConfig+0x98>
 8005596:	428b      	cmp	r3, r1
 8005598:	d02e      	beq.n	80055f8 <UART_SetConfig+0xe8>
 800559a:	2280      	movs	r2, #128	; 0x80
 800559c:	00d2      	lsls	r2, r2, #3
 800559e:	4293      	cmp	r3, r2
 80055a0:	d018      	beq.n	80055d4 <UART_SetConfig+0xc4>
  if(UART_INSTANCE_LOWPOWER(huart))
  {
    switch (clocksource)
    {
    case UART_CLOCKSOURCE_PCLK1: 
      huart->Instance->BRR = (uint32_t)(__DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80055a2:	f001 f889 	bl	80066b8 <HAL_RCC_GetPCLK1Freq>
 80055a6:	e017      	b.n	80055d8 <UART_SetConfig+0xc8>
      break;
    case UART_CLOCKSOURCE_HSI: 
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0)
 80055a8:	6813      	ldr	r3, [r2, #0]
      {    
        huart->Instance->BRR = (uint32_t)(__DIV_LPUART((HSI_VALUE >> 2), huart->Init.BaudRate)); 
 80055aa:	6870      	ldr	r0, [r6, #4]
    {
    case UART_CLOCKSOURCE_PCLK1: 
      huart->Instance->BRR = (uint32_t)(__DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_HSI: 
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0)
 80055ac:	06d9      	lsls	r1, r3, #27
 80055ae:	d50a      	bpl.n	80055c6 <UART_SetConfig+0xb6>
      {    
        huart->Instance->BRR = (uint32_t)(__DIV_LPUART((HSI_VALUE >> 2), huart->Init.BaudRate)); 
 80055b0:	f7fd fa64 	bl	8002a7c <__aeabi_ui2d>
 80055b4:	1c02      	adds	r2, r0, #0
 80055b6:	1c0b      	adds	r3, r1, #0
 80055b8:	493e      	ldr	r1, [pc, #248]	; (80056b4 <UART_SetConfig+0x1a4>)
 80055ba:	483d      	ldr	r0, [pc, #244]	; (80056b0 <UART_SetConfig+0x1a0>)
 80055bc:	f7fb ffc8 	bl	8001550 <__aeabi_ddiv>
 80055c0:	f7fa ff0a 	bl	80003d8 <__aeabi_d2uiz>
 80055c4:	e06f      	b.n	80056a6 <UART_SetConfig+0x196>
      }
      else 
      {
        huart->Instance->BRR = (uint32_t)(__DIV_LPUART(HSI_VALUE, huart->Init.BaudRate)); 
 80055c6:	f7fd fa59 	bl	8002a7c <__aeabi_ui2d>
 80055ca:	1c02      	adds	r2, r0, #0
 80055cc:	1c0b      	adds	r3, r1, #0
 80055ce:	483a      	ldr	r0, [pc, #232]	; (80056b8 <UART_SetConfig+0x1a8>)
 80055d0:	493a      	ldr	r1, [pc, #232]	; (80056bc <UART_SetConfig+0x1ac>)
 80055d2:	e7f3      	b.n	80055bc <UART_SetConfig+0xac>
      }
      break; 
    case UART_CLOCKSOURCE_SYSCLK:  
      huart->Instance->BRR = (uint32_t)(__DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80055d4:	f001 f820 	bl	8006618 <HAL_RCC_GetSysClockFreq>
 80055d8:	f7fd fa50 	bl	8002a7c <__aeabi_ui2d>
 80055dc:	4a38      	ldr	r2, [pc, #224]	; (80056c0 <UART_SetConfig+0x1b0>)
 80055de:	4b39      	ldr	r3, [pc, #228]	; (80056c4 <UART_SetConfig+0x1b4>)
 80055e0:	f7fc fc20 	bl	8001e24 <__aeabi_dmul>
 80055e4:	1c04      	adds	r4, r0, #0
 80055e6:	6870      	ldr	r0, [r6, #4]
 80055e8:	1c0d      	adds	r5, r1, #0
 80055ea:	f7fd fa47 	bl	8002a7c <__aeabi_ui2d>
 80055ee:	1c02      	adds	r2, r0, #0
 80055f0:	1c0b      	adds	r3, r1, #0
 80055f2:	1c20      	adds	r0, r4, #0
 80055f4:	1c29      	adds	r1, r5, #0
 80055f6:	e7e1      	b.n	80055bc <UART_SetConfig+0xac>
      break;  
    case UART_CLOCKSOURCE_LSE:
      huart->Instance->BRR = (uint32_t)(__DIV_LPUART(LSE_VALUE, huart->Init.BaudRate)); 
 80055f8:	6870      	ldr	r0, [r6, #4]
 80055fa:	f7fd fa3f 	bl	8002a7c <__aeabi_ui2d>
 80055fe:	1c02      	adds	r2, r0, #0
 8005600:	1c0b      	adds	r3, r1, #0
 8005602:	4831      	ldr	r0, [pc, #196]	; (80056c8 <UART_SetConfig+0x1b8>)
 8005604:	4931      	ldr	r1, [pc, #196]	; (80056cc <UART_SetConfig+0x1bc>)
 8005606:	e7d9      	b.n	80055bc <UART_SetConfig+0xac>
    default:
      break;
    }
  }
  /* Check the UART Over Sampling 8 to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005608:	2380      	movs	r3, #128	; 0x80
 800560a:	021b      	lsls	r3, r3, #8
 800560c:	429a      	cmp	r2, r3
 800560e:	d12b      	bne.n	8005668 <UART_SetConfig+0x158>
  { 
    switch (clocksource)
 8005610:	2808      	cmp	r0, #8
 8005612:	d81f      	bhi.n	8005654 <UART_SetConfig+0x144>
 8005614:	f7fa fd82 	bl	800011c <__gnu_thumb1_case_uqi>
 8005618:	1e0b0805 	.word	0x1e0b0805
 800561c:	1e1e1e13 	.word	0x1e1e1e13
 8005620:	17          	.byte	0x17
 8005621:	00          	.byte	0x00
    {
    case UART_CLOCKSOURCE_PCLK1:
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005622:	f001 f849 	bl	80066b8 <HAL_RCC_GetPCLK1Freq>
 8005626:	e00c      	b.n	8005642 <UART_SetConfig+0x132>
      break;
    case UART_CLOCKSOURCE_PCLK2:
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005628:	f001 f856 	bl	80066d8 <HAL_RCC_GetPCLK2Freq>
 800562c:	e009      	b.n	8005642 <UART_SetConfig+0x132>
      break;
    case UART_CLOCKSOURCE_HSI:
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0)
 800562e:	4b2d      	ldr	r3, [pc, #180]	; (80056e4 <UART_SetConfig+0x1d4>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	06da      	lsls	r2, r3, #27
 8005634:	d501      	bpl.n	800563a <UART_SetConfig+0x12a>
      {    
        usartdiv = (uint32_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2), huart->Init.BaudRate)); 
 8005636:	482f      	ldr	r0, [pc, #188]	; (80056f4 <UART_SetConfig+0x1e4>)
 8005638:	e007      	b.n	800564a <UART_SetConfig+0x13a>
      }
      else 
      {
        usartdiv = (uint32_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate)); 
 800563a:	482f      	ldr	r0, [pc, #188]	; (80056f8 <UART_SetConfig+0x1e8>)
 800563c:	e005      	b.n	800564a <UART_SetConfig+0x13a>
      }
      break;
    case UART_CLOCKSOURCE_SYSCLK:
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800563e:	f000 ffeb 	bl	8006618 <HAL_RCC_GetSysClockFreq>
 8005642:	0040      	lsls	r0, r0, #1
 8005644:	e001      	b.n	800564a <UART_SetConfig+0x13a>
      break;
    case UART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005646:	2080      	movs	r0, #128	; 0x80
 8005648:	0240      	lsls	r0, r0, #9
 800564a:	6871      	ldr	r1, [r6, #4]
 800564c:	f7fa fd7a 	bl	8000144 <__aeabi_uidiv>
 8005650:	b280      	uxth	r0, r0
      break;
 8005652:	e000      	b.n	8005656 <UART_SetConfig+0x146>
void UART_SetConfig(UART_HandleTypeDef *huart)
{
  uint32_t tmpreg = 0x00000000;
  uint32_t clocksource = 0x00000000;
  uint16_t brrtemp = 0x0000;
  uint16_t usartdiv = 0x0000;
 8005654:	2000      	movs	r0, #0
      break;
    default:
      break;
    }
    
    brrtemp = usartdiv & 0xFFF0;
 8005656:	230f      	movs	r3, #15
 8005658:	1c01      	adds	r1, r0, #0
    brrtemp |= (uint16_t)((uint16_t)(usartdiv & (uint16_t)0x000F) >> (uint16_t)1);
 800565a:	4018      	ands	r0, r3
      break;
    default:
      break;
    }
    
    brrtemp = usartdiv & 0xFFF0;
 800565c:	4399      	bics	r1, r3
    brrtemp |= (uint16_t)((uint16_t)(usartdiv & (uint16_t)0x000F) >> (uint16_t)1);
    huart->Instance->BRR = brrtemp;
 800565e:	6832      	ldr	r2, [r6, #0]
    default:
      break;
    }
    
    brrtemp = usartdiv & 0xFFF0;
    brrtemp |= (uint16_t)((uint16_t)(usartdiv & (uint16_t)0x000F) >> (uint16_t)1);
 8005660:	1040      	asrs	r0, r0, #1
    huart->Instance->BRR = brrtemp;
 8005662:	4308      	orrs	r0, r1
 8005664:	60d0      	str	r0, [r2, #12]
 8005666:	e01f      	b.n	80056a8 <UART_SetConfig+0x198>
  }
  else
  {
    switch (clocksource)
 8005668:	2808      	cmp	r0, #8
 800566a:	d81d      	bhi.n	80056a8 <UART_SetConfig+0x198>
 800566c:	f7fa fd56 	bl	800011c <__gnu_thumb1_case_uqi>
 8005670:	1c0b0805 	.word	0x1c0b0805
 8005674:	1c1c1c13 	.word	0x1c1c1c13
 8005678:	16          	.byte	0x16
 8005679:	00          	.byte	0x00
    {
    case UART_CLOCKSOURCE_PCLK1: 
      huart->Instance->BRR = (uint32_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800567a:	f001 f81d 	bl	80066b8 <HAL_RCC_GetPCLK1Freq>
 800567e:	e00f      	b.n	80056a0 <UART_SetConfig+0x190>
      break;
    case UART_CLOCKSOURCE_PCLK2: 
      huart->Instance->BRR = (uint32_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005680:	f001 f82a 	bl	80066d8 <HAL_RCC_GetPCLK2Freq>
 8005684:	e00c      	b.n	80056a0 <UART_SetConfig+0x190>
      break;
    case UART_CLOCKSOURCE_HSI: 
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0)
 8005686:	4b17      	ldr	r3, [pc, #92]	; (80056e4 <UART_SetConfig+0x1d4>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	06d8      	lsls	r0, r3, #27
 800568c:	d501      	bpl.n	8005692 <UART_SetConfig+0x182>
      {    
        huart->Instance->BRR = (uint32_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2), huart->Init.BaudRate)); 
 800568e:	481b      	ldr	r0, [pc, #108]	; (80056fc <UART_SetConfig+0x1ec>)
 8005690:	e006      	b.n	80056a0 <UART_SetConfig+0x190>
      }
      else 
      {
        huart->Instance->BRR = (uint32_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate)); 
 8005692:	481b      	ldr	r0, [pc, #108]	; (8005700 <UART_SetConfig+0x1f0>)
 8005694:	e004      	b.n	80056a0 <UART_SetConfig+0x190>
      }
      break; 
    case UART_CLOCKSOURCE_SYSCLK:  
      huart->Instance->BRR = (uint32_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005696:	f000 ffbf 	bl	8006618 <HAL_RCC_GetSysClockFreq>
 800569a:	e001      	b.n	80056a0 <UART_SetConfig+0x190>
      break;  
    case UART_CLOCKSOURCE_LSE:
      huart->Instance->BRR = (uint32_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800569c:	2080      	movs	r0, #128	; 0x80
 800569e:	0200      	lsls	r0, r0, #8
 80056a0:	6871      	ldr	r1, [r6, #4]
 80056a2:	f7fa fd4f 	bl	8000144 <__aeabi_uidiv>
 80056a6:	60f8      	str	r0, [r7, #12]
      break;
    default:
      break;
    }
  }
}
 80056a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056aa:	46c0      	nop			; (mov r8, r8)
 80056ac:	46c0      	nop			; (mov r8, r8)
 80056ae:	46c0      	nop			; (mov r8, r8)
 80056b0:	00000000 	.word	0x00000000
 80056b4:	41ce8480 	.word	0x41ce8480
 80056b8:	00000000 	.word	0x00000000
 80056bc:	41ee8480 	.word	0x41ee8480
 80056c0:	00000000 	.word	0x00000000
 80056c4:	40700000 	.word	0x40700000
 80056c8:	00000000 	.word	0x00000000
 80056cc:	41600000 	.word	0x41600000
 80056d0:	efff69f3 	.word	0xefff69f3
 80056d4:	ffffcfff 	.word	0xffffcfff
 80056d8:	40004800 	.word	0x40004800
 80056dc:	fffff4ff 	.word	0xfffff4ff
 80056e0:	40013800 	.word	0x40013800
 80056e4:	40021000 	.word	0x40021000
 80056e8:	0800c304 	.word	0x0800c304
 80056ec:	40004400 	.word	0x40004400
 80056f0:	0800c2fb 	.word	0x0800c2fb
 80056f4:	007a1200 	.word	0x007a1200
 80056f8:	01e84800 	.word	0x01e84800
 80056fc:	003d0900 	.word	0x003d0900
 8005700:	00f42400 	.word	0x00f42400
 8005704:	46c0      	nop			; (mov r8, r8)
 8005706:	46c0      	nop			; (mov r8, r8)

08005708 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */ 
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
  
  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005708:	6a43      	ldr	r3, [r0, #36]	; 0x24
  * @brief Configure the UART peripheral advanced feautures 
  * @param huart: uart handle  
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800570a:	b530      	push	{r4, r5, lr}
  /* Check whether the set of advanced features to configure is properly set */ 
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
  
  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800570c:	07da      	lsls	r2, r3, #31
 800570e:	d506      	bpl.n	800571e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005710:	6802      	ldr	r2, [r0, #0]
 8005712:	4928      	ldr	r1, [pc, #160]	; (80057b4 <UART_AdvFeatureConfig+0xac>)
 8005714:	6854      	ldr	r4, [r2, #4]
 8005716:	4021      	ands	r1, r4
 8005718:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800571a:	4321      	orrs	r1, r4
 800571c:	6051      	str	r1, [r2, #4]
  }
  
  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800571e:	079a      	lsls	r2, r3, #30
 8005720:	d506      	bpl.n	8005730 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005722:	6802      	ldr	r2, [r0, #0]
 8005724:	4924      	ldr	r1, [pc, #144]	; (80057b8 <UART_AdvFeatureConfig+0xb0>)
 8005726:	6854      	ldr	r4, [r2, #4]
 8005728:	4021      	ands	r1, r4
 800572a:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800572c:	4321      	orrs	r1, r4
 800572e:	6051      	str	r1, [r2, #4]
  }
  
  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005730:	075a      	lsls	r2, r3, #29
 8005732:	d506      	bpl.n	8005742 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005734:	6802      	ldr	r2, [r0, #0]
 8005736:	4921      	ldr	r1, [pc, #132]	; (80057bc <UART_AdvFeatureConfig+0xb4>)
 8005738:	6854      	ldr	r4, [r2, #4]
 800573a:	4021      	ands	r1, r4
 800573c:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800573e:	4321      	orrs	r1, r4
 8005740:	6051      	str	r1, [r2, #4]
  }
  
  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005742:	071a      	lsls	r2, r3, #28
 8005744:	d506      	bpl.n	8005754 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005746:	6802      	ldr	r2, [r0, #0]
 8005748:	491d      	ldr	r1, [pc, #116]	; (80057c0 <UART_AdvFeatureConfig+0xb8>)
 800574a:	6854      	ldr	r4, [r2, #4]
 800574c:	4021      	ands	r1, r4
 800574e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8005750:	4321      	orrs	r1, r4
 8005752:	6051      	str	r1, [r2, #4]
  }
  
  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005754:	06da      	lsls	r2, r3, #27
 8005756:	d506      	bpl.n	8005766 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));  
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005758:	6802      	ldr	r2, [r0, #0]
 800575a:	491a      	ldr	r1, [pc, #104]	; (80057c4 <UART_AdvFeatureConfig+0xbc>)
 800575c:	6894      	ldr	r4, [r2, #8]
 800575e:	4021      	ands	r1, r4
 8005760:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8005762:	4321      	orrs	r1, r4
 8005764:	6091      	str	r1, [r2, #8]
  }
  
  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005766:	069a      	lsls	r2, r3, #26
 8005768:	d506      	bpl.n	8005778 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));   
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800576a:	6802      	ldr	r2, [r0, #0]
 800576c:	4916      	ldr	r1, [pc, #88]	; (80057c8 <UART_AdvFeatureConfig+0xc0>)
 800576e:	6894      	ldr	r4, [r2, #8]
 8005770:	4021      	ands	r1, r4
 8005772:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8005774:	4321      	orrs	r1, r4
 8005776:	6091      	str	r1, [r2, #8]
  }
  
  /* if required, configure auto Baud rate detection scheme */              
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005778:	065a      	lsls	r2, r3, #25
 800577a:	d510      	bpl.n	800579e <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800577c:	6802      	ldr	r2, [r0, #0]
 800577e:	4c13      	ldr	r4, [pc, #76]	; (80057cc <UART_AdvFeatureConfig+0xc4>)
 8005780:	6855      	ldr	r5, [r2, #4]
 8005782:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8005784:	402c      	ands	r4, r5
 8005786:	430c      	orrs	r4, r1
 8005788:	6054      	str	r4, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800578a:	2480      	movs	r4, #128	; 0x80
 800578c:	0364      	lsls	r4, r4, #13
 800578e:	42a1      	cmp	r1, r4
 8005790:	d105      	bne.n	800579e <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005792:	6854      	ldr	r4, [r2, #4]
 8005794:	490e      	ldr	r1, [pc, #56]	; (80057d0 <UART_AdvFeatureConfig+0xc8>)
 8005796:	4021      	ands	r1, r4
 8005798:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800579a:	4321      	orrs	r1, r4
 800579c:	6051      	str	r1, [r2, #4]
    }
  }
  
  /* if required, configure MSB first on communication line */  
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800579e:	061a      	lsls	r2, r3, #24
 80057a0:	d506      	bpl.n	80057b0 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));   
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80057a2:	6803      	ldr	r3, [r0, #0]
 80057a4:	4a0b      	ldr	r2, [pc, #44]	; (80057d4 <UART_AdvFeatureConfig+0xcc>)
 80057a6:	6859      	ldr	r1, [r3, #4]
 80057a8:	400a      	ands	r2, r1
 80057aa:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80057ac:	430a      	orrs	r2, r1
 80057ae:	605a      	str	r2, [r3, #4]
  }
}
 80057b0:	bd30      	pop	{r4, r5, pc}
 80057b2:	46c0      	nop			; (mov r8, r8)
 80057b4:	fffdffff 	.word	0xfffdffff
 80057b8:	fffeffff 	.word	0xfffeffff
 80057bc:	fffbffff 	.word	0xfffbffff
 80057c0:	ffff7fff 	.word	0xffff7fff
 80057c4:	ffffefff 	.word	0xffffefff
 80057c8:	ffffdfff 	.word	0xffffdfff
 80057cc:	ffefffff 	.word	0xffefffff
 80057d0:	ff9fffff 	.word	0xff9fffff
 80057d4:	fff7ffff 	.word	0xfff7ffff

080057d8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Status: The new Flag status (SET or RESET).
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Timeout)
{
 80057d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80057da:	1c1d      	adds	r5, r3, #0
 80057dc:	1c04      	adds	r4, r0, #0
 80057de:	1c0e      	adds	r6, r1, #0
 80057e0:	9201      	str	r2, [sp, #4]
  uint32_t tickstart = 0x00;
  tickstart = HAL_GetTick();
 80057e2:	f001 fc3b 	bl	800705c <HAL_GetTick>
  
  /* Wait until flag is set */
  if(Status == RESET)
 80057e6:	9b01      	ldr	r3, [sp, #4]
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Timeout)
{
  uint32_t tickstart = 0x00;
  tickstart = HAL_GetTick();
 80057e8:	1c07      	adds	r7, r0, #0
  
  /* Wait until flag is set */
  if(Status == RESET)
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d136      	bne.n	800585c <UART_WaitOnFlagUntilTimeout+0x84>
  {
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 80057ee:	6822      	ldr	r2, [r4, #0]
 80057f0:	69d3      	ldr	r3, [r2, #28]
 80057f2:	4033      	ands	r3, r6
 80057f4:	42b3      	cmp	r3, r6
 80057f6:	d00f      	beq.n	8005818 <UART_WaitOnFlagUntilTimeout+0x40>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80057f8:	1c6b      	adds	r3, r5, #1
 80057fa:	d0f9      	beq.n	80057f0 <UART_WaitOnFlagUntilTimeout+0x18>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 80057fc:	2d00      	cmp	r5, #0
 80057fe:	d00f      	beq.n	8005820 <UART_WaitOnFlagUntilTimeout+0x48>
 8005800:	f001 fc2c 	bl	800705c <HAL_GetTick>
 8005804:	1bc0      	subs	r0, r0, r7
 8005806:	42a8      	cmp	r0, r5
 8005808:	d9f1      	bls.n	80057ee <UART_WaitOnFlagUntilTimeout+0x16>
 800580a:	e009      	b.n	8005820 <UART_WaitOnFlagUntilTimeout+0x48>
  else
  {
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 800580c:	1c6b      	adds	r3, r5, #1
 800580e:	d105      	bne.n	800581c <UART_WaitOnFlagUntilTimeout+0x44>
      }
    }
  }
  else
  {
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 8005810:	69d3      	ldr	r3, [r2, #28]
 8005812:	4033      	ands	r3, r6
 8005814:	42b3      	cmp	r3, r6
 8005816:	d0f9      	beq.n	800580c <UART_WaitOnFlagUntilTimeout+0x34>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;      
 8005818:	2000      	movs	r0, #0
 800581a:	e021      	b.n	8005860 <UART_WaitOnFlagUntilTimeout+0x88>
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800581c:	2d00      	cmp	r5, #0
 800581e:	d118      	bne.n	8005852 <UART_WaitOnFlagUntilTimeout+0x7a>
        {
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005820:	6823      	ldr	r3, [r4, #0]
 8005822:	2180      	movs	r1, #128	; 0x80
 8005824:	681a      	ldr	r2, [r3, #0]
          huart->State= HAL_UART_STATE_READY;
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
          
          return HAL_TIMEOUT;
 8005826:	2003      	movs	r0, #3
      if(Timeout != HAL_MAX_DELAY)
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
        {
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005828:	438a      	bics	r2, r1
 800582a:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	2120      	movs	r1, #32
 8005830:	438a      	bics	r2, r1
 8005832:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005834:	6819      	ldr	r1, [r3, #0]
 8005836:	4a0b      	ldr	r2, [pc, #44]	; (8005864 <UART_WaitOnFlagUntilTimeout+0x8c>)
 8005838:	400a      	ands	r2, r1
 800583a:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800583c:	6899      	ldr	r1, [r3, #8]
 800583e:	2201      	movs	r2, #1
 8005840:	4391      	bics	r1, r2
 8005842:	6099      	str	r1, [r3, #8]
          
          huart->State= HAL_UART_STATE_READY;
 8005844:	1c23      	adds	r3, r4, #0
 8005846:	3369      	adds	r3, #105	; 0x69
 8005848:	701a      	strb	r2, [r3, #0]
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800584a:	3468      	adds	r4, #104	; 0x68
 800584c:	2300      	movs	r3, #0
 800584e:	7023      	strb	r3, [r4, #0]
          
          return HAL_TIMEOUT;
 8005850:	e006      	b.n	8005860 <UART_WaitOnFlagUntilTimeout+0x88>
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8005852:	f001 fc03 	bl	800705c <HAL_GetTick>
 8005856:	1bc0      	subs	r0, r0, r7
 8005858:	42a8      	cmp	r0, r5
 800585a:	d8e1      	bhi.n	8005820 <UART_WaitOnFlagUntilTimeout+0x48>
      }
    }
  }
  else
  {
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 800585c:	6822      	ldr	r2, [r4, #0]
 800585e:	e7d7      	b.n	8005810 <UART_WaitOnFlagUntilTimeout+0x38>
        }
      }
    }
  }
  return HAL_OK;      
}
 8005860:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005862:	46c0      	nop			; (mov r8, r8)
 8005864:	fffffeff 	.word	0xfffffeff

08005868 <HAL_UART_Transmit>:
  * @param Size: amount of data to be sent
  * @param Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005868:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   uint16_t* tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 800586a:	1c05      	adds	r5, r0, #0
  * @param Size: amount of data to be sent
  * @param Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800586c:	9301      	str	r3, [sp, #4]
   uint16_t* tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 800586e:	3569      	adds	r5, #105	; 0x69
 8005870:	782b      	ldrb	r3, [r5, #0]
  * @param Size: amount of data to be sent
  * @param Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005872:	1c04      	adds	r4, r0, #0
 8005874:	1c0e      	adds	r6, r1, #0
   uint16_t* tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8005876:	2b01      	cmp	r3, #1
 8005878:	d003      	beq.n	8005882 <HAL_UART_Transmit+0x1a>
 800587a:	782b      	ldrb	r3, [r5, #0]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 800587c:	2002      	movs	r0, #2
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
   uint16_t* tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 800587e:	2b22      	cmp	r3, #34	; 0x22
 8005880:	d14d      	bne.n	800591e <HAL_UART_Transmit+0xb6>
  {
    if((pData == NULL ) || (Size == 0))
    {
      return  HAL_ERROR;
 8005882:	2001      	movs	r0, #1
{
   uint16_t* tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
  {
    if((pData == NULL ) || (Size == 0))
 8005884:	2e00      	cmp	r6, #0
 8005886:	d04a      	beq.n	800591e <HAL_UART_Transmit+0xb6>
 8005888:	2a00      	cmp	r2, #0
 800588a:	d048      	beq.n	800591e <HAL_UART_Transmit+0xb6>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800588c:	1c27      	adds	r7, r4, #0
 800588e:	3768      	adds	r7, #104	; 0x68
 8005890:	783b      	ldrb	r3, [r7, #0]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8005892:	2002      	movs	r0, #2
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005894:	2b01      	cmp	r3, #1
 8005896:	d042      	beq.n	800591e <HAL_UART_Transmit+0xb6>
 8005898:	2301      	movs	r3, #1
 800589a:	703b      	strb	r3, [r7, #0]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800589c:	2300      	movs	r3, #0
 800589e:	66e3      	str	r3, [r4, #108]	; 0x6c
    /* Check if a non-blocking receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_RX) 
 80058a0:	782b      	ldrb	r3, [r5, #0]
 80058a2:	2b22      	cmp	r3, #34	; 0x22
 80058a4:	d101      	bne.n	80058aa <HAL_UART_Transmit+0x42>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 80058a6:	2332      	movs	r3, #50	; 0x32
 80058a8:	e000      	b.n	80058ac <HAL_UART_Transmit+0x44>
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
 80058aa:	2312      	movs	r3, #18
 80058ac:	702b      	strb	r3, [r5, #0]
    }

    huart->TxXferSize = Size;
 80058ae:	1c23      	adds	r3, r4, #0
 80058b0:	3350      	adds	r3, #80	; 0x50
 80058b2:	801a      	strh	r2, [r3, #0]
    huart->TxXferCount = Size;
 80058b4:	805a      	strh	r2, [r3, #2]
    while(huart->TxXferCount > 0)
 80058b6:	1c23      	adds	r3, r4, #0
 80058b8:	3352      	adds	r3, #82	; 0x52
 80058ba:	881a      	ldrh	r2, [r3, #0]
 80058bc:	2a00      	cmp	r2, #0
 80058be:	d01e      	beq.n	80058fe <HAL_UART_Transmit+0x96>
    {
      huart->TxXferCount--;
 80058c0:	3a01      	subs	r2, #1
 80058c2:	801a      	strh	r2, [r3, #0]
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)  
 80058c4:	1c20      	adds	r0, r4, #0
 80058c6:	2180      	movs	r1, #128	; 0x80
 80058c8:	2200      	movs	r2, #0
 80058ca:	9b01      	ldr	r3, [sp, #4]
 80058cc:	f7ff ff84 	bl	80057d8 <UART_WaitOnFlagUntilTimeout>
 80058d0:	2800      	cmp	r0, #0
 80058d2:	d001      	beq.n	80058d8 <HAL_UART_Transmit+0x70>
        { 
          return HAL_TIMEOUT;
 80058d4:	2003      	movs	r0, #3
 80058d6:	e022      	b.n	800591e <HAL_UART_Transmit+0xb6>
        }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058d8:	68a1      	ldr	r1, [r4, #8]
 80058da:	2280      	movs	r2, #128	; 0x80
 80058dc:	6823      	ldr	r3, [r4, #0]
 80058de:	0152      	lsls	r2, r2, #5
 80058e0:	4291      	cmp	r1, r2
 80058e2:	d108      	bne.n	80058f6 <HAL_UART_Transmit+0x8e>
 80058e4:	6922      	ldr	r2, [r4, #16]
 80058e6:	2a00      	cmp	r2, #0
 80058e8:	d105      	bne.n	80058f6 <HAL_UART_Transmit+0x8e>
      {
        tmp = (uint16_t*) pData;
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 80058ea:	8832      	ldrh	r2, [r6, #0]
        pData += 2;
 80058ec:	3602      	adds	r6, #2
          return HAL_TIMEOUT;
        }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
      {
        tmp = (uint16_t*) pData;
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 80058ee:	05d2      	lsls	r2, r2, #23
 80058f0:	0dd2      	lsrs	r2, r2, #23
 80058f2:	629a      	str	r2, [r3, #40]	; 0x28
        pData += 2;
 80058f4:	e7df      	b.n	80058b6 <HAL_UART_Transmit+0x4e>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFF);
 80058f6:	7832      	ldrb	r2, [r6, #0]
 80058f8:	3601      	adds	r6, #1
 80058fa:	629a      	str	r2, [r3, #40]	; 0x28
 80058fc:	e7db      	b.n	80058b6 <HAL_UART_Transmit+0x4e>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)  
 80058fe:	1c20      	adds	r0, r4, #0
 8005900:	2140      	movs	r1, #64	; 0x40
 8005902:	9b01      	ldr	r3, [sp, #4]
 8005904:	f7ff ff68 	bl	80057d8 <UART_WaitOnFlagUntilTimeout>
 8005908:	2800      	cmp	r0, #0
 800590a:	d1e3      	bne.n	80058d4 <HAL_UART_Transmit+0x6c>
    { 
      return HAL_TIMEOUT;
    }
    /* Check if a non-blocking receive Process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 800590c:	782b      	ldrb	r3, [r5, #0]
 800590e:	2b32      	cmp	r3, #50	; 0x32
 8005910:	d101      	bne.n	8005916 <HAL_UART_Transmit+0xae>
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
 8005912:	2322      	movs	r3, #34	; 0x22
 8005914:	e000      	b.n	8005918 <HAL_UART_Transmit+0xb0>
    }
    else
    {
      huart->State = HAL_UART_STATE_READY;
 8005916:	2301      	movs	r3, #1
 8005918:	702b      	strb	r3, [r5, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800591a:	2300      	movs	r3, #0
 800591c:	703b      	strb	r3, [r7, #0]
  }
  else
  {
    return HAL_BUSY;
  }
}
 800591e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08005920 <UART_CheckIdleState>:
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005920:	6803      	ldr	r3, [r0, #0]
  * @brief Check the UART Idle State
  * @param huart: uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005922:	b510      	push	{r4, lr}
  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005924:	681b      	ldr	r3, [r3, #0]
  * @brief Check the UART Idle State
  * @param huart: uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005926:	1c04      	adds	r4, r0, #0
  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005928:	071a      	lsls	r2, r3, #28
 800592a:	d404      	bmi.n	8005936 <UART_CheckIdleState+0x16>
    {
      return HAL_TIMEOUT;
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800592c:	6823      	ldr	r3, [r4, #0]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	075a      	lsls	r2, r3, #29
 8005932:	d513      	bpl.n	800595c <UART_CheckIdleState+0x3c>
 8005934:	e009      	b.n	800594a <UART_CheckIdleState+0x2a>
{
  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, UART_TIMEOUT_VALUE) != HAL_OK)
 8005936:	2180      	movs	r1, #128	; 0x80
 8005938:	0389      	lsls	r1, r1, #14
 800593a:	2200      	movs	r2, #0
 800593c:	4b0c      	ldr	r3, [pc, #48]	; (8005970 <UART_CheckIdleState+0x50>)
 800593e:	f7ff ff4b 	bl	80057d8 <UART_WaitOnFlagUntilTimeout>
 8005942:	2800      	cmp	r0, #0
 8005944:	d0f2      	beq.n	800592c <UART_CheckIdleState+0xc>
    {
      return HAL_TIMEOUT;
 8005946:	2003      	movs	r0, #3
 8005948:	e010      	b.n	800596c <UART_CheckIdleState+0x4c>
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, UART_TIMEOUT_VALUE) != HAL_OK)
 800594a:	2180      	movs	r1, #128	; 0x80
 800594c:	1c20      	adds	r0, r4, #0
 800594e:	03c9      	lsls	r1, r1, #15
 8005950:	2200      	movs	r2, #0
 8005952:	4b07      	ldr	r3, [pc, #28]	; (8005970 <UART_CheckIdleState+0x50>)
 8005954:	f7ff ff40 	bl	80057d8 <UART_WaitOnFlagUntilTimeout>
 8005958:	2800      	cmp	r0, #0
 800595a:	d1f4      	bne.n	8005946 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
    }
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800595c:	1c23      	adds	r3, r4, #0
 800595e:	3368      	adds	r3, #104	; 0x68
 8005960:	2000      	movs	r0, #0
 8005962:	7018      	strb	r0, [r3, #0]
  
  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005964:	66e0      	str	r0, [r4, #108]	; 0x6c
  huart->State= HAL_UART_STATE_READY;
 8005966:	2301      	movs	r3, #1
 8005968:	3469      	adds	r4, #105	; 0x69
 800596a:	7023      	strb	r3, [r4, #0]
  
  return HAL_OK;
}
 800596c:	bd10      	pop	{r4, pc}
 800596e:	46c0      	nop			; (mov r8, r8)
 8005970:	000055f0 	.word	0x000055f0

08005974 <HAL_UART_Init>:
  *         parameters in the UART_InitTypeDef and creates the associated handle .
  * @param huart: uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005974:	b538      	push	{r3, r4, r5, lr}
 8005976:	1e04      	subs	r4, r0, #0
  /* Check the UART handle allocation */
  if(huart == NULL)
 8005978:	d02b      	beq.n	80059d2 <HAL_UART_Init+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  
  if(huart->State == HAL_UART_STATE_RESET)
 800597a:	1c05      	adds	r5, r0, #0
 800597c:	3569      	adds	r5, #105	; 0x69
 800597e:	782b      	ldrb	r3, [r5, #0]
 8005980:	b2db      	uxtb	r3, r3
 8005982:	2b00      	cmp	r3, #0
 8005984:	d104      	bne.n	8005990 <HAL_UART_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005986:	1c02      	adds	r2, r0, #0
 8005988:	3268      	adds	r2, #104	; 0x68
 800598a:	7013      	strb	r3, [r2, #0]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 800598c:	f7fd fe2e 	bl	80035ec <HAL_UART_MspInit>
  }
  
  huart->State = HAL_UART_STATE_BUSY;  
 8005990:	2302      	movs	r3, #2
 8005992:	702b      	strb	r3, [r5, #0]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8005994:	6823      	ldr	r3, [r4, #0]
 8005996:	2101      	movs	r1, #1
 8005998:	681a      	ldr	r2, [r3, #0]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800599a:	1c20      	adds	r0, r4, #0
  }
  
  huart->State = HAL_UART_STATE_BUSY;  

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800599c:	438a      	bics	r2, r1
 800599e:	601a      	str	r2, [r3, #0]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80059a0:	f7ff fdb6 	bl	8005510 <UART_SetConfig>
  
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80059a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d002      	beq.n	80059b0 <HAL_UART_Init+0x3c>
  {
    UART_AdvFeatureConfig(huart);
 80059aa:	1c20      	adds	r0, r4, #0
 80059ac:	f7ff feac 	bl	8005708 <UART_AdvFeatureConfig>
  }
  
  /* In asynchronous mode, the following bits must be kept cleared: 
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN); 
 80059b0:	6823      	ldr	r3, [r4, #0]
 80059b2:	4a09      	ldr	r2, [pc, #36]	; (80059d8 <HAL_UART_Init+0x64>)
 80059b4:	6859      	ldr	r1, [r3, #4]
    
  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
  
  /* TEACK and/or REACK to check before moving huart->State to Ready */
  return (UART_CheckIdleState(huart));
 80059b6:	1c20      	adds	r0, r4, #0
  }
  
  /* In asynchronous mode, the following bits must be kept cleared: 
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN); 
 80059b8:	400a      	ands	r2, r1
 80059ba:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN); 
 80059bc:	689a      	ldr	r2, [r3, #8]
 80059be:	212a      	movs	r1, #42	; 0x2a
 80059c0:	438a      	bics	r2, r1
 80059c2:	609a      	str	r2, [r3, #8]
    
  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	2101      	movs	r1, #1
 80059c8:	430a      	orrs	r2, r1
 80059ca:	601a      	str	r2, [r3, #0]
  
  /* TEACK and/or REACK to check before moving huart->State to Ready */
  return (UART_CheckIdleState(huart));
 80059cc:	f7ff ffa8 	bl	8005920 <UART_CheckIdleState>
 80059d0:	e000      	b.n	80059d4 <HAL_UART_Init+0x60>
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if(huart == NULL)
  {
    return HAL_ERROR;
 80059d2:	2001      	movs	r0, #1
  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
  
  /* TEACK and/or REACK to check before moving huart->State to Ready */
  return (UART_CheckIdleState(huart));
}
 80059d4:	bd38      	pop	{r3, r4, r5, pc}
 80059d6:	46c0      	nop			; (mov r8, r8)
 80059d8:	ffffb7ff 	.word	0xffffb7ff

080059dc <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)
 80059dc:	2280      	movs	r2, #128	; 0x80
  * @param  TIMx : TIM peripheral
  * @param   Structure : TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80059de:	b510      	push	{r4, lr}
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
 80059e0:	6803      	ldr	r3, [r0, #0]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)
 80059e2:	05d2      	lsls	r2, r2, #23
 80059e4:	4290      	cmp	r0, r2
 80059e6:	d005      	beq.n	80059f4 <TIM_Base_SetConfig+0x18>
 80059e8:	4c0f      	ldr	r4, [pc, #60]	; (8005a28 <TIM_Base_SetConfig+0x4c>)
 80059ea:	42a0      	cmp	r0, r4
 80059ec:	d002      	beq.n	80059f4 <TIM_Base_SetConfig+0x18>
 80059ee:	4c0f      	ldr	r4, [pc, #60]	; (8005a2c <TIM_Base_SetConfig+0x50>)
 80059f0:	42a0      	cmp	r0, r4
 80059f2:	d10b      	bne.n	8005a0c <TIM_Base_SetConfig+0x30>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059f4:	2470      	movs	r4, #112	; 0x70
 80059f6:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 80059f8:	684c      	ldr	r4, [r1, #4]
 80059fa:	4323      	orrs	r3, r4
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80059fc:	4290      	cmp	r0, r2
 80059fe:	d00d      	beq.n	8005a1c <TIM_Base_SetConfig+0x40>
 8005a00:	4a09      	ldr	r2, [pc, #36]	; (8005a28 <TIM_Base_SetConfig+0x4c>)
 8005a02:	4290      	cmp	r0, r2
 8005a04:	d00a      	beq.n	8005a1c <TIM_Base_SetConfig+0x40>
 8005a06:	4a09      	ldr	r2, [pc, #36]	; (8005a2c <TIM_Base_SetConfig+0x50>)
 8005a08:	4290      	cmp	r0, r2
 8005a0a:	d007      	beq.n	8005a1c <TIM_Base_SetConfig+0x40>
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 8005a0c:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a0e:	688a      	ldr	r2, [r1, #8]
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8005a10:	680b      	ldr	r3, [r1, #0]
  }

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a12:	62c2      	str	r2, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8005a14:	6283      	str	r3, [r0, #40]	; 0x28

  /* Generate an update event to reload the Prescaler value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8005a16:	2301      	movs	r3, #1
 8005a18:	6143      	str	r3, [r0, #20]
}
 8005a1a:	bd10      	pop	{r4, pc}
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a1c:	4a04      	ldr	r2, [pc, #16]	; (8005a30 <TIM_Base_SetConfig+0x54>)
 8005a1e:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a20:	68ca      	ldr	r2, [r1, #12]
 8005a22:	4313      	orrs	r3, r2
 8005a24:	e7f2      	b.n	8005a0c <TIM_Base_SetConfig+0x30>
 8005a26:	46c0      	nop			; (mov r8, r8)
 8005a28:	40010800 	.word	0x40010800
 8005a2c:	40011400 	.word	0x40011400
 8005a30:	fffffcff 	.word	0xfffffcff

08005a34 <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim : TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8005a34:	b538      	push	{r3, r4, r5, lr}
 8005a36:	1e04      	subs	r4, r0, #0
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8005a38:	d014      	beq.n	8005a64 <HAL_TIM_Base_Init+0x30>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 8005a3a:	1c05      	adds	r5, r0, #0
 8005a3c:	3535      	adds	r5, #53	; 0x35
 8005a3e:	782b      	ldrb	r3, [r5, #0]
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d104      	bne.n	8005a50 <HAL_TIM_Base_Init+0x1c>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a46:	1c02      	adds	r2, r0, #0
 8005a48:	3234      	adds	r2, #52	; 0x34
 8005a4a:	7013      	strb	r3, [r2, #0]

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a4c:	f7fd fdb6 	bl	80035bc <HAL_TIM_Base_MspInit>
  }
    
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8005a50:	2302      	movs	r3, #2
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8005a52:	1c21      	adds	r1, r4, #0
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
  }
    
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8005a54:	702b      	strb	r3, [r5, #0]
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8005a56:	c901      	ldmia	r1!, {r0}
 8005a58:	f7ff ffc0 	bl	80059dc <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	702b      	strb	r3, [r5, #0]
  
  return HAL_OK;
 8005a60:	2000      	movs	r0, #0
 8005a62:	e000      	b.n	8005a66 <HAL_TIM_Base_Init+0x32>
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 8005a64:	2001      	movs	r0, #1
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
  
  return HAL_OK;
}
 8005a66:	bd38      	pop	{r3, r4, r5, pc}

08005a68 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005a68:	6803      	ldr	r3, [r0, #0]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	68d9      	ldr	r1, [r3, #12]
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);

  /* Return function status */
  return HAL_OK;
}
 8005a6e:	2000      	movs	r0, #0
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005a70:	4311      	orrs	r1, r2
 8005a72:	60d9      	str	r1, [r3, #12]

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005a74:	6819      	ldr	r1, [r3, #0]
 8005a76:	430a      	orrs	r2, r1
 8005a78:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 8005a7a:	4770      	bx	lr

08005a7c <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a7c:	4770      	bx	lr

08005a7e <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a7e:	4770      	bx	lr

08005a80 <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a80:	4770      	bx	lr

08005a82 <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a82:	4770      	bx	lr

08005a84 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a84:	6803      	ldr	r3, [r0, #0]
 8005a86:	2202      	movs	r2, #2
 8005a88:	6919      	ldr	r1, [r3, #16]
  * @brief  This function handles TIM interrupts requests.
  * @param  htim: TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a8a:	b510      	push	{r4, lr}
 8005a8c:	1c04      	adds	r4, r0, #0
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a8e:	4211      	tst	r1, r2
 8005a90:	d014      	beq.n	8005abc <HAL_TIM_IRQHandler+0x38>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8005a92:	68d9      	ldr	r1, [r3, #12]
 8005a94:	4211      	tst	r1, r2
 8005a96:	d011      	beq.n	8005abc <HAL_TIM_IRQHandler+0x38>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a98:	2203      	movs	r2, #3
 8005a9a:	4252      	negs	r2, r2
 8005a9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8005a9e:	699b      	ldr	r3, [r3, #24]
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	7502      	strb	r2, [r0, #20]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8005aa4:	079a      	lsls	r2, r3, #30
 8005aa6:	d002      	beq.n	8005aae <HAL_TIM_IRQHandler+0x2a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8005aa8:	f7ff ffe9 	bl	8005a7e <HAL_TIM_IC_CaptureCallback>
 8005aac:	e004      	b.n	8005ab8 <HAL_TIM_IRQHandler+0x34>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aae:	f7ff ffe5 	bl	8005a7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ab2:	1c20      	adds	r0, r4, #0
 8005ab4:	f7ff ffe4 	bl	8005a80 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	7523      	strb	r3, [r4, #20]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005abc:	6823      	ldr	r3, [r4, #0]
 8005abe:	2204      	movs	r2, #4
 8005ac0:	6919      	ldr	r1, [r3, #16]
 8005ac2:	4211      	tst	r1, r2
 8005ac4:	d017      	beq.n	8005af6 <HAL_TIM_IRQHandler+0x72>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8005ac6:	68d9      	ldr	r1, [r3, #12]
 8005ac8:	4211      	tst	r1, r2
 8005aca:	d014      	beq.n	8005af6 <HAL_TIM_IRQHandler+0x72>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005acc:	2205      	movs	r2, #5
 8005ace:	4252      	negs	r2, r2
 8005ad0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ad2:	2202      	movs	r2, #2
 8005ad4:	7522      	strb	r2, [r4, #20]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8005ad6:	699a      	ldr	r2, [r3, #24]
 8005ad8:	23c0      	movs	r3, #192	; 0xc0
 8005ada:	009b      	lsls	r3, r3, #2
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8005adc:	1c20      	adds	r0, r4, #0
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8005ade:	421a      	tst	r2, r3
 8005ae0:	d002      	beq.n	8005ae8 <HAL_TIM_IRQHandler+0x64>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8005ae2:	f7ff ffcc 	bl	8005a7e <HAL_TIM_IC_CaptureCallback>
 8005ae6:	e004      	b.n	8005af2 <HAL_TIM_IRQHandler+0x6e>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ae8:	f7ff ffc8 	bl	8005a7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005aec:	1c20      	adds	r0, r4, #0
 8005aee:	f7ff ffc7 	bl	8005a80 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005af2:	2300      	movs	r3, #0
 8005af4:	7523      	strb	r3, [r4, #20]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005af6:	6823      	ldr	r3, [r4, #0]
 8005af8:	2208      	movs	r2, #8
 8005afa:	6919      	ldr	r1, [r3, #16]
 8005afc:	4211      	tst	r1, r2
 8005afe:	d015      	beq.n	8005b2c <HAL_TIM_IRQHandler+0xa8>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8005b00:	68d9      	ldr	r1, [r3, #12]
 8005b02:	4211      	tst	r1, r2
 8005b04:	d012      	beq.n	8005b2c <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005b06:	2209      	movs	r2, #9
 8005b08:	4252      	negs	r2, r2
 8005b0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8005b0c:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b0e:	2204      	movs	r2, #4
 8005b10:	7522      	strb	r2, [r4, #20]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8005b12:	1c20      	adds	r0, r4, #0
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8005b14:	079a      	lsls	r2, r3, #30
 8005b16:	d002      	beq.n	8005b1e <HAL_TIM_IRQHandler+0x9a>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8005b18:	f7ff ffb1 	bl	8005a7e <HAL_TIM_IC_CaptureCallback>
 8005b1c:	e004      	b.n	8005b28 <HAL_TIM_IRQHandler+0xa4>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b1e:	f7ff ffad 	bl	8005a7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b22:	1c20      	adds	r0, r4, #0
 8005b24:	f7ff ffac 	bl	8005a80 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	7523      	strb	r3, [r4, #20]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b2c:	6823      	ldr	r3, [r4, #0]
 8005b2e:	2210      	movs	r2, #16
 8005b30:	6919      	ldr	r1, [r3, #16]
 8005b32:	4211      	tst	r1, r2
 8005b34:	d017      	beq.n	8005b66 <HAL_TIM_IRQHandler+0xe2>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8005b36:	68d9      	ldr	r1, [r3, #12]
 8005b38:	4211      	tst	r1, r2
 8005b3a:	d014      	beq.n	8005b66 <HAL_TIM_IRQHandler+0xe2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b3c:	2211      	movs	r2, #17
 8005b3e:	4252      	negs	r2, r2
 8005b40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b42:	2208      	movs	r2, #8
 8005b44:	7522      	strb	r2, [r4, #20]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8005b46:	69da      	ldr	r2, [r3, #28]
 8005b48:	23c0      	movs	r3, #192	; 0xc0
 8005b4a:	009b      	lsls	r3, r3, #2
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8005b4c:	1c20      	adds	r0, r4, #0
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8005b4e:	421a      	tst	r2, r3
 8005b50:	d002      	beq.n	8005b58 <HAL_TIM_IRQHandler+0xd4>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8005b52:	f7ff ff94 	bl	8005a7e <HAL_TIM_IC_CaptureCallback>
 8005b56:	e004      	b.n	8005b62 <HAL_TIM_IRQHandler+0xde>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b58:	f7ff ff90 	bl	8005a7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b5c:	1c20      	adds	r0, r4, #0
 8005b5e:	f7ff ff8f 	bl	8005a80 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b62:	2300      	movs	r3, #0
 8005b64:	7523      	strb	r3, [r4, #20]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b66:	6823      	ldr	r3, [r4, #0]
 8005b68:	2201      	movs	r2, #1
 8005b6a:	6919      	ldr	r1, [r3, #16]
 8005b6c:	4211      	tst	r1, r2
 8005b6e:	d008      	beq.n	8005b82 <HAL_TIM_IRQHandler+0xfe>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8005b70:	68d9      	ldr	r1, [r3, #12]
 8005b72:	4211      	tst	r1, r2
 8005b74:	d005      	beq.n	8005b82 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b76:	2202      	movs	r2, #2
 8005b78:	4252      	negs	r2, r2
 8005b7a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b7c:	1c20      	adds	r0, r4, #0
 8005b7e:	f7fe fef9 	bl	8004974 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005b82:	6823      	ldr	r3, [r4, #0]
 8005b84:	2240      	movs	r2, #64	; 0x40
 8005b86:	6919      	ldr	r1, [r3, #16]
 8005b88:	4211      	tst	r1, r2
 8005b8a:	d008      	beq.n	8005b9e <HAL_TIM_IRQHandler+0x11a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8005b8c:	68d9      	ldr	r1, [r3, #12]
 8005b8e:	4211      	tst	r1, r2
 8005b90:	d005      	beq.n	8005b9e <HAL_TIM_IRQHandler+0x11a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005b92:	2241      	movs	r2, #65	; 0x41
 8005b94:	4252      	negs	r2, r2
 8005b96:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8005b98:	1c20      	adds	r0, r4, #0
 8005b9a:	f7ff ff72 	bl	8005a82 <HAL_TIM_TriggerCallback>
    }
  }
}
 8005b9e:	bd10      	pop	{r4, pc}

08005ba0 <SPI_WaitOnFlagUntilTimeout>:
  * @param  Status: Flag status to check: RESET or set
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status, uint32_t Timeout)  
{
 8005ba0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ba2:	1c1d      	adds	r5, r3, #0
 8005ba4:	1c04      	adds	r4, r0, #0
 8005ba6:	1c0e      	adds	r6, r1, #0
 8005ba8:	9201      	str	r2, [sp, #4]
  uint32_t tickstart = 0;

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8005baa:	f001 fa57 	bl	800705c <HAL_GetTick>

  /* Wait until flag is set */
  if(Status == RESET)
 8005bae:	9b01      	ldr	r3, [sp, #4]
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status, uint32_t Timeout)  
{
  uint32_t tickstart = 0;

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8005bb0:	1c07      	adds	r7, r0, #0

  /* Wait until flag is set */
  if(Status == RESET)
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d13b      	bne.n	8005c2e <SPI_WaitOnFlagUntilTimeout+0x8e>
  {
    while(__HAL_SPI_GET_FLAG(hspi, Flag) == RESET)
 8005bb6:	6822      	ldr	r2, [r4, #0]
 8005bb8:	6893      	ldr	r3, [r2, #8]
 8005bba:	4033      	ands	r3, r6
 8005bbc:	42b3      	cmp	r3, r6
 8005bbe:	d00f      	beq.n	8005be0 <SPI_WaitOnFlagUntilTimeout+0x40>
    {
      if(Timeout != HAL_MAX_DELAY)
 8005bc0:	1c6b      	adds	r3, r5, #1
 8005bc2:	d0f9      	beq.n	8005bb8 <SPI_WaitOnFlagUntilTimeout+0x18>
      {
        if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8005bc4:	2d00      	cmp	r5, #0
 8005bc6:	d00f      	beq.n	8005be8 <SPI_WaitOnFlagUntilTimeout+0x48>
 8005bc8:	f001 fa48 	bl	800705c <HAL_GetTick>
 8005bcc:	1bc0      	subs	r0, r0, r7
 8005bce:	42a8      	cmp	r0, r5
 8005bd0:	d9f1      	bls.n	8005bb6 <SPI_WaitOnFlagUntilTimeout+0x16>
 8005bd2:	e009      	b.n	8005be8 <SPI_WaitOnFlagUntilTimeout+0x48>
  }
  else
  {
    while(__HAL_SPI_GET_FLAG(hspi, Flag) != RESET)
    {
      if(Timeout != HAL_MAX_DELAY)
 8005bd4:	1c6b      	adds	r3, r5, #1
 8005bd6:	d105      	bne.n	8005be4 <SPI_WaitOnFlagUntilTimeout+0x44>
      }
    }
  }
  else
  {
    while(__HAL_SPI_GET_FLAG(hspi, Flag) != RESET)
 8005bd8:	6893      	ldr	r3, [r2, #8]
 8005bda:	4033      	ands	r3, r6
 8005bdc:	42b3      	cmp	r3, r6
 8005bde:	d0f9      	beq.n	8005bd4 <SPI_WaitOnFlagUntilTimeout+0x34>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8005be0:	2000      	movs	r0, #0
 8005be2:	e026      	b.n	8005c32 <SPI_WaitOnFlagUntilTimeout+0x92>
  {
    while(__HAL_SPI_GET_FLAG(hspi, Flag) != RESET)
    {
      if(Timeout != HAL_MAX_DELAY)
      {
        if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8005be4:	2d00      	cmp	r5, #0
 8005be6:	d11d      	bne.n	8005c24 <SPI_WaitOnFlagUntilTimeout+0x84>
          /* Disable the SPI and reset the CRC: the CRC value should be cleared
             on both master and slave sides in order to resynchronize the master
             and slave for their respective CRC calculation */

          /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
          __HAL_SPI_DISABLE_IT(hspi, (uint32_t)(SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005be8:	6823      	ldr	r3, [r4, #0]
 8005bea:	21e0      	movs	r1, #224	; 0xe0
 8005bec:	685a      	ldr	r2, [r3, #4]
 8005bee:	438a      	bics	r2, r1
 8005bf0:	605a      	str	r2, [r3, #4]

          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	2140      	movs	r1, #64	; 0x40
 8005bf6:	438a      	bics	r2, r1
 8005bf8:	601a      	str	r2, [r3, #0]

          /* Reset CRC Calculation */
          if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005bfa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005bfc:	2180      	movs	r1, #128	; 0x80
 8005bfe:	0189      	lsls	r1, r1, #6
 8005c00:	428a      	cmp	r2, r1
 8005c02:	d106      	bne.n	8005c12 <SPI_WaitOnFlagUntilTimeout+0x72>
          {
            SPI_RESET_CRC(hspi);
 8005c04:	6818      	ldr	r0, [r3, #0]
 8005c06:	490b      	ldr	r1, [pc, #44]	; (8005c34 <SPI_WaitOnFlagUntilTimeout+0x94>)
 8005c08:	4001      	ands	r1, r0
 8005c0a:	6019      	str	r1, [r3, #0]
 8005c0c:	6819      	ldr	r1, [r3, #0]
 8005c0e:	430a      	orrs	r2, r1
 8005c10:	601a      	str	r2, [r3, #0]
          }

          hspi->State= HAL_SPI_STATE_READY;
 8005c12:	1c23      	adds	r3, r4, #0
 8005c14:	3351      	adds	r3, #81	; 0x51
 8005c16:	2201      	movs	r2, #1
 8005c18:	701a      	strb	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8005c1a:	3450      	adds	r4, #80	; 0x50
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	7023      	strb	r3, [r4, #0]

          return HAL_TIMEOUT;
 8005c20:	2003      	movs	r0, #3
 8005c22:	e006      	b.n	8005c32 <SPI_WaitOnFlagUntilTimeout+0x92>
  {
    while(__HAL_SPI_GET_FLAG(hspi, Flag) != RESET)
    {
      if(Timeout != HAL_MAX_DELAY)
      {
        if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8005c24:	f001 fa1a 	bl	800705c <HAL_GetTick>
 8005c28:	1bc0      	subs	r0, r0, r7
 8005c2a:	42a8      	cmp	r0, r5
 8005c2c:	d8dc      	bhi.n	8005be8 <SPI_WaitOnFlagUntilTimeout+0x48>
      }
    }
  }
  else
  {
    while(__HAL_SPI_GET_FLAG(hspi, Flag) != RESET)
 8005c2e:	6822      	ldr	r2, [r4, #0]
 8005c30:	e7d2      	b.n	8005bd8 <SPI_WaitOnFlagUntilTimeout+0x38>
        }
      }
    }
  }
  return HAL_OK;
}
 8005c32:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005c34:	ffffdfff 	.word	0xffffdfff

08005c38 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c38:	b538      	push	{r3, r4, r5, lr}
 8005c3a:	1e04      	subs	r4, r0, #0
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8005c3c:	d037      	beq.n	8005cae <HAL_SPI_Init+0x76>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  assert_param(IS_SPI_CRC_CALCULATION(hspi->Init.CRCCalculation));
  assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));

  if(hspi->State == HAL_SPI_STATE_RESET)
 8005c3e:	1c05      	adds	r5, r0, #0
 8005c40:	3551      	adds	r5, #81	; 0x51
 8005c42:	782b      	ldrb	r3, [r5, #0]
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d104      	bne.n	8005c54 <HAL_SPI_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005c4a:	1c02      	adds	r2, r0, #0
 8005c4c:	3250      	adds	r2, #80	; 0x50
 8005c4e:	7013      	strb	r3, [r2, #0]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005c50:	f7fd fc84 	bl	800355c <HAL_SPI_MspInit>
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;
 8005c54:	2302      	movs	r3, #2
 8005c56:	702b      	strb	r3, [r5, #0]

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005c58:	6823      	ldr	r3, [r4, #0]
 8005c5a:	2140      	movs	r1, #64	; 0x40
 8005c5c:	681a      	ldr	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005c5e:	6860      	ldr	r0, [r4, #4]
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005c60:	438a      	bics	r2, r1

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005c62:	68a1      	ldr	r1, [r4, #8]
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005c64:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005c66:	4301      	orrs	r1, r0
 8005c68:	68e0      	ldr	r0, [r4, #12]
 8005c6a:	69a2      	ldr	r2, [r4, #24]
 8005c6c:	4301      	orrs	r1, r0
 8005c6e:	6920      	ldr	r0, [r4, #16]
 8005c70:	4301      	orrs	r1, r0
 8005c72:	6960      	ldr	r0, [r4, #20]
 8005c74:	4301      	orrs	r1, r0
 8005c76:	69e0      	ldr	r0, [r4, #28]
 8005c78:	4301      	orrs	r1, r0
 8005c7a:	6a20      	ldr	r0, [r4, #32]
 8005c7c:	4301      	orrs	r1, r0
 8005c7e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005c80:	4301      	orrs	r1, r0
 8005c82:	2080      	movs	r0, #128	; 0x80
 8005c84:	0080      	lsls	r0, r0, #2
 8005c86:	4010      	ands	r0, r2
 8005c88:	4301      	orrs	r1, r0
 8005c8a:	6019      	str	r1, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005c8c:	0c12      	lsrs	r2, r2, #16
 8005c8e:	2104      	movs	r1, #4
 8005c90:	400a      	ands	r2, r1
 8005c92:	6a61      	ldr	r1, [r4, #36]	; 0x24
#if !defined(STM32L011xx) && !defined(STM32L021xx) && !defined(STM32L031xx) && !defined(STM32L041xx)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif
  
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005c94:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005c96:	430a      	orrs	r2, r1
 8005c98:	605a      	str	r2, [r3, #4]

  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8005c9a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005c9c:	611a      	str	r2, [r3, #16]
  
#if !defined(STM32L011xx) && !defined(STM32L021xx) && !defined(STM32L031xx) && !defined(STM32L041xx)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005c9e:	69d9      	ldr	r1, [r3, #28]
 8005ca0:	4a04      	ldr	r2, [pc, #16]	; (8005cb4 <HAL_SPI_Init+0x7c>)
 8005ca2:	400a      	ands	r2, r1
 8005ca4:	61da      	str	r2, [r3, #28]
#endif
  
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State = HAL_SPI_STATE_READY;
 8005ca6:	2301      	movs	r3, #1
#if !defined(STM32L011xx) && !defined(STM32L021xx) && !defined(STM32L031xx) && !defined(STM32L041xx)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif
  
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005ca8:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8005caa:	702b      	strb	r3, [r5, #0]
  
  return HAL_OK;
 8005cac:	e000      	b.n	8005cb0 <HAL_SPI_Init+0x78>
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if(hspi == NULL)
  {
    return HAL_ERROR;
 8005cae:	2001      	movs	r0, #1
  
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State = HAL_SPI_STATE_READY;
  
  return HAL_OK;
}
 8005cb0:	bd38      	pop	{r3, r4, r5, pc}
 8005cb2:	46c0      	nop			; (mov r8, r8)
 8005cb4:	fffff7ff 	.word	0xfffff7ff

08005cb8 <HAL_SPI_Transmit>:
  * @param  Size: amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cb8:	b5f0      	push	{r4, r5, r6, r7, lr}

  if(hspi->State == HAL_SPI_STATE_READY)
 8005cba:	1c06      	adds	r6, r0, #0
 8005cbc:	3651      	adds	r6, #81	; 0x51
  * @param  Size: amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cbe:	1c1d      	adds	r5, r3, #0

  if(hspi->State == HAL_SPI_STATE_READY)
 8005cc0:	7833      	ldrb	r3, [r6, #0]
  * @param  Size: amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cc2:	1c04      	adds	r4, r0, #0

  if(hspi->State == HAL_SPI_STATE_READY)
 8005cc4:	b2db      	uxtb	r3, r3
  * @param  Size: amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cc6:	b085      	sub	sp, #20

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8005cc8:	2002      	movs	r0, #2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{

  if(hspi->State == HAL_SPI_STATE_READY)
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d000      	beq.n	8005cd0 <HAL_SPI_Transmit+0x18>
 8005cce:	e0b3      	b.n	8005e38 <HAL_SPI_Transmit+0x180>
  {
    if((pData == NULL ) || (Size == 0)) 
    {
      return  HAL_ERROR;
 8005cd0:	1c18      	adds	r0, r3, #0
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{

  if(hspi->State == HAL_SPI_STATE_READY)
  {
    if((pData == NULL ) || (Size == 0)) 
 8005cd2:	2900      	cmp	r1, #0
 8005cd4:	d100      	bne.n	8005cd8 <HAL_SPI_Transmit+0x20>
 8005cd6:	e0af      	b.n	8005e38 <HAL_SPI_Transmit+0x180>
 8005cd8:	2a00      	cmp	r2, #0
 8005cda:	d100      	bne.n	8005cde <HAL_SPI_Transmit+0x26>
 8005cdc:	e0ac      	b.n	8005e38 <HAL_SPI_Transmit+0x180>

    /* Check the parameters */
    assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

    /* Process Locked */
    __HAL_LOCK(hspi);
 8005cde:	1c20      	adds	r0, r4, #0
 8005ce0:	3050      	adds	r0, #80	; 0x50
 8005ce2:	9001      	str	r0, [sp, #4]
 8005ce4:	7807      	ldrb	r7, [r0, #0]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8005ce6:	2002      	movs	r0, #2

    /* Check the parameters */
    assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

    /* Process Locked */
    __HAL_LOCK(hspi);
 8005ce8:	2f01      	cmp	r7, #1
 8005cea:	d100      	bne.n	8005cee <HAL_SPI_Transmit+0x36>
 8005cec:	e0a4      	b.n	8005e38 <HAL_SPI_Transmit+0x180>
 8005cee:	9801      	ldr	r0, [sp, #4]
    hspi->pRxBuffPtr  = NULL;
    hspi->RxXferSize  = 0;
    hspi->RxXferCount = 0;

    /* Reset CRC Calculation */
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005cf0:	2780      	movs	r7, #128	; 0x80

    /* Check the parameters */
    assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

    /* Process Locked */
    __HAL_LOCK(hspi);
 8005cf2:	7003      	strb	r3, [r0, #0]

    /* Configure communication */
    hspi->State = HAL_SPI_STATE_BUSY_TX;
 8005cf4:	2312      	movs	r3, #18
 8005cf6:	7033      	strb	r3, [r6, #0]
    hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->pTxBuffPtr  = pData;
    hspi->TxXferSize  = Size;
    hspi->TxXferCount = Size;

    /*Init field not used in handle to zero */
    hspi->TxISR = 0;
 8005cfc:	64e3      	str	r3, [r4, #76]	; 0x4c
    hspi->RxISR = 0;
 8005cfe:	64a3      	str	r3, [r4, #72]	; 0x48
    hspi->pRxBuffPtr  = NULL;
 8005d00:	63a3      	str	r3, [r4, #56]	; 0x38
    hspi->RxXferSize  = 0;
 8005d02:	87a3      	strh	r3, [r4, #60]	; 0x3c
    hspi->RxXferCount = 0;
 8005d04:	87e3      	strh	r3, [r4, #62]	; 0x3e

    /* Reset CRC Calculation */
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005d06:	6aa3      	ldr	r3, [r4, #40]	; 0x28

    /* Configure communication */
    hspi->State = HAL_SPI_STATE_BUSY_TX;
    hspi->ErrorCode   = HAL_SPI_ERROR_NONE;

    hspi->pTxBuffPtr  = pData;
 8005d08:	6321      	str	r1, [r4, #48]	; 0x30
    hspi->TxXferSize  = Size;
 8005d0a:	86a2      	strh	r2, [r4, #52]	; 0x34
    hspi->TxXferCount = Size;
 8005d0c:	86e2      	strh	r2, [r4, #54]	; 0x36
    hspi->pRxBuffPtr  = NULL;
    hspi->RxXferSize  = 0;
    hspi->RxXferCount = 0;

    /* Reset CRC Calculation */
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005d0e:	9301      	str	r3, [sp, #4]
 8005d10:	6820      	ldr	r0, [r4, #0]
 8005d12:	01bf      	lsls	r7, r7, #6
 8005d14:	42bb      	cmp	r3, r7
 8005d16:	d107      	bne.n	8005d28 <HAL_SPI_Transmit+0x70>
    {
      SPI_RESET_CRC(hspi);
 8005d18:	6807      	ldr	r7, [r0, #0]
 8005d1a:	4b48      	ldr	r3, [pc, #288]	; (8005e3c <HAL_SPI_Transmit+0x184>)
 8005d1c:	403b      	ands	r3, r7
 8005d1e:	6003      	str	r3, [r0, #0]
 8005d20:	6807      	ldr	r7, [r0, #0]
 8005d22:	9b01      	ldr	r3, [sp, #4]
 8005d24:	433b      	orrs	r3, r7
 8005d26:	6003      	str	r3, [r0, #0]
    }

    if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d28:	68a7      	ldr	r7, [r4, #8]
 8005d2a:	2380      	movs	r3, #128	; 0x80
 8005d2c:	021b      	lsls	r3, r3, #8
 8005d2e:	429f      	cmp	r7, r3
 8005d30:	d104      	bne.n	8005d3c <HAL_SPI_Transmit+0x84>
    {
      /* Configure communication direction : 1Line */
      SPI_1LINE_TX(hspi);
 8005d32:	6807      	ldr	r7, [r0, #0]
 8005d34:	2380      	movs	r3, #128	; 0x80
 8005d36:	01db      	lsls	r3, r3, #7
 8005d38:	433b      	orrs	r3, r7
 8005d3a:	6003      	str	r3, [r0, #0]
    }

    /* Check if the SPI is already enabled */ 
    if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d3c:	6807      	ldr	r7, [r0, #0]
 8005d3e:	2340      	movs	r3, #64	; 0x40
 8005d40:	421f      	tst	r7, r3
 8005d42:	d102      	bne.n	8005d4a <HAL_SPI_Transmit+0x92>
    {
      /* Enable SPI peripheral */
      __HAL_SPI_ENABLE(hspi);
 8005d44:	6807      	ldr	r7, [r0, #0]
 8005d46:	433b      	orrs	r3, r7
 8005d48:	6003      	str	r3, [r0, #0]
    }

    /* Transmit data in 8 Bit mode */
    if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005d4a:	68e7      	ldr	r7, [r4, #12]
 8005d4c:	6863      	ldr	r3, [r4, #4]
 8005d4e:	2f00      	cmp	r7, #0
 8005d50:	d124      	bne.n	8005d9c <HAL_SPI_Transmit+0xe4>
    {
      if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d001      	beq.n	8005d5a <HAL_SPI_Transmit+0xa2>
 8005d56:	2a01      	cmp	r2, #1
 8005d58:	d117      	bne.n	8005d8a <HAL_SPI_Transmit+0xd2>
      {
        hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 8005d5a:	1c4b      	adds	r3, r1, #1
 8005d5c:	6323      	str	r3, [r4, #48]	; 0x30
 8005d5e:	780b      	ldrb	r3, [r1, #0]
        hspi->TxXferCount--;
 8005d60:	3a01      	subs	r2, #1
    /* Transmit data in 8 Bit mode */
    if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
    {
      if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
      {
        hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 8005d62:	60c3      	str	r3, [r0, #12]
        hspi->TxXferCount--;
 8005d64:	86e2      	strh	r2, [r4, #54]	; 0x36
 8005d66:	e010      	b.n	8005d8a <HAL_SPI_Transmit+0xd2>
      }

      while(hspi->TxXferCount > 0)
      {
        /* Wait until TXE flag is set to send data */
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8005d68:	1c20      	adds	r0, r4, #0
 8005d6a:	2102      	movs	r1, #2
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	1c2b      	adds	r3, r5, #0
 8005d70:	f7ff ff16 	bl	8005ba0 <SPI_WaitOnFlagUntilTimeout>
 8005d74:	2800      	cmp	r0, #0
 8005d76:	d147      	bne.n	8005e08 <HAL_SPI_Transmit+0x150>
        { 
          return HAL_TIMEOUT;
        }
        hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 8005d78:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005d7a:	6822      	ldr	r2, [r4, #0]
 8005d7c:	1c59      	adds	r1, r3, #1
 8005d7e:	6321      	str	r1, [r4, #48]	; 0x30
 8005d80:	781b      	ldrb	r3, [r3, #0]
 8005d82:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount--;
 8005d84:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005d86:	3b01      	subs	r3, #1
 8005d88:	86e3      	strh	r3, [r4, #54]	; 0x36
      {
        hspi->Instance->DR = (*hspi->pTxBuffPtr++);
        hspi->TxXferCount--;
      }

      while(hspi->TxXferCount > 0)
 8005d8a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d1eb      	bne.n	8005d68 <HAL_SPI_Transmit+0xb0>
        }
        hspi->Instance->DR = (*hspi->pTxBuffPtr++);
        hspi->TxXferCount--;
      }
      /* Enable CRC Transmission */
      if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) 
 8005d90:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005d92:	2380      	movs	r3, #128	; 0x80
 8005d94:	019b      	lsls	r3, r3, #6
 8005d96:	4298      	cmp	r0, r3
 8005d98:	d12a      	bne.n	8005df0 <HAL_SPI_Transmit+0x138>
 8005d9a:	e023      	b.n	8005de4 <HAL_SPI_Transmit+0x12c>
      }
    }
    /* Transmit data in 16 Bit mode */
    else
    {
      if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d001      	beq.n	8005da4 <HAL_SPI_Transmit+0xec>
 8005da0:	2a01      	cmp	r2, #1
 8005da2:	d117      	bne.n	8005dd4 <HAL_SPI_Transmit+0x11c>
      {
        hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 8005da4:	880b      	ldrh	r3, [r1, #0]
        hspi->pTxBuffPtr+=2;
        hspi->TxXferCount--;
 8005da6:	3a01      	subs	r2, #1
    else
    {
      if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
      {
        hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
        hspi->pTxBuffPtr+=2;
 8005da8:	3102      	adds	r1, #2
    /* Transmit data in 16 Bit mode */
    else
    {
      if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
      {
        hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 8005daa:	60c3      	str	r3, [r0, #12]
        hspi->pTxBuffPtr+=2;
 8005dac:	6321      	str	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8005dae:	86e2      	strh	r2, [r4, #54]	; 0x36
 8005db0:	e010      	b.n	8005dd4 <HAL_SPI_Transmit+0x11c>
      }

      while(hspi->TxXferCount > 0)
      {
        /* Wait until TXE flag is set to send data */
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8005db2:	1c20      	adds	r0, r4, #0
 8005db4:	2102      	movs	r1, #2
 8005db6:	2200      	movs	r2, #0
 8005db8:	1c2b      	adds	r3, r5, #0
 8005dba:	f7ff fef1 	bl	8005ba0 <SPI_WaitOnFlagUntilTimeout>
 8005dbe:	2800      	cmp	r0, #0
 8005dc0:	d122      	bne.n	8005e08 <HAL_SPI_Transmit+0x150>
        { 
          return HAL_TIMEOUT;
        }
        hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 8005dc2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005dc4:	6822      	ldr	r2, [r4, #0]
 8005dc6:	8819      	ldrh	r1, [r3, #0]
        hspi->pTxBuffPtr+=2;
 8005dc8:	3302      	adds	r3, #2
        /* Wait until TXE flag is set to send data */
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
        { 
          return HAL_TIMEOUT;
        }
        hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 8005dca:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr+=2;
 8005dcc:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8005dce:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005dd0:	3b01      	subs	r3, #1
 8005dd2:	86e3      	strh	r3, [r4, #54]	; 0x36
        hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
        hspi->pTxBuffPtr+=2;
        hspi->TxXferCount--;
      }

      while(hspi->TxXferCount > 0)
 8005dd4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d1eb      	bne.n	8005db2 <HAL_SPI_Transmit+0xfa>
        hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
        hspi->pTxBuffPtr+=2;
        hspi->TxXferCount--;
      }
      /* Enable CRC Transmission */
      if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) 
 8005dda:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005ddc:	2380      	movs	r3, #128	; 0x80
 8005dde:	019b      	lsls	r3, r3, #6
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d105      	bne.n	8005df0 <HAL_SPI_Transmit+0x138>
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8005de4:	6823      	ldr	r3, [r4, #0]
 8005de6:	2280      	movs	r2, #128	; 0x80
 8005de8:	6819      	ldr	r1, [r3, #0]
 8005dea:	0152      	lsls	r2, r2, #5
 8005dec:	430a      	orrs	r2, r1
 8005dee:	601a      	str	r2, [r3, #0]
      }
    }

    /* Wait until TXE flag is set to send data */
    if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8005df0:	1c20      	adds	r0, r4, #0
 8005df2:	2102      	movs	r1, #2
 8005df4:	2200      	movs	r2, #0
 8005df6:	1c2b      	adds	r3, r5, #0
 8005df8:	f7ff fed2 	bl	8005ba0 <SPI_WaitOnFlagUntilTimeout>
 8005dfc:	2800      	cmp	r0, #0
 8005dfe:	d005      	beq.n	8005e0c <HAL_SPI_Transmit+0x154>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e00:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005e02:	2220      	movs	r2, #32
 8005e04:	4313      	orrs	r3, r2
 8005e06:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8005e08:	2003      	movs	r0, #3
 8005e0a:	e015      	b.n	8005e38 <HAL_SPI_Transmit+0x180>
    }

    /* Wait until Busy flag is reset before disabling SPI */
    if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_BSY, SET, Timeout) != HAL_OK)
 8005e0c:	1c20      	adds	r0, r4, #0
 8005e0e:	2180      	movs	r1, #128	; 0x80
 8005e10:	2201      	movs	r2, #1
 8005e12:	1c2b      	adds	r3, r5, #0
 8005e14:	f7ff fec4 	bl	8005ba0 <SPI_WaitOnFlagUntilTimeout>
 8005e18:	2800      	cmp	r0, #0
 8005e1a:	d1f1      	bne.n	8005e00 <HAL_SPI_Transmit+0x148>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
      return HAL_TIMEOUT;
    }
 
    /* Clear OVERUN flag in 2 Lines communication mode because received is not read */
    if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005e1c:	68a3      	ldr	r3, [r4, #8]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d105      	bne.n	8005e2e <HAL_SPI_Transmit+0x176>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e22:	6823      	ldr	r3, [r4, #0]
 8005e24:	68da      	ldr	r2, [r3, #12]
 8005e26:	9203      	str	r2, [sp, #12]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	9303      	str	r3, [sp, #12]
 8005e2c:	9b03      	ldr	r3, [sp, #12]
    }

    hspi->State = HAL_SPI_STATE_READY; 
 8005e2e:	2301      	movs	r3, #1
 8005e30:	7033      	strb	r3, [r6, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8005e32:	3450      	adds	r4, #80	; 0x50
 8005e34:	2300      	movs	r3, #0
 8005e36:	7023      	strb	r3, [r4, #0]
  }
  else
  {
    return HAL_BUSY;
  }
}
 8005e38:	b005      	add	sp, #20
 8005e3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e3c:	ffffdfff 	.word	0xffffdfff

08005e40 <HAL_RCCEx_PeriphCLKConfig>:
  *         contains the configuration information for the Extended Peripherals clocks(USART1,USART2, LPUART1, 
  *         I2C1, I2C3, RTC, USB/RNG  and LPTIM1 clocks).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e42:	1c04      	adds	r4, r0, #0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

    /*---------------------------- RTC/LCD configuration -------------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005e44:	6800      	ldr	r0, [r0, #0]
 8005e46:	0680      	lsls	r0, r0, #26
 8005e48:	d552      	bpl.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0xb0>
#endif /* defined (STM32L053xx) || defined(STM32L063xx) || defined(STM32L073xx) || defined(STM32L083xx) */
  )
  {
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005e4a:	4d46      	ldr	r5, [pc, #280]	; (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8005e4c:	2380      	movs	r3, #128	; 0x80
 8005e4e:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8005e50:	055b      	lsls	r3, r3, #21
 8005e52:	4313      	orrs	r3, r2

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e54:	4e44      	ldr	r6, [pc, #272]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x128>)
#endif /* defined (STM32L053xx) || defined(STM32L063xx) || defined(STM32L073xx) || defined(STM32L083xx) */
  )
  {
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005e56:	63ab      	str	r3, [r5, #56]	; 0x38

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e58:	6832      	ldr	r2, [r6, #0]
 8005e5a:	2380      	movs	r3, #128	; 0x80
 8005e5c:	005b      	lsls	r3, r3, #1
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	6033      	str	r3, [r6, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005e62:	f001 f8fb 	bl	800705c <HAL_GetTick>
 8005e66:	1c07      	adds	r7, r0, #0

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005e68:	6833      	ldr	r3, [r6, #0]
 8005e6a:	05da      	lsls	r2, r3, #23
 8005e6c:	d406      	bmi.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005e6e:	f001 f8f5 	bl	800705c <HAL_GetTick>
 8005e72:	1bc0      	subs	r0, r0, r7
 8005e74:	2864      	cmp	r0, #100	; 0x64
 8005e76:	d9f7      	bls.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x28>
      {
          return HAL_TIMEOUT;
 8005e78:	2003      	movs	r0, #3
 8005e7a:	e071      	b.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x120>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */ 
    if(((RCC->CSR & RCC_CSR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL))
 8005e7c:	6d29      	ldr	r1, [r5, #80]	; 0x50
 8005e7e:	6960      	ldr	r0, [r4, #20]
 8005e80:	22c0      	movs	r2, #192	; 0xc0
 8005e82:	4041      	eors	r1, r0
 8005e84:	0292      	lsls	r2, r2, #10
 8005e86:	4b37      	ldr	r3, [pc, #220]	; (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8005e88:	4211      	tst	r1, r2
 8005e8a:	d031      	beq.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0xb0>
    || (tmpreg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL))
#endif /* defined (STM32L053xx) || defined(STM32L063xx) || defined(STM32L073xx) || defined(STM32L083xx) */
    )
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      tmpreg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8005e8c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005e8e:	2080      	movs	r0, #128	; 0x80
 8005e90:	6d1f      	ldr	r7, [r3, #80]	; 0x50
 8005e92:	0300      	lsls	r0, r0, #12
 8005e94:	4338      	orrs	r0, r7
 8005e96:	6518      	str	r0, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005e98:	6d1f      	ldr	r7, [r3, #80]	; 0x50
    || (tmpreg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL))
#endif /* defined (STM32L053xx) || defined(STM32L063xx) || defined(STM32L073xx) || defined(STM32L083xx) */
    )
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      tmpreg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8005e9a:	4e34      	ldr	r6, [pc, #208]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x12c>)
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005e9c:	4834      	ldr	r0, [pc, #208]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
    || (tmpreg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL))
#endif /* defined (STM32L053xx) || defined(STM32L063xx) || defined(STM32L073xx) || defined(STM32L083xx) */
    )
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      tmpreg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8005e9e:	1c11      	adds	r1, r2, #0
 8005ea0:	4031      	ands	r1, r6
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005ea2:	4038      	ands	r0, r7
 8005ea4:	6518      	str	r0, [r3, #80]	; 0x50
      /* Restore the Content of CSR register */
      RCC->CSR = tmpreg;
 8005ea6:	6519      	str	r1, [r3, #80]	; 0x50
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(tmpreg, RCC_CSR_LSERDY))
 8005ea8:	0593      	lsls	r3, r2, #22
 8005eaa:	d40d      	bmi.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x88>
          {
            return HAL_TIMEOUT;
          }
        }
      }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005eac:	6963      	ldr	r3, [r4, #20]
 8005eae:	21c0      	movs	r1, #192	; 0xc0
 8005eb0:	0289      	lsls	r1, r1, #10
 8005eb2:	1c18      	adds	r0, r3, #0
 8005eb4:	4008      	ands	r0, r1
 8005eb6:	4a2f      	ldr	r2, [pc, #188]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005eb8:	4288      	cmp	r0, r1
 8005eba:	d112      	bne.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8005ebc:	6829      	ldr	r1, [r5, #0]
 8005ebe:	400a      	ands	r2, r1
 8005ec0:	1c19      	adds	r1, r3, #0
 8005ec2:	4031      	ands	r1, r6
 8005ec4:	430a      	orrs	r2, r1
 8005ec6:	e00e      	b.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0xa6>
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(tmpreg, RCC_CSR_LSERDY))
      {
        /* Get timeout */
        tickstart = HAL_GetTick();
 8005ec8:	f001 f8c8 	bl	800705c <HAL_GetTick>
 8005ecc:	1c07      	adds	r7, r0, #0
      
        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ece:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8005ed0:	0598      	lsls	r0, r3, #22
 8005ed2:	d4eb      	bmi.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ed4:	f001 f8c2 	bl	800705c <HAL_GetTick>
 8005ed8:	4b27      	ldr	r3, [pc, #156]	; (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8005eda:	1bc0      	subs	r0, r0, r7
 8005edc:	4298      	cmp	r0, r3
 8005ede:	d9f6      	bls.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x8e>
 8005ee0:	e7ca      	b.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0x38>
          {
            return HAL_TIMEOUT;
          }
        }
      }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ee2:	6829      	ldr	r1, [r5, #0]
 8005ee4:	400a      	ands	r2, r1
 8005ee6:	602a      	str	r2, [r5, #0]
 8005ee8:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8005eea:	4016      	ands	r6, r2
 8005eec:	4333      	orrs	r3, r6
 8005eee:	652b      	str	r3, [r5, #80]	; 0x50
    }
  }
  
#if !defined (STM32L011xx) && !defined (STM32L021xx) && !defined (STM32L031xx) && !defined (STM32L041xx)
  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005ef0:	6823      	ldr	r3, [r4, #0]
 8005ef2:	07da      	lsls	r2, r3, #31
 8005ef4:	d506      	bpl.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005ef6:	4a1b      	ldr	r2, [pc, #108]	; (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8005ef8:	2003      	movs	r0, #3
 8005efa:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8005efc:	4381      	bics	r1, r0
 8005efe:	6860      	ldr	r0, [r4, #4]
 8005f00:	4301      	orrs	r1, r0
 8005f02:	64d1      	str	r1, [r2, #76]	; 0x4c
  }
#endif
  
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005f04:	079a      	lsls	r2, r3, #30
 8005f06:	d506      	bpl.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005f08:	4a16      	ldr	r2, [pc, #88]	; (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8005f0a:	200c      	movs	r0, #12
 8005f0c:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8005f0e:	4381      	bics	r1, r0
 8005f10:	68a0      	ldr	r0, [r4, #8]
 8005f12:	4301      	orrs	r1, r0
 8005f14:	64d1      	str	r1, [r2, #76]	; 0x4c
  }
  
  /*------------------------------ LPUART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005f16:	075a      	lsls	r2, r3, #29
 8005f18:	d506      	bpl.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
    
    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005f1a:	4a12      	ldr	r2, [pc, #72]	; (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8005f1c:	4917      	ldr	r1, [pc, #92]	; (8005f7c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005f1e:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 8005f20:	4001      	ands	r1, r0
 8005f22:	68e0      	ldr	r0, [r4, #12]
 8005f24:	4301      	orrs	r1, r0
 8005f26:	64d1      	str	r1, [r2, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005f28:	071a      	lsls	r2, r3, #28
 8005f2a:	d506      	bpl.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0xfa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005f2c:	4a0d      	ldr	r2, [pc, #52]	; (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8005f2e:	4914      	ldr	r1, [pc, #80]	; (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8005f30:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 8005f32:	4001      	ands	r1, r0
 8005f34:	6920      	ldr	r0, [r4, #16]
 8005f36:	4301      	orrs	r1, r0
 8005f38:	64d1      	str	r1, [r2, #76]	; 0x4c
  }  
#endif /* defined (STM32L071xx) (STM32L072xx)|| (STM32L073xx)|| (STM32L081xx)|| (STM32L082xx) || (STM32L083xx) */

#if !defined (STM32L011xx) && !defined (STM32L021xx) && !defined (STM32L031xx) && !defined (STM32L041xx) && !defined (STM32L031xx) && !defined (STM32L041xx) && !defined(STM32L051xx) && !defined(STM32L061xx) && !defined(STM32L071xx) && !defined(STM32L081xx)  
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005f3a:	065a      	lsls	r2, r3, #25
 8005f3c:	d506      	bpl.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x10c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005f3e:	4a09      	ldr	r2, [pc, #36]	; (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8005f40:	4910      	ldr	r1, [pc, #64]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 8005f42:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 8005f44:	4001      	ands	r1, r0
 8005f46:	69a0      	ldr	r0, [r4, #24]
 8005f48:	4301      	orrs	r1, r0
 8005f4a:	64d1      	str	r1, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }
  return HAL_OK;
 8005f4c:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif
  
  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005f4e:	061a      	lsls	r2, r3, #24
 8005f50:	d506      	bpl.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8005f52:	4b04      	ldr	r3, [pc, #16]	; (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8005f54:	4a0c      	ldr	r2, [pc, #48]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8005f56:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005f58:	400a      	ands	r2, r1
 8005f5a:	69e1      	ldr	r1, [r4, #28]
 8005f5c:	430a      	orrs	r2, r1
 8005f5e:	64da      	str	r2, [r3, #76]	; 0x4c
  }
  return HAL_OK;
}
 8005f60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f62:	46c0      	nop			; (mov r8, r8)
 8005f64:	40021000 	.word	0x40021000
 8005f68:	40007000 	.word	0x40007000
 8005f6c:	fffcffff 	.word	0xfffcffff
 8005f70:	fff7ffff 	.word	0xfff7ffff
 8005f74:	ffcfffff 	.word	0xffcfffff
 8005f78:	00001388 	.word	0x00001388
 8005f7c:	fffff3ff 	.word	0xfffff3ff
 8005f80:	ffffcfff 	.word	0xffffcfff
 8005f84:	fbffffff 	.word	0xfbffffff
 8005f88:	fff3ffff 	.word	0xfff3ffff

08005f8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f8e:	1c04      	adds	r4, r0, #0
 
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f90:	6800      	ldr	r0, [r0, #0]
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f92:	b085      	sub	sp, #20
 
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f94:	07c0      	lsls	r0, r0, #31
 8005f96:	d403      	bmi.n	8005fa0 <HAL_RCC_OscConfig+0x14>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f98:	6821      	ldr	r1, [r4, #0]
 8005f9a:	0789      	lsls	r1, r1, #30
 8005f9c:	d456      	bmi.n	800604c <HAL_RCC_OscConfig+0xc0>
 8005f9e:	e09d      	b.n	80060dc <HAL_RCC_OscConfig+0x150>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->CFGR & RCC_CFGR_PLLSRC) == RCC_CFGR_PLLSRC_HSE)))
 8005fa0:	4dbc      	ldr	r5, [pc, #752]	; (8006294 <HAL_RCC_OscConfig+0x308>)
 8005fa2:	230c      	movs	r3, #12
 8005fa4:	68ea      	ldr	r2, [r5, #12]
 8005fa6:	401a      	ands	r2, r3
 8005fa8:	2a08      	cmp	r2, #8
 8005faa:	d008      	beq.n	8005fbe <HAL_RCC_OscConfig+0x32>
 8005fac:	68ea      	ldr	r2, [r5, #12]
 8005fae:	4013      	ands	r3, r2
 8005fb0:	2280      	movs	r2, #128	; 0x80
 8005fb2:	0252      	lsls	r2, r2, #9
 8005fb4:	2b0c      	cmp	r3, #12
 8005fb6:	d109      	bne.n	8005fcc <HAL_RCC_OscConfig+0x40>
 8005fb8:	68eb      	ldr	r3, [r5, #12]
 8005fba:	4213      	tst	r3, r2
 8005fbc:	d006      	beq.n	8005fcc <HAL_RCC_OscConfig+0x40>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fbe:	682b      	ldr	r3, [r5, #0]
 8005fc0:	039a      	lsls	r2, r3, #14
 8005fc2:	d5e9      	bpl.n	8005f98 <HAL_RCC_OscConfig+0xc>
 8005fc4:	6863      	ldr	r3, [r4, #4]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d1e6      	bne.n	8005f98 <HAL_RCC_OscConfig+0xc>
 8005fca:	e209      	b.n	80063e0 <HAL_RCC_OscConfig+0x454>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005fcc:	6863      	ldr	r3, [r4, #4]
 8005fce:	2180      	movs	r1, #128	; 0x80
 8005fd0:	0249      	lsls	r1, r1, #9
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d103      	bne.n	8005fde <HAL_RCC_OscConfig+0x52>
 8005fd6:	682b      	ldr	r3, [r5, #0]
 8005fd8:	431a      	orrs	r2, r3
 8005fda:	602a      	str	r2, [r5, #0]
 8005fdc:	e01d      	b.n	800601a <HAL_RCC_OscConfig+0x8e>
 8005fde:	20a0      	movs	r0, #160	; 0xa0
 8005fe0:	4aad      	ldr	r2, [pc, #692]	; (8006298 <HAL_RCC_OscConfig+0x30c>)
 8005fe2:	02c0      	lsls	r0, r0, #11
 8005fe4:	4283      	cmp	r3, r0
 8005fe6:	d10b      	bne.n	8006000 <HAL_RCC_OscConfig+0x74>
 8005fe8:	682b      	ldr	r3, [r5, #0]
 8005fea:	401a      	ands	r2, r3
 8005fec:	602a      	str	r2, [r5, #0]
 8005fee:	682a      	ldr	r2, [r5, #0]
 8005ff0:	2380      	movs	r3, #128	; 0x80
 8005ff2:	02db      	lsls	r3, r3, #11
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	602b      	str	r3, [r5, #0]
 8005ff8:	682b      	ldr	r3, [r5, #0]
 8005ffa:	4319      	orrs	r1, r3
 8005ffc:	6029      	str	r1, [r5, #0]
 8005ffe:	e00c      	b.n	800601a <HAL_RCC_OscConfig+0x8e>
 8006000:	6828      	ldr	r0, [r5, #0]
 8006002:	4002      	ands	r2, r0
 8006004:	602a      	str	r2, [r5, #0]
 8006006:	682a      	ldr	r2, [r5, #0]
 8006008:	4011      	ands	r1, r2
 800600a:	9103      	str	r1, [sp, #12]
 800600c:	9a03      	ldr	r2, [sp, #12]
 800600e:	6829      	ldr	r1, [r5, #0]
 8006010:	4aa2      	ldr	r2, [pc, #648]	; (800629c <HAL_RCC_OscConfig+0x310>)
 8006012:	400a      	ands	r2, r1
 8006014:	602a      	str	r2, [r5, #0]
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006016:	2b00      	cmp	r3, #0
 8006018:	d00c      	beq.n	8006034 <HAL_RCC_OscConfig+0xa8>
      {
        /* Get timeout */
        tickstart = HAL_GetTick();
 800601a:	f001 f81f 	bl	800705c <HAL_GetTick>
 800601e:	1c06      	adds	r6, r0, #0
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006020:	682b      	ldr	r3, [r5, #0]
 8006022:	0398      	lsls	r0, r3, #14
 8006024:	d4b8      	bmi.n	8005f98 <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_HSE_TIMEOUT_VALUE)
 8006026:	f001 f819 	bl	800705c <HAL_GetTick>
 800602a:	1b80      	subs	r0, r0, r6
 800602c:	2864      	cmp	r0, #100	; 0x64
 800602e:	d9f7      	bls.n	8006020 <HAL_RCC_OscConfig+0x94>
          {
            return HAL_TIMEOUT;
 8006030:	2003      	movs	r0, #3
 8006032:	e1d6      	b.n	80063e2 <HAL_RCC_OscConfig+0x456>
        }      
      }
      else
      {
        /* Get timeout */
        tickstart = HAL_GetTick();
 8006034:	f001 f812 	bl	800705c <HAL_GetTick>
 8006038:	1c06      	adds	r6, r0, #0
      
        /* Wait till HSE is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800603a:	682b      	ldr	r3, [r5, #0]
 800603c:	0399      	lsls	r1, r3, #14
 800603e:	d5ab      	bpl.n	8005f98 <HAL_RCC_OscConfig+0xc>
        {
           if((HAL_GetTick() - tickstart ) > RCC_HSE_TIMEOUT_VALUE)
 8006040:	f001 f80c 	bl	800705c <HAL_GetTick>
 8006044:	1b80      	subs	r0, r0, r6
 8006046:	2864      	cmp	r0, #100	; 0x64
 8006048:	d9f7      	bls.n	800603a <HAL_RCC_OscConfig+0xae>
 800604a:	e7f1      	b.n	8006030 <HAL_RCC_OscConfig+0xa4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* When the HSI is used as system clock it will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->CFGR & RCC_CFGR_PLLSRC) == RCC_CFGR_PLLSRC_HSI)))
 800604c:	4d91      	ldr	r5, [pc, #580]	; (8006294 <HAL_RCC_OscConfig+0x308>)
 800604e:	230c      	movs	r3, #12
 8006050:	68ea      	ldr	r2, [r5, #12]
 8006052:	401a      	ands	r2, r3
 8006054:	2a04      	cmp	r2, #4
 8006056:	d006      	beq.n	8006066 <HAL_RCC_OscConfig+0xda>
 8006058:	68ea      	ldr	r2, [r5, #12]
 800605a:	4013      	ands	r3, r2
 800605c:	2b0c      	cmp	r3, #12
 800605e:	d111      	bne.n	8006084 <HAL_RCC_OscConfig+0xf8>
 8006060:	68eb      	ldr	r3, [r5, #12]
 8006062:	03da      	lsls	r2, r3, #15
 8006064:	d40e      	bmi.n	8006084 <HAL_RCC_OscConfig+0xf8>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006066:	682b      	ldr	r3, [r5, #0]
 8006068:	0758      	lsls	r0, r3, #29
 800606a:	d503      	bpl.n	8006074 <HAL_RCC_OscConfig+0xe8>
 800606c:	68e1      	ldr	r1, [r4, #12]
 800606e:	2901      	cmp	r1, #1
 8006070:	d000      	beq.n	8006074 <HAL_RCC_OscConfig+0xe8>
 8006072:	e1b5      	b.n	80063e0 <HAL_RCC_OscConfig+0x454>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006074:	6923      	ldr	r3, [r4, #16]
 8006076:	6869      	ldr	r1, [r5, #4]
 8006078:	021a      	lsls	r2, r3, #8
 800607a:	4b89      	ldr	r3, [pc, #548]	; (80062a0 <HAL_RCC_OscConfig+0x314>)
 800607c:	400b      	ands	r3, r1
 800607e:	4313      	orrs	r3, r2
 8006080:	606b      	str	r3, [r5, #4]
    
    /* When the HSI is used as system clock it will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->CFGR & RCC_CFGR_PLLSRC) == RCC_CFGR_PLLSRC_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006082:	e02b      	b.n	80060dc <HAL_RCC_OscConfig+0x150>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006084:	68e2      	ldr	r2, [r4, #12]
 8006086:	2309      	movs	r3, #9
 8006088:	2a00      	cmp	r2, #0
 800608a:	d018      	beq.n	80060be <HAL_RCC_OscConfig+0x132>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4 */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800608c:	6829      	ldr	r1, [r5, #0]
 800608e:	4399      	bics	r1, r3
 8006090:	430a      	orrs	r2, r1
 8006092:	602a      	str	r2, [r5, #0]
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006094:	f000 ffe2 	bl	800705c <HAL_GetTick>
 8006098:	1c06      	adds	r6, r0, #0
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800609a:	682a      	ldr	r2, [r5, #0]
 800609c:	4b7d      	ldr	r3, [pc, #500]	; (8006294 <HAL_RCC_OscConfig+0x308>)
 800609e:	0750      	lsls	r0, r2, #29
 80060a0:	d405      	bmi.n	80060ae <HAL_RCC_OscConfig+0x122>
        {
          if((HAL_GetTick() - tickstart ) > RCC_HSI_TIMEOUT_VALUE)
 80060a2:	f000 ffdb 	bl	800705c <HAL_GetTick>
 80060a6:	1b80      	subs	r0, r0, r6
 80060a8:	2864      	cmp	r0, #100	; 0x64
 80060aa:	d9f6      	bls.n	800609a <HAL_RCC_OscConfig+0x10e>
 80060ac:	e7c0      	b.n	8006030 <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
          }      
        } 
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060ae:	6922      	ldr	r2, [r4, #16]
 80060b0:	6858      	ldr	r0, [r3, #4]
 80060b2:	0211      	lsls	r1, r2, #8
 80060b4:	4a7a      	ldr	r2, [pc, #488]	; (80062a0 <HAL_RCC_OscConfig+0x314>)
 80060b6:	4002      	ands	r2, r0
 80060b8:	430a      	orrs	r2, r1
 80060ba:	605a      	str	r2, [r3, #4]
 80060bc:	e00e      	b.n	80060dc <HAL_RCC_OscConfig+0x150>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80060be:	682a      	ldr	r2, [r5, #0]
 80060c0:	439a      	bics	r2, r3
 80060c2:	602a      	str	r2, [r5, #0]
       
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060c4:	f000 ffca 	bl	800705c <HAL_GetTick>
 80060c8:	1c06      	adds	r6, r0, #0
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060ca:	682b      	ldr	r3, [r5, #0]
 80060cc:	0758      	lsls	r0, r3, #29
 80060ce:	d505      	bpl.n	80060dc <HAL_RCC_OscConfig+0x150>
        {
          if((HAL_GetTick() - tickstart ) > RCC_HSI_TIMEOUT_VALUE)
 80060d0:	f000 ffc4 	bl	800705c <HAL_GetTick>
 80060d4:	1b80      	subs	r0, r0, r6
 80060d6:	2864      	cmp	r0, #100	; 0x64
 80060d8:	d9f7      	bls.n	80060ca <HAL_RCC_OscConfig+0x13e>
 80060da:	e7a9      	b.n	8006030 <HAL_RCC_OscConfig+0xa4>
        } 
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80060dc:	6821      	ldr	r1, [r4, #0]
 80060de:	06c9      	lsls	r1, r1, #27
 80060e0:	d54f      	bpl.n	8006182 <HAL_RCC_OscConfig+0x1f6>
  {
        
    /* When the MSI is used as system clock it will not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 80060e2:	4d6c      	ldr	r5, [pc, #432]	; (8006294 <HAL_RCC_OscConfig+0x308>)
 80060e4:	230c      	movs	r3, #12
 80060e6:	68ea      	ldr	r2, [r5, #12]
 80060e8:	421a      	tst	r2, r3
 80060ea:	d117      	bne.n	800611c <HAL_RCC_OscConfig+0x190>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80060ec:	682b      	ldr	r3, [r5, #0]
 80060ee:	059a      	lsls	r2, r3, #22
 80060f0:	d503      	bpl.n	80060fa <HAL_RCC_OscConfig+0x16e>
 80060f2:	69e3      	ldr	r3, [r4, #28]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d100      	bne.n	80060fa <HAL_RCC_OscConfig+0x16e>
 80060f8:	e172      	b.n	80063e0 <HAL_RCC_OscConfig+0x454>
       /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

       /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG (RCC_OscInitStruct->MSIClockRange);   
 80060fa:	686a      	ldr	r2, [r5, #4]
 80060fc:	4b69      	ldr	r3, [pc, #420]	; (80062a4 <HAL_RCC_OscConfig+0x318>)
 80060fe:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006100:	4013      	ands	r3, r2
 8006102:	4303      	orrs	r3, r0
 8006104:	606b      	str	r3, [r5, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006106:	686b      	ldr	r3, [r5, #4]
 8006108:	6a21      	ldr	r1, [r4, #32]
 800610a:	021b      	lsls	r3, r3, #8
 800610c:	060a      	lsls	r2, r1, #24
 800610e:	0a1b      	lsrs	r3, r3, #8
 8006110:	4313      	orrs	r3, r2
 8006112:	606b      	str	r3, [r5, #4]

        /* Configure the source of time base considering new system clocks settings*/
        HAL_InitTick (TICK_INT_PRIORITY);
 8006114:	2000      	movs	r0, #0
 8006116:	f000 ff77 	bl	8007008 <HAL_InitTick>
 800611a:	e032      	b.n	8006182 <HAL_RCC_OscConfig+0x1f6>
    }
    else
    {
      /* Check the MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
      if((RCC_OscInitStruct->MSIState)!= RCC_MSI_OFF)
 800611c:	69e2      	ldr	r2, [r4, #28]
 800611e:	2a00      	cmp	r2, #0
 8006120:	d01f      	beq.n	8006162 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006122:	682a      	ldr	r2, [r5, #0]
 8006124:	2380      	movs	r3, #128	; 0x80
 8006126:	005b      	lsls	r3, r3, #1
 8006128:	4313      	orrs	r3, r2
 800612a:	602b      	str	r3, [r5, #0]
        
        /* Get timeout */
        tickstart = HAL_GetTick();
 800612c:	f000 ff96 	bl	800705c <HAL_GetTick>
 8006130:	1c06      	adds	r6, r0, #0
      
        /* Wait till MSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8006132:	682a      	ldr	r2, [r5, #0]
 8006134:	4b57      	ldr	r3, [pc, #348]	; (8006294 <HAL_RCC_OscConfig+0x308>)
 8006136:	0590      	lsls	r0, r2, #22
 8006138:	d405      	bmi.n	8006146 <HAL_RCC_OscConfig+0x1ba>
        {
          if((HAL_GetTick() - tickstart ) > RCC_MSI_TIMEOUT_VALUE)
 800613a:	f000 ff8f 	bl	800705c <HAL_GetTick>
 800613e:	1b80      	subs	r0, r0, r6
 8006140:	2864      	cmp	r0, #100	; 0x64
 8006142:	d9f6      	bls.n	8006132 <HAL_RCC_OscConfig+0x1a6>
 8006144:	e774      	b.n	8006030 <HAL_RCC_OscConfig+0xa4>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG (RCC_OscInitStruct->MSIClockRange);   
 8006146:	6859      	ldr	r1, [r3, #4]
 8006148:	4a56      	ldr	r2, [pc, #344]	; (80062a4 <HAL_RCC_OscConfig+0x318>)
 800614a:	400a      	ands	r2, r1
 800614c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800614e:	430a      	orrs	r2, r1
 8006150:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006152:	685a      	ldr	r2, [r3, #4]
 8006154:	6a20      	ldr	r0, [r4, #32]
 8006156:	0212      	lsls	r2, r2, #8
 8006158:	0601      	lsls	r1, r0, #24
 800615a:	0a12      	lsrs	r2, r2, #8
 800615c:	430a      	orrs	r2, r1
 800615e:	605a      	str	r2, [r3, #4]
 8006160:	e00f      	b.n	8006182 <HAL_RCC_OscConfig+0x1f6>
        
      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006162:	682a      	ldr	r2, [r5, #0]
 8006164:	4b50      	ldr	r3, [pc, #320]	; (80062a8 <HAL_RCC_OscConfig+0x31c>)
 8006166:	4013      	ands	r3, r2
 8006168:	602b      	str	r3, [r5, #0]
        
        /* Get timeout */
        tickstart = HAL_GetTick();
 800616a:	f000 ff77 	bl	800705c <HAL_GetTick>
 800616e:	1c06      	adds	r6, r0, #0
      
        /* Wait till MSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET)
 8006170:	682b      	ldr	r3, [r5, #0]
 8006172:	0599      	lsls	r1, r3, #22
 8006174:	d505      	bpl.n	8006182 <HAL_RCC_OscConfig+0x1f6>
        {
          if((HAL_GetTick() - tickstart ) > RCC_MSI_TIMEOUT_VALUE)
 8006176:	f000 ff71 	bl	800705c <HAL_GetTick>
 800617a:	1b80      	subs	r0, r0, r6
 800617c:	2864      	cmp	r0, #100	; 0x64
 800617e:	d9f7      	bls.n	8006170 <HAL_RCC_OscConfig+0x1e4>
 8006180:	e756      	b.n	8006030 <HAL_RCC_OscConfig+0xa4>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006182:	6822      	ldr	r2, [r4, #0]
 8006184:	0712      	lsls	r2, r2, #28
 8006186:	d403      	bmi.n	8006190 <HAL_RCC_OscConfig+0x204>
    }
  }
  
#if !defined (STM32L011xx) && !defined (STM32L021xx) && !defined (STM32L031xx) && !defined (STM32L041xx) && !defined(STM32L051xx) && !defined(STM32L061xx) && !defined(STM32L071xx) && !defined(STM32L081xx)  
   /*------------------------------ HSI48 Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006188:	6823      	ldr	r3, [r4, #0]
 800618a:	069b      	lsls	r3, r3, #26
 800618c:	d422      	bmi.n	80061d4 <HAL_RCC_OscConfig+0x248>
 800618e:	e037      	b.n	8006200 <HAL_RCC_OscConfig+0x274>
 8006190:	4d40      	ldr	r5, [pc, #256]	; (8006294 <HAL_RCC_OscConfig+0x308>)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006192:	6960      	ldr	r0, [r4, #20]
 8006194:	2301      	movs	r3, #1
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006196:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006198:	2800      	cmp	r0, #0
 800619a:	d00d      	beq.n	80061b8 <HAL_RCC_OscConfig+0x22c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800619c:	4313      	orrs	r3, r2
 800619e:	652b      	str	r3, [r5, #80]	; 0x50
      
      /* Get timeout */
      tickstart = HAL_GetTick();
 80061a0:	f000 ff5c 	bl	800705c <HAL_GetTick>
 80061a4:	1c06      	adds	r6, r0, #0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80061a6:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80061a8:	0799      	lsls	r1, r3, #30
 80061aa:	d4ed      	bmi.n	8006188 <HAL_RCC_OscConfig+0x1fc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSI_TIMEOUT_VALUE)
 80061ac:	f000 ff56 	bl	800705c <HAL_GetTick>
 80061b0:	1b80      	subs	r0, r0, r6
 80061b2:	2864      	cmp	r0, #100	; 0x64
 80061b4:	d9f7      	bls.n	80061a6 <HAL_RCC_OscConfig+0x21a>
 80061b6:	e73b      	b.n	8006030 <HAL_RCC_OscConfig+0xa4>
      } 
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80061b8:	439a      	bics	r2, r3
 80061ba:	652a      	str	r2, [r5, #80]	; 0x50
      
      /* Get timeout */
      tickstart = HAL_GetTick();
 80061bc:	f000 ff4e 	bl	800705c <HAL_GetTick>
 80061c0:	1c06      	adds	r6, r0, #0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061c2:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80061c4:	079a      	lsls	r2, r3, #30
 80061c6:	d5df      	bpl.n	8006188 <HAL_RCC_OscConfig+0x1fc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSI_TIMEOUT_VALUE)
 80061c8:	f000 ff48 	bl	800705c <HAL_GetTick>
 80061cc:	1b80      	subs	r0, r0, r6
 80061ce:	2864      	cmp	r0, #100	; 0x64
 80061d0:	d9f7      	bls.n	80061c2 <HAL_RCC_OscConfig+0x236>
 80061d2:	e72d      	b.n	8006030 <HAL_RCC_OscConfig+0xa4>
 80061d4:	4d2f      	ldr	r5, [pc, #188]	; (8006294 <HAL_RCC_OscConfig+0x308>)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
    
    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80061d6:	69a0      	ldr	r0, [r4, #24]
 80061d8:	2201      	movs	r2, #1
 80061da:	4b34      	ldr	r3, [pc, #208]	; (80062ac <HAL_RCC_OscConfig+0x320>)
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80061dc:	68a9      	ldr	r1, [r5, #8]
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
    
    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80061de:	2800      	cmp	r0, #0
 80061e0:	d018      	beq.n	8006214 <HAL_RCC_OscConfig+0x288>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80061e2:	4311      	orrs	r1, r2
 80061e4:	60a9      	str	r1, [r5, #8]
 80061e6:	6b69      	ldr	r1, [r5, #52]	; 0x34
 80061e8:	430a      	orrs	r2, r1
 80061ea:	636a      	str	r2, [r5, #52]	; 0x34
 80061ec:	6a1a      	ldr	r2, [r3, #32]
 80061ee:	4930      	ldr	r1, [pc, #192]	; (80062b0 <HAL_RCC_OscConfig+0x324>)
 80061f0:	430a      	orrs	r2, r1
 80061f2:	621a      	str	r2, [r3, #32]
      
      /* Get timeout */
      tickstart = HAL_GetTick();
 80061f4:	f000 ff32 	bl	800705c <HAL_GetTick>
 80061f8:	1c06      	adds	r6, r0, #0
      
      /* Wait till HSI48 is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80061fa:	68ab      	ldr	r3, [r5, #8]
 80061fc:	0799      	lsls	r1, r3, #30
 80061fe:	d503      	bpl.n	8006208 <HAL_RCC_OscConfig+0x27c>
    }
  }
#endif /* !defined (STM32L011xx) && !defined (STM32L021xx) && !(STM32L031xx) && !(STM32L041xx) && !defined(STM32L051xx) && !defined(STM32L061xx) && !defined(STM32L071xx) && !defined(STM32L081xx)*/  
  
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006200:	6823      	ldr	r3, [r4, #0]
 8006202:	075b      	lsls	r3, r3, #29
 8006204:	d418      	bmi.n	8006238 <HAL_RCC_OscConfig+0x2ac>
 8006206:	e0a3      	b.n	8006350 <HAL_RCC_OscConfig+0x3c4>
      tickstart = HAL_GetTick();
      
      /* Wait till HSI48 is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_HSI48_TIMEOUT_VALUE)
 8006208:	f000 ff28 	bl	800705c <HAL_GetTick>
 800620c:	1b80      	subs	r0, r0, r6
 800620e:	2864      	cmp	r0, #100	; 0x64
 8006210:	d9f3      	bls.n	80061fa <HAL_RCC_OscConfig+0x26e>
 8006212:	e70d      	b.n	8006030 <HAL_RCC_OscConfig+0xa4>
      } 
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006214:	4391      	bics	r1, r2
 8006216:	60a9      	str	r1, [r5, #8]
 8006218:	6a19      	ldr	r1, [r3, #32]
 800621a:	4a26      	ldr	r2, [pc, #152]	; (80062b4 <HAL_RCC_OscConfig+0x328>)
 800621c:	400a      	ands	r2, r1
 800621e:	621a      	str	r2, [r3, #32]
      
      /* Get timeout */
      tickstart = HAL_GetTick();
 8006220:	f000 ff1c 	bl	800705c <HAL_GetTick>
 8006224:	1c06      	adds	r6, r0, #0
      
      /* Wait till HSI48 is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8006226:	68ab      	ldr	r3, [r5, #8]
 8006228:	079a      	lsls	r2, r3, #30
 800622a:	d5e9      	bpl.n	8006200 <HAL_RCC_OscConfig+0x274>
      {
        if((HAL_GetTick() - tickstart ) > RCC_HSI48_TIMEOUT_VALUE)
 800622c:	f000 ff16 	bl	800705c <HAL_GetTick>
 8006230:	1b80      	subs	r0, r0, r6
 8006232:	2864      	cmp	r0, #100	; 0x64
 8006234:	d9f7      	bls.n	8006226 <HAL_RCC_OscConfig+0x29a>
 8006236:	e6fb      	b.n	8006030 <HAL_RCC_OscConfig+0xa4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR, RCC_APB1ENR_PWREN))
 8006238:	4d16      	ldr	r5, [pc, #88]	; (8006294 <HAL_RCC_OscConfig+0x308>)
 800623a:	2380      	movs	r3, #128	; 0x80
 800623c:	6baa      	ldr	r2, [r5, #56]	; 0x38
#endif /* !defined (STM32L011xx) && !defined (STM32L021xx) && !(STM32L031xx) && !(STM32L041xx) && !defined(STM32L051xx) && !defined(STM32L061xx) && !defined(STM32L071xx) && !defined(STM32L081xx)*/  
  
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
  {
    FlagStatus       pwrclkchanged = RESET;
 800623e:	2000      	movs	r0, #0
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR, RCC_APB1ENR_PWREN))
 8006240:	055b      	lsls	r3, r3, #21
#endif /* !defined (STM32L011xx) && !defined (STM32L021xx) && !(STM32L031xx) && !(STM32L041xx) && !defined(STM32L051xx) && !defined(STM32L061xx) && !defined(STM32L071xx) && !defined(STM32L081xx)*/  
  
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
  {
    FlagStatus       pwrclkchanged = RESET;
 8006242:	9000      	str	r0, [sp, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR, RCC_APB1ENR_PWREN))
 8006244:	421a      	tst	r2, r3
 8006246:	d104      	bne.n	8006252 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006248:	6baa      	ldr	r2, [r5, #56]	; 0x38
      pwrclkchanged = SET;
 800624a:	2101      	movs	r1, #1

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR, RCC_APB1ENR_PWREN))
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800624c:	4313      	orrs	r3, r2
 800624e:	63ab      	str	r3, [r5, #56]	; 0x38
      pwrclkchanged = SET;
 8006250:	9100      	str	r1, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006252:	4e19      	ldr	r6, [pc, #100]	; (80062b8 <HAL_RCC_OscConfig+0x32c>)
 8006254:	2380      	movs	r3, #128	; 0x80
 8006256:	6832      	ldr	r2, [r6, #0]
  
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
  {
    FlagStatus       pwrclkchanged = RESET;
    FlagStatus       backupchanged = RESET;
 8006258:	2000      	movs	r0, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800625a:	005b      	lsls	r3, r3, #1
  
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
  {
    FlagStatus       pwrclkchanged = RESET;
    FlagStatus       backupchanged = RESET;
 800625c:	9001      	str	r0, [sp, #4]
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800625e:	421a      	tst	r2, r3
 8006260:	d110      	bne.n	8006284 <HAL_RCC_OscConfig+0x2f8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006262:	6832      	ldr	r2, [r6, #0]
 8006264:	4313      	orrs	r3, r2
 8006266:	6033      	str	r3, [r6, #0]
      backupchanged = SET;
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006268:	f000 fef8 	bl	800705c <HAL_GetTick>
 800626c:	1c07      	adds	r7, r0, #0

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800626e:	6833      	ldr	r3, [r6, #0]
 8006270:	05d9      	lsls	r1, r3, #23
 8006272:	d405      	bmi.n	8006280 <HAL_RCC_OscConfig+0x2f4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006274:	f000 fef2 	bl	800705c <HAL_GetTick>
 8006278:	1bc0      	subs	r0, r0, r7
 800627a:	2864      	cmp	r0, #100	; 0x64
 800627c:	d9f7      	bls.n	800626e <HAL_RCC_OscConfig+0x2e2>
 800627e:	e6d7      	b.n	8006030 <HAL_RCC_OscConfig+0xa4>
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
      backupchanged = SET;
 8006280:	2201      	movs	r2, #1
 8006282:	9201      	str	r2, [sp, #4]
        }
      }
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006284:	68a3      	ldr	r3, [r4, #8]
 8006286:	2180      	movs	r1, #128	; 0x80
 8006288:	0049      	lsls	r1, r1, #1
 800628a:	428b      	cmp	r3, r1
 800628c:	d116      	bne.n	80062bc <HAL_RCC_OscConfig+0x330>
 800628e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8006290:	4313      	orrs	r3, r2
 8006292:	e037      	b.n	8006304 <HAL_RCC_OscConfig+0x378>
 8006294:	40021000 	.word	0x40021000
 8006298:	fffeffff 	.word	0xfffeffff
 800629c:	fffbffff 	.word	0xfffbffff
 80062a0:	ffffe0ff 	.word	0xffffe0ff
 80062a4:	ffff1fff 	.word	0xffff1fff
 80062a8:	fffffeff 	.word	0xfffffeff
 80062ac:	40010000 	.word	0x40010000
 80062b0:	00002001 	.word	0x00002001
 80062b4:	ffffdffe 	.word	0xffffdffe
 80062b8:	40007000 	.word	0x40007000
 80062bc:	4a4a      	ldr	r2, [pc, #296]	; (80063e8 <HAL_RCC_OscConfig+0x45c>)
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d10a      	bne.n	80062d8 <HAL_RCC_OscConfig+0x34c>
 80062c2:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80062c4:	401a      	ands	r2, r3
 80062c6:	652a      	str	r2, [r5, #80]	; 0x50
 80062c8:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 80062ca:	4b48      	ldr	r3, [pc, #288]	; (80063ec <HAL_RCC_OscConfig+0x460>)
 80062cc:	4013      	ands	r3, r2
 80062ce:	652b      	str	r3, [r5, #80]	; 0x50
      }
    }
    else
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 80062d0:	f000 fec4 	bl	800705c <HAL_GetTick>
 80062d4:	1c07      	adds	r7, r0, #0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062d6:	e02a      	b.n	800632e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80062d8:	20a0      	movs	r0, #160	; 0xa0
 80062da:	00c0      	lsls	r0, r0, #3
 80062dc:	4283      	cmp	r3, r0
 80062de:	d10b      	bne.n	80062f8 <HAL_RCC_OscConfig+0x36c>
 80062e0:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80062e2:	401a      	ands	r2, r3
 80062e4:	652a      	str	r2, [r5, #80]	; 0x50
 80062e6:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 80062e8:	2380      	movs	r3, #128	; 0x80
 80062ea:	00db      	lsls	r3, r3, #3
 80062ec:	4313      	orrs	r3, r2
 80062ee:	652b      	str	r3, [r5, #80]	; 0x50
 80062f0:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80062f2:	4319      	orrs	r1, r3
 80062f4:	6529      	str	r1, [r5, #80]	; 0x50
 80062f6:	e006      	b.n	8006306 <HAL_RCC_OscConfig+0x37a>
 80062f8:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80062fa:	401a      	ands	r2, r3
 80062fc:	652a      	str	r2, [r5, #80]	; 0x50
 80062fe:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8006300:	4b3a      	ldr	r3, [pc, #232]	; (80063ec <HAL_RCC_OscConfig+0x460>)
 8006302:	4013      	ands	r3, r2
 8006304:	652b      	str	r3, [r5, #80]	; 0x50

    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {     
      /* Get timeout */
      tickstart = HAL_GetTick();
 8006306:	f000 fea9 	bl	800705c <HAL_GetTick>
 800630a:	1c07      	adds	r7, r0, #0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800630c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800630e:	0598      	lsls	r0, r3, #22
 8006310:	d410      	bmi.n	8006334 <HAL_RCC_OscConfig+0x3a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006312:	f000 fea3 	bl	800705c <HAL_GetTick>
 8006316:	4b36      	ldr	r3, [pc, #216]	; (80063f0 <HAL_RCC_OscConfig+0x464>)
 8006318:	1bc0      	subs	r0, r0, r7
 800631a:	4298      	cmp	r0, r3
 800631c:	d9f6      	bls.n	800630c <HAL_RCC_OscConfig+0x380>
 800631e:	e687      	b.n	8006030 <HAL_RCC_OscConfig+0xa4>
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006320:	f000 fe9c 	bl	800705c <HAL_GetTick>
 8006324:	4b32      	ldr	r3, [pc, #200]	; (80063f0 <HAL_RCC_OscConfig+0x464>)
 8006326:	1bc0      	subs	r0, r0, r7
 8006328:	4298      	cmp	r0, r3
 800632a:	d900      	bls.n	800632e <HAL_RCC_OscConfig+0x3a2>
 800632c:	e680      	b.n	8006030 <HAL_RCC_OscConfig+0xa4>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800632e:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8006330:	059a      	lsls	r2, r3, #22
 8006332:	d4f5      	bmi.n	8006320 <HAL_RCC_OscConfig+0x394>
        }      
      }
    }

    /* Requires to disable write access to Backup Domain of necessary */
    if(backupchanged == SET)
 8006334:	9901      	ldr	r1, [sp, #4]
 8006336:	2901      	cmp	r1, #1
 8006338:	d103      	bne.n	8006342 <HAL_RCC_OscConfig+0x3b6>
    {
      CLEAR_BIT(PWR->CR, PWR_CR_DBP);
 800633a:	6832      	ldr	r2, [r6, #0]
 800633c:	4b2a      	ldr	r3, [pc, #168]	; (80063e8 <HAL_RCC_OscConfig+0x45c>)
 800633e:	4013      	ands	r3, r2
 8006340:	6033      	str	r3, [r6, #0]
    }
    if(pwrclkchanged == SET)
 8006342:	9b00      	ldr	r3, [sp, #0]
 8006344:	2b01      	cmp	r3, #1
 8006346:	d103      	bne.n	8006350 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006348:	6baa      	ldr	r2, [r5, #56]	; 0x38
 800634a:	4b2a      	ldr	r3, [pc, #168]	; (80063f4 <HAL_RCC_OscConfig+0x468>)
 800634c:	4013      	ands	r3, r2
 800634e:	63ab      	str	r3, [r5, #56]	; 0x38
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006350:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8006352:	2a00      	cmp	r2, #0
 8006354:	d101      	bne.n	800635a <HAL_RCC_OscConfig+0x3ce>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8006356:	2000      	movs	r0, #0
 8006358:	e043      	b.n	80063e2 <HAL_RCC_OscConfig+0x456>
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800635a:	4d27      	ldr	r5, [pc, #156]	; (80063f8 <HAL_RCC_OscConfig+0x46c>)
 800635c:	230c      	movs	r3, #12
 800635e:	68e9      	ldr	r1, [r5, #12]
 8006360:	400b      	ands	r3, r1
 8006362:	2b0c      	cmp	r3, #12
 8006364:	d03c      	beq.n	80063e0 <HAL_RCC_OscConfig+0x454>
 8006366:	4b25      	ldr	r3, [pc, #148]	; (80063fc <HAL_RCC_OscConfig+0x470>)
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006368:	2a02      	cmp	r2, #2
 800636a:	d12a      	bne.n	80063c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));
        
        
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800636c:	682a      	ldr	r2, [r5, #0]
 800636e:	4013      	ands	r3, r2
 8006370:	602b      	str	r3, [r5, #0]
        
        /* Get timeout */
        tickstart = HAL_GetTick();
 8006372:	f000 fe73 	bl	800705c <HAL_GetTick>
 8006376:	1c06      	adds	r6, r0, #0
      
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006378:	682a      	ldr	r2, [r5, #0]
 800637a:	4b1f      	ldr	r3, [pc, #124]	; (80063f8 <HAL_RCC_OscConfig+0x46c>)
 800637c:	0190      	lsls	r0, r2, #6
 800637e:	d505      	bpl.n	800638c <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > RCC_PLL_TIMEOUT_VALUE)
 8006380:	f000 fe6c 	bl	800705c <HAL_GetTick>
 8006384:	1b80      	subs	r0, r0, r6
 8006386:	2864      	cmp	r0, #100	; 0x64
 8006388:	d9f6      	bls.n	8006378 <HAL_RCC_OscConfig+0x3ec>
 800638a:	e651      	b.n	8006030 <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
          }      
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800638c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800638e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006390:	68d8      	ldr	r0, [r3, #12]
 8006392:	4311      	orrs	r1, r2
 8006394:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006396:	4311      	orrs	r1, r2
 8006398:	4a19      	ldr	r2, [pc, #100]	; (8006400 <HAL_RCC_OscConfig+0x474>)
 800639a:	4002      	ands	r2, r0
 800639c:	430a      	orrs	r2, r1
 800639e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80063a0:	6819      	ldr	r1, [r3, #0]
 80063a2:	2280      	movs	r2, #128	; 0x80
 80063a4:	0452      	lsls	r2, r2, #17
 80063a6:	430a      	orrs	r2, r1
 80063a8:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80063aa:	f000 fe57 	bl	800705c <HAL_GetTick>
 80063ae:	1c04      	adds	r4, r0, #0
      
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063b0:	682b      	ldr	r3, [r5, #0]
 80063b2:	0198      	lsls	r0, r3, #6
 80063b4:	d4cf      	bmi.n	8006356 <HAL_RCC_OscConfig+0x3ca>
        {
          if((HAL_GetTick() - tickstart ) > RCC_PLL_TIMEOUT_VALUE)
 80063b6:	f000 fe51 	bl	800705c <HAL_GetTick>
 80063ba:	1b00      	subs	r0, r0, r4
 80063bc:	2864      	cmp	r0, #100	; 0x64
 80063be:	d9f7      	bls.n	80063b0 <HAL_RCC_OscConfig+0x424>
 80063c0:	e636      	b.n	8006030 <HAL_RCC_OscConfig+0xa4>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();       
 80063c2:	682a      	ldr	r2, [r5, #0]
 80063c4:	4013      	ands	r3, r2
 80063c6:	602b      	str	r3, [r5, #0]
        /* Get timeout */
        tickstart = HAL_GetTick();
 80063c8:	f000 fe48 	bl	800705c <HAL_GetTick>
 80063cc:	1c04      	adds	r4, r0, #0
      
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063ce:	682b      	ldr	r3, [r5, #0]
 80063d0:	0199      	lsls	r1, r3, #6
 80063d2:	d5c0      	bpl.n	8006356 <HAL_RCC_OscConfig+0x3ca>
        {
          if((HAL_GetTick() - tickstart ) > RCC_PLL_TIMEOUT_VALUE)
 80063d4:	f000 fe42 	bl	800705c <HAL_GetTick>
 80063d8:	1b00      	subs	r0, r0, r4
 80063da:	2864      	cmp	r0, #100	; 0x64
 80063dc:	d9f7      	bls.n	80063ce <HAL_RCC_OscConfig+0x442>
 80063de:	e627      	b.n	8006030 <HAL_RCC_OscConfig+0xa4>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80063e0:	2001      	movs	r0, #1
    }
  }
  return HAL_OK;
}
 80063e2:	b005      	add	sp, #20
 80063e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063e6:	46c0      	nop			; (mov r8, r8)
 80063e8:	fffffeff 	.word	0xfffffeff
 80063ec:	fffffbff 	.word	0xfffffbff
 80063f0:	00001388 	.word	0x00001388
 80063f4:	efffffff 	.word	0xefffffff
 80063f8:	40021000 	.word	0x40021000
 80063fc:	feffffff 	.word	0xfeffffff
 8006400:	ff02ffff 	.word	0xff02ffff

08006404 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8006404:	4b7f      	ldr	r3, [pc, #508]	; (8006604 <HAL_RCC_ClockConfig+0x200>)
  *         If a clock source which is not yet ready is selected, the switch will
  *         occur when the clock source will be ready. 
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006406:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006408:	1c0e      	adds	r6, r1, #0
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800640a:	6819      	ldr	r1, [r3, #0]
 800640c:	2201      	movs	r2, #1
  *         If a clock source which is not yet ready is selected, the switch will
  *         occur when the clock source will be ready. 
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800640e:	1c04      	adds	r4, r0, #0
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8006410:	4011      	ands	r1, r2
 8006412:	1c1f      	adds	r7, r3, #0
 8006414:	428e      	cmp	r6, r1
 8006416:	d975      	bls.n	8006504 <HAL_RCC_ClockConfig+0x100>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006418:	6819      	ldr	r1, [r3, #0]
 800641a:	4391      	bics	r1, r2
 800641c:	4331      	orrs	r1, r6
 800641e:	6019      	str	r1, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	401a      	ands	r2, r3
 8006424:	42b2      	cmp	r2, r6
 8006426:	d001      	beq.n	800642c <HAL_RCC_ClockConfig+0x28>
    {
      return HAL_ERROR;
 8006428:	2001      	movs	r0, #1
 800642a:	e0e9      	b.n	8006600 <HAL_RCC_ClockConfig+0x1fc>
    }

    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800642c:	6803      	ldr	r3, [r0, #0]
 800642e:	0798      	lsls	r0, r3, #30
 8006430:	d506      	bpl.n	8006440 <HAL_RCC_ClockConfig+0x3c>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006432:	4a75      	ldr	r2, [pc, #468]	; (8006608 <HAL_RCC_ClockConfig+0x204>)
 8006434:	20f0      	movs	r0, #240	; 0xf0
 8006436:	68d1      	ldr	r1, [r2, #12]
 8006438:	4381      	bics	r1, r0
 800643a:	68a0      	ldr	r0, [r4, #8]
 800643c:	4301      	orrs	r1, r0
 800643e:	60d1      	str	r1, [r2, #12]
    }

    /*------------------------- SYSCLK Configuration ---------------------------*/ 
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006440:	07d9      	lsls	r1, r3, #31
 8006442:	d40b      	bmi.n	800645c <HAL_RCC_ClockConfig+0x58>
      return HAL_ERROR;
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006444:	6823      	ldr	r3, [r4, #0]
 8006446:	075a      	lsls	r2, r3, #29
 8006448:	d400      	bmi.n	800644c <HAL_RCC_ClockConfig+0x48>
 800644a:	e0cb      	b.n	80065e4 <HAL_RCC_ClockConfig+0x1e0>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800644c:	4a6e      	ldr	r2, [pc, #440]	; (8006608 <HAL_RCC_ClockConfig+0x204>)
 800644e:	496f      	ldr	r1, [pc, #444]	; (800660c <HAL_RCC_ClockConfig+0x208>)
 8006450:	68d0      	ldr	r0, [r2, #12]
 8006452:	4001      	ands	r1, r0
 8006454:	68e0      	ldr	r0, [r4, #12]
 8006456:	4301      	orrs	r1, r0
 8006458:	60d1      	str	r1, [r2, #12]
 800645a:	e0c3      	b.n	80065e4 <HAL_RCC_ClockConfig+0x1e0>
 800645c:	4d6a      	ldr	r5, [pc, #424]	; (8006608 <HAL_RCC_ClockConfig+0x204>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800645e:	6863      	ldr	r3, [r4, #4]
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006460:	682a      	ldr	r2, [r5, #0]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006462:	2b02      	cmp	r3, #2
 8006464:	d102      	bne.n	800646c <HAL_RCC_ClockConfig+0x68>
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006466:	0390      	lsls	r0, r2, #14
 8006468:	d40c      	bmi.n	8006484 <HAL_RCC_ClockConfig+0x80>
 800646a:	e7dd      	b.n	8006428 <HAL_RCC_ClockConfig+0x24>
          return HAL_ERROR;
        }
      }
      
          /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800646c:	2b00      	cmp	r3, #0
 800646e:	d102      	bne.n	8006476 <HAL_RCC_ClockConfig+0x72>
      {
        /* Check the MSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8006470:	0591      	lsls	r1, r2, #22
 8006472:	d407      	bmi.n	8006484 <HAL_RCC_ClockConfig+0x80>
 8006474:	e7d8      	b.n	8006428 <HAL_RCC_ClockConfig+0x24>
        {
          return HAL_ERROR;
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006476:	2b03      	cmp	r3, #3
 8006478:	d102      	bne.n	8006480 <HAL_RCC_ClockConfig+0x7c>
      {
        /* Check the PLL ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800647a:	0190      	lsls	r0, r2, #6
 800647c:	d402      	bmi.n	8006484 <HAL_RCC_ClockConfig+0x80>
 800647e:	e7d3      	b.n	8006428 <HAL_RCC_ClockConfig+0x24>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006480:	0751      	lsls	r1, r2, #29
 8006482:	d5d1      	bpl.n	8006428 <HAL_RCC_ClockConfig+0x24>
        {
          return HAL_ERROR;
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006484:	68ea      	ldr	r2, [r5, #12]
 8006486:	2103      	movs	r1, #3
 8006488:	438a      	bics	r2, r1
 800648a:	4313      	orrs	r3, r2
 800648c:	60eb      	str	r3, [r5, #12]
 
      /* Get timeout */
      tickstart = HAL_GetTick();
 800648e:	f000 fde5 	bl	800705c <HAL_GetTick>
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006492:	6863      	ldr	r3, [r4, #4]
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 
      /* Get timeout */
      tickstart = HAL_GetTick();
 8006494:	1c06      	adds	r6, r0, #0
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006496:	2b02      	cmp	r3, #2
 8006498:	d10c      	bne.n	80064b4 <HAL_RCC_ClockConfig+0xb0>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800649a:	68ea      	ldr	r2, [r5, #12]
 800649c:	230c      	movs	r3, #12
 800649e:	4013      	ands	r3, r2
 80064a0:	2b08      	cmp	r3, #8
 80064a2:	d0cf      	beq.n	8006444 <HAL_RCC_ClockConfig+0x40>
        {
          if((HAL_GetTick() - tickstart ) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80064a4:	f000 fdda 	bl	800705c <HAL_GetTick>
 80064a8:	4b59      	ldr	r3, [pc, #356]	; (8006610 <HAL_RCC_ClockConfig+0x20c>)
 80064aa:	1b80      	subs	r0, r0, r6
 80064ac:	4298      	cmp	r0, r3
 80064ae:	d9f4      	bls.n	800649a <HAL_RCC_ClockConfig+0x96>
          {
            return HAL_TIMEOUT;
 80064b0:	2003      	movs	r0, #3
 80064b2:	e0a5      	b.n	8006600 <HAL_RCC_ClockConfig+0x1fc>
          } 
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80064b4:	2b03      	cmp	r3, #3
 80064b6:	d10b      	bne.n	80064d0 <HAL_RCC_ClockConfig+0xcc>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80064b8:	68ea      	ldr	r2, [r5, #12]
 80064ba:	230c      	movs	r3, #12
 80064bc:	4013      	ands	r3, r2
 80064be:	2b0c      	cmp	r3, #12
 80064c0:	d0c0      	beq.n	8006444 <HAL_RCC_ClockConfig+0x40>
        {
          if((HAL_GetTick() - tickstart ) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80064c2:	f000 fdcb 	bl	800705c <HAL_GetTick>
 80064c6:	4b52      	ldr	r3, [pc, #328]	; (8006610 <HAL_RCC_ClockConfig+0x20c>)
 80064c8:	1b80      	subs	r0, r0, r6
 80064ca:	4298      	cmp	r0, r3
 80064cc:	d9f4      	bls.n	80064b8 <HAL_RCC_ClockConfig+0xb4>
 80064ce:	e7ef      	b.n	80064b0 <HAL_RCC_ClockConfig+0xac>
          {
            return HAL_TIMEOUT;
          } 
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d00b      	beq.n	80064ec <HAL_RCC_ClockConfig+0xe8>
          } 
        }
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80064d4:	68ea      	ldr	r2, [r5, #12]
 80064d6:	230c      	movs	r3, #12
 80064d8:	4013      	ands	r3, r2
 80064da:	2b04      	cmp	r3, #4
 80064dc:	d10b      	bne.n	80064f6 <HAL_RCC_ClockConfig+0xf2>
 80064de:	e7b1      	b.n	8006444 <HAL_RCC_ClockConfig+0x40>
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_MSI)
        {
          if((HAL_GetTick() - tickstart ) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80064e0:	f000 fdbc 	bl	800705c <HAL_GetTick>
 80064e4:	4b4a      	ldr	r3, [pc, #296]	; (8006610 <HAL_RCC_ClockConfig+0x20c>)
 80064e6:	1b80      	subs	r0, r0, r6
 80064e8:	4298      	cmp	r0, r3
 80064ea:	d8e1      	bhi.n	80064b0 <HAL_RCC_ClockConfig+0xac>
          } 
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_MSI)
 80064ec:	68ea      	ldr	r2, [r5, #12]
 80064ee:	230c      	movs	r3, #12
 80064f0:	421a      	tst	r2, r3
 80064f2:	d1f5      	bne.n	80064e0 <HAL_RCC_ClockConfig+0xdc>
 80064f4:	e7a6      	b.n	8006444 <HAL_RCC_ClockConfig+0x40>
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if((HAL_GetTick() - tickstart ) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80064f6:	f000 fdb1 	bl	800705c <HAL_GetTick>
 80064fa:	4b45      	ldr	r3, [pc, #276]	; (8006610 <HAL_RCC_ClockConfig+0x20c>)
 80064fc:	1b80      	subs	r0, r0, r6
 80064fe:	4298      	cmp	r0, r3
 8006500:	d9e8      	bls.n	80064d4 <HAL_RCC_ClockConfig+0xd0>
 8006502:	e7d5      	b.n	80064b0 <HAL_RCC_ClockConfig+0xac>
  }
  /* Decreasing the CPU frequency */
  else
  {
    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006504:	6803      	ldr	r3, [r0, #0]
 8006506:	079a      	lsls	r2, r3, #30
 8006508:	d506      	bpl.n	8006518 <HAL_RCC_ClockConfig+0x114>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800650a:	4a3f      	ldr	r2, [pc, #252]	; (8006608 <HAL_RCC_ClockConfig+0x204>)
 800650c:	20f0      	movs	r0, #240	; 0xf0
 800650e:	68d1      	ldr	r1, [r2, #12]
 8006510:	4381      	bics	r1, r0
 8006512:	68a0      	ldr	r0, [r4, #8]
 8006514:	4301      	orrs	r1, r0
 8006516:	60d1      	str	r1, [r2, #12]
    }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006518:	07d9      	lsls	r1, r3, #31
 800651a:	d40a      	bmi.n	8006532 <HAL_RCC_ClockConfig+0x12e>
        }
      }
    }
    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800651c:	683a      	ldr	r2, [r7, #0]
 800651e:	2301      	movs	r3, #1
 8006520:	439a      	bics	r2, r3
 8006522:	4332      	orrs	r2, r6
 8006524:	603a      	str	r2, [r7, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006526:	683a      	ldr	r2, [r7, #0]
 8006528:	4013      	ands	r3, r2
 800652a:	42b3      	cmp	r3, r6
 800652c:	d000      	beq.n	8006530 <HAL_RCC_ClockConfig+0x12c>
 800652e:	e77b      	b.n	8006428 <HAL_RCC_ClockConfig+0x24>
 8006530:	e788      	b.n	8006444 <HAL_RCC_ClockConfig+0x40>
 8006532:	4d35      	ldr	r5, [pc, #212]	; (8006608 <HAL_RCC_ClockConfig+0x204>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006534:	6863      	ldr	r3, [r4, #4]
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006536:	682a      	ldr	r2, [r5, #0]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006538:	2b02      	cmp	r3, #2
 800653a:	d102      	bne.n	8006542 <HAL_RCC_ClockConfig+0x13e>
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800653c:	0390      	lsls	r0, r2, #14
 800653e:	d40d      	bmi.n	800655c <HAL_RCC_ClockConfig+0x158>
 8006540:	e772      	b.n	8006428 <HAL_RCC_ClockConfig+0x24>
          return HAL_ERROR;
        }
      }

      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006542:	2b00      	cmp	r3, #0
 8006544:	d102      	bne.n	800654c <HAL_RCC_ClockConfig+0x148>
      {
        /* Check the MSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8006546:	0591      	lsls	r1, r2, #22
 8006548:	d408      	bmi.n	800655c <HAL_RCC_ClockConfig+0x158>
 800654a:	e76d      	b.n	8006428 <HAL_RCC_ClockConfig+0x24>
        {
          return HAL_ERROR;
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800654c:	2b03      	cmp	r3, #3
 800654e:	d102      	bne.n	8006556 <HAL_RCC_ClockConfig+0x152>
      {
        /* Check the PLL ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006550:	0190      	lsls	r0, r2, #6
 8006552:	d403      	bmi.n	800655c <HAL_RCC_ClockConfig+0x158>
 8006554:	e768      	b.n	8006428 <HAL_RCC_ClockConfig+0x24>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006556:	0751      	lsls	r1, r2, #29
 8006558:	d400      	bmi.n	800655c <HAL_RCC_ClockConfig+0x158>
 800655a:	e765      	b.n	8006428 <HAL_RCC_ClockConfig+0x24>
        {
          return HAL_ERROR;
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800655c:	68ea      	ldr	r2, [r5, #12]
 800655e:	2103      	movs	r1, #3
 8006560:	438a      	bics	r2, r1
 8006562:	4313      	orrs	r3, r2
 8006564:	60eb      	str	r3, [r5, #12]
      
      /* Get timeout */
      tickstart = HAL_GetTick();
 8006566:	f000 fd79 	bl	800705c <HAL_GetTick>
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800656a:	6863      	ldr	r3, [r4, #4]
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
      
      /* Get timeout */
      tickstart = HAL_GetTick();
 800656c:	9001      	str	r0, [sp, #4]
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800656e:	2b02      	cmp	r3, #2
 8006570:	d10c      	bne.n	800658c <HAL_RCC_ClockConfig+0x188>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006572:	68ea      	ldr	r2, [r5, #12]
 8006574:	230c      	movs	r3, #12
 8006576:	4013      	ands	r3, r2
 8006578:	2b08      	cmp	r3, #8
 800657a:	d0cf      	beq.n	800651c <HAL_RCC_ClockConfig+0x118>
        {
          if((HAL_GetTick() - tickstart ) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800657c:	f000 fd6e 	bl	800705c <HAL_GetTick>
 8006580:	9a01      	ldr	r2, [sp, #4]
 8006582:	4b23      	ldr	r3, [pc, #140]	; (8006610 <HAL_RCC_ClockConfig+0x20c>)
 8006584:	1a80      	subs	r0, r0, r2
 8006586:	4298      	cmp	r0, r3
 8006588:	d9f3      	bls.n	8006572 <HAL_RCC_ClockConfig+0x16e>
 800658a:	e791      	b.n	80064b0 <HAL_RCC_ClockConfig+0xac>
          {
            return HAL_TIMEOUT;
          } 
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800658c:	2b03      	cmp	r3, #3
 800658e:	d10c      	bne.n	80065aa <HAL_RCC_ClockConfig+0x1a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006590:	68ea      	ldr	r2, [r5, #12]
 8006592:	230c      	movs	r3, #12
 8006594:	4013      	ands	r3, r2
 8006596:	2b0c      	cmp	r3, #12
 8006598:	d0c0      	beq.n	800651c <HAL_RCC_ClockConfig+0x118>
        {
          if((HAL_GetTick() - tickstart ) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800659a:	f000 fd5f 	bl	800705c <HAL_GetTick>
 800659e:	9b01      	ldr	r3, [sp, #4]
 80065a0:	1ac0      	subs	r0, r0, r3
 80065a2:	4b1b      	ldr	r3, [pc, #108]	; (8006610 <HAL_RCC_ClockConfig+0x20c>)
 80065a4:	4298      	cmp	r0, r3
 80065a6:	d9f3      	bls.n	8006590 <HAL_RCC_ClockConfig+0x18c>
 80065a8:	e782      	b.n	80064b0 <HAL_RCC_ClockConfig+0xac>
          {
            return HAL_TIMEOUT;
          } 
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d00d      	beq.n	80065ca <HAL_RCC_ClockConfig+0x1c6>
          } 
        }
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80065ae:	68ea      	ldr	r2, [r5, #12]
 80065b0:	230c      	movs	r3, #12
 80065b2:	4013      	ands	r3, r2
 80065b4:	2b04      	cmp	r3, #4
 80065b6:	d10d      	bne.n	80065d4 <HAL_RCC_ClockConfig+0x1d0>
 80065b8:	e7b0      	b.n	800651c <HAL_RCC_ClockConfig+0x118>
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_MSI)
        {
          if((HAL_GetTick() - tickstart ) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80065ba:	f000 fd4f 	bl	800705c <HAL_GetTick>
 80065be:	9901      	ldr	r1, [sp, #4]
 80065c0:	4b13      	ldr	r3, [pc, #76]	; (8006610 <HAL_RCC_ClockConfig+0x20c>)
 80065c2:	1a40      	subs	r0, r0, r1
 80065c4:	4298      	cmp	r0, r3
 80065c6:	d900      	bls.n	80065ca <HAL_RCC_ClockConfig+0x1c6>
 80065c8:	e772      	b.n	80064b0 <HAL_RCC_ClockConfig+0xac>
          } 
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_MSI)
 80065ca:	68ea      	ldr	r2, [r5, #12]
 80065cc:	230c      	movs	r3, #12
 80065ce:	421a      	tst	r2, r3
 80065d0:	d1f3      	bne.n	80065ba <HAL_RCC_ClockConfig+0x1b6>
 80065d2:	e7a3      	b.n	800651c <HAL_RCC_ClockConfig+0x118>
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if((HAL_GetTick() - tickstart ) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80065d4:	f000 fd42 	bl	800705c <HAL_GetTick>
 80065d8:	9a01      	ldr	r2, [sp, #4]
 80065da:	4b0d      	ldr	r3, [pc, #52]	; (8006610 <HAL_RCC_ClockConfig+0x20c>)
 80065dc:	1a80      	subs	r0, r0, r2
 80065de:	4298      	cmp	r0, r3
 80065e0:	d9e5      	bls.n	80065ae <HAL_RCC_ClockConfig+0x1aa>
 80065e2:	e765      	b.n	80064b0 <HAL_RCC_ClockConfig+0xac>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065e4:	0719      	lsls	r1, r3, #28
 80065e6:	d507      	bpl.n	80065f8 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80065e8:	4b07      	ldr	r3, [pc, #28]	; (8006608 <HAL_RCC_ClockConfig+0x204>)
 80065ea:	6921      	ldr	r1, [r4, #16]
 80065ec:	68d8      	ldr	r0, [r3, #12]
 80065ee:	4a09      	ldr	r2, [pc, #36]	; (8006614 <HAL_RCC_ClockConfig+0x210>)
 80065f0:	00c9      	lsls	r1, r1, #3
 80065f2:	4002      	ands	r2, r0
 80065f4:	430a      	orrs	r2, r1
 80065f6:	60da      	str	r2, [r3, #12]
  }

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80065f8:	2000      	movs	r0, #0
 80065fa:	f000 fd05 	bl	8007008 <HAL_InitTick>
  
  return HAL_OK;
 80065fe:	2000      	movs	r0, #0
}
 8006600:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006602:	46c0      	nop			; (mov r8, r8)
 8006604:	40022000 	.word	0x40022000
 8006608:	40021000 	.word	0x40021000
 800660c:	fffff8ff 	.word	0xfffff8ff
 8006610:	00001388 	.word	0x00001388
 8006614:	ffffc7ff 	.word	0xffffc7ff

08006618 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006618:	b508      	push	{r3, lr}
  uint32_t sysclockfreq = 0;
    
  /* Get SYSCLK source -------------------------------------------------------*/
 
  /*MSI frequency range in HZ*/
  msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE) >> 13;
 800661a:	4b19      	ldr	r3, [pc, #100]	; (8006680 <HAL_RCC_GetSysClockFreq+0x68>)
  
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800661c:	210c      	movs	r1, #12
  uint32_t sysclockfreq = 0;
    
  /* Get SYSCLK source -------------------------------------------------------*/
 
  /*MSI frequency range in HZ*/
  msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE) >> 13;
 800661e:	685a      	ldr	r2, [r3, #4]
  
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006620:	68d8      	ldr	r0, [r3, #12]
  uint32_t sysclockfreq = 0;
    
  /* Get SYSCLK source -------------------------------------------------------*/
 
  /*MSI frequency range in HZ*/
  msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE) >> 13;
 8006622:	0412      	lsls	r2, r2, #16
  
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006624:	4008      	ands	r0, r1
  uint32_t sysclockfreq = 0;
    
  /* Get SYSCLK source -------------------------------------------------------*/
 
  /*MSI frequency range in HZ*/
  msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE) >> 13;
 8006626:	0f52      	lsrs	r2, r2, #29
  
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006628:	f7f9 fd78 	bl	800011c <__gnu_thumb1_case_uqi>
 800662c:	23232323 	.word	0x23232323
 8006630:	23232307 	.word	0x23232307
 8006634:	23232328 	.word	0x23232328
 8006638:	0c          	.byte	0x0c
 8006639:	00          	.byte	0x00
      sysclockfreq = (32768 * (1 << (msirange + 1)));
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	06d8      	lsls	r0, r3, #27
 800663e:	d51d      	bpl.n	800667c <HAL_RCC_GetSysClockFreq+0x64>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8006640:	4810      	ldr	r0, [pc, #64]	; (8006684 <HAL_RCC_GetSysClockFreq+0x6c>)
 8006642:	e01c      	b.n	800667e <HAL_RCC_GetSysClockFreq+0x66>
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 8006644:	68da      	ldr	r2, [r3, #12]
      plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
 8006646:	68d9      	ldr	r1, [r3, #12]
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 8006648:	0292      	lsls	r2, r2, #10
      plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
      pllmul = PLLMulTable[(pllmul >> 18)];
 800664a:	480f      	ldr	r0, [pc, #60]	; (8006688 <HAL_RCC_GetSysClockFreq+0x70>)
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
      plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
 800664c:	0209      	lsls	r1, r1, #8
      pllmul = PLLMulTable[(pllmul >> 18)];
      plldiv = (plldiv >> 22) + 1;
      
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 800664e:	68db      	ldr	r3, [r3, #12]
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
      plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
      pllmul = PLLMulTable[(pllmul >> 18)];
 8006650:	0f12      	lsrs	r2, r2, #28
      plldiv = (plldiv >> 22) + 1;
 8006652:	0f89      	lsrs	r1, r1, #30
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
      plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
      pllmul = PLLMulTable[(pllmul >> 18)];
 8006654:	5c82      	ldrb	r2, [r0, r2]
      plldiv = (plldiv >> 22) + 1;
 8006656:	3101      	adds	r1, #1
      
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;

      if (pllsource == RCC_CFGR_PLLSRC_HSI)
 8006658:	03d8      	lsls	r0, r3, #15
 800665a:	d405      	bmi.n	8006668 <HAL_RCC_GetSysClockFreq+0x50>
      {
        /* HSI oscillator clock selected as PLL clock source */
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0)
 800665c:	4b08      	ldr	r3, [pc, #32]	; (8006680 <HAL_RCC_GetSysClockFreq+0x68>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	06d8      	lsls	r0, r3, #27
 8006662:	d501      	bpl.n	8006668 <HAL_RCC_GetSysClockFreq+0x50>
        {
          sysclockfreq = (((HSI_VALUE >> 2) * pllmul) / plldiv);
 8006664:	4807      	ldr	r0, [pc, #28]	; (8006684 <HAL_RCC_GetSysClockFreq+0x6c>)
 8006666:	e000      	b.n	800666a <HAL_RCC_GetSysClockFreq+0x52>
        }
      }
      else
      {
        /* HSE selected as PLL clock source */
       sysclockfreq = ((HSE_VALUE * pllmul) / plldiv);
 8006668:	4808      	ldr	r0, [pc, #32]	; (800668c <HAL_RCC_GetSysClockFreq+0x74>)
 800666a:	4350      	muls	r0, r2
 800666c:	f7f9 fd6a 	bl	8000144 <__aeabi_uidiv>
 8006670:	e005      	b.n	800667e <HAL_RCC_GetSysClockFreq+0x66>
      }
      break;
    }
    default: /* MSI used as system clock */
    {
      sysclockfreq = (32768 * (1 << (msirange + 1)));
 8006672:	2080      	movs	r0, #128	; 0x80
 8006674:	3201      	adds	r2, #1
 8006676:	0200      	lsls	r0, r0, #8
 8006678:	4090      	lsls	r0, r2
      break;
 800667a:	e000      	b.n	800667e <HAL_RCC_GetSysClockFreq+0x66>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else 
      {
        sysclockfreq =  HSI_VALUE;
 800667c:	4803      	ldr	r0, [pc, #12]	; (800668c <HAL_RCC_GetSysClockFreq+0x74>)
      sysclockfreq = (32768 * (1 << (msirange + 1)));
      break;
    }
  }
  return sysclockfreq;
}
 800667e:	bd08      	pop	{r3, pc}
 8006680:	40021000 	.word	0x40021000
 8006684:	003d0900 	.word	0x003d0900
 8006688:	0800c318 	.word	0x0800c318
 800668c:	00f42400 	.word	0x00f42400

08006690 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function                   
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006690:	b508      	push	{r3, lr}
  SystemCoreClock =  HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8006692:	f7ff ffc1 	bl	8006618 <HAL_RCC_GetSysClockFreq>
 8006696:	4b05      	ldr	r3, [pc, #20]	; (80066ac <HAL_RCC_GetHCLKFreq+0x1c>)
 8006698:	4a05      	ldr	r2, [pc, #20]	; (80066b0 <HAL_RCC_GetHCLKFreq+0x20>)
 800669a:	68db      	ldr	r3, [r3, #12]
 800669c:	061b      	lsls	r3, r3, #24
 800669e:	0f1b      	lsrs	r3, r3, #28
 80066a0:	5cd3      	ldrb	r3, [r2, r3]
 80066a2:	40d8      	lsrs	r0, r3
 80066a4:	4b03      	ldr	r3, [pc, #12]	; (80066b4 <HAL_RCC_GetHCLKFreq+0x24>)
 80066a6:	6018      	str	r0, [r3, #0]
  
  return (SystemCoreClock);

}
 80066a8:	bd08      	pop	{r3, pc}
 80066aa:	46c0      	nop			; (mov r8, r8)
 80066ac:	40021000 	.word	0x40021000
 80066b0:	0800c308 	.word	0x0800c308
 80066b4:	20000000 	.word	0x20000000

080066b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80066b8:	b508      	push	{r3, lr}
  
 return ( HAL_RCC_GetHCLKFreq() >> APBAHBPrescTable[((RCC->CFGR & RCC_CFGR_PPRE1) >> 8)]);
 80066ba:	f7ff ffe9 	bl	8006690 <HAL_RCC_GetHCLKFreq>
 80066be:	4b04      	ldr	r3, [pc, #16]	; (80066d0 <HAL_RCC_GetPCLK1Freq+0x18>)
 80066c0:	4a04      	ldr	r2, [pc, #16]	; (80066d4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80066c2:	68db      	ldr	r3, [r3, #12]
 80066c4:	055b      	lsls	r3, r3, #21
 80066c6:	0f5b      	lsrs	r3, r3, #29
 80066c8:	5cd3      	ldrb	r3, [r2, r3]
 80066ca:	40d8      	lsrs	r0, r3
  
}    
 80066cc:	bd08      	pop	{r3, pc}
 80066ce:	46c0      	nop			; (mov r8, r8)
 80066d0:	40021000 	.word	0x40021000
 80066d4:	0800c308 	.word	0x0800c308

080066d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80066d8:	b508      	push	{r3, lr}
  
  return ( HAL_RCC_GetHCLKFreq() >> APBAHBPrescTable[((RCC->CFGR & RCC_CFGR_PPRE2) >> 11)]);
 80066da:	f7ff ffd9 	bl	8006690 <HAL_RCC_GetHCLKFreq>
 80066de:	4b04      	ldr	r3, [pc, #16]	; (80066f0 <HAL_RCC_GetPCLK2Freq+0x18>)
 80066e0:	4a04      	ldr	r2, [pc, #16]	; (80066f4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80066e2:	68db      	ldr	r3, [r3, #12]
 80066e4:	049b      	lsls	r3, r3, #18
 80066e6:	0f5b      	lsrs	r3, r3, #29
 80066e8:	5cd3      	ldrb	r3, [r2, r3]
 80066ea:	40d8      	lsrs	r0, r3
  
} 
 80066ec:	bd08      	pop	{r3, pc}
 80066ee:	46c0      	nop			; (mov r8, r8)
 80066f0:	40021000 	.word	0x40021000
 80066f4:	0800c308 	.word	0x0800c308

080066f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80066f8:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while ((GPIO_Init->Pin) >> position)
 80066fa:	680a      	ldr	r2, [r1, #0]
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80066fc:	b085      	sub	sp, #20
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while ((GPIO_Init->Pin) >> position)
 80066fe:	9203      	str	r2, [sp, #12]
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00;
 8006700:	2300      	movs	r3, #0
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while ((GPIO_Init->Pin) >> position)
 8006702:	9a03      	ldr	r2, [sp, #12]
 8006704:	40da      	lsrs	r2, r3
 8006706:	d100      	bne.n	800670a <HAL_GPIO_Init+0x12>
 8006708:	e0a0      	b.n	800684c <HAL_GPIO_Init+0x154>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1 << position);
 800670a:	2201      	movs	r2, #1
 800670c:	9c03      	ldr	r4, [sp, #12]
 800670e:	409a      	lsls	r2, r3
 8006710:	4014      	ands	r4, r2
 8006712:	9402      	str	r4, [sp, #8]
    
    if(iocurrent)
 8006714:	d100      	bne.n	8006718 <HAL_GPIO_Init+0x20>
 8006716:	e097      	b.n	8006848 <HAL_GPIO_Init+0x150>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8006718:	684a      	ldr	r2, [r1, #4]
 800671a:	2410      	movs	r4, #16
 800671c:	1c15      	adds	r5, r2, #0
 800671e:	43a5      	bics	r5, r4
 8006720:	1c2c      	adds	r4, r5, #0
 8006722:	3d01      	subs	r5, #1
 8006724:	2c02      	cmp	r4, #2
 8006726:	d10e      	bne.n	8006746 <HAL_GPIO_Init+0x4e>
      {
        /* Check if the Alternate function is compliant with the GPIO in use */
        assert_param(IS_GPIO_AF_AVAILABLE(GPIOx,(GPIO_Init->Alternate)));
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 8006728:	08dc      	lsrs	r4, r3, #3
 800672a:	00a4      	lsls	r4, r4, #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800672c:	2507      	movs	r5, #7
 800672e:	1904      	adds	r4, r0, r4
 8006730:	401d      	ands	r5, r3
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
      {
        /* Check if the Alternate function is compliant with the GPIO in use */
        assert_param(IS_GPIO_AF_AVAILABLE(GPIOx,(GPIO_Init->Alternate)));
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 8006732:	6a26      	ldr	r6, [r4, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006734:	00ad      	lsls	r5, r5, #2
 8006736:	270f      	movs	r7, #15
 8006738:	40af      	lsls	r7, r5
 800673a:	43be      	bics	r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4)) ;
 800673c:	690f      	ldr	r7, [r1, #16]
 800673e:	40af      	lsls	r7, r5
 8006740:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3] = temp;
 8006742:	6226      	str	r6, [r4, #32]
 8006744:	e001      	b.n	800674a <HAL_GPIO_Init+0x52>
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006746:	2d01      	cmp	r5, #1
 8006748:	d812      	bhi.n	8006770 <HAL_GPIO_Init+0x78>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800674a:	6886      	ldr	r6, [r0, #8]
 800674c:	005c      	lsls	r4, r3, #1
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2));
 800674e:	2503      	movs	r5, #3
 8006750:	40a5      	lsls	r5, r4
 8006752:	43ae      	bics	r6, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 8006754:	68cd      	ldr	r5, [r1, #12]
 8006756:	40a5      	lsls	r5, r4
 8006758:	1c34      	adds	r4, r6, #0
 800675a:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 800675c:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 800675e:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006760:	2501      	movs	r5, #1
 8006762:	409d      	lsls	r5, r3
 8006764:	43ac      	bics	r4, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8006766:	06d5      	lsls	r5, r2, #27
 8006768:	0fed      	lsrs	r5, r5, #31
 800676a:	409d      	lsls	r5, r3
 800676c:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 800676e:	6044      	str	r4, [r0, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8006770:	2403      	movs	r4, #3
 8006772:	005d      	lsls	r5, r3, #1
 8006774:	1c26      	adds	r6, r4, #0
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
        GPIOx->OTYPER = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006776:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8006778:	40ae      	lsls	r6, r5
 800677a:	43f6      	mvns	r6, r6
 800677c:	9600      	str	r6, [sp, #0]
 800677e:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8006780:	1c17      	adds	r7, r2, #0
 8006782:	4027      	ands	r7, r4
 8006784:	40af      	lsls	r7, r5
 8006786:	4337      	orrs	r7, r6
      GPIOx->MODER = temp;
 8006788:	6007      	str	r7, [r0, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800678a:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 800678c:	9e00      	ldr	r6, [sp, #0]
 800678e:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Pull) << (position * 2)); 
 8006790:	688f      	ldr	r7, [r1, #8]
 8006792:	40af      	lsls	r7, r5
 8006794:	433e      	orrs	r6, r7
      GPIOx->PUPDR = temp;
 8006796:	60c6      	str	r6, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8006798:	00d5      	lsls	r5, r2, #3
 800679a:	d555      	bpl.n	8006848 <HAL_GPIO_Init+0x150>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800679c:	4e2c      	ldr	r6, [pc, #176]	; (8006850 <HAL_GPIO_Init+0x158>)
 800679e:	2501      	movs	r5, #1
 80067a0:	6b77      	ldr	r7, [r6, #52]	; 0x34
 80067a2:	432f      	orrs	r7, r5
 80067a4:	6377      	str	r7, [r6, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2];
 80067a6:	089e      	lsrs	r6, r3, #2
 80067a8:	4f2a      	ldr	r7, [pc, #168]	; (8006854 <HAL_GPIO_Init+0x15c>)
 80067aa:	00b6      	lsls	r6, r6, #2
 80067ac:	19bf      	adds	r7, r7, r6
 80067ae:	68be      	ldr	r6, [r7, #8]
 80067b0:	46bc      	mov	ip, r7
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80067b2:	1c1f      	adds	r7, r3, #0
 80067b4:	4027      	ands	r7, r4
 80067b6:	00bf      	lsls	r7, r7, #2
 80067b8:	9701      	str	r7, [sp, #4]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
 80067ba:	9600      	str	r6, [sp, #0]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80067bc:	9e01      	ldr	r6, [sp, #4]
 80067be:	270f      	movs	r7, #15
 80067c0:	40b7      	lsls	r7, r6
 80067c2:	9e00      	ldr	r6, [sp, #0]
 80067c4:	43be      	bics	r6, r7
 80067c6:	1c37      	adds	r7, r6, #0
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80067c8:	26a0      	movs	r6, #160	; 0xa0
 80067ca:	05f6      	lsls	r6, r6, #23
 80067cc:	42b0      	cmp	r0, r6
 80067ce:	d00e      	beq.n	80067ee <HAL_GPIO_Init+0xf6>
 80067d0:	4e21      	ldr	r6, [pc, #132]	; (8006858 <HAL_GPIO_Init+0x160>)
 80067d2:	42b0      	cmp	r0, r6
 80067d4:	d00d      	beq.n	80067f2 <HAL_GPIO_Init+0xfa>
 80067d6:	4d21      	ldr	r5, [pc, #132]	; (800685c <HAL_GPIO_Init+0x164>)
 80067d8:	42a8      	cmp	r0, r5
 80067da:	d00c      	beq.n	80067f6 <HAL_GPIO_Init+0xfe>
 80067dc:	4d20      	ldr	r5, [pc, #128]	; (8006860 <HAL_GPIO_Init+0x168>)
 80067de:	42a8      	cmp	r0, r5
 80067e0:	d00a      	beq.n	80067f8 <HAL_GPIO_Init+0x100>
 80067e2:	4d20      	ldr	r5, [pc, #128]	; (8006864 <HAL_GPIO_Init+0x16c>)
 80067e4:	1944      	adds	r4, r0, r5
 80067e6:	1e65      	subs	r5, r4, #1
 80067e8:	41ac      	sbcs	r4, r5
 80067ea:	3405      	adds	r4, #5
 80067ec:	e004      	b.n	80067f8 <HAL_GPIO_Init+0x100>
 80067ee:	2400      	movs	r4, #0
 80067f0:	e002      	b.n	80067f8 <HAL_GPIO_Init+0x100>
 80067f2:	1c2c      	adds	r4, r5, #0
 80067f4:	e000      	b.n	80067f8 <HAL_GPIO_Init+0x100>
 80067f6:	2402      	movs	r4, #2
 80067f8:	9e01      	ldr	r6, [sp, #4]
 80067fa:	40b4      	lsls	r4, r6
 80067fc:	4327      	orrs	r7, r4
        SYSCFG->EXTICR[position >> 2] = temp;
 80067fe:	4664      	mov	r4, ip
 8006800:	60a7      	str	r7, [r4, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006802:	4c19      	ldr	r4, [pc, #100]	; (8006868 <HAL_GPIO_Init+0x170>)
        temp &= ~((uint32_t)iocurrent);
 8006804:	9f02      	ldr	r7, [sp, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006806:	6826      	ldr	r6, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8006808:	43fd      	mvns	r5, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800680a:	03d7      	lsls	r7, r2, #15
 800680c:	d401      	bmi.n	8006812 <HAL_GPIO_Init+0x11a>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
 800680e:	402e      	ands	r6, r5
 8006810:	e001      	b.n	8006816 <HAL_GPIO_Init+0x11e>
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
 8006812:	9f02      	ldr	r7, [sp, #8]
 8006814:	433e      	orrs	r6, r7
        }
        EXTI->IMR = temp;
 8006816:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8006818:	6866      	ldr	r6, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800681a:	0397      	lsls	r7, r2, #14
 800681c:	d401      	bmi.n	8006822 <HAL_GPIO_Init+0x12a>
          temp |= iocurrent;
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
 800681e:	402e      	ands	r6, r5
 8006820:	e001      	b.n	8006826 <HAL_GPIO_Init+0x12e>
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
 8006822:	9f02      	ldr	r7, [sp, #8]
 8006824:	433e      	orrs	r6, r7
        }
        EXTI->EMR = temp;
 8006826:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006828:	68a6      	ldr	r6, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800682a:	02d7      	lsls	r7, r2, #11
 800682c:	d401      	bmi.n	8006832 <HAL_GPIO_Init+0x13a>
        }
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
 800682e:	402e      	ands	r6, r5
 8006830:	e001      	b.n	8006836 <HAL_GPIO_Init+0x13e>
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
 8006832:	9f02      	ldr	r7, [sp, #8]
 8006834:	433e      	orrs	r6, r7
        }
        EXTI->RTSR = temp;
 8006836:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8006838:	68e6      	ldr	r6, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800683a:	0297      	lsls	r7, r2, #10
 800683c:	d401      	bmi.n	8006842 <HAL_GPIO_Init+0x14a>
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
 800683e:	4035      	ands	r5, r6
 8006840:	e001      	b.n	8006846 <HAL_GPIO_Init+0x14e>
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 8006842:	9d02      	ldr	r5, [sp, #8]
 8006844:	4335      	orrs	r5, r6
        }
        EXTI->FTSR = temp;
 8006846:	60e5      	str	r5, [r4, #12]
      }
    }
    position++;
 8006848:	3301      	adds	r3, #1
 800684a:	e75a      	b.n	8006702 <HAL_GPIO_Init+0xa>
  }
}
 800684c:	b005      	add	sp, #20
 800684e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006850:	40021000 	.word	0x40021000
 8006854:	40010000 	.word	0x40010000
 8006858:	50000400 	.word	0x50000400
 800685c:	50000800 	.word	0x50000800
 8006860:	50000c00 	.word	0x50000c00
 8006864:	afffe400 	.word	0xafffe400
 8006868:	40010400 	.word	0x40010400

0800686c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 800686c:	2a00      	cmp	r2, #0
 800686e:	d001      	beq.n	8006874 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006870:	6181      	str	r1, [r0, #24]
 8006872:	e000      	b.n	8006876 <HAL_GPIO_WritePin+0xa>
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
 8006874:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8006876:	4770      	bx	lr

08006878 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8006878:	6943      	ldr	r3, [r0, #20]
 800687a:	4059      	eors	r1, r3
 800687c:	6141      	str	r1, [r0, #20]
}
 800687e:	4770      	bx	lr

08006880 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006880:	b538      	push	{r3, r4, r5, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006882:	4d05      	ldr	r5, [pc, #20]	; (8006898 <HAL_GPIO_EXTI_IRQHandler+0x18>)
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006884:	1c04      	adds	r4, r0, #0
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006886:	696b      	ldr	r3, [r5, #20]
 8006888:	4203      	tst	r3, r0
 800688a:	d003      	beq.n	8006894 <HAL_GPIO_EXTI_IRQHandler+0x14>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800688c:	6168      	str	r0, [r5, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800688e:	f7fe f8bf 	bl	8004a10 <HAL_GPIO_EXTI_Callback>
    //dvakarat volalo rutinu tak som to osetril takto:
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006892:	616c      	str	r4, [r5, #20]
  }
}
 8006894:	bd38      	pop	{r3, r4, r5, pc}
 8006896:	46c0      	nop			; (mov r8, r8)
 8006898:	40010400 	.word	0x40010400

0800689c <HAL_FLASHEx_DATAEEPROM_Unlock>:
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800689c:	4b05      	ldr	r3, [pc, #20]	; (80068b4 <HAL_FLASHEx_DATAEEPROM_Unlock+0x18>)
    FLASH->PEKEYR = FLASH_PEKEY2;
    return HAL_OK;  
  }
  else
  {
    return HAL_ERROR;
 800689e:	2001      	movs	r0, #1
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 80068a0:	685a      	ldr	r2, [r3, #4]
 80068a2:	4202      	tst	r2, r0
 80068a4:	d004      	beq.n	80068b0 <HAL_FLASHEx_DATAEEPROM_Unlock+0x14>
  {  
    /* Unlocking the Data memory and FLASH_PECR register access */
    FLASH->PEKEYR = FLASH_PEKEY1;
 80068a6:	4a04      	ldr	r2, [pc, #16]	; (80068b8 <HAL_FLASHEx_DATAEEPROM_Unlock+0x1c>)
    FLASH->PEKEYR = FLASH_PEKEY2;
    return HAL_OK;  
 80068a8:	2000      	movs	r0, #0
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
  {  
    /* Unlocking the Data memory and FLASH_PECR register access */
    FLASH->PEKEYR = FLASH_PEKEY1;
 80068aa:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 80068ac:	4a03      	ldr	r2, [pc, #12]	; (80068bc <HAL_FLASHEx_DATAEEPROM_Unlock+0x20>)
 80068ae:	60da      	str	r2, [r3, #12]
  }
  else
  {
    return HAL_ERROR;
  }
}
 80068b0:	4770      	bx	lr
 80068b2:	46c0      	nop			; (mov r8, r8)
 80068b4:	40022000 	.word	0x40022000
 80068b8:	89abcdef 	.word	0x89abcdef
 80068bc:	02030405 	.word	0x02030405

080068c0 <HAL_FLASHEx_DATAEEPROM_Lock>:
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);  
 80068c0:	4b03      	ldr	r3, [pc, #12]	; (80068d0 <HAL_FLASHEx_DATAEEPROM_Lock+0x10>)
 80068c2:	2101      	movs	r1, #1
 80068c4:	685a      	ldr	r2, [r3, #4]
  return HAL_OK;
}
 80068c6:	2000      	movs	r0, #0
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);  
 80068c8:	430a      	orrs	r2, r1
 80068ca:	605a      	str	r2, [r3, #4]
  return HAL_OK;
}
 80068cc:	4770      	bx	lr
 80068ce:	46c0      	nop			; (mov r8, r8)
 80068d0:	40022000 	.word	0x40022000

080068d4 <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect 
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t Address)
{
 80068d4:	b510      	push	{r4, lr}
 80068d6:	1c04      	adds	r4, r0, #0
  
  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80068d8:	4805      	ldr	r0, [pc, #20]	; (80068f0 <HAL_FLASHEx_DATAEEPROM_Erase+0x1c>)
 80068da:	f000 f879 	bl	80069d0 <FLASH_WaitForLastOperation>
  
  if(status == HAL_OK)
 80068de:	2800      	cmp	r0, #0
 80068e0:	d105      	bne.n	80068ee <HAL_FLASHEx_DATAEEPROM_Erase+0x1a>
  {
    /* Clean the error context */
    ProcFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80068e2:	4b04      	ldr	r3, [pc, #16]	; (80068f4 <HAL_FLASHEx_DATAEEPROM_Erase+0x20>)
 80068e4:	6158      	str	r0, [r3, #20]

    /* Write "00000000h" to valid address in the data memory" */
      *(__IO uint32_t *) Address = 0x00000000;
 80068e6:	6020      	str	r0, [r4, #0]

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80068e8:	4801      	ldr	r0, [pc, #4]	; (80068f0 <HAL_FLASHEx_DATAEEPROM_Erase+0x1c>)
 80068ea:	f000 f871 	bl	80069d0 <FLASH_WaitForLastOperation>
  }
  
  return status;
}  
 80068ee:	bd10      	pop	{r4, pc}
 80068f0:	0000c350 	.word	0x0000c350
 80068f4:	20000a2c 	.word	0x20000a2c

080068f8 <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 80068f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef status = HAL_ERROR;
  
  /* Process Locked */
  __HAL_LOCK(&ProcFlash);
 80068fa:	4c12      	ldr	r4, [pc, #72]	; (8006944 <HAL_FLASHEx_DATAEEPROM_Program+0x4c>)
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 80068fc:	1c07      	adds	r7, r0, #0
  HAL_StatusTypeDef status = HAL_ERROR;
  
  /* Process Locked */
  __HAL_LOCK(&ProcFlash);
 80068fe:	7c23      	ldrb	r3, [r4, #16]
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 8006900:	1c0d      	adds	r5, r1, #0
 8006902:	1c16      	adds	r6, r2, #0
  HAL_StatusTypeDef status = HAL_ERROR;
  
  /* Process Locked */
  __HAL_LOCK(&ProcFlash);
 8006904:	2002      	movs	r0, #2
 8006906:	2b01      	cmp	r3, #1
 8006908:	d01a      	beq.n	8006940 <HAL_FLASHEx_DATAEEPROM_Program+0x48>
 800690a:	2301      	movs	r3, #1
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800690c:	480e      	ldr	r0, [pc, #56]	; (8006948 <HAL_FLASHEx_DATAEEPROM_Program+0x50>)
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
  HAL_StatusTypeDef status = HAL_ERROR;
  
  /* Process Locked */
  __HAL_LOCK(&ProcFlash);
 800690e:	7423      	strb	r3, [r4, #16]
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006910:	f000 f85e 	bl	80069d0 <FLASH_WaitForLastOperation>
 8006914:	1c03      	adds	r3, r0, #0
  
  if(status == HAL_OK)
 8006916:	2b00      	cmp	r3, #0
 8006918:	d110      	bne.n	800693c <HAL_FLASHEx_DATAEEPROM_Program+0x44>
  {
    /* Clean the error context */
    ProcFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800691a:	6163      	str	r3, [r4, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 800691c:	2f02      	cmp	r7, #2
 800691e:	d101      	bne.n	8006924 <HAL_FLASHEx_DATAEEPROM_Program+0x2c>
    {
      /* Program word (32-bit) at a specified address */
      *(__IO uint32_t *)Address = Data;
 8006920:	602e      	str	r6, [r5, #0]
 8006922:	e008      	b.n	8006936 <HAL_FLASHEx_DATAEEPROM_Program+0x3e>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 8006924:	2f01      	cmp	r7, #1
 8006926:	d102      	bne.n	800692e <HAL_FLASHEx_DATAEEPROM_Program+0x36>
    {
      /* Program word (16-bit) at a specified address */
      *(__IO uint16_t *)Address = (uint16_t) Data;
 8006928:	b2b6      	uxth	r6, r6
 800692a:	802e      	strh	r6, [r5, #0]
 800692c:	e003      	b.n	8006936 <HAL_FLASHEx_DATAEEPROM_Program+0x3e>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 800692e:	2f00      	cmp	r7, #0
 8006930:	d101      	bne.n	8006936 <HAL_FLASHEx_DATAEEPROM_Program+0x3e>
    {
      /*Program word (8-bit) at a specified address */
      *(__IO uint8_t *)Address = (uint8_t) Data;
 8006932:	b2f6      	uxtb	r6, r6
 8006934:	702e      	strb	r6, [r5, #0]
    {
      status = HAL_ERROR;
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006936:	4804      	ldr	r0, [pc, #16]	; (8006948 <HAL_FLASHEx_DATAEEPROM_Program+0x50>)
 8006938:	f000 f84a 	bl	80069d0 <FLASH_WaitForLastOperation>
  }
  /* Process Unlocked */
  __HAL_UNLOCK(&ProcFlash);
 800693c:	2300      	movs	r3, #0
 800693e:	7423      	strb	r3, [r4, #16]
  return status;
}
 8006940:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006942:	46c0      	nop			; (mov r8, r8)
 8006944:	20000a2c 	.word	0x20000a2c
 8006948:	0000c350 	.word	0x0000c350

0800694c <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800694c:	4b1d      	ldr	r3, [pc, #116]	; (80069c4 <FLASH_SetErrorCode+0x78>)
 800694e:	699a      	ldr	r2, [r3, #24]
 8006950:	05d1      	lsls	r1, r2, #23
 8006952:	d504      	bpl.n	800695e <FLASH_SetErrorCode+0x12>
  { 
    ProcFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8006954:	4a1c      	ldr	r2, [pc, #112]	; (80069c8 <FLASH_SetErrorCode+0x7c>)
 8006956:	2008      	movs	r0, #8
 8006958:	6951      	ldr	r1, [r2, #20]
 800695a:	4301      	orrs	r1, r0
 800695c:	6151      	str	r1, [r2, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 800695e:	699a      	ldr	r2, [r3, #24]
 8006960:	0591      	lsls	r1, r2, #22
 8006962:	d504      	bpl.n	800696e <FLASH_SetErrorCode+0x22>
  { 
    ProcFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8006964:	4a18      	ldr	r2, [pc, #96]	; (80069c8 <FLASH_SetErrorCode+0x7c>)
 8006966:	2004      	movs	r0, #4
 8006968:	6951      	ldr	r1, [r2, #20]
 800696a:	4301      	orrs	r1, r0
 800696c:	6151      	str	r1, [r2, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 800696e:	699a      	ldr	r2, [r3, #24]
 8006970:	0551      	lsls	r1, r2, #21
 8006972:	d504      	bpl.n	800697e <FLASH_SetErrorCode+0x32>
  { 
    ProcFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 8006974:	4a14      	ldr	r2, [pc, #80]	; (80069c8 <FLASH_SetErrorCode+0x7c>)
 8006976:	2002      	movs	r0, #2
 8006978:	6951      	ldr	r1, [r2, #20]
 800697a:	4301      	orrs	r1, r0
 800697c:	6151      	str	r1, [r2, #20]
  }
#if defined(STM32L031xx) || defined(STM32L041xx)
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800697e:	699a      	ldr	r2, [r3, #24]
 8006980:	0511      	lsls	r1, r2, #20
 8006982:	d504      	bpl.n	800698e <FLASH_SetErrorCode+0x42>
  { 
    ProcFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8006984:	4a10      	ldr	r2, [pc, #64]	; (80069c8 <FLASH_SetErrorCode+0x7c>)
 8006986:	2010      	movs	r0, #16
 8006988:	6951      	ldr	r1, [r2, #20]
 800698a:	4301      	orrs	r1, r0
 800698c:	6151      	str	r1, [r2, #20]
  }
#endif
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 800698e:	699a      	ldr	r2, [r3, #24]
 8006990:	0491      	lsls	r1, r2, #18
 8006992:	d504      	bpl.n	800699e <FLASH_SetErrorCode+0x52>
  { 
    ProcFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8006994:	4a0c      	ldr	r2, [pc, #48]	; (80069c8 <FLASH_SetErrorCode+0x7c>)
 8006996:	2001      	movs	r0, #1
 8006998:	6951      	ldr	r1, [r2, #20]
 800699a:	4301      	orrs	r1, r0
 800699c:	6151      	str	r1, [r2, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 800699e:	699a      	ldr	r2, [r3, #24]
 80069a0:	0391      	lsls	r1, r2, #14
 80069a2:	d504      	bpl.n	80069ae <FLASH_SetErrorCode+0x62>
  { 
   ProcFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 80069a4:	4a08      	ldr	r2, [pc, #32]	; (80069c8 <FLASH_SetErrorCode+0x7c>)
 80069a6:	2020      	movs	r0, #32
 80069a8:	6951      	ldr	r1, [r2, #20]
 80069aa:	4301      	orrs	r1, r0
 80069ac:	6151      	str	r1, [r2, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 80069ae:	699a      	ldr	r2, [r3, #24]
 80069b0:	03d1      	lsls	r1, r2, #15
 80069b2:	d504      	bpl.n	80069be <FLASH_SetErrorCode+0x72>
  { 
   ProcFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 80069b4:	4a04      	ldr	r2, [pc, #16]	; (80069c8 <FLASH_SetErrorCode+0x7c>)
 80069b6:	2040      	movs	r0, #64	; 0x40
 80069b8:	6951      	ldr	r1, [r2, #20]
 80069ba:	4301      	orrs	r1, r0
 80069bc:	6151      	str	r1, [r2, #20]
  /* Errors are now stored, clear errors flags */
#if defined(STM32L031xx) || defined(STM32L041xx)
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_SIZERR |
                         FLASH_FLAG_RDERR | FLASH_FLAG_FWWERR | FLASH_FLAG_NOTZEROERR);
#else
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_SIZERR |
 80069be:	4a03      	ldr	r2, [pc, #12]	; (80069cc <FLASH_SetErrorCode+0x80>)
 80069c0:	619a      	str	r2, [r3, #24]
                         FLASH_FLAG_OPTVERR | FLASH_FLAG_RDERR | FLASH_FLAG_FWWERR | 
                         FLASH_FLAG_NOTZEROERR);
#endif
} 
 80069c2:	4770      	bx	lr
 80069c4:	40022000 	.word	0x40022000
 80069c8:	20000a2c 	.word	0x20000a2c
 80069cc:	00032f00 	.word	0x00032f00

080069d0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout: maximum flash operationtimeout
  * @retval HAL status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80069d0:	b538      	push	{r3, r4, r5, lr}
 80069d2:	1c04      	adds	r4, r0, #0
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
    
  uint32_t tickstart = HAL_GetTick();   
 80069d4:	f000 fb42 	bl	800705c <HAL_GetTick>
 80069d8:	1c05      	adds	r5, r0, #0
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80069da:	4a18      	ldr	r2, [pc, #96]	; (8006a3c <FLASH_WaitForLastOperation+0x6c>)
 80069dc:	6993      	ldr	r3, [r2, #24]
 80069de:	07d9      	lsls	r1, r3, #31
 80069e0:	d50b      	bpl.n	80069fa <FLASH_WaitForLastOperation+0x2a>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80069e2:	1c61      	adds	r1, r4, #1
 80069e4:	d0f9      	beq.n	80069da <FLASH_WaitForLastOperation+0xa>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 80069e6:	2c00      	cmp	r4, #0
 80069e8:	d101      	bne.n	80069ee <FLASH_WaitForLastOperation+0x1e>
      {
        return HAL_TIMEOUT;
 80069ea:	2003      	movs	r0, #3
 80069ec:	e025      	b.n	8006a3a <FLASH_WaitForLastOperation+0x6a>
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
  { 
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 80069ee:	f000 fb35 	bl	800705c <HAL_GetTick>
 80069f2:	1b40      	subs	r0, r0, r5
 80069f4:	42a0      	cmp	r0, r4
 80069f6:	d9f0      	bls.n	80069da <FLASH_WaitForLastOperation+0xa>
 80069f8:	e7f7      	b.n	80069ea <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80069fa:	6991      	ldr	r1, [r2, #24]
 80069fc:	2302      	movs	r3, #2
 80069fe:	4219      	tst	r1, r3
 8006a00:	d000      	beq.n	8006a04 <FLASH_WaitForLastOperation+0x34>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8006a02:	6193      	str	r3, [r2, #24]
  if((__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)  != RESET) || \
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR) != RESET) || \
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)  != RESET) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)  != RESET) || \
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) != RESET))
#else
  if((__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)  != RESET) || \
 8006a04:	6992      	ldr	r2, [r2, #24]
 8006a06:	4b0d      	ldr	r3, [pc, #52]	; (8006a3c <FLASH_WaitForLastOperation+0x6c>)
 8006a08:	05d1      	lsls	r1, r2, #23
 8006a0a:	d413      	bmi.n	8006a34 <FLASH_WaitForLastOperation+0x64>
 8006a0c:	699a      	ldr	r2, [r3, #24]
 8006a0e:	0591      	lsls	r1, r2, #22
 8006a10:	d410      	bmi.n	8006a34 <FLASH_WaitForLastOperation+0x64>
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR) != RESET) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) != RESET) || \
 8006a12:	699a      	ldr	r2, [r3, #24]
  if((__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)  != RESET) || \
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR) != RESET) || \
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)  != RESET) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)  != RESET) || \
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) != RESET))
#else
  if((__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)  != RESET) || \
 8006a14:	0551      	lsls	r1, r2, #21
 8006a16:	d40d      	bmi.n	8006a34 <FLASH_WaitForLastOperation+0x64>
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR) != RESET) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) != RESET) || \
 8006a18:	699a      	ldr	r2, [r3, #24]
 8006a1a:	0511      	lsls	r1, r2, #20
 8006a1c:	d40a      	bmi.n	8006a34 <FLASH_WaitForLastOperation+0x64>
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)  != RESET) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)  != RESET) || \
 8006a1e:	699a      	ldr	r2, [r3, #24]
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR) != RESET) || \
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)  != RESET) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)  != RESET) || \
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) != RESET))
#else
  if((__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)  != RESET) || \
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR) != RESET) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) != RESET) || \
 8006a20:	0491      	lsls	r1, r2, #18
 8006a22:	d407      	bmi.n	8006a34 <FLASH_WaitForLastOperation+0x64>
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)  != RESET) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)  != RESET) || \
 8006a24:	699a      	ldr	r2, [r3, #24]
 8006a26:	2080      	movs	r0, #128	; 0x80
 8006a28:	0280      	lsls	r0, r0, #10
 8006a2a:	4010      	ands	r0, r2
 8006a2c:	d102      	bne.n	8006a34 <FLASH_WaitForLastOperation+0x64>
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) != RESET))
 8006a2e:	699b      	ldr	r3, [r3, #24]
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)  != RESET) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)  != RESET) || \
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) != RESET))
#else
  if((__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)  != RESET) || \
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR) != RESET) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) != RESET) || \
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)  != RESET) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)  != RESET) || \
 8006a30:	03da      	lsls	r2, r3, #15
 8006a32:	d502      	bpl.n	8006a3a <FLASH_WaitForLastOperation+0x6a>
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) != RESET))
#endif
  {
    /* Save the error code */
    FLASH_SetErrorCode();
 8006a34:	f7ff ff8a 	bl	800694c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8006a38:	2001      	movs	r0, #1
   }

  /* There is no error flag set */
  return HAL_OK;  
}
 8006a3a:	bd38      	pop	{r3, r4, r5, pc}
 8006a3c:	40022000 	.word	0x40022000

08006a40 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006a40:	b570      	push	{r4, r5, r6, lr}
 8006a42:	0189      	lsls	r1, r1, #6
    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8006a44:	2800      	cmp	r0, #0
 8006a46:	da15      	bge.n	8006a74 <HAL_NVIC_SetPriority+0x34>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006a48:	b2c0      	uxtb	r0, r0
 8006a4a:	230f      	movs	r3, #15
 8006a4c:	4003      	ands	r3, r0
 8006a4e:	3b08      	subs	r3, #8
 8006a50:	4a12      	ldr	r2, [pc, #72]	; (8006a9c <HAL_NVIC_SetPriority+0x5c>)
 8006a52:	089b      	lsrs	r3, r3, #2
 8006a54:	009b      	lsls	r3, r3, #2
 8006a56:	189b      	adds	r3, r3, r2
 8006a58:	2203      	movs	r2, #3
 8006a5a:	4010      	ands	r0, r2
 8006a5c:	24ff      	movs	r4, #255	; 0xff
 8006a5e:	00c2      	lsls	r2, r0, #3
 8006a60:	69dd      	ldr	r5, [r3, #28]
 8006a62:	1c20      	adds	r0, r4, #0
 8006a64:	4090      	lsls	r0, r2
 8006a66:	4385      	bics	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006a68:	400c      	ands	r4, r1
 8006a6a:	4094      	lsls	r4, r2
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006a6c:	1c2a      	adds	r2, r5, #0
 8006a6e:	4322      	orrs	r2, r4
 8006a70:	61da      	str	r2, [r3, #28]
 8006a72:	e012      	b.n	8006a9a <HAL_NVIC_SetPriority+0x5a>
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006a74:	0882      	lsrs	r2, r0, #2
 8006a76:	4b0a      	ldr	r3, [pc, #40]	; (8006aa0 <HAL_NVIC_SetPriority+0x60>)
 8006a78:	2403      	movs	r4, #3
 8006a7a:	0092      	lsls	r2, r2, #2
 8006a7c:	18d2      	adds	r2, r2, r3
 8006a7e:	4020      	ands	r0, r4
 8006a80:	23c0      	movs	r3, #192	; 0xc0
 8006a82:	40a0      	lsls	r0, r4
 8006a84:	009b      	lsls	r3, r3, #2
 8006a86:	24ff      	movs	r4, #255	; 0xff
 8006a88:	58d5      	ldr	r5, [r2, r3]
 8006a8a:	1c26      	adds	r6, r4, #0
 8006a8c:	4086      	lsls	r6, r0
 8006a8e:	43b5      	bics	r5, r6
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006a90:	400c      	ands	r4, r1
 8006a92:	4084      	lsls	r4, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006a94:	1c28      	adds	r0, r5, #0
 8006a96:	4320      	orrs	r0, r4
 8006a98:	50d0      	str	r0, [r2, r3]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8006a9a:	bd70      	pop	{r4, r5, r6, pc}
 8006a9c:	e000ed00 	.word	0xe000ed00
 8006aa0:	e000e100 	.word	0xe000e100

08006aa4 <HAL_NVIC_EnableIRQ>:

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8006aa4:	231f      	movs	r3, #31
 8006aa6:	4018      	ands	r0, r3
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	4083      	lsls	r3, r0
 8006aac:	1c18      	adds	r0, r3, #0
 8006aae:	4b01      	ldr	r3, [pc, #4]	; (8006ab4 <HAL_NVIC_EnableIRQ+0x10>)
 8006ab0:	6018      	str	r0, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8006ab2:	4770      	bx	lr
 8006ab4:	e000e100 	.word	0xe000e100

08006ab8 <HAL_NVIC_SystemReset>:
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006ab8:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006abc:	4a03      	ldr	r2, [pc, #12]	; (8006acc <HAL_NVIC_SystemReset+0x14>)
 8006abe:	4b04      	ldr	r3, [pc, #16]	; (8006ad0 <HAL_NVIC_SystemReset+0x18>)
 8006ac0:	60da      	str	r2, [r3, #12]
 8006ac2:	f3bf 8f4f 	dsb	sy

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8006ac6:	46c0      	nop			; (mov r8, r8)
 8006ac8:	e7fd      	b.n	8006ac6 <HAL_NVIC_SystemReset+0xe>
 8006aca:	46c0      	nop			; (mov r8, r8)
 8006acc:	05fa0004 	.word	0x05fa0004
 8006ad0:	e000ed00 	.word	0xe000ed00

08006ad4 <HAL_SYSTICK_Config>:
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006ad4:	4b09      	ldr	r3, [pc, #36]	; (8006afc <HAL_SYSTICK_Config+0x28>)
 8006ad6:	1e42      	subs	r2, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8006ad8:	2001      	movs	r0, #1
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006ada:	429a      	cmp	r2, r3
 8006adc:	d80d      	bhi.n	8006afa <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006ade:	4b08      	ldr	r3, [pc, #32]	; (8006b00 <HAL_SYSTICK_Config+0x2c>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006ae0:	21c0      	movs	r1, #192	; 0xc0
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006ae2:	605a      	str	r2, [r3, #4]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006ae4:	4a07      	ldr	r2, [pc, #28]	; (8006b04 <HAL_SYSTICK_Config+0x30>)
 8006ae6:	0609      	lsls	r1, r1, #24
 8006ae8:	6a10      	ldr	r0, [r2, #32]
 8006aea:	0200      	lsls	r0, r0, #8
 8006aec:	0a00      	lsrs	r0, r0, #8
 8006aee:	4301      	orrs	r1, r0
 8006af0:	6211      	str	r1, [r2, #32]
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006af2:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006af4:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006af6:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006af8:	601a      	str	r2, [r3, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8006afa:	4770      	bx	lr
 8006afc:	00ffffff 	.word	0x00ffffff
 8006b00:	e000e010 	.word	0xe000e010
 8006b04:	e000ed00 	.word	0xe000ed00

08006b08 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8006b08:	4b05      	ldr	r3, [pc, #20]	; (8006b20 <HAL_SYSTICK_CLKSourceConfig+0x18>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8006b0a:	681a      	ldr	r2, [r3, #0]
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8006b0c:	2804      	cmp	r0, #4
 8006b0e:	d102      	bne.n	8006b16 <HAL_SYSTICK_CLKSourceConfig+0xe>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8006b10:	4310      	orrs	r0, r2
 8006b12:	6018      	str	r0, [r3, #0]
 8006b14:	e002      	b.n	8006b1c <HAL_SYSTICK_CLKSourceConfig+0x14>
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8006b16:	2104      	movs	r1, #4
 8006b18:	438a      	bics	r2, r1
 8006b1a:	601a      	str	r2, [r3, #0]
  }
}
 8006b1c:	4770      	bx	lr
 8006b1e:	46c0      	nop			; (mov r8, r8)
 8006b20:	e000e010 	.word	0xe000e010

08006b24 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8006b24:	4770      	bx	lr

08006b26 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8006b26:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8006b28:	f7ff fffc 	bl	8006b24 <HAL_SYSTICK_Callback>
}
 8006b2c:	bd08      	pop	{r3, pc}
	...

08006b30 <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8006b30:	b570      	push	{r4, r5, r6, lr}
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006b32:	1c05      	adds	r5, r0, #0
 8006b34:	3554      	adds	r5, #84	; 0x54
 8006b36:	782b      	ldrb	r3, [r5, #0]
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8006b38:	1c04      	adds	r4, r0, #0
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006b3a:	2002      	movs	r0, #2
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d03a      	beq.n	8006bb6 <HAL_ADCEx_Calibration_Start+0x86>
 8006b40:	2301      	movs	r3, #1
 8006b42:	702b      	strb	r3, [r5, #0]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006b44:	6823      	ldr	r3, [r4, #0]
 8006b46:	2203      	movs	r2, #3
 8006b48:	6898      	ldr	r0, [r3, #8]
 8006b4a:	4010      	ands	r0, r2
 8006b4c:	2801      	cmp	r0, #1
 8006b4e:	d102      	bne.n	8006b56 <HAL_ADCEx_Calibration_Start+0x26>
 8006b50:	681a      	ldr	r2, [r3, #0]
 8006b52:	4202      	tst	r2, r0
 8006b54:	d12a      	bne.n	8006bac <HAL_ADCEx_Calibration_Start+0x7c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8006b56:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006b58:	4a17      	ldr	r2, [pc, #92]	; (8006bb8 <HAL_ADCEx_Calibration_Start+0x88>)
 8006b5a:	400a      	ands	r2, r1
 8006b5c:	2102      	movs	r1, #2
 8006b5e:	430a      	orrs	r2, r1
 8006b60:	65a2      	str	r2, [r4, #88]	; 0x58
                      HAL_ADC_STATE_REG_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8006b62:	6899      	ldr	r1, [r3, #8]
 8006b64:	2280      	movs	r2, #128	; 0x80
 8006b66:	0612      	lsls	r2, r2, #24
 8006b68:	430a      	orrs	r2, r1
 8006b6a:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8006b6c:	f000 fa76 	bl	800705c <HAL_GetTick>
 8006b70:	1c06      	adds	r6, r0, #0

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8006b72:	6823      	ldr	r3, [r4, #0]
 8006b74:	689b      	ldr	r3, [r3, #8]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	da0e      	bge.n	8006b98 <HAL_ADCEx_Calibration_Start+0x68>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8006b7a:	f000 fa6f 	bl	800705c <HAL_GetTick>
 8006b7e:	1b80      	subs	r0, r0, r6
 8006b80:	280a      	cmp	r0, #10
 8006b82:	d9f6      	bls.n	8006b72 <HAL_ADCEx_Calibration_Start+0x42>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8006b84:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006b86:	2212      	movs	r2, #18
 8006b88:	4393      	bics	r3, r2
 8006b8a:	2210      	movs	r2, #16
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	65a3      	str	r3, [r4, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006b90:	2300      	movs	r3, #0
 8006b92:	702b      	strb	r3, [r5, #0]
        
        return HAL_ERROR;
 8006b94:	2001      	movs	r0, #1
 8006b96:	e00e      	b.n	8006bb6 <HAL_ADCEx_Calibration_Start+0x86>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006b98:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006b9a:	2203      	movs	r2, #3
 8006b9c:	4393      	bics	r3, r2
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	65a3      	str	r3, [r4, #88]	; 0x58
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006ba4:	2000      	movs	r0, #0
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	702b      	strb	r3, [r5, #0]
  
  /* Return function status */
  return tmp_hal_status;
 8006baa:	e004      	b.n	8006bb6 <HAL_ADCEx_Calibration_Start+0x86>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006bac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006bae:	2220      	movs	r2, #32
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	65a3      	str	r3, [r4, #88]	; 0x58
 8006bb4:	e7f7      	b.n	8006ba6 <HAL_ADCEx_Calibration_Start+0x76>
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
  /* Return function status */
  return tmp_hal_status;
}
 8006bb6:	bd70      	pop	{r4, r5, r6, pc}
 8006bb8:	fffffefd 	.word	0xfffffefd

08006bbc <ADC_DelayMicroSecond>:
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000));
 8006bbc:	4b08      	ldr	r3, [pc, #32]	; (8006be0 <ADC_DelayMicroSecond+0x24>)
  * @brief  Delay micro seconds 
  * @param  microSecond : delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8006bbe:	b513      	push	{r0, r1, r4, lr}
 8006bc0:	1c04      	adds	r4, r0, #0
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000));
 8006bc2:	4908      	ldr	r1, [pc, #32]	; (8006be4 <ADC_DelayMicroSecond+0x28>)
 8006bc4:	6818      	ldr	r0, [r3, #0]
 8006bc6:	f7f9 fabd 	bl	8000144 <__aeabi_uidiv>
 8006bca:	4344      	muls	r4, r0
 8006bcc:	9401      	str	r4, [sp, #4]

  while(waitLoopIndex != 0)
 8006bce:	9b01      	ldr	r3, [sp, #4]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d003      	beq.n	8006bdc <ADC_DelayMicroSecond+0x20>
  {
    waitLoopIndex--;
 8006bd4:	9b01      	ldr	r3, [sp, #4]
 8006bd6:	3b01      	subs	r3, #1
 8006bd8:	9301      	str	r3, [sp, #4]
 8006bda:	e7f8      	b.n	8006bce <ADC_DelayMicroSecond+0x12>
  } 
}
 8006bdc:	bd13      	pop	{r0, r1, r4, pc}
 8006bde:	46c0      	nop			; (mov r8, r8)
 8006be0:	20000000 	.word	0x20000000
 8006be4:	000f4240 	.word	0x000f4240

08006be8 <ADC_Enable>:

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006be8:	6803      	ldr	r3, [r0, #0]
 8006bea:	2203      	movs	r2, #3
 8006bec:	6899      	ldr	r1, [r3, #8]
  * "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)". 
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8006bee:	b570      	push	{r4, r5, r6, lr}

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006bf0:	400a      	ands	r2, r1
  * "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)". 
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8006bf2:	1c04      	adds	r4, r0, #0

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006bf4:	2a01      	cmp	r2, #1
 8006bf6:	d104      	bne.n	8006c02 <ADC_Enable+0x1a>
 8006bf8:	6819      	ldr	r1, [r3, #0]
 8006bfa:	4211      	tst	r1, r2
 8006bfc:	d001      	beq.n	8006c02 <ADC_Enable+0x1a>
        }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8006bfe:	2000      	movs	r0, #0
 8006c00:	e027      	b.n	8006c52 <ADC_Enable+0x6a>
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8006c02:	6899      	ldr	r1, [r3, #8]
 8006c04:	4a13      	ldr	r2, [pc, #76]	; (8006c54 <ADC_Enable+0x6c>)
 8006c06:	4211      	tst	r1, r2
 8006c08:	d008      	beq.n	8006c1c <ADC_Enable+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006c0a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006c0c:	2210      	movs	r2, #16
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	65a3      	str	r3, [r4, #88]	; 0x58
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006c12:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8006c14:	2001      	movs	r0, #1
 8006c16:	4303      	orrs	r3, r0
 8006c18:	65e3      	str	r3, [r4, #92]	; 0x5c
      
      return HAL_ERROR;
 8006c1a:	e01a      	b.n	8006c52 <ADC_Enable+0x6a>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006c1c:	689a      	ldr	r2, [r3, #8]
 8006c1e:	2001      	movs	r0, #1
 8006c20:	4302      	orrs	r2, r0
 8006c22:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8006c24:	f7ff ffca 	bl	8006bbc <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();  
 8006c28:	f000 fa18 	bl	800705c <HAL_GetTick>
 8006c2c:	1c06      	adds	r6, r0, #0
    
    /* Wait for ADC effectively enabled */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8006c2e:	6823      	ldr	r3, [r4, #0]
 8006c30:	2501      	movs	r5, #1
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	422b      	tst	r3, r5
 8006c36:	d1e2      	bne.n	8006bfe <ADC_Enable+0x16>
      {
          if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 8006c38:	f000 fa10 	bl	800705c <HAL_GetTick>
 8006c3c:	1b80      	subs	r0, r0, r6
 8006c3e:	280a      	cmp	r0, #10
 8006c40:	d9f5      	bls.n	8006c2e <ADC_Enable+0x46>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006c42:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006c44:	2210      	movs	r2, #16
 8006c46:	4313      	orrs	r3, r2
 8006c48:	65a3      	str	r3, [r4, #88]	; 0x58
            
            /* Set ADC error code to ADC IP internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006c4a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
            
            return HAL_ERROR;
 8006c4c:	1c28      	adds	r0, r5, #0
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
            
            /* Set ADC error code to ADC IP internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006c4e:	432b      	orrs	r3, r5
 8006c50:	65e3      	str	r3, [r4, #92]	; 0x5c
    
  }
   
  /* Return HAL status */
  return HAL_OK;
}
 8006c52:	bd70      	pop	{r4, r5, r6, pc}
 8006c54:	80000017 	.word	0x80000017

08006c58 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006c58:	b570      	push	{r4, r5, r6, lr}
 8006c5a:	1e04      	subs	r4, r0, #0
 
  /* Check ADC handle */
  if(hadc == NULL)
 8006c5c:	d100      	bne.n	8006c60 <HAL_ADC_Init+0x8>
 8006c5e:	e0b5      	b.n	8006dcc <HAL_ADC_Init+0x174>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8006c60:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d105      	bne.n	8006c72 <HAL_ADC_Init+0x1a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006c66:	1c02      	adds	r2, r0, #0
 8006c68:	3254      	adds	r2, #84	; 0x54
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006c6a:	65c3      	str	r3, [r0, #92]	; 0x5c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006c6c:	7013      	strb	r3, [r2, #0]

    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006c6e:	f7fc fc2b 	bl	80034c8 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8006c72:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006c74:	06d8      	lsls	r0, r3, #27
 8006c76:	d403      	bmi.n	8006c80 <HAL_ADC_Init+0x28>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8006c78:	6823      	ldr	r3, [r4, #0]
 8006c7a:	689a      	ldr	r2, [r3, #8]
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8006c7c:	0751      	lsls	r1, r2, #29
 8006c7e:	d507      	bpl.n	8006c90 <HAL_ADC_Init+0x38>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006c80:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006c82:	2210      	movs	r2, #16
 8006c84:	4313      	orrs	r3, r2
 8006c86:	65a3      	str	r3, [r4, #88]	; 0x58
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006c88:	3454      	adds	r4, #84	; 0x54
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	7023      	strb	r3, [r4, #0]
 8006c8e:	e09d      	b.n	8006dcc <HAL_ADC_Init+0x174>
    return HAL_ERROR;
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8006c90:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006c92:	4a56      	ldr	r2, [pc, #344]	; (8006dec <HAL_ADC_Init+0x194>)
 8006c94:	400a      	ands	r2, r1
 8006c96:	2102      	movs	r1, #2
 8006c98:	430a      	orrs	r2, r1
 8006c9a:	65a2      	str	r2, [r4, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006c9c:	6899      	ldr	r1, [r3, #8]
 8006c9e:	2203      	movs	r2, #3
 8006ca0:	4011      	ands	r1, r2
 8006ca2:	4a53      	ldr	r2, [pc, #332]	; (8006df0 <HAL_ADC_Init+0x198>)
 8006ca4:	2901      	cmp	r1, #1
 8006ca6:	d102      	bne.n	8006cae <HAL_ADC_Init+0x56>
 8006ca8:	6818      	ldr	r0, [r3, #0]
 8006caa:	4208      	tst	r0, r1
 8006cac:	d11a      	bne.n	8006ce4 <HAL_ADC_Init+0x8c>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8006cae:	6961      	ldr	r1, [r4, #20]
 8006cb0:	2080      	movs	r0, #128	; 0x80
 8006cb2:	004d      	lsls	r5, r1, #1
 8006cb4:	086d      	lsrs	r5, r5, #1
 8006cb6:	05c0      	lsls	r0, r0, #23
 8006cb8:	4285      	cmp	r5, r0
 8006cba:	d004      	beq.n	8006cc6 <HAL_ADC_Init+0x6e>
 8006cbc:	2080      	movs	r0, #128	; 0x80
 8006cbe:	0600      	lsls	r0, r0, #24
 8006cc0:	4281      	cmp	r1, r0
 8006cc2:	d000      	beq.n	8006cc6 <HAL_ADC_Init+0x6e>
 8006cc4:	e084      	b.n	8006dd0 <HAL_ADC_Init+0x178>
 8006cc6:	6918      	ldr	r0, [r3, #16]
 8006cc8:	0080      	lsls	r0, r0, #2
 8006cca:	0880      	lsrs	r0, r0, #2
 8006ccc:	6118      	str	r0, [r3, #16]
 8006cce:	6918      	ldr	r0, [r3, #16]
 8006cd0:	4301      	orrs	r1, r0
 8006cd2:	6119      	str	r1, [r3, #16]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8006cd4:	68d9      	ldr	r1, [r3, #12]
 8006cd6:	2018      	movs	r0, #24
 8006cd8:	4381      	bics	r1, r0
 8006cda:	60d9      	str	r1, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8006cdc:	68d9      	ldr	r1, [r3, #12]
 8006cde:	69a5      	ldr	r5, [r4, #24]
 8006ce0:	4329      	orrs	r1, r5
 8006ce2:	60d9      	str	r1, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8006ce4:	6810      	ldr	r0, [r2, #0]
 8006ce6:	4943      	ldr	r1, [pc, #268]	; (8006df4 <HAL_ADC_Init+0x19c>)
 8006ce8:	4001      	ands	r1, r0
 8006cea:	6011      	str	r1, [r2, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8006cec:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 8006cee:	6811      	ldr	r1, [r2, #0]
 8006cf0:	0670      	lsls	r0, r6, #25
 8006cf2:	4301      	orrs	r1, r0
 8006cf4:	6011      	str	r1, [r2, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8006cf6:	6899      	ldr	r1, [r3, #8]
 8006cf8:	2280      	movs	r2, #128	; 0x80
 8006cfa:	0552      	lsls	r2, r2, #21
 8006cfc:	4211      	tst	r1, r2
 8006cfe:	d102      	bne.n	8006d06 <HAL_ADC_Init+0xae>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8006d00:	6899      	ldr	r1, [r3, #8]
 8006d02:	430a      	orrs	r2, r1
 8006d04:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN  |
 8006d06:	68d9      	ldr	r1, [r3, #12]
 8006d08:	4a3b      	ldr	r2, [pc, #236]	; (8006df8 <HAL_ADC_Init+0x1a0>)
                             ADC_CFGR1_AUTDLY |
                             ADC_CFGR1_AUTOFF |
                             ADC_CFGR1_DISCEN);
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8006d0a:	6a20      	ldr	r0, [r4, #32]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN  |
 8006d0c:	400a      	ands	r2, r1
 8006d0e:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD |
                             ADC_CFGR1_AUTDLY |
                             ADC_CFGR1_AUTOFF |
                             ADC_CFGR1_DISCEN);
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8006d10:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006d12:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8006d14:	6c26      	ldr	r6, [r4, #64]	; 0x40
 8006d16:	3802      	subs	r0, #2
 8006d18:	4241      	negs	r1, r0
 8006d1a:	4148      	adcs	r0, r1
                             ADC_CFGR1_OVRMOD |
                             ADC_CFGR1_AUTDLY |
                             ADC_CFGR1_AUTOFF |
                             ADC_CFGR1_DISCEN);
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8006d1c:	432a      	orrs	r2, r5
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
                            ADC_CONTINUOUS(hadc->Init.ContinuousConvMode)    | 
 8006d1e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
                             ADC_CFGR1_AUTDLY |
                             ADC_CFGR1_AUTOFF |
                             ADC_CFGR1_DISCEN);
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8006d20:	4332      	orrs	r2, r6
                            ADC_CONTINUOUS(hadc->Init.ContinuousConvMode)    | 
                            ADC_DMACONTREQ(hadc->Init.DMAContinuousRequests) |
 8006d22:	6ba6      	ldr	r6, [r4, #56]	; 0x38
                             ADC_CFGR1_AUTOFF |
                             ADC_CFGR1_DISCEN);
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
                            ADC_CONTINUOUS(hadc->Init.ContinuousConvMode)    | 
 8006d24:	034d      	lsls	r5, r1, #13
 8006d26:	432a      	orrs	r2, r5
                            ADC_DMACONTREQ(hadc->Init.DMAContinuousRequests) |
 8006d28:	0075      	lsls	r5, r6, #1
                            hadc->Init.Overrun                               |
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8006d2a:	6c66      	ldr	r6, [r4, #68]	; 0x44
                             ADC_CFGR1_DISCEN);
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
                            ADC_CONTINUOUS(hadc->Init.ContinuousConvMode)    | 
                            ADC_DMACONTREQ(hadc->Init.DMAContinuousRequests) |
 8006d2c:	432a      	orrs	r2, r5
                            hadc->Init.Overrun                               |
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8006d2e:	03b5      	lsls	r5, r6, #14
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8006d30:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
                            ADC_CONTINUOUS(hadc->Init.ContinuousConvMode)    | 
                            ADC_DMACONTREQ(hadc->Init.DMAContinuousRequests) |
                            hadc->Init.Overrun                               |
 8006d32:	432a      	orrs	r2, r5
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8006d34:	03f5      	lsls	r5, r6, #15
                             ADC_CFGR1_AUTDLY |
                             ADC_CFGR1_AUTOFF |
                             ADC_CFGR1_DISCEN);
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8006d36:	0080      	lsls	r0, r0, #2
                            ADC_CONTINUOUS(hadc->Init.ContinuousConvMode)    | 
                            ADC_DMACONTREQ(hadc->Init.DMAContinuousRequests) |
                            hadc->Init.Overrun                               |
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8006d38:	432a      	orrs	r2, r5
                             ADC_CFGR1_OVRMOD |
                             ADC_CFGR1_AUTDLY |
                             ADC_CFGR1_AUTOFF |
                             ADC_CFGR1_DISCEN);
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8006d3a:	4302      	orrs	r2, r0
 8006d3c:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006d3e:	20c2      	movs	r0, #194	; 0xc2
 8006d40:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006d42:	30ff      	adds	r0, #255	; 0xff
 8006d44:	4282      	cmp	r2, r0
 8006d46:	d004      	beq.n	8006d52 <HAL_ADC_Init+0xfa>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8006d48:	68d8      	ldr	r0, [r3, #12]
 8006d4a:	4302      	orrs	r2, r0
 8006d4c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8006d4e:	4302      	orrs	r2, r0
 8006d50:	60da      	str	r2, [r3, #12]
                             hadc->Init.ExternalTrigConvEdge;
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006d52:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006d54:	2a01      	cmp	r2, #1
 8006d56:	d10e      	bne.n	8006d76 <HAL_ADC_Init+0x11e>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8006d58:	2900      	cmp	r1, #0
 8006d5a:	d105      	bne.n	8006d68 <HAL_ADC_Init+0x110>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8006d5c:	68d9      	ldr	r1, [r3, #12]
 8006d5e:	2280      	movs	r2, #128	; 0x80
 8006d60:	0252      	lsls	r2, r2, #9
 8006d62:	430a      	orrs	r2, r1
 8006d64:	60da      	str	r2, [r3, #12]
 8006d66:	e006      	b.n	8006d76 <HAL_ADC_Init+0x11e>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006d68:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006d6a:	2020      	movs	r0, #32
 8006d6c:	4301      	orrs	r1, r0
 8006d6e:	65a1      	str	r1, [r4, #88]	; 0x58
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006d70:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006d72:	430a      	orrs	r2, r1
 8006d74:	65e2      	str	r2, [r4, #92]	; 0x5c
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8006d76:	6862      	ldr	r2, [r4, #4]
 8006d78:	2a01      	cmp	r2, #1
 8006d7a:	d10e      	bne.n	8006d9a <HAL_ADC_Init+0x142>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8006d7c:	6918      	ldr	r0, [r3, #16]
 8006d7e:	491f      	ldr	r1, [pc, #124]	; (8006dfc <HAL_ADC_Init+0x1a4>)
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8006d80:	68a5      	ldr	r5, [r4, #8]
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8006d82:	4001      	ands	r1, r0
 8006d84:	6119      	str	r1, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8006d86:	6919      	ldr	r1, [r3, #16]
                               hadc->Init.Oversample.RightBitShift             |
 8006d88:	68e6      	ldr	r6, [r4, #12]
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8006d8a:	6920      	ldr	r0, [r4, #16]
 8006d8c:	4329      	orrs	r1, r5
                               hadc->Init.Oversample.RightBitShift             |
 8006d8e:	4331      	orrs	r1, r6
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8006d90:	4301      	orrs	r1, r0
 8006d92:	6119      	str	r1, [r3, #16]
                               hadc->Init.Oversample.RightBitShift             |
                               hadc->Init.Oversample.TriggeredMode );
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8006d94:	6919      	ldr	r1, [r3, #16]
 8006d96:	430a      	orrs	r2, r1
 8006d98:	e006      	b.n	8006da8 <HAL_ADC_Init+0x150>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8006d9a:	6919      	ldr	r1, [r3, #16]
 8006d9c:	2201      	movs	r2, #1
 8006d9e:	4211      	tst	r1, r2
 8006da0:	d003      	beq.n	8006daa <HAL_ADC_Init+0x152>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8006da2:	6919      	ldr	r1, [r3, #16]
 8006da4:	4391      	bics	r1, r2
 8006da6:	1c0a      	adds	r2, r1, #0
 8006da8:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8006daa:	695a      	ldr	r2, [r3, #20]
 8006dac:	2107      	movs	r1, #7
 8006dae:	438a      	bics	r2, r1
 8006db0:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8006db2:	695a      	ldr	r2, [r3, #20]
 8006db4:	69e1      	ldr	r1, [r4, #28]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8006db6:	2000      	movs	r0, #0
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8006db8:	430a      	orrs	r2, r1
 8006dba:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8006dbc:	65e0      	str	r0, [r4, #92]	; 0x5c

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8006dbe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006dc0:	2203      	movs	r2, #3
 8006dc2:	4393      	bics	r3, r2
 8006dc4:	2201      	movs	r2, #1
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	65a3      	str	r3, [r4, #88]	; 0x58
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8006dca:	e00d      	b.n	8006de8 <HAL_ADC_Init+0x190>
{
 
  /* Check ADC handle */
  if(hadc == NULL)
  {
    return HAL_ERROR;
 8006dcc:	2001      	movs	r0, #1
 8006dce:	e00b      	b.n	8006de8 <HAL_ADC_Init+0x190>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8006dd0:	6918      	ldr	r0, [r3, #16]
 8006dd2:	0080      	lsls	r0, r0, #2
 8006dd4:	0880      	lsrs	r0, r0, #2
 8006dd6:	6118      	str	r0, [r3, #16]
 8006dd8:	6815      	ldr	r5, [r2, #0]
 8006dda:	4809      	ldr	r0, [pc, #36]	; (8006e00 <HAL_ADC_Init+0x1a8>)
 8006ddc:	4028      	ands	r0, r5
 8006dde:	6010      	str	r0, [r2, #0]
 8006de0:	6810      	ldr	r0, [r2, #0]
 8006de2:	4301      	orrs	r1, r0
 8006de4:	6011      	str	r1, [r2, #0]
 8006de6:	e775      	b.n	8006cd4 <HAL_ADC_Init+0x7c>
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
}
 8006de8:	bd70      	pop	{r4, r5, r6, pc}
 8006dea:	46c0      	nop			; (mov r8, r8)
 8006dec:	fffffefd 	.word	0xfffffefd
 8006df0:	40012708 	.word	0x40012708
 8006df4:	fdffffff 	.word	0xfdffffff
 8006df8:	fffe0219 	.word	0xfffe0219
 8006dfc:	7ffffc03 	.word	0x7ffffc03
 8006e00:	ffc3ffff 	.word	0xffc3ffff

08006e04 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8006e04:	b538      	push	{r3, r4, r5, lr}
    
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8006e06:	6803      	ldr	r3, [r0, #0]
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8006e08:	1c04      	adds	r4, r0, #0
    
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8006e0a:	689b      	ldr	r3, [r3, #8]
      hadc->Instance->CR |= ADC_CR_ADSTART;
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006e0c:	2002      	movs	r0, #2
    
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8006e0e:	075a      	lsls	r2, r3, #29
 8006e10:	d42e      	bmi.n	8006e70 <HAL_ADC_Start_IT+0x6c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006e12:	1c25      	adds	r5, r4, #0
 8006e14:	3554      	adds	r5, #84	; 0x54
 8006e16:	782b      	ldrb	r3, [r5, #0]
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	d029      	beq.n	8006e70 <HAL_ADC_Start_IT+0x6c>
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	702b      	strb	r3, [r5, #0]
    
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8006e20:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006e22:	2b01      	cmp	r3, #1
 8006e24:	d116      	bne.n	8006e54 <HAL_ADC_Start_IT+0x50>
    if (tmp_hal_status == HAL_OK)
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8006e26:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8006e28:	4b12      	ldr	r3, [pc, #72]	; (8006e74 <HAL_ADC_Start_IT+0x70>)
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */
      assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
      switch(hadc->Init.EOCSelection)
 8006e2a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    if (tmp_hal_status == HAL_OK)
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8006e2c:	4013      	ands	r3, r2
 8006e2e:	2280      	movs	r2, #128	; 0x80
 8006e30:	0052      	lsls	r2, r2, #1
 8006e32:	4313      	orrs	r3, r2
 8006e34:	65a3      	str	r3, [r4, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006e36:	2300      	movs	r3, #0
 8006e38:	65e3      	str	r3, [r4, #92]	; 0x5c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8006e3a:	702b      	strb	r3, [r5, #0]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006e3c:	6823      	ldr	r3, [r4, #0]
 8006e3e:	221c      	movs	r2, #28
 8006e40:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */
      assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
      switch(hadc->Init.EOCSelection)
 8006e42:	2908      	cmp	r1, #8
 8006e44:	d10c      	bne.n	8006e60 <HAL_ADC_Start_IT+0x5c>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8006e46:	685a      	ldr	r2, [r3, #4]
 8006e48:	2104      	movs	r1, #4
 8006e4a:	438a      	bics	r2, r1
 8006e4c:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
 8006e4e:	685a      	ldr	r2, [r3, #4]
 8006e50:	2118      	movs	r1, #24
 8006e52:	e006      	b.n	8006e62 <HAL_ADC_Start_IT+0x5e>
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
    {
      tmp_hal_status = ADC_Enable(hadc);
 8006e54:	1c20      	adds	r0, r4, #0
 8006e56:	f7ff fec7 	bl	8006be8 <ADC_Enable>
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8006e5a:	2800      	cmp	r0, #0
 8006e5c:	d108      	bne.n	8006e70 <HAL_ADC_Start_IT+0x6c>
 8006e5e:	e7e2      	b.n	8006e26 <HAL_ADC_Start_IT+0x22>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
          break;
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8006e60:	6859      	ldr	r1, [r3, #4]
 8006e62:	430a      	orrs	r2, r1
 8006e64:	605a      	str	r2, [r3, #4]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8006e66:	689a      	ldr	r2, [r3, #8]
 8006e68:	2104      	movs	r1, #4
 8006e6a:	430a      	orrs	r2, r1
 8006e6c:	609a      	str	r2, [r3, #8]
 8006e6e:	2000      	movs	r0, #0
    tmp_hal_status = HAL_BUSY;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8006e70:	bd38      	pop	{r3, r4, r5, pc}
 8006e72:	46c0      	nop			; (mov r8, r8)
 8006e74:	fffff0fe 	.word	0xfffff0fe

08006e78 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8006e78:	6803      	ldr	r3, [r0, #0]
 8006e7a:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8006e7c:	4770      	bx	lr

08006e7e <HAL_ADC_LevelOutOfWindowCallback>:
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
   */
}
 8006e7e:	4770      	bx	lr

08006e80 <HAL_ADC_ErrorCallback>:
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
   */
}
 8006e80:	4770      	bx	lr
	...

08006e84 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8006e84:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8006e86:	6803      	ldr	r3, [r0, #0]
 8006e88:	2204      	movs	r2, #4
 8006e8a:	6819      	ldr	r1, [r3, #0]
  * @brief  Handles ADC interrupt request.  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8006e8c:	1c04      	adds	r4, r0, #0
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8006e8e:	4211      	tst	r1, r2
 8006e90:	d002      	beq.n	8006e98 <HAL_ADC_IRQHandler+0x14>
 8006e92:	6859      	ldr	r1, [r3, #4]
 8006e94:	4211      	tst	r1, r2
 8006e96:	d106      	bne.n	8006ea6 <HAL_ADC_IRQHandler+0x22>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS)) )
 8006e98:	6819      	ldr	r1, [r3, #0]
 8006e9a:	2208      	movs	r2, #8
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8006e9c:	4211      	tst	r1, r2
 8006e9e:	d031      	beq.n	8006f04 <HAL_ADC_IRQHandler+0x80>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS)) )
 8006ea0:	6859      	ldr	r1, [r3, #4]
 8006ea2:	4211      	tst	r1, r2
 8006ea4:	d02e      	beq.n	8006f04 <HAL_ADC_IRQHandler+0x80>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006ea6:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8006ea8:	06d1      	lsls	r1, r2, #27
 8006eaa:	d404      	bmi.n	8006eb6 <HAL_ADC_IRQHandler+0x32>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8006eac:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006eae:	2280      	movs	r2, #128	; 0x80
 8006eb0:	0092      	lsls	r2, r2, #2
 8006eb2:	430a      	orrs	r2, r1
 8006eb4:	65a2      	str	r2, [r4, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8006eb6:	22c0      	movs	r2, #192	; 0xc0
 8006eb8:	68d9      	ldr	r1, [r3, #12]
 8006eba:	0112      	lsls	r2, r2, #4
 8006ebc:	4211      	tst	r1, r2
 8006ebe:	d11b      	bne.n	8006ef8 <HAL_ADC_IRQHandler+0x74>
 8006ec0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8006ec2:	2a00      	cmp	r2, #0
 8006ec4:	d118      	bne.n	8006ef8 <HAL_ADC_IRQHandler+0x74>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8006ec6:	681a      	ldr	r2, [r3, #0]
 8006ec8:	0711      	lsls	r1, r2, #28
 8006eca:	d515      	bpl.n	8006ef8 <HAL_ADC_IRQHandler+0x74>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
          /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8006ecc:	689a      	ldr	r2, [r3, #8]
 8006ece:	0751      	lsls	r1, r2, #29
 8006ed0:	d40a      	bmi.n	8006ee8 <HAL_ADC_IRQHandler+0x64>
          {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8006ed2:	685a      	ldr	r2, [r3, #4]
 8006ed4:	210c      	movs	r1, #12
 8006ed6:	438a      	bics	r2, r1
 8006ed8:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8006eda:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8006edc:	4b1f      	ldr	r3, [pc, #124]	; (8006f5c <HAL_ADC_IRQHandler+0xd8>)
 8006ede:	4013      	ands	r3, r2
 8006ee0:	2201      	movs	r2, #1
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	65a3      	str	r3, [r4, #88]	; 0x58
 8006ee6:	e007      	b.n	8006ef8 <HAL_ADC_IRQHandler+0x74>
                            HAL_ADC_STATE_READY);
          }
          else
          {
            /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006ee8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006eea:	2220      	movs	r2, #32
 8006eec:	4313      	orrs	r3, r2
 8006eee:	65a3      	str	r3, [r4, #88]	; 0x58
          
            /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006ef0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Conversion complete callback */
    /* Note: into callback, to determine if conversion has been triggered     */
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
    HAL_ADC_ConvCpltCallback(hadc);
 8006ef8:	1c20      	adds	r0, r4, #0
 8006efa:	f7fd ff59 	bl	8004db0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8006efe:	6823      	ldr	r3, [r4, #0]
 8006f00:	220c      	movs	r2, #12
 8006f02:	601a      	str	r2, [r3, #0]
    }
  
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8006f04:	6823      	ldr	r3, [r4, #0]
 8006f06:	2580      	movs	r5, #128	; 0x80
 8006f08:	681a      	ldr	r2, [r3, #0]
 8006f0a:	422a      	tst	r2, r5
 8006f0c:	d00b      	beq.n	8006f26 <HAL_ADC_IRQHandler+0xa2>
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	422b      	tst	r3, r5
 8006f12:	d008      	beq.n	8006f26 <HAL_ADC_IRQHandler+0xa2>
  {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8006f14:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8006f16:	026b      	lsls	r3, r5, #9
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	65a3      	str	r3, [r4, #88]	; 0x58
    
    /* Level out of window callback */
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8006f1c:	1c20      	adds	r0, r4, #0
 8006f1e:	f7ff ffae 	bl	8006e7e <HAL_ADC_LevelOutOfWindowCallback>
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);    
 8006f22:	6823      	ldr	r3, [r4, #0]
 8006f24:	601d      	str	r5, [r3, #0]
   
  }  
  
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8006f26:	6823      	ldr	r3, [r4, #0]
 8006f28:	2210      	movs	r2, #16
 8006f2a:	6819      	ldr	r1, [r3, #0]
 8006f2c:	4211      	tst	r1, r2
 8006f2e:	d014      	beq.n	8006f5a <HAL_ADC_IRQHandler+0xd6>
 8006f30:	6859      	ldr	r1, [r3, #4]
 8006f32:	4211      	tst	r1, r2
 8006f34:	d011      	beq.n	8006f5a <HAL_ADC_IRQHandler+0xd6>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8006f36:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006f38:	2a00      	cmp	r2, #0
 8006f3a:	d002      	beq.n	8006f42 <HAL_ADC_IRQHandler+0xbe>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 8006f3c:	68da      	ldr	r2, [r3, #12]
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8006f3e:	07d1      	lsls	r1, r2, #31
 8006f40:	d508      	bpl.n	8006f54 <HAL_ADC_IRQHandler+0xd0>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8006f42:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8006f44:	2102      	movs	r1, #2
 8006f46:	430a      	orrs	r2, r1
 8006f48:	65e2      	str	r2, [r4, #92]	; 0x5c
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8006f4a:	2210      	movs	r2, #16
 8006f4c:	601a      	str	r2, [r3, #0]
      
      /* Error callback */ 
      HAL_ADC_ErrorCallback(hadc);
 8006f4e:	1c20      	adds	r0, r4, #0
 8006f50:	f7ff ff96 	bl	8006e80 <HAL_ADC_ErrorCallback>
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8006f54:	6823      	ldr	r3, [r4, #0]
 8006f56:	2210      	movs	r2, #16
 8006f58:	601a      	str	r2, [r3, #0]
  }
}
 8006f5a:	bd38      	pop	{r3, r4, r5, pc}
 8006f5c:	fffffefe 	.word	0xfffffefe

08006f60 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006f60:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);    
 8006f62:	1c04      	adds	r4, r0, #0
 8006f64:	3454      	adds	r4, #84	; 0x54
 8006f66:	7822      	ldrb	r2, [r4, #0]
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006f68:	1c03      	adds	r3, r0, #0
 8006f6a:	1c0d      	adds	r5, r1, #0
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);    
 8006f6c:	2002      	movs	r0, #2
 8006f6e:	2a01      	cmp	r2, #1
 8006f70:	d041      	beq.n	8006ff6 <HAL_ADC_ConfigChannel+0x96>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8006f72:	681a      	ldr	r2, [r3, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);    
 8006f74:	2001      	movs	r0, #1
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8006f76:	6891      	ldr	r1, [r2, #8]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);    
 8006f78:	7020      	strb	r0, [r4, #0]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8006f7a:	074e      	lsls	r6, r1, #29
 8006f7c:	d506      	bpl.n	8006f8c <HAL_ADC_ConfigChannel+0x2c>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006f7e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006f80:	2120      	movs	r1, #32
 8006f82:	430a      	orrs	r2, r1
 8006f84:	659a      	str	r2, [r3, #88]	; 0x58
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006f86:	2300      	movs	r3, #0
 8006f88:	7023      	strb	r3, [r4, #0]
    return HAL_ERROR;
 8006f8a:	e034      	b.n	8006ff6 <HAL_ADC_ConfigChannel+0x96>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8006f8c:	481a      	ldr	r0, [pc, #104]	; (8006ff8 <HAL_ADC_ConfigChannel+0x98>)
 8006f8e:	686e      	ldr	r6, [r5, #4]
 8006f90:	2180      	movs	r1, #128	; 0x80
 8006f92:	682b      	ldr	r3, [r5, #0]
 8006f94:	02c9      	lsls	r1, r1, #11
 8006f96:	4286      	cmp	r6, r0
 8006f98:	d018      	beq.n	8006fcc <HAL_ADC_ConfigChannel+0x6c>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8006f9a:	6a96      	ldr	r6, [r2, #40]	; 0x28
 8006f9c:	0358      	lsls	r0, r3, #13
 8006f9e:	0b40      	lsrs	r0, r0, #13
 8006fa0:	4330      	orrs	r0, r6
 8006fa2:	6290      	str	r0, [r2, #40]	; 0x28
    /* internal measurement paths enable: If internal channel selected, enable  */
    /* dedicated internal buffers and path.                                     */
    
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8006fa4:	420b      	tst	r3, r1
 8006fa6:	d008      	beq.n	8006fba <HAL_ADC_ConfigChannel+0x5a>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8006fa8:	4b14      	ldr	r3, [pc, #80]	; (8006ffc <HAL_ADC_ConfigChannel+0x9c>)
 8006faa:	2280      	movs	r2, #128	; 0x80
 8006fac:	6819      	ldr	r1, [r3, #0]
 8006fae:	0412      	lsls	r2, r2, #16
 8006fb0:	430a      	orrs	r2, r1
 8006fb2:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8006fb4:	200a      	movs	r0, #10
 8006fb6:	f7ff fe01 	bl	8006bbc <ADC_DelayMicroSecond>
    }
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8006fba:	682b      	ldr	r3, [r5, #0]
 8006fbc:	039a      	lsls	r2, r3, #14
 8006fbe:	d518      	bpl.n	8006ff2 <HAL_ADC_ConfigChannel+0x92>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8006fc0:	4b0e      	ldr	r3, [pc, #56]	; (8006ffc <HAL_ADC_ConfigChannel+0x9c>)
 8006fc2:	2280      	movs	r2, #128	; 0x80
 8006fc4:	6819      	ldr	r1, [r3, #0]
 8006fc6:	03d2      	lsls	r2, r2, #15
 8006fc8:	430a      	orrs	r2, r1
 8006fca:	e011      	b.n	8006ff0 <HAL_ADC_ConfigChannel+0x90>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8006fcc:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8006fce:	035d      	lsls	r5, r3, #13
 8006fd0:	0b6d      	lsrs	r5, r5, #13
 8006fd2:	43a8      	bics	r0, r5
 8006fd4:	6290      	str	r0, [r2, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8006fd6:	420b      	tst	r3, r1
 8006fd8:	d004      	beq.n	8006fe4 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8006fda:	4a08      	ldr	r2, [pc, #32]	; (8006ffc <HAL_ADC_ConfigChannel+0x9c>)
 8006fdc:	4908      	ldr	r1, [pc, #32]	; (8007000 <HAL_ADC_ConfigChannel+0xa0>)
 8006fde:	6810      	ldr	r0, [r2, #0]
 8006fe0:	4001      	ands	r1, r0
 8006fe2:	6011      	str	r1, [r2, #0]
    }
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8006fe4:	039e      	lsls	r6, r3, #14
 8006fe6:	d504      	bpl.n	8006ff2 <HAL_ADC_ConfigChannel+0x92>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8006fe8:	4b04      	ldr	r3, [pc, #16]	; (8006ffc <HAL_ADC_ConfigChannel+0x9c>)
 8006fea:	4a06      	ldr	r2, [pc, #24]	; (8007004 <HAL_ADC_ConfigChannel+0xa4>)
 8006fec:	6819      	ldr	r1, [r3, #0]
 8006fee:	400a      	ands	r2, r1
 8006ff0:	601a      	str	r2, [r3, #0]
    }
#endif
  }
 
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006ff2:	2000      	movs	r0, #0
 8006ff4:	7020      	strb	r0, [r4, #0]
  
  /* Return function status */
  return HAL_OK;
}
 8006ff6:	bd70      	pop	{r4, r5, r6, pc}
 8006ff8:	00001001 	.word	0x00001001
 8006ffc:	40012708 	.word	0x40012708
 8007000:	ff7fffff 	.word	0xff7fffff
 8007004:	ffbfffff 	.word	0xffbfffff

08007008 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007008:	b510      	push	{r4, lr}
 800700a:	1c04      	adds	r4, r0, #0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800700c:	f7ff fb40 	bl	8006690 <HAL_RCC_GetHCLKFreq>
 8007010:	21fa      	movs	r1, #250	; 0xfa
 8007012:	0089      	lsls	r1, r1, #2
 8007014:	f7f9 f896 	bl	8000144 <__aeabi_uidiv>
 8007018:	f7ff fd5c 	bl	8006ad4 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 800701c:	2001      	movs	r0, #1
 800701e:	4240      	negs	r0, r0
 8007020:	1c21      	adds	r1, r4, #0
 8007022:	2200      	movs	r2, #0
 8007024:	f7ff fd0c 	bl	8006a40 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8007028:	2000      	movs	r0, #0
 800702a:	bd10      	pop	{r4, pc}

0800702c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800702c:	b508      	push	{r3, lr}
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800702e:	4b06      	ldr	r3, [pc, #24]	; (8007048 <HAL_Init+0x1c>)
 8007030:	2140      	movs	r1, #64	; 0x40
 8007032:	681a      	ldr	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8007034:	2000      	movs	r0, #0
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8007036:	430a      	orrs	r2, r1
 8007038:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800703a:	f7ff ffe5 	bl	8007008 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800703e:	f7fc fa31 	bl	80034a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8007042:	2000      	movs	r0, #0
 8007044:	bd08      	pop	{r3, pc}
 8007046:	46c0      	nop			; (mov r8, r8)
 8007048:	40022000 	.word	0x40022000

0800704c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800704c:	4b02      	ldr	r3, [pc, #8]	; (8007058 <HAL_IncTick+0xc>)
 800704e:	681a      	ldr	r2, [r3, #0]
 8007050:	3201      	adds	r2, #1
 8007052:	601a      	str	r2, [r3, #0]
}
 8007054:	4770      	bx	lr
 8007056:	46c0      	nop			; (mov r8, r8)
 8007058:	20000660 	.word	0x20000660

0800705c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800705c:	4b01      	ldr	r3, [pc, #4]	; (8007064 <HAL_GetTick+0x8>)
 800705e:	6818      	ldr	r0, [r3, #0]
}
 8007060:	4770      	bx	lr
 8007062:	46c0      	nop			; (mov r8, r8)
 8007064:	20000660 	.word	0x20000660

08007068 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8007068:	b513      	push	{r0, r1, r4, lr}
 800706a:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 800706c:	f7ff fff6 	bl	800705c <HAL_GetTick>
 8007070:	1c04      	adds	r4, r0, #0
  while((HAL_GetTick() - tickstart) < Delay)
 8007072:	f7ff fff3 	bl	800705c <HAL_GetTick>
 8007076:	9b01      	ldr	r3, [sp, #4]
 8007078:	1b00      	subs	r0, r0, r4
 800707a:	4298      	cmp	r0, r3
 800707c:	d3f9      	bcc.n	8007072 <HAL_Delay+0xa>
  {
  }
}
 800707e:	bd13      	pop	{r0, r1, r4, pc}

08007080 <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{    
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8007080:	4b10      	ldr	r3, [pc, #64]	; (80070c4 <SystemInit+0x44>)
 8007082:	2280      	movs	r2, #128	; 0x80
 8007084:	6819      	ldr	r1, [r3, #0]
 8007086:	0052      	lsls	r2, r2, #1
 8007088:	430a      	orrs	r2, r1
 800708a:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400C;
 800708c:	68d9      	ldr	r1, [r3, #12]
 800708e:	4a0e      	ldr	r2, [pc, #56]	; (80070c8 <SystemInit+0x48>)
 8007090:	400a      	ands	r2, r1
 8007092:	60da      	str	r2, [r3, #12]
 
  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6;
 8007094:	6819      	ldr	r1, [r3, #0]
 8007096:	4a0d      	ldr	r2, [pc, #52]	; (80070cc <SystemInit+0x4c>)
 8007098:	400a      	ands	r2, r1
 800709a:	601a      	str	r2, [r3, #0]
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFE;
 800709c:	689a      	ldr	r2, [r3, #8]
 800709e:	2101      	movs	r1, #1
 80070a0:	438a      	bics	r2, r1
 80070a2:	609a      	str	r2, [r3, #8]
  
  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80070a4:	6819      	ldr	r1, [r3, #0]
 80070a6:	4a0a      	ldr	r2, [pc, #40]	; (80070d0 <SystemInit+0x50>)
 80070a8:	400a      	ands	r2, r1
 80070aa:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 80070ac:	68d9      	ldr	r1, [r3, #12]
 80070ae:	4a09      	ldr	r2, [pc, #36]	; (80070d4 <SystemInit+0x54>)
 80070b0:	400a      	ands	r2, r1
 80070b2:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000;
 80070b4:	2200      	movs	r2, #0
 80070b6:	611a      	str	r2, [r3, #16]
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80070b8:	4b07      	ldr	r3, [pc, #28]	; (80070d8 <SystemInit+0x58>)
 80070ba:	2280      	movs	r2, #128	; 0x80
 80070bc:	0512      	lsls	r2, r2, #20
 80070be:	609a      	str	r2, [r3, #8]
#endif
}
 80070c0:	4770      	bx	lr
 80070c2:	46c0      	nop			; (mov r8, r8)
 80070c4:	40021000 	.word	0x40021000
 80070c8:	88ff400c 	.word	0x88ff400c
 80070cc:	fef6fff6 	.word	0xfef6fff6
 80070d0:	fffbffff 	.word	0xfffbffff
 80070d4:	ff02ffff 	.word	0xff02ffff
 80070d8:	e000ed00 	.word	0xe000ed00

080070dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80070dc:	480d      	ldr	r0, [pc, #52]	; (8007114 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80070de:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80070e0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80070e2:	e003      	b.n	80070ec <LoopCopyDataInit>

080070e4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80070e4:	4b0c      	ldr	r3, [pc, #48]	; (8007118 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 80070e6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80070e8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80070ea:	3104      	adds	r1, #4

080070ec <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 80070ec:	480b      	ldr	r0, [pc, #44]	; (800711c <LoopForever+0xa>)
  ldr  r3, =_edata
 80070ee:	4b0c      	ldr	r3, [pc, #48]	; (8007120 <LoopForever+0xe>)
  adds  r2, r0, r1
 80070f0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80070f2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80070f4:	d3f6      	bcc.n	80070e4 <CopyDataInit>
  ldr  r2, =_sbss
 80070f6:	4a0b      	ldr	r2, [pc, #44]	; (8007124 <LoopForever+0x12>)
  b  LoopFillZerobss
 80070f8:	e002      	b.n	8007100 <LoopFillZerobss>

080070fa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80070fa:	2300      	movs	r3, #0
  str  r3, [r2]
 80070fc:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80070fe:	3204      	adds	r2, #4

08007100 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8007100:	4b09      	ldr	r3, [pc, #36]	; (8007128 <LoopForever+0x16>)
  cmp  r2, r3
 8007102:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007104:	d3f9      	bcc.n	80070fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8007106:	f7ff ffbb 	bl	8007080 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800710a:	f000 f81b 	bl	8007144 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800710e:	f7fc fe6f 	bl	8003df0 <main>

08007112 <LoopForever>:

LoopForever:
    b LoopForever
 8007112:	e7fe      	b.n	8007112 <LoopForever>

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8007114:	20002000 	.word	0x20002000
/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8007118:	0800c5f8 	.word	0x0800c5f8
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4

LoopCopyDataInit:
  ldr  r0, =_sdata
 800711c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007120:	20000548 	.word	0x20000548
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8007124:	20000548 	.word	0x20000548
  str  r3, [r2]
  adds r2, r2, #4


LoopFillZerobss:
  ldr  r3, = _ebss
 8007128:	20000a48 	.word	0x20000a48

0800712c <DMA1_Channel1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800712c:	e7fe      	b.n	800712c <DMA1_Channel1_IRQHandler>

0800712e <atoff>:
 800712e:	b508      	push	{r3, lr}
 8007130:	2100      	movs	r1, #0
 8007132:	f001 f8dd 	bl	80082f0 <strtof>
 8007136:	bd08      	pop	{r3, pc}

08007138 <atoi>:
 8007138:	b508      	push	{r3, lr}
 800713a:	2100      	movs	r1, #0
 800713c:	220a      	movs	r2, #10
 800713e:	f001 f979 	bl	8008434 <strtol>
 8007142:	bd08      	pop	{r3, pc}

08007144 <__libc_init_array>:
 8007144:	b570      	push	{r4, r5, r6, lr}
 8007146:	4b0e      	ldr	r3, [pc, #56]	; (8007180 <__libc_init_array+0x3c>)
 8007148:	4d0e      	ldr	r5, [pc, #56]	; (8007184 <__libc_init_array+0x40>)
 800714a:	2400      	movs	r4, #0
 800714c:	1aed      	subs	r5, r5, r3
 800714e:	10ad      	asrs	r5, r5, #2
 8007150:	1c1e      	adds	r6, r3, #0
 8007152:	42ac      	cmp	r4, r5
 8007154:	d004      	beq.n	8007160 <__libc_init_array+0x1c>
 8007156:	00a3      	lsls	r3, r4, #2
 8007158:	58f3      	ldr	r3, [r6, r3]
 800715a:	4798      	blx	r3
 800715c:	3401      	adds	r4, #1
 800715e:	e7f8      	b.n	8007152 <__libc_init_array+0xe>
 8007160:	f004 fd98 	bl	800bc94 <_init>
 8007164:	4b08      	ldr	r3, [pc, #32]	; (8007188 <__libc_init_array+0x44>)
 8007166:	4d09      	ldr	r5, [pc, #36]	; (800718c <__libc_init_array+0x48>)
 8007168:	2400      	movs	r4, #0
 800716a:	1aed      	subs	r5, r5, r3
 800716c:	10ad      	asrs	r5, r5, #2
 800716e:	1c1e      	adds	r6, r3, #0
 8007170:	42ac      	cmp	r4, r5
 8007172:	d004      	beq.n	800717e <__libc_init_array+0x3a>
 8007174:	00a3      	lsls	r3, r4, #2
 8007176:	58f3      	ldr	r3, [r6, r3]
 8007178:	4798      	blx	r3
 800717a:	3401      	adds	r4, #1
 800717c:	e7f8      	b.n	8007170 <__libc_init_array+0x2c>
 800717e:	bd70      	pop	{r4, r5, r6, pc}
 8007180:	0800c5f0 	.word	0x0800c5f0
 8007184:	0800c5f0 	.word	0x0800c5f0
 8007188:	0800c5f0 	.word	0x0800c5f0
 800718c:	0800c5f4 	.word	0x0800c5f4

08007190 <malloc>:
 8007190:	b508      	push	{r3, lr}
 8007192:	4b03      	ldr	r3, [pc, #12]	; (80071a0 <malloc+0x10>)
 8007194:	1c01      	adds	r1, r0, #0
 8007196:	6818      	ldr	r0, [r3, #0]
 8007198:	f000 f80e 	bl	80071b8 <_malloc_r>
 800719c:	bd08      	pop	{r3, pc}
 800719e:	46c0      	nop			; (mov r8, r8)
 80071a0:	20000508 	.word	0x20000508

080071a4 <free>:
 80071a4:	b508      	push	{r3, lr}
 80071a6:	4b03      	ldr	r3, [pc, #12]	; (80071b4 <free+0x10>)
 80071a8:	1c01      	adds	r1, r0, #0
 80071aa:	6818      	ldr	r0, [r3, #0]
 80071ac:	f002 ffd4 	bl	800a158 <_free_r>
 80071b0:	bd08      	pop	{r3, pc}
 80071b2:	46c0      	nop			; (mov r8, r8)
 80071b4:	20000508 	.word	0x20000508

080071b8 <_malloc_r>:
 80071b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071ba:	1c0c      	adds	r4, r1, #0
 80071bc:	b085      	sub	sp, #20
 80071be:	340b      	adds	r4, #11
 80071c0:	9002      	str	r0, [sp, #8]
 80071c2:	2c16      	cmp	r4, #22
 80071c4:	d903      	bls.n	80071ce <_malloc_r+0x16>
 80071c6:	2307      	movs	r3, #7
 80071c8:	439c      	bics	r4, r3
 80071ca:	d501      	bpl.n	80071d0 <_malloc_r+0x18>
 80071cc:	e002      	b.n	80071d4 <_malloc_r+0x1c>
 80071ce:	2410      	movs	r4, #16
 80071d0:	428c      	cmp	r4, r1
 80071d2:	d203      	bcs.n	80071dc <_malloc_r+0x24>
 80071d4:	9d02      	ldr	r5, [sp, #8]
 80071d6:	230c      	movs	r3, #12
 80071d8:	602b      	str	r3, [r5, #0]
 80071da:	e1c9      	b.n	8007570 <_malloc_r+0x3b8>
 80071dc:	9802      	ldr	r0, [sp, #8]
 80071de:	f000 f9ee 	bl	80075be <__malloc_lock>
 80071e2:	22f8      	movs	r2, #248	; 0xf8
 80071e4:	32ff      	adds	r2, #255	; 0xff
 80071e6:	4baf      	ldr	r3, [pc, #700]	; (80074a4 <_malloc_r+0x2ec>)
 80071e8:	4294      	cmp	r4, r2
 80071ea:	d814      	bhi.n	8007216 <_malloc_r+0x5e>
 80071ec:	08e1      	lsrs	r1, r4, #3
 80071ee:	00ca      	lsls	r2, r1, #3
 80071f0:	189a      	adds	r2, r3, r2
 80071f2:	68d5      	ldr	r5, [r2, #12]
 80071f4:	4295      	cmp	r5, r2
 80071f6:	d105      	bne.n	8007204 <_malloc_r+0x4c>
 80071f8:	1c2a      	adds	r2, r5, #0
 80071fa:	696d      	ldr	r5, [r5, #20]
 80071fc:	3208      	adds	r2, #8
 80071fe:	3102      	adds	r1, #2
 8007200:	4295      	cmp	r5, r2
 8007202:	d043      	beq.n	800728c <_malloc_r+0xd4>
 8007204:	686e      	ldr	r6, [r5, #4]
 8007206:	2303      	movs	r3, #3
 8007208:	68ea      	ldr	r2, [r5, #12]
 800720a:	68a9      	ldr	r1, [r5, #8]
 800720c:	439e      	bics	r6, r3
 800720e:	60ca      	str	r2, [r1, #12]
 8007210:	19ab      	adds	r3, r5, r6
 8007212:	6091      	str	r1, [r2, #8]
 8007214:	e02a      	b.n	800726c <_malloc_r+0xb4>
 8007216:	0a62      	lsrs	r2, r4, #9
 8007218:	213f      	movs	r1, #63	; 0x3f
 800721a:	2a00      	cmp	r2, #0
 800721c:	d01b      	beq.n	8007256 <_malloc_r+0x9e>
 800721e:	2a04      	cmp	r2, #4
 8007220:	d802      	bhi.n	8007228 <_malloc_r+0x70>
 8007222:	09a1      	lsrs	r1, r4, #6
 8007224:	3138      	adds	r1, #56	; 0x38
 8007226:	e016      	b.n	8007256 <_malloc_r+0x9e>
 8007228:	2a14      	cmp	r2, #20
 800722a:	d802      	bhi.n	8007232 <_malloc_r+0x7a>
 800722c:	1c11      	adds	r1, r2, #0
 800722e:	315b      	adds	r1, #91	; 0x5b
 8007230:	e011      	b.n	8007256 <_malloc_r+0x9e>
 8007232:	2a54      	cmp	r2, #84	; 0x54
 8007234:	d802      	bhi.n	800723c <_malloc_r+0x84>
 8007236:	0b21      	lsrs	r1, r4, #12
 8007238:	316e      	adds	r1, #110	; 0x6e
 800723a:	e00c      	b.n	8007256 <_malloc_r+0x9e>
 800723c:	21aa      	movs	r1, #170	; 0xaa
 800723e:	0049      	lsls	r1, r1, #1
 8007240:	428a      	cmp	r2, r1
 8007242:	d802      	bhi.n	800724a <_malloc_r+0x92>
 8007244:	0be1      	lsrs	r1, r4, #15
 8007246:	3177      	adds	r1, #119	; 0x77
 8007248:	e005      	b.n	8007256 <_malloc_r+0x9e>
 800724a:	4897      	ldr	r0, [pc, #604]	; (80074a8 <_malloc_r+0x2f0>)
 800724c:	217e      	movs	r1, #126	; 0x7e
 800724e:	4282      	cmp	r2, r0
 8007250:	d801      	bhi.n	8007256 <_malloc_r+0x9e>
 8007252:	0ca1      	lsrs	r1, r4, #18
 8007254:	317c      	adds	r1, #124	; 0x7c
 8007256:	00ca      	lsls	r2, r1, #3
 8007258:	189a      	adds	r2, r3, r2
 800725a:	68d5      	ldr	r5, [r2, #12]
 800725c:	e00c      	b.n	8007278 <_malloc_r+0xc0>
 800725e:	2f00      	cmp	r7, #0
 8007260:	db09      	blt.n	8007276 <_malloc_r+0xbe>
 8007262:	68eb      	ldr	r3, [r5, #12]
 8007264:	68aa      	ldr	r2, [r5, #8]
 8007266:	60d3      	str	r3, [r2, #12]
 8007268:	609a      	str	r2, [r3, #8]
 800726a:	19ab      	adds	r3, r5, r6
 800726c:	685f      	ldr	r7, [r3, #4]
 800726e:	2201      	movs	r2, #1
 8007270:	433a      	orrs	r2, r7
 8007272:	605a      	str	r2, [r3, #4]
 8007274:	e188      	b.n	8007588 <_malloc_r+0x3d0>
 8007276:	68ed      	ldr	r5, [r5, #12]
 8007278:	4295      	cmp	r5, r2
 800727a:	d006      	beq.n	800728a <_malloc_r+0xd2>
 800727c:	686e      	ldr	r6, [r5, #4]
 800727e:	2003      	movs	r0, #3
 8007280:	4386      	bics	r6, r0
 8007282:	1b37      	subs	r7, r6, r4
 8007284:	2f0f      	cmp	r7, #15
 8007286:	ddea      	ble.n	800725e <_malloc_r+0xa6>
 8007288:	3901      	subs	r1, #1
 800728a:	3101      	adds	r1, #1
 800728c:	1c1f      	adds	r7, r3, #0
 800728e:	691d      	ldr	r5, [r3, #16]
 8007290:	3708      	adds	r7, #8
 8007292:	42bd      	cmp	r5, r7
 8007294:	d063      	beq.n	800735e <_malloc_r+0x1a6>
 8007296:	6868      	ldr	r0, [r5, #4]
 8007298:	2203      	movs	r2, #3
 800729a:	4390      	bics	r0, r2
 800729c:	1c02      	adds	r2, r0, #0
 800729e:	1b00      	subs	r0, r0, r4
 80072a0:	280f      	cmp	r0, #15
 80072a2:	dd08      	ble.n	80072b6 <_malloc_r+0xfe>
 80072a4:	2101      	movs	r1, #1
 80072a6:	192a      	adds	r2, r5, r4
 80072a8:	430c      	orrs	r4, r1
 80072aa:	606c      	str	r4, [r5, #4]
 80072ac:	615a      	str	r2, [r3, #20]
 80072ae:	611a      	str	r2, [r3, #16]
 80072b0:	60d7      	str	r7, [r2, #12]
 80072b2:	6097      	str	r7, [r2, #8]
 80072b4:	e080      	b.n	80073b8 <_malloc_r+0x200>
 80072b6:	615f      	str	r7, [r3, #20]
 80072b8:	611f      	str	r7, [r3, #16]
 80072ba:	2800      	cmp	r0, #0
 80072bc:	db05      	blt.n	80072ca <_malloc_r+0x112>
 80072be:	18aa      	adds	r2, r5, r2
 80072c0:	6851      	ldr	r1, [r2, #4]
 80072c2:	2301      	movs	r3, #1
 80072c4:	430b      	orrs	r3, r1
 80072c6:	6053      	str	r3, [r2, #4]
 80072c8:	e15e      	b.n	8007588 <_malloc_r+0x3d0>
 80072ca:	4878      	ldr	r0, [pc, #480]	; (80074ac <_malloc_r+0x2f4>)
 80072cc:	4282      	cmp	r2, r0
 80072ce:	d80b      	bhi.n	80072e8 <_malloc_r+0x130>
 80072d0:	08d2      	lsrs	r2, r2, #3
 80072d2:	1090      	asrs	r0, r2, #2
 80072d4:	2701      	movs	r7, #1
 80072d6:	685e      	ldr	r6, [r3, #4]
 80072d8:	4087      	lsls	r7, r0
 80072da:	1c38      	adds	r0, r7, #0
 80072dc:	00d2      	lsls	r2, r2, #3
 80072de:	4330      	orrs	r0, r6
 80072e0:	189a      	adds	r2, r3, r2
 80072e2:	6058      	str	r0, [r3, #4]
 80072e4:	6890      	ldr	r0, [r2, #8]
 80072e6:	e036      	b.n	8007356 <_malloc_r+0x19e>
 80072e8:	0a50      	lsrs	r0, r2, #9
 80072ea:	2804      	cmp	r0, #4
 80072ec:	d802      	bhi.n	80072f4 <_malloc_r+0x13c>
 80072ee:	0997      	lsrs	r7, r2, #6
 80072f0:	3738      	adds	r7, #56	; 0x38
 80072f2:	e016      	b.n	8007322 <_malloc_r+0x16a>
 80072f4:	2814      	cmp	r0, #20
 80072f6:	d802      	bhi.n	80072fe <_malloc_r+0x146>
 80072f8:	1c07      	adds	r7, r0, #0
 80072fa:	375b      	adds	r7, #91	; 0x5b
 80072fc:	e011      	b.n	8007322 <_malloc_r+0x16a>
 80072fe:	2854      	cmp	r0, #84	; 0x54
 8007300:	d802      	bhi.n	8007308 <_malloc_r+0x150>
 8007302:	0b17      	lsrs	r7, r2, #12
 8007304:	376e      	adds	r7, #110	; 0x6e
 8007306:	e00c      	b.n	8007322 <_malloc_r+0x16a>
 8007308:	27aa      	movs	r7, #170	; 0xaa
 800730a:	007f      	lsls	r7, r7, #1
 800730c:	42b8      	cmp	r0, r7
 800730e:	d802      	bhi.n	8007316 <_malloc_r+0x15e>
 8007310:	0bd7      	lsrs	r7, r2, #15
 8007312:	3777      	adds	r7, #119	; 0x77
 8007314:	e005      	b.n	8007322 <_malloc_r+0x16a>
 8007316:	4e64      	ldr	r6, [pc, #400]	; (80074a8 <_malloc_r+0x2f0>)
 8007318:	277e      	movs	r7, #126	; 0x7e
 800731a:	42b0      	cmp	r0, r6
 800731c:	d801      	bhi.n	8007322 <_malloc_r+0x16a>
 800731e:	0c97      	lsrs	r7, r2, #18
 8007320:	377c      	adds	r7, #124	; 0x7c
 8007322:	00f8      	lsls	r0, r7, #3
 8007324:	1818      	adds	r0, r3, r0
 8007326:	9001      	str	r0, [sp, #4]
 8007328:	9e01      	ldr	r6, [sp, #4]
 800732a:	6880      	ldr	r0, [r0, #8]
 800732c:	42b0      	cmp	r0, r6
 800732e:	d10c      	bne.n	800734a <_malloc_r+0x192>
 8007330:	10bf      	asrs	r7, r7, #2
 8007332:	2201      	movs	r2, #1
 8007334:	40ba      	lsls	r2, r7
 8007336:	1c17      	adds	r7, r2, #0
 8007338:	685a      	ldr	r2, [r3, #4]
 800733a:	4317      	orrs	r7, r2
 800733c:	605f      	str	r7, [r3, #4]
 800733e:	1c02      	adds	r2, r0, #0
 8007340:	e009      	b.n	8007356 <_malloc_r+0x19e>
 8007342:	6880      	ldr	r0, [r0, #8]
 8007344:	9e01      	ldr	r6, [sp, #4]
 8007346:	42b0      	cmp	r0, r6
 8007348:	d004      	beq.n	8007354 <_malloc_r+0x19c>
 800734a:	6846      	ldr	r6, [r0, #4]
 800734c:	2703      	movs	r7, #3
 800734e:	43be      	bics	r6, r7
 8007350:	42b2      	cmp	r2, r6
 8007352:	d3f6      	bcc.n	8007342 <_malloc_r+0x18a>
 8007354:	68c2      	ldr	r2, [r0, #12]
 8007356:	60ea      	str	r2, [r5, #12]
 8007358:	60a8      	str	r0, [r5, #8]
 800735a:	6095      	str	r5, [r2, #8]
 800735c:	60c5      	str	r5, [r0, #12]
 800735e:	108a      	asrs	r2, r1, #2
 8007360:	2001      	movs	r0, #1
 8007362:	4090      	lsls	r0, r2
 8007364:	1c02      	adds	r2, r0, #0
 8007366:	6858      	ldr	r0, [r3, #4]
 8007368:	4282      	cmp	r2, r0
 800736a:	d855      	bhi.n	8007418 <_malloc_r+0x260>
 800736c:	4210      	tst	r0, r2
 800736e:	d105      	bne.n	800737c <_malloc_r+0x1c4>
 8007370:	2503      	movs	r5, #3
 8007372:	43a9      	bics	r1, r5
 8007374:	0052      	lsls	r2, r2, #1
 8007376:	3104      	adds	r1, #4
 8007378:	4210      	tst	r0, r2
 800737a:	d0fb      	beq.n	8007374 <_malloc_r+0x1bc>
 800737c:	00c8      	lsls	r0, r1, #3
 800737e:	18c0      	adds	r0, r0, r3
 8007380:	4684      	mov	ip, r0
 8007382:	1c07      	adds	r7, r0, #0
 8007384:	9103      	str	r1, [sp, #12]
 8007386:	68fd      	ldr	r5, [r7, #12]
 8007388:	e000      	b.n	800738c <_malloc_r+0x1d4>
 800738a:	68ed      	ldr	r5, [r5, #12]
 800738c:	2603      	movs	r6, #3
 800738e:	42bd      	cmp	r5, r7
 8007390:	d023      	beq.n	80073da <_malloc_r+0x222>
 8007392:	6868      	ldr	r0, [r5, #4]
 8007394:	43b0      	bics	r0, r6
 8007396:	9001      	str	r0, [sp, #4]
 8007398:	1b00      	subs	r0, r0, r4
 800739a:	280f      	cmp	r0, #15
 800739c:	dd10      	ble.n	80073c0 <_malloc_r+0x208>
 800739e:	2101      	movs	r1, #1
 80073a0:	192a      	adds	r2, r5, r4
 80073a2:	430c      	orrs	r4, r1
 80073a4:	606c      	str	r4, [r5, #4]
 80073a6:	68af      	ldr	r7, [r5, #8]
 80073a8:	68ec      	ldr	r4, [r5, #12]
 80073aa:	3308      	adds	r3, #8
 80073ac:	60fc      	str	r4, [r7, #12]
 80073ae:	60a7      	str	r7, [r4, #8]
 80073b0:	60da      	str	r2, [r3, #12]
 80073b2:	609a      	str	r2, [r3, #8]
 80073b4:	60d3      	str	r3, [r2, #12]
 80073b6:	6093      	str	r3, [r2, #8]
 80073b8:	4301      	orrs	r1, r0
 80073ba:	6051      	str	r1, [r2, #4]
 80073bc:	5010      	str	r0, [r2, r0]
 80073be:	e0e3      	b.n	8007588 <_malloc_r+0x3d0>
 80073c0:	2800      	cmp	r0, #0
 80073c2:	dbe2      	blt.n	800738a <_malloc_r+0x1d2>
 80073c4:	9901      	ldr	r1, [sp, #4]
 80073c6:	2201      	movs	r2, #1
 80073c8:	186b      	adds	r3, r5, r1
 80073ca:	685e      	ldr	r6, [r3, #4]
 80073cc:	4332      	orrs	r2, r6
 80073ce:	605a      	str	r2, [r3, #4]
 80073d0:	68eb      	ldr	r3, [r5, #12]
 80073d2:	68aa      	ldr	r2, [r5, #8]
 80073d4:	60d3      	str	r3, [r2, #12]
 80073d6:	609a      	str	r2, [r3, #8]
 80073d8:	e0d6      	b.n	8007588 <_malloc_r+0x3d0>
 80073da:	9803      	ldr	r0, [sp, #12]
 80073dc:	3708      	adds	r7, #8
 80073de:	3001      	adds	r0, #1
 80073e0:	9003      	str	r0, [sp, #12]
 80073e2:	4230      	tst	r0, r6
 80073e4:	d1cf      	bne.n	8007386 <_malloc_r+0x1ce>
 80073e6:	078d      	lsls	r5, r1, #30
 80073e8:	d103      	bne.n	80073f2 <_malloc_r+0x23a>
 80073ea:	6859      	ldr	r1, [r3, #4]
 80073ec:	4391      	bics	r1, r2
 80073ee:	6059      	str	r1, [r3, #4]
 80073f0:	e006      	b.n	8007400 <_malloc_r+0x248>
 80073f2:	4660      	mov	r0, ip
 80073f4:	6806      	ldr	r6, [r0, #0]
 80073f6:	3808      	subs	r0, #8
 80073f8:	3901      	subs	r1, #1
 80073fa:	46b4      	mov	ip, r6
 80073fc:	4286      	cmp	r6, r0
 80073fe:	d0f2      	beq.n	80073e6 <_malloc_r+0x22e>
 8007400:	6858      	ldr	r0, [r3, #4]
 8007402:	0052      	lsls	r2, r2, #1
 8007404:	4282      	cmp	r2, r0
 8007406:	d807      	bhi.n	8007418 <_malloc_r+0x260>
 8007408:	2a00      	cmp	r2, #0
 800740a:	d005      	beq.n	8007418 <_malloc_r+0x260>
 800740c:	9903      	ldr	r1, [sp, #12]
 800740e:	4210      	tst	r0, r2
 8007410:	d1b4      	bne.n	800737c <_malloc_r+0x1c4>
 8007412:	3104      	adds	r1, #4
 8007414:	0052      	lsls	r2, r2, #1
 8007416:	e7fa      	b.n	800740e <_malloc_r+0x256>
 8007418:	689e      	ldr	r6, [r3, #8]
 800741a:	2303      	movs	r3, #3
 800741c:	6877      	ldr	r7, [r6, #4]
 800741e:	439f      	bics	r7, r3
 8007420:	9701      	str	r7, [sp, #4]
 8007422:	42a7      	cmp	r7, r4
 8007424:	d303      	bcc.n	800742e <_malloc_r+0x276>
 8007426:	1b3b      	subs	r3, r7, r4
 8007428:	2b0f      	cmp	r3, #15
 800742a:	dd00      	ble.n	800742e <_malloc_r+0x276>
 800742c:	e0a2      	b.n	8007574 <_malloc_r+0x3bc>
 800742e:	4b20      	ldr	r3, [pc, #128]	; (80074b0 <_malloc_r+0x2f8>)
 8007430:	9d01      	ldr	r5, [sp, #4]
 8007432:	681f      	ldr	r7, [r3, #0]
 8007434:	4b1f      	ldr	r3, [pc, #124]	; (80074b4 <_malloc_r+0x2fc>)
 8007436:	1975      	adds	r5, r6, r5
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	3710      	adds	r7, #16
 800743c:	9503      	str	r5, [sp, #12]
 800743e:	193f      	adds	r7, r7, r4
 8007440:	3301      	adds	r3, #1
 8007442:	d005      	beq.n	8007450 <_malloc_r+0x298>
 8007444:	4b1c      	ldr	r3, [pc, #112]	; (80074b8 <_malloc_r+0x300>)
 8007446:	4d1c      	ldr	r5, [pc, #112]	; (80074b8 <_malloc_r+0x300>)
 8007448:	3b01      	subs	r3, #1
 800744a:	19df      	adds	r7, r3, r7
 800744c:	426b      	negs	r3, r5
 800744e:	401f      	ands	r7, r3
 8007450:	9802      	ldr	r0, [sp, #8]
 8007452:	1c39      	adds	r1, r7, #0
 8007454:	f000 f8b6 	bl	80075c4 <_sbrk_r>
 8007458:	1c05      	adds	r5, r0, #0
 800745a:	1c68      	adds	r0, r5, #1
 800745c:	d07b      	beq.n	8007556 <_malloc_r+0x39e>
 800745e:	9903      	ldr	r1, [sp, #12]
 8007460:	4810      	ldr	r0, [pc, #64]	; (80074a4 <_malloc_r+0x2ec>)
 8007462:	428d      	cmp	r5, r1
 8007464:	d201      	bcs.n	800746a <_malloc_r+0x2b2>
 8007466:	4286      	cmp	r6, r0
 8007468:	d175      	bne.n	8007556 <_malloc_r+0x39e>
 800746a:	4b14      	ldr	r3, [pc, #80]	; (80074bc <_malloc_r+0x304>)
 800746c:	681a      	ldr	r2, [r3, #0]
 800746e:	18b9      	adds	r1, r7, r2
 8007470:	4a11      	ldr	r2, [pc, #68]	; (80074b8 <_malloc_r+0x300>)
 8007472:	6019      	str	r1, [r3, #0]
 8007474:	4694      	mov	ip, r2
 8007476:	2201      	movs	r2, #1
 8007478:	4252      	negs	r2, r2
 800747a:	4494      	add	ip, r2
 800747c:	9a03      	ldr	r2, [sp, #12]
 800747e:	4295      	cmp	r5, r2
 8007480:	d109      	bne.n	8007496 <_malloc_r+0x2de>
 8007482:	4662      	mov	r2, ip
 8007484:	4215      	tst	r5, r2
 8007486:	d106      	bne.n	8007496 <_malloc_r+0x2de>
 8007488:	9d01      	ldr	r5, [sp, #4]
 800748a:	6883      	ldr	r3, [r0, #8]
 800748c:	197f      	adds	r7, r7, r5
 800748e:	2201      	movs	r2, #1
 8007490:	4317      	orrs	r7, r2
 8007492:	605f      	str	r7, [r3, #4]
 8007494:	e053      	b.n	800753e <_malloc_r+0x386>
 8007496:	4807      	ldr	r0, [pc, #28]	; (80074b4 <_malloc_r+0x2fc>)
 8007498:	6802      	ldr	r2, [r0, #0]
 800749a:	3201      	adds	r2, #1
 800749c:	d110      	bne.n	80074c0 <_malloc_r+0x308>
 800749e:	6005      	str	r5, [r0, #0]
 80074a0:	e012      	b.n	80074c8 <_malloc_r+0x310>
 80074a2:	46c0      	nop			; (mov r8, r8)
 80074a4:	20000004 	.word	0x20000004
 80074a8:	00000554 	.word	0x00000554
 80074ac:	000001ff 	.word	0x000001ff
 80074b0:	2000066c 	.word	0x2000066c
 80074b4:	20000410 	.word	0x20000410
 80074b8:	00001000 	.word	0x00001000
 80074bc:	20000670 	.word	0x20000670
 80074c0:	9a03      	ldr	r2, [sp, #12]
 80074c2:	1aa8      	subs	r0, r5, r2
 80074c4:	1809      	adds	r1, r1, r0
 80074c6:	6019      	str	r1, [r3, #0]
 80074c8:	2107      	movs	r1, #7
 80074ca:	2300      	movs	r3, #0
 80074cc:	4029      	ands	r1, r5
 80074ce:	4299      	cmp	r1, r3
 80074d0:	d002      	beq.n	80074d8 <_malloc_r+0x320>
 80074d2:	2308      	movs	r3, #8
 80074d4:	1a5b      	subs	r3, r3, r1
 80074d6:	18ed      	adds	r5, r5, r3
 80074d8:	482f      	ldr	r0, [pc, #188]	; (8007598 <_malloc_r+0x3e0>)
 80074da:	19ef      	adds	r7, r5, r7
 80074dc:	4662      	mov	r2, ip
 80074de:	181b      	adds	r3, r3, r0
 80074e0:	403a      	ands	r2, r7
 80074e2:	1a9f      	subs	r7, r3, r2
 80074e4:	1c39      	adds	r1, r7, #0
 80074e6:	9802      	ldr	r0, [sp, #8]
 80074e8:	f000 f86c 	bl	80075c4 <_sbrk_r>
 80074ec:	1c41      	adds	r1, r0, #1
 80074ee:	d101      	bne.n	80074f4 <_malloc_r+0x33c>
 80074f0:	1c28      	adds	r0, r5, #0
 80074f2:	2700      	movs	r7, #0
 80074f4:	4b29      	ldr	r3, [pc, #164]	; (800759c <_malloc_r+0x3e4>)
 80074f6:	1b40      	subs	r0, r0, r5
 80074f8:	6819      	ldr	r1, [r3, #0]
 80074fa:	187a      	adds	r2, r7, r1
 80074fc:	601a      	str	r2, [r3, #0]
 80074fe:	19c7      	adds	r7, r0, r7
 8007500:	4a27      	ldr	r2, [pc, #156]	; (80075a0 <_malloc_r+0x3e8>)
 8007502:	2301      	movs	r3, #1
 8007504:	431f      	orrs	r7, r3
 8007506:	6095      	str	r5, [r2, #8]
 8007508:	606f      	str	r7, [r5, #4]
 800750a:	4296      	cmp	r6, r2
 800750c:	d017      	beq.n	800753e <_malloc_r+0x386>
 800750e:	9f01      	ldr	r7, [sp, #4]
 8007510:	2f0f      	cmp	r7, #15
 8007512:	d801      	bhi.n	8007518 <_malloc_r+0x360>
 8007514:	606b      	str	r3, [r5, #4]
 8007516:	e01e      	b.n	8007556 <_malloc_r+0x39e>
 8007518:	9f01      	ldr	r7, [sp, #4]
 800751a:	6870      	ldr	r0, [r6, #4]
 800751c:	2207      	movs	r2, #7
 800751e:	3f0c      	subs	r7, #12
 8007520:	4397      	bics	r7, r2
 8007522:	4003      	ands	r3, r0
 8007524:	433b      	orrs	r3, r7
 8007526:	6073      	str	r3, [r6, #4]
 8007528:	2205      	movs	r2, #5
 800752a:	19f3      	adds	r3, r6, r7
 800752c:	605a      	str	r2, [r3, #4]
 800752e:	609a      	str	r2, [r3, #8]
 8007530:	2f0f      	cmp	r7, #15
 8007532:	d904      	bls.n	800753e <_malloc_r+0x386>
 8007534:	1c31      	adds	r1, r6, #0
 8007536:	3108      	adds	r1, #8
 8007538:	9802      	ldr	r0, [sp, #8]
 800753a:	f002 fe0d 	bl	800a158 <_free_r>
 800753e:	4b17      	ldr	r3, [pc, #92]	; (800759c <_malloc_r+0x3e4>)
 8007540:	4a18      	ldr	r2, [pc, #96]	; (80075a4 <_malloc_r+0x3ec>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	6811      	ldr	r1, [r2, #0]
 8007546:	428b      	cmp	r3, r1
 8007548:	d900      	bls.n	800754c <_malloc_r+0x394>
 800754a:	6013      	str	r3, [r2, #0]
 800754c:	4a16      	ldr	r2, [pc, #88]	; (80075a8 <_malloc_r+0x3f0>)
 800754e:	6815      	ldr	r5, [r2, #0]
 8007550:	42ab      	cmp	r3, r5
 8007552:	d900      	bls.n	8007556 <_malloc_r+0x39e>
 8007554:	6013      	str	r3, [r2, #0]
 8007556:	4b12      	ldr	r3, [pc, #72]	; (80075a0 <_malloc_r+0x3e8>)
 8007558:	689b      	ldr	r3, [r3, #8]
 800755a:	685a      	ldr	r2, [r3, #4]
 800755c:	2303      	movs	r3, #3
 800755e:	439a      	bics	r2, r3
 8007560:	1b13      	subs	r3, r2, r4
 8007562:	42a2      	cmp	r2, r4
 8007564:	d301      	bcc.n	800756a <_malloc_r+0x3b2>
 8007566:	2b0f      	cmp	r3, #15
 8007568:	dc04      	bgt.n	8007574 <_malloc_r+0x3bc>
 800756a:	9802      	ldr	r0, [sp, #8]
 800756c:	f000 f828 	bl	80075c0 <__malloc_unlock>
 8007570:	2000      	movs	r0, #0
 8007572:	e00e      	b.n	8007592 <_malloc_r+0x3da>
 8007574:	490a      	ldr	r1, [pc, #40]	; (80075a0 <_malloc_r+0x3e8>)
 8007576:	2201      	movs	r2, #1
 8007578:	688d      	ldr	r5, [r1, #8]
 800757a:	1c10      	adds	r0, r2, #0
 800757c:	4320      	orrs	r0, r4
 800757e:	4313      	orrs	r3, r2
 8007580:	192c      	adds	r4, r5, r4
 8007582:	6068      	str	r0, [r5, #4]
 8007584:	608c      	str	r4, [r1, #8]
 8007586:	6063      	str	r3, [r4, #4]
 8007588:	9802      	ldr	r0, [sp, #8]
 800758a:	f000 f819 	bl	80075c0 <__malloc_unlock>
 800758e:	1c28      	adds	r0, r5, #0
 8007590:	3008      	adds	r0, #8
 8007592:	b005      	add	sp, #20
 8007594:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007596:	46c0      	nop			; (mov r8, r8)
 8007598:	00001000 	.word	0x00001000
 800759c:	20000670 	.word	0x20000670
 80075a0:	20000004 	.word	0x20000004
 80075a4:	20000668 	.word	0x20000668
 80075a8:	20000664 	.word	0x20000664

080075ac <memcpy>:
 80075ac:	b510      	push	{r4, lr}
 80075ae:	2300      	movs	r3, #0
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d003      	beq.n	80075bc <memcpy+0x10>
 80075b4:	5ccc      	ldrb	r4, [r1, r3]
 80075b6:	54c4      	strb	r4, [r0, r3]
 80075b8:	3301      	adds	r3, #1
 80075ba:	e7f9      	b.n	80075b0 <memcpy+0x4>
 80075bc:	bd10      	pop	{r4, pc}

080075be <__malloc_lock>:
 80075be:	4770      	bx	lr

080075c0 <__malloc_unlock>:
 80075c0:	4770      	bx	lr
	...

080075c4 <_sbrk_r>:
 80075c4:	b538      	push	{r3, r4, r5, lr}
 80075c6:	4c07      	ldr	r4, [pc, #28]	; (80075e4 <_sbrk_r+0x20>)
 80075c8:	2300      	movs	r3, #0
 80075ca:	1c05      	adds	r5, r0, #0
 80075cc:	1c08      	adds	r0, r1, #0
 80075ce:	6023      	str	r3, [r4, #0]
 80075d0:	f001 feea 	bl	80093a8 <_sbrk>
 80075d4:	1c43      	adds	r3, r0, #1
 80075d6:	d103      	bne.n	80075e0 <_sbrk_r+0x1c>
 80075d8:	6823      	ldr	r3, [r4, #0]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d000      	beq.n	80075e0 <_sbrk_r+0x1c>
 80075de:	602b      	str	r3, [r5, #0]
 80075e0:	bd38      	pop	{r3, r4, r5, pc}
 80075e2:	46c0      	nop			; (mov r8, r8)
 80075e4:	20000a44 	.word	0x20000a44

080075e8 <sprintf>:
 80075e8:	b40e      	push	{r1, r2, r3}
 80075ea:	b500      	push	{lr}
 80075ec:	b09c      	sub	sp, #112	; 0x70
 80075ee:	ab1d      	add	r3, sp, #116	; 0x74
 80075f0:	cb04      	ldmia	r3!, {r2}
 80075f2:	2282      	movs	r2, #130	; 0x82
 80075f4:	a902      	add	r1, sp, #8
 80075f6:	0092      	lsls	r2, r2, #2
 80075f8:	818a      	strh	r2, [r1, #12]
 80075fa:	4a0a      	ldr	r2, [pc, #40]	; (8007624 <sprintf+0x3c>)
 80075fc:	9002      	str	r0, [sp, #8]
 80075fe:	608a      	str	r2, [r1, #8]
 8007600:	614a      	str	r2, [r1, #20]
 8007602:	2201      	movs	r2, #1
 8007604:	4252      	negs	r2, r2
 8007606:	81ca      	strh	r2, [r1, #14]
 8007608:	4a07      	ldr	r2, [pc, #28]	; (8007628 <sprintf+0x40>)
 800760a:	6108      	str	r0, [r1, #16]
 800760c:	6810      	ldr	r0, [r2, #0]
 800760e:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8007610:	9301      	str	r3, [sp, #4]
 8007612:	f000 ff1d 	bl	8008450 <_svfprintf_r>
 8007616:	9a02      	ldr	r2, [sp, #8]
 8007618:	2300      	movs	r3, #0
 800761a:	7013      	strb	r3, [r2, #0]
 800761c:	b01c      	add	sp, #112	; 0x70
 800761e:	bc08      	pop	{r3}
 8007620:	b003      	add	sp, #12
 8007622:	4718      	bx	r3
 8007624:	7fffffff 	.word	0x7fffffff
 8007628:	20000508 	.word	0x20000508

0800762c <strcpy>:
 800762c:	1c03      	adds	r3, r0, #0
 800762e:	780a      	ldrb	r2, [r1, #0]
 8007630:	3101      	adds	r1, #1
 8007632:	701a      	strb	r2, [r3, #0]
 8007634:	3301      	adds	r3, #1
 8007636:	2a00      	cmp	r2, #0
 8007638:	d1f9      	bne.n	800762e <strcpy+0x2>
 800763a:	4770      	bx	lr

0800763c <strlen>:
 800763c:	2300      	movs	r3, #0
 800763e:	5cc2      	ldrb	r2, [r0, r3]
 8007640:	3301      	adds	r3, #1
 8007642:	2a00      	cmp	r2, #0
 8007644:	d1fb      	bne.n	800763e <strlen+0x2>
 8007646:	1e58      	subs	r0, r3, #1
 8007648:	4770      	bx	lr

0800764a <match>:
 800764a:	b530      	push	{r4, r5, lr}
 800764c:	6802      	ldr	r2, [r0, #0]
 800764e:	780c      	ldrb	r4, [r1, #0]
 8007650:	3201      	adds	r2, #1
 8007652:	2c00      	cmp	r4, #0
 8007654:	d00a      	beq.n	800766c <match+0x22>
 8007656:	7813      	ldrb	r3, [r2, #0]
 8007658:	1c1d      	adds	r5, r3, #0
 800765a:	3d41      	subs	r5, #65	; 0x41
 800765c:	2d19      	cmp	r5, #25
 800765e:	d800      	bhi.n	8007662 <match+0x18>
 8007660:	3320      	adds	r3, #32
 8007662:	3101      	adds	r1, #1
 8007664:	42a3      	cmp	r3, r4
 8007666:	d0f2      	beq.n	800764e <match+0x4>
 8007668:	2000      	movs	r0, #0
 800766a:	e001      	b.n	8007670 <match+0x26>
 800766c:	6002      	str	r2, [r0, #0]
 800766e:	2001      	movs	r0, #1
 8007670:	bd30      	pop	{r4, r5, pc}
	...

08007674 <sulp>:
 8007674:	b570      	push	{r4, r5, r6, lr}
 8007676:	1c16      	adds	r6, r2, #0
 8007678:	1c0d      	adds	r5, r1, #0
 800767a:	f003 fc25 	bl	800aec8 <__ulp>
 800767e:	2e00      	cmp	r6, #0
 8007680:	d00b      	beq.n	800769a <sulp+0x26>
 8007682:	006b      	lsls	r3, r5, #1
 8007684:	0d5b      	lsrs	r3, r3, #21
 8007686:	226b      	movs	r2, #107	; 0x6b
 8007688:	1ad3      	subs	r3, r2, r3
 800768a:	2b00      	cmp	r3, #0
 800768c:	dd05      	ble.n	800769a <sulp+0x26>
 800768e:	4d03      	ldr	r5, [pc, #12]	; (800769c <sulp+0x28>)
 8007690:	051c      	lsls	r4, r3, #20
 8007692:	1963      	adds	r3, r4, r5
 8007694:	2200      	movs	r2, #0
 8007696:	f7fa fbc5 	bl	8001e24 <__aeabi_dmul>
 800769a:	bd70      	pop	{r4, r5, r6, pc}
 800769c:	3ff00000 	.word	0x3ff00000

080076a0 <_strtod_r>:
 80076a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80076a2:	4fbe      	ldr	r7, [pc, #760]	; (800799c <_strtod_r+0x2fc>)
 80076a4:	4ebc      	ldr	r6, [pc, #752]	; (8007998 <_strtod_r+0x2f8>)
 80076a6:	b0a1      	sub	sp, #132	; 0x84
 80076a8:	2300      	movs	r3, #0
 80076aa:	9008      	str	r0, [sp, #32]
 80076ac:	910a      	str	r1, [sp, #40]	; 0x28
 80076ae:	9219      	str	r2, [sp, #100]	; 0x64
 80076b0:	931c      	str	r3, [sp, #112]	; 0x70
 80076b2:	911b      	str	r1, [sp, #108]	; 0x6c
 80076b4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80076b6:	7813      	ldrb	r3, [r2, #0]
 80076b8:	2b0d      	cmp	r3, #13
 80076ba:	d805      	bhi.n	80076c8 <_strtod_r+0x28>
 80076bc:	2b09      	cmp	r3, #9
 80076be:	d215      	bcs.n	80076ec <_strtod_r+0x4c>
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d100      	bne.n	80076c6 <_strtod_r+0x26>
 80076c4:	e1c1      	b.n	8007a4a <_strtod_r+0x3aa>
 80076c6:	e014      	b.n	80076f2 <_strtod_r+0x52>
 80076c8:	2b2b      	cmp	r3, #43	; 0x2b
 80076ca:	d007      	beq.n	80076dc <_strtod_r+0x3c>
 80076cc:	2b2d      	cmp	r3, #45	; 0x2d
 80076ce:	d002      	beq.n	80076d6 <_strtod_r+0x36>
 80076d0:	2b20      	cmp	r3, #32
 80076d2:	d10e      	bne.n	80076f2 <_strtod_r+0x52>
 80076d4:	e00a      	b.n	80076ec <_strtod_r+0x4c>
 80076d6:	2401      	movs	r4, #1
 80076d8:	9416      	str	r4, [sp, #88]	; 0x58
 80076da:	e001      	b.n	80076e0 <_strtod_r+0x40>
 80076dc:	2500      	movs	r5, #0
 80076de:	9516      	str	r5, [sp, #88]	; 0x58
 80076e0:	1c53      	adds	r3, r2, #1
 80076e2:	931b      	str	r3, [sp, #108]	; 0x6c
 80076e4:	7853      	ldrb	r3, [r2, #1]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d105      	bne.n	80076f6 <_strtod_r+0x56>
 80076ea:	e1ae      	b.n	8007a4a <_strtod_r+0x3aa>
 80076ec:	3201      	adds	r2, #1
 80076ee:	921b      	str	r2, [sp, #108]	; 0x6c
 80076f0:	e7e0      	b.n	80076b4 <_strtod_r+0x14>
 80076f2:	2400      	movs	r4, #0
 80076f4:	9416      	str	r4, [sp, #88]	; 0x58
 80076f6:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80076f8:	2400      	movs	r4, #0
 80076fa:	782b      	ldrb	r3, [r5, #0]
 80076fc:	940d      	str	r4, [sp, #52]	; 0x34
 80076fe:	2b30      	cmp	r3, #48	; 0x30
 8007700:	d15a      	bne.n	80077b8 <_strtod_r+0x118>
 8007702:	786b      	ldrb	r3, [r5, #1]
 8007704:	2b58      	cmp	r3, #88	; 0x58
 8007706:	d001      	beq.n	800770c <_strtod_r+0x6c>
 8007708:	2b78      	cmp	r3, #120	; 0x78
 800770a:	d149      	bne.n	80077a0 <_strtod_r+0x100>
 800770c:	9c16      	ldr	r4, [sp, #88]	; 0x58
 800770e:	ab1c      	add	r3, sp, #112	; 0x70
 8007710:	9300      	str	r3, [sp, #0]
 8007712:	9401      	str	r4, [sp, #4]
 8007714:	9808      	ldr	r0, [sp, #32]
 8007716:	a91b      	add	r1, sp, #108	; 0x6c
 8007718:	4aa1      	ldr	r2, [pc, #644]	; (80079a0 <_strtod_r+0x300>)
 800771a:	ab1d      	add	r3, sp, #116	; 0x74
 800771c:	f002 fe25 	bl	800a36a <__gethex>
 8007720:	2407      	movs	r4, #7
 8007722:	9007      	str	r0, [sp, #28]
 8007724:	4004      	ands	r4, r0
 8007726:	d101      	bne.n	800772c <_strtod_r+0x8c>
 8007728:	f000 fdb0 	bl	800828c <_strtod_r+0xbec>
 800772c:	2c06      	cmp	r4, #6
 800772e:	d102      	bne.n	8007736 <_strtod_r+0x96>
 8007730:	3501      	adds	r5, #1
 8007732:	951b      	str	r5, [sp, #108]	; 0x6c
 8007734:	e18b      	b.n	8007a4e <_strtod_r+0x3ae>
 8007736:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007738:	2a00      	cmp	r2, #0
 800773a:	d007      	beq.n	800774c <_strtod_r+0xac>
 800773c:	a81e      	add	r0, sp, #120	; 0x78
 800773e:	2135      	movs	r1, #53	; 0x35
 8007740:	f003 fcb2 	bl	800b0a8 <__copybits>
 8007744:	9808      	ldr	r0, [sp, #32]
 8007746:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007748:	f003 f91f 	bl	800a98a <_Bfree>
 800774c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800774e:	2c06      	cmp	r4, #6
 8007750:	d81c      	bhi.n	800778c <_strtod_r+0xec>
 8007752:	1c20      	adds	r0, r4, #0
 8007754:	f7f8 fce2 	bl	800011c <__gnu_thumb1_case_uqi>
 8007758:	14070a04 	.word	0x14070a04
 800775c:	0a17      	.short	0x0a17
 800775e:	04          	.byte	0x04
 800775f:	00          	.byte	0x00
 8007760:	2700      	movs	r7, #0
 8007762:	1c3e      	adds	r6, r7, #0
 8007764:	e012      	b.n	800778c <_strtod_r+0xec>
 8007766:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8007768:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800776a:	e00f      	b.n	800778c <_strtod_r+0xec>
 800776c:	488d      	ldr	r0, [pc, #564]	; (80079a4 <_strtod_r+0x304>)
 800776e:	4a8e      	ldr	r2, [pc, #568]	; (80079a8 <_strtod_r+0x308>)
 8007770:	181b      	adds	r3, r3, r0
 8007772:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8007774:	051b      	lsls	r3, r3, #20
 8007776:	400a      	ands	r2, r1
 8007778:	1c1f      	adds	r7, r3, #0
 800777a:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800777c:	4317      	orrs	r7, r2
 800777e:	e005      	b.n	800778c <_strtod_r+0xec>
 8007780:	4f8a      	ldr	r7, [pc, #552]	; (80079ac <_strtod_r+0x30c>)
 8007782:	2600      	movs	r6, #0
 8007784:	e002      	b.n	800778c <_strtod_r+0xec>
 8007786:	2301      	movs	r3, #1
 8007788:	4f89      	ldr	r7, [pc, #548]	; (80079b0 <_strtod_r+0x310>)
 800778a:	425e      	negs	r6, r3
 800778c:	9c07      	ldr	r4, [sp, #28]
 800778e:	0724      	lsls	r4, r4, #28
 8007790:	d401      	bmi.n	8007796 <_strtod_r+0xf6>
 8007792:	f000 fd7b 	bl	800828c <_strtod_r+0xbec>
 8007796:	2380      	movs	r3, #128	; 0x80
 8007798:	061b      	lsls	r3, r3, #24
 800779a:	431f      	orrs	r7, r3
 800779c:	f000 fd76 	bl	800828c <_strtod_r+0xbec>
 80077a0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80077a2:	1c5a      	adds	r2, r3, #1
 80077a4:	921b      	str	r2, [sp, #108]	; 0x6c
 80077a6:	785b      	ldrb	r3, [r3, #1]
 80077a8:	2b30      	cmp	r3, #48	; 0x30
 80077aa:	d0f9      	beq.n	80077a0 <_strtod_r+0x100>
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d101      	bne.n	80077b4 <_strtod_r+0x114>
 80077b0:	f000 fd6c 	bl	800828c <_strtod_r+0xbec>
 80077b4:	2501      	movs	r5, #1
 80077b6:	950d      	str	r5, [sp, #52]	; 0x34
 80077b8:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 80077ba:	2500      	movs	r5, #0
 80077bc:	9410      	str	r4, [sp, #64]	; 0x40
 80077be:	950b      	str	r5, [sp, #44]	; 0x2c
 80077c0:	950e      	str	r5, [sp, #56]	; 0x38
 80077c2:	9509      	str	r5, [sp, #36]	; 0x24
 80077c4:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 80077c6:	7825      	ldrb	r5, [r4, #0]
 80077c8:	1c2b      	adds	r3, r5, #0
 80077ca:	3b30      	subs	r3, #48	; 0x30
 80077cc:	b2da      	uxtb	r2, r3
 80077ce:	2a09      	cmp	r2, #9
 80077d0:	d812      	bhi.n	80077f8 <_strtod_r+0x158>
 80077d2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80077d4:	220a      	movs	r2, #10
 80077d6:	2d08      	cmp	r5, #8
 80077d8:	dc04      	bgt.n	80077e4 <_strtod_r+0x144>
 80077da:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80077dc:	436a      	muls	r2, r5
 80077de:	189b      	adds	r3, r3, r2
 80077e0:	930e      	str	r3, [sp, #56]	; 0x38
 80077e2:	e003      	b.n	80077ec <_strtod_r+0x14c>
 80077e4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80077e6:	436a      	muls	r2, r5
 80077e8:	189b      	adds	r3, r3, r2
 80077ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80077ec:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80077ee:	3401      	adds	r4, #1
 80077f0:	3501      	adds	r5, #1
 80077f2:	9509      	str	r5, [sp, #36]	; 0x24
 80077f4:	941b      	str	r4, [sp, #108]	; 0x6c
 80077f6:	e7e5      	b.n	80077c4 <_strtod_r+0x124>
 80077f8:	9808      	ldr	r0, [sp, #32]
 80077fa:	f003 f87f 	bl	800a8fc <_localeconv_r>
 80077fe:	6800      	ldr	r0, [r0, #0]
 8007800:	9007      	str	r0, [sp, #28]
 8007802:	9808      	ldr	r0, [sp, #32]
 8007804:	f003 f87a 	bl	800a8fc <_localeconv_r>
 8007808:	6800      	ldr	r0, [r0, #0]
 800780a:	f7ff ff17 	bl	800763c <strlen>
 800780e:	9907      	ldr	r1, [sp, #28]
 8007810:	1c02      	adds	r2, r0, #0
 8007812:	1c20      	adds	r0, r4, #0
 8007814:	f003 fcae 	bl	800b174 <strncmp>
 8007818:	1e04      	subs	r4, r0, #0
 800781a:	d006      	beq.n	800782a <_strtod_r+0x18a>
 800781c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800781e:	2000      	movs	r0, #0
 8007820:	1c2b      	adds	r3, r5, #0
 8007822:	9407      	str	r4, [sp, #28]
 8007824:	4684      	mov	ip, r0
 8007826:	900c      	str	r0, [sp, #48]	; 0x30
 8007828:	e063      	b.n	80078f2 <_strtod_r+0x252>
 800782a:	9808      	ldr	r0, [sp, #32]
 800782c:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800782e:	f003 f865 	bl	800a8fc <_localeconv_r>
 8007832:	6800      	ldr	r0, [r0, #0]
 8007834:	f7ff ff02 	bl	800763c <strlen>
 8007838:	182d      	adds	r5, r5, r0
 800783a:	951b      	str	r5, [sp, #108]	; 0x6c
 800783c:	782b      	ldrb	r3, [r5, #0]
 800783e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007840:	1e28      	subs	r0, r5, #0
 8007842:	d148      	bne.n	80078d6 <_strtod_r+0x236>
 8007844:	2b30      	cmp	r3, #48	; 0x30
 8007846:	d105      	bne.n	8007854 <_strtod_r+0x1b4>
 8007848:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800784a:	3001      	adds	r0, #1
 800784c:	1c5a      	adds	r2, r3, #1
 800784e:	921b      	str	r2, [sp, #108]	; 0x6c
 8007850:	785b      	ldrb	r3, [r3, #1]
 8007852:	e7f7      	b.n	8007844 <_strtod_r+0x1a4>
 8007854:	1c1a      	adds	r2, r3, #0
 8007856:	3a31      	subs	r2, #49	; 0x31
 8007858:	2a08      	cmp	r2, #8
 800785a:	d845      	bhi.n	80078e8 <_strtod_r+0x248>
 800785c:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 800785e:	4684      	mov	ip, r0
 8007860:	2000      	movs	r0, #0
 8007862:	9410      	str	r4, [sp, #64]	; 0x40
 8007864:	9007      	str	r0, [sp, #28]
 8007866:	3b30      	subs	r3, #48	; 0x30
 8007868:	1c42      	adds	r2, r0, #1
 800786a:	2b00      	cmp	r3, #0
 800786c:	d02d      	beq.n	80078ca <_strtod_r+0x22a>
 800786e:	9907      	ldr	r1, [sp, #28]
 8007870:	4494      	add	ip, r2
 8007872:	9d07      	ldr	r5, [sp, #28]
 8007874:	3101      	adds	r1, #1
 8007876:	1b4c      	subs	r4, r1, r5
 8007878:	4294      	cmp	r4, r2
 800787a:	da0e      	bge.n	800789a <_strtod_r+0x1fa>
 800787c:	1e4c      	subs	r4, r1, #1
 800787e:	2c08      	cmp	r4, #8
 8007880:	dc04      	bgt.n	800788c <_strtod_r+0x1ec>
 8007882:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8007884:	240a      	movs	r4, #10
 8007886:	4365      	muls	r5, r4
 8007888:	950e      	str	r5, [sp, #56]	; 0x38
 800788a:	e7f2      	b.n	8007872 <_strtod_r+0x1d2>
 800788c:	2910      	cmp	r1, #16
 800788e:	dcf0      	bgt.n	8007872 <_strtod_r+0x1d2>
 8007890:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8007892:	240a      	movs	r4, #10
 8007894:	4365      	muls	r5, r4
 8007896:	950b      	str	r5, [sp, #44]	; 0x2c
 8007898:	e7eb      	b.n	8007872 <_strtod_r+0x1d2>
 800789a:	43c2      	mvns	r2, r0
 800789c:	17d2      	asrs	r2, r2, #31
 800789e:	4010      	ands	r0, r2
 80078a0:	1828      	adds	r0, r5, r0
 80078a2:	1c44      	adds	r4, r0, #1
 80078a4:	9407      	str	r4, [sp, #28]
 80078a6:	2808      	cmp	r0, #8
 80078a8:	dc06      	bgt.n	80078b8 <_strtod_r+0x218>
 80078aa:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80078ac:	220a      	movs	r2, #10
 80078ae:	436a      	muls	r2, r5
 80078b0:	18d2      	adds	r2, r2, r3
 80078b2:	920e      	str	r2, [sp, #56]	; 0x38
 80078b4:	2200      	movs	r2, #0
 80078b6:	e008      	b.n	80078ca <_strtod_r+0x22a>
 80078b8:	9c07      	ldr	r4, [sp, #28]
 80078ba:	2200      	movs	r2, #0
 80078bc:	2c10      	cmp	r4, #16
 80078be:	dc04      	bgt.n	80078ca <_strtod_r+0x22a>
 80078c0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80078c2:	210a      	movs	r1, #10
 80078c4:	4369      	muls	r1, r5
 80078c6:	18c9      	adds	r1, r1, r3
 80078c8:	910b      	str	r1, [sp, #44]	; 0x2c
 80078ca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80078cc:	1c10      	adds	r0, r2, #0
 80078ce:	1c59      	adds	r1, r3, #1
 80078d0:	911b      	str	r1, [sp, #108]	; 0x6c
 80078d2:	785b      	ldrb	r3, [r3, #1]
 80078d4:	e003      	b.n	80078de <_strtod_r+0x23e>
 80078d6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80078d8:	1c20      	adds	r0, r4, #0
 80078da:	9507      	str	r5, [sp, #28]
 80078dc:	46a4      	mov	ip, r4
 80078de:	1c1a      	adds	r2, r3, #0
 80078e0:	3a30      	subs	r2, #48	; 0x30
 80078e2:	2a09      	cmp	r2, #9
 80078e4:	d9bf      	bls.n	8007866 <_strtod_r+0x1c6>
 80078e6:	e002      	b.n	80078ee <_strtod_r+0x24e>
 80078e8:	2400      	movs	r4, #0
 80078ea:	9407      	str	r4, [sp, #28]
 80078ec:	46a4      	mov	ip, r4
 80078ee:	2101      	movs	r1, #1
 80078f0:	910c      	str	r1, [sp, #48]	; 0x30
 80078f2:	2220      	movs	r2, #32
 80078f4:	1c19      	adds	r1, r3, #0
 80078f6:	4391      	bics	r1, r2
 80078f8:	2200      	movs	r2, #0
 80078fa:	2945      	cmp	r1, #69	; 0x45
 80078fc:	d15f      	bne.n	80079be <_strtod_r+0x31e>
 80078fe:	9b07      	ldr	r3, [sp, #28]
 8007900:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8007902:	4303      	orrs	r3, r0
 8007904:	4323      	orrs	r3, r4
 8007906:	4293      	cmp	r3, r2
 8007908:	d100      	bne.n	800790c <_strtod_r+0x26c>
 800790a:	e09e      	b.n	8007a4a <_strtod_r+0x3aa>
 800790c:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800790e:	1c2b      	adds	r3, r5, #0
 8007910:	3301      	adds	r3, #1
 8007912:	931b      	str	r3, [sp, #108]	; 0x6c
 8007914:	786b      	ldrb	r3, [r5, #1]
 8007916:	950a      	str	r5, [sp, #40]	; 0x28
 8007918:	2b2b      	cmp	r3, #43	; 0x2b
 800791a:	d003      	beq.n	8007924 <_strtod_r+0x284>
 800791c:	2b2d      	cmp	r3, #45	; 0x2d
 800791e:	d003      	beq.n	8007928 <_strtod_r+0x288>
 8007920:	9211      	str	r2, [sp, #68]	; 0x44
 8007922:	e008      	b.n	8007936 <_strtod_r+0x296>
 8007924:	9211      	str	r2, [sp, #68]	; 0x44
 8007926:	e001      	b.n	800792c <_strtod_r+0x28c>
 8007928:	2101      	movs	r1, #1
 800792a:	9111      	str	r1, [sp, #68]	; 0x44
 800792c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800792e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007930:	3302      	adds	r3, #2
 8007932:	931b      	str	r3, [sp, #108]	; 0x6c
 8007934:	78a3      	ldrb	r3, [r4, #2]
 8007936:	1c1a      	adds	r2, r3, #0
 8007938:	3a30      	subs	r2, #48	; 0x30
 800793a:	2a09      	cmp	r2, #9
 800793c:	d83c      	bhi.n	80079b8 <_strtod_r+0x318>
 800793e:	2b30      	cmp	r3, #48	; 0x30
 8007940:	d104      	bne.n	800794c <_strtod_r+0x2ac>
 8007942:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007944:	1c5a      	adds	r2, r3, #1
 8007946:	921b      	str	r2, [sp, #108]	; 0x6c
 8007948:	785b      	ldrb	r3, [r3, #1]
 800794a:	e7f8      	b.n	800793e <_strtod_r+0x29e>
 800794c:	1c1c      	adds	r4, r3, #0
 800794e:	3c31      	subs	r4, #49	; 0x31
 8007950:	2200      	movs	r2, #0
 8007952:	2c08      	cmp	r4, #8
 8007954:	d833      	bhi.n	80079be <_strtod_r+0x31e>
 8007956:	1c1d      	adds	r5, r3, #0
 8007958:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800795a:	3d30      	subs	r5, #48	; 0x30
 800795c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800795e:	1c5a      	adds	r2, r3, #1
 8007960:	921b      	str	r2, [sp, #108]	; 0x6c
 8007962:	785b      	ldrb	r3, [r3, #1]
 8007964:	1c1c      	adds	r4, r3, #0
 8007966:	3c30      	subs	r4, #48	; 0x30
 8007968:	2c09      	cmp	r4, #9
 800796a:	d804      	bhi.n	8007976 <_strtod_r+0x2d6>
 800796c:	220a      	movs	r2, #10
 800796e:	4355      	muls	r5, r2
 8007970:	18ed      	adds	r5, r5, r3
 8007972:	3d30      	subs	r5, #48	; 0x30
 8007974:	e7f2      	b.n	800795c <_strtod_r+0x2bc>
 8007976:	1a52      	subs	r2, r2, r1
 8007978:	920f      	str	r2, [sp, #60]	; 0x3c
 800797a:	4c0e      	ldr	r4, [pc, #56]	; (80079b4 <_strtod_r+0x314>)
 800797c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800797e:	1c22      	adds	r2, r4, #0
 8007980:	2908      	cmp	r1, #8
 8007982:	dc03      	bgt.n	800798c <_strtod_r+0x2ec>
 8007984:	1e2a      	subs	r2, r5, #0
 8007986:	42a2      	cmp	r2, r4
 8007988:	dd00      	ble.n	800798c <_strtod_r+0x2ec>
 800798a:	1c22      	adds	r2, r4, #0
 800798c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800798e:	2c00      	cmp	r4, #0
 8007990:	d015      	beq.n	80079be <_strtod_r+0x31e>
 8007992:	4252      	negs	r2, r2
 8007994:	e013      	b.n	80079be <_strtod_r+0x31e>
 8007996:	46c0      	nop			; (mov r8, r8)
	...
 80079a0:	0800c324 	.word	0x0800c324
 80079a4:	00000433 	.word	0x00000433
 80079a8:	ffefffff 	.word	0xffefffff
 80079ac:	7ff00000 	.word	0x7ff00000
 80079b0:	7fffffff 	.word	0x7fffffff
 80079b4:	00004e1f 	.word	0x00004e1f
 80079b8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80079ba:	2200      	movs	r2, #0
 80079bc:	951b      	str	r5, [sp, #108]	; 0x6c
 80079be:	9c07      	ldr	r4, [sp, #28]
 80079c0:	2c00      	cmp	r4, #0
 80079c2:	d148      	bne.n	8007a56 <_strtod_r+0x3b6>
 80079c4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80079c6:	4328      	orrs	r0, r5
 80079c8:	d001      	beq.n	80079ce <_strtod_r+0x32e>
 80079ca:	f000 fc5f 	bl	800828c <_strtod_r+0xbec>
 80079ce:	980c      	ldr	r0, [sp, #48]	; 0x30
 80079d0:	2800      	cmp	r0, #0
 80079d2:	d13a      	bne.n	8007a4a <_strtod_r+0x3aa>
 80079d4:	2b4e      	cmp	r3, #78	; 0x4e
 80079d6:	d01c      	beq.n	8007a12 <_strtod_r+0x372>
 80079d8:	dc02      	bgt.n	80079e0 <_strtod_r+0x340>
 80079da:	2b49      	cmp	r3, #73	; 0x49
 80079dc:	d005      	beq.n	80079ea <_strtod_r+0x34a>
 80079de:	e034      	b.n	8007a4a <_strtod_r+0x3aa>
 80079e0:	2b69      	cmp	r3, #105	; 0x69
 80079e2:	d002      	beq.n	80079ea <_strtod_r+0x34a>
 80079e4:	2b6e      	cmp	r3, #110	; 0x6e
 80079e6:	d014      	beq.n	8007a12 <_strtod_r+0x372>
 80079e8:	e02f      	b.n	8007a4a <_strtod_r+0x3aa>
 80079ea:	a81b      	add	r0, sp, #108	; 0x6c
 80079ec:	49a8      	ldr	r1, [pc, #672]	; (8007c90 <_strtod_r+0x5f0>)
 80079ee:	f7ff fe2c 	bl	800764a <match>
 80079f2:	2800      	cmp	r0, #0
 80079f4:	d029      	beq.n	8007a4a <_strtod_r+0x3aa>
 80079f6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80079f8:	a81b      	add	r0, sp, #108	; 0x6c
 80079fa:	3b01      	subs	r3, #1
 80079fc:	49a5      	ldr	r1, [pc, #660]	; (8007c94 <_strtod_r+0x5f4>)
 80079fe:	931b      	str	r3, [sp, #108]	; 0x6c
 8007a00:	f7ff fe23 	bl	800764a <match>
 8007a04:	2800      	cmp	r0, #0
 8007a06:	d102      	bne.n	8007a0e <_strtod_r+0x36e>
 8007a08:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007a0a:	3301      	adds	r3, #1
 8007a0c:	931b      	str	r3, [sp, #108]	; 0x6c
 8007a0e:	4fa2      	ldr	r7, [pc, #648]	; (8007c98 <_strtod_r+0x5f8>)
 8007a10:	e018      	b.n	8007a44 <_strtod_r+0x3a4>
 8007a12:	a81b      	add	r0, sp, #108	; 0x6c
 8007a14:	49a1      	ldr	r1, [pc, #644]	; (8007c9c <_strtod_r+0x5fc>)
 8007a16:	f7ff fe18 	bl	800764a <match>
 8007a1a:	2800      	cmp	r0, #0
 8007a1c:	d015      	beq.n	8007a4a <_strtod_r+0x3aa>
 8007a1e:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8007a20:	780b      	ldrb	r3, [r1, #0]
 8007a22:	2b28      	cmp	r3, #40	; 0x28
 8007a24:	d10d      	bne.n	8007a42 <_strtod_r+0x3a2>
 8007a26:	a81b      	add	r0, sp, #108	; 0x6c
 8007a28:	499d      	ldr	r1, [pc, #628]	; (8007ca0 <_strtod_r+0x600>)
 8007a2a:	aa1e      	add	r2, sp, #120	; 0x78
 8007a2c:	f002 fecd 	bl	800a7ca <__hexnan>
 8007a30:	2805      	cmp	r0, #5
 8007a32:	d106      	bne.n	8007a42 <_strtod_r+0x3a2>
 8007a34:	4a98      	ldr	r2, [pc, #608]	; (8007c98 <_strtod_r+0x5f8>)
 8007a36:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007a38:	1c17      	adds	r7, r2, #0
 8007a3a:	431f      	orrs	r7, r3
 8007a3c:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8007a3e:	f000 fc25 	bl	800828c <_strtod_r+0xbec>
 8007a42:	4f98      	ldr	r7, [pc, #608]	; (8007ca4 <_strtod_r+0x604>)
 8007a44:	2600      	movs	r6, #0
 8007a46:	f000 fc21 	bl	800828c <_strtod_r+0xbec>
 8007a4a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007a4c:	941b      	str	r4, [sp, #108]	; 0x6c
 8007a4e:	2500      	movs	r5, #0
 8007a50:	9516      	str	r5, [sp, #88]	; 0x58
 8007a52:	f000 fc1b 	bl	800828c <_strtod_r+0xbec>
 8007a56:	4664      	mov	r4, ip
 8007a58:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007a5a:	1b14      	subs	r4, r2, r4
 8007a5c:	940a      	str	r4, [sp, #40]	; 0x28
 8007a5e:	2d00      	cmp	r5, #0
 8007a60:	d101      	bne.n	8007a66 <_strtod_r+0x3c6>
 8007a62:	9c07      	ldr	r4, [sp, #28]
 8007a64:	9409      	str	r4, [sp, #36]	; 0x24
 8007a66:	9c07      	ldr	r4, [sp, #28]
 8007a68:	2c10      	cmp	r4, #16
 8007a6a:	dd00      	ble.n	8007a6e <_strtod_r+0x3ce>
 8007a6c:	2410      	movs	r4, #16
 8007a6e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007a70:	f7fb f804 	bl	8002a7c <__aeabi_ui2d>
 8007a74:	1c06      	adds	r6, r0, #0
 8007a76:	1c0f      	adds	r7, r1, #0
 8007a78:	2c09      	cmp	r4, #9
 8007a7a:	dd15      	ble.n	8007aa8 <_strtod_r+0x408>
 8007a7c:	1c23      	adds	r3, r4, #0
 8007a7e:	4a8a      	ldr	r2, [pc, #552]	; (8007ca8 <_strtod_r+0x608>)
 8007a80:	3b09      	subs	r3, #9
 8007a82:	00db      	lsls	r3, r3, #3
 8007a84:	18d3      	adds	r3, r2, r3
 8007a86:	681a      	ldr	r2, [r3, #0]
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	f7fa f9cb 	bl	8001e24 <__aeabi_dmul>
 8007a8e:	1c06      	adds	r6, r0, #0
 8007a90:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007a92:	1c0f      	adds	r7, r1, #0
 8007a94:	f7fa fff2 	bl	8002a7c <__aeabi_ui2d>
 8007a98:	1c02      	adds	r2, r0, #0
 8007a9a:	1c0b      	adds	r3, r1, #0
 8007a9c:	1c30      	adds	r0, r6, #0
 8007a9e:	1c39      	adds	r1, r7, #0
 8007aa0:	f7f9 fa3a 	bl	8000f18 <__aeabi_dadd>
 8007aa4:	1c06      	adds	r6, r0, #0
 8007aa6:	1c0f      	adds	r7, r1, #0
 8007aa8:	9d07      	ldr	r5, [sp, #28]
 8007aaa:	2d0f      	cmp	r5, #15
 8007aac:	dc3a      	bgt.n	8007b24 <_strtod_r+0x484>
 8007aae:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8007ab0:	2d00      	cmp	r5, #0
 8007ab2:	d101      	bne.n	8007ab8 <_strtod_r+0x418>
 8007ab4:	f000 fbea 	bl	800828c <_strtod_r+0xbec>
 8007ab8:	dd26      	ble.n	8007b08 <_strtod_r+0x468>
 8007aba:	2d16      	cmp	r5, #22
 8007abc:	dc07      	bgt.n	8007ace <_strtod_r+0x42e>
 8007abe:	4b7a      	ldr	r3, [pc, #488]	; (8007ca8 <_strtod_r+0x608>)
 8007ac0:	00ea      	lsls	r2, r5, #3
 8007ac2:	189a      	adds	r2, r3, r2
 8007ac4:	6810      	ldr	r0, [r2, #0]
 8007ac6:	6851      	ldr	r1, [r2, #4]
 8007ac8:	1c3b      	adds	r3, r7, #0
 8007aca:	1c32      	adds	r2, r6, #0
 8007acc:	e017      	b.n	8007afe <_strtod_r+0x45e>
 8007ace:	9d07      	ldr	r5, [sp, #28]
 8007ad0:	2325      	movs	r3, #37	; 0x25
 8007ad2:	1b5b      	subs	r3, r3, r5
 8007ad4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8007ad6:	429d      	cmp	r5, r3
 8007ad8:	dc24      	bgt.n	8007b24 <_strtod_r+0x484>
 8007ada:	9c07      	ldr	r4, [sp, #28]
 8007adc:	220f      	movs	r2, #15
 8007ade:	1b15      	subs	r5, r2, r4
 8007ae0:	4c71      	ldr	r4, [pc, #452]	; (8007ca8 <_strtod_r+0x608>)
 8007ae2:	00eb      	lsls	r3, r5, #3
 8007ae4:	18e3      	adds	r3, r4, r3
 8007ae6:	6818      	ldr	r0, [r3, #0]
 8007ae8:	6859      	ldr	r1, [r3, #4]
 8007aea:	1c32      	adds	r2, r6, #0
 8007aec:	1c3b      	adds	r3, r7, #0
 8007aee:	f7fa f999 	bl	8001e24 <__aeabi_dmul>
 8007af2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007af4:	1b57      	subs	r7, r2, r5
 8007af6:	00ff      	lsls	r7, r7, #3
 8007af8:	19e4      	adds	r4, r4, r7
 8007afa:	6822      	ldr	r2, [r4, #0]
 8007afc:	6863      	ldr	r3, [r4, #4]
 8007afe:	f7fa f991 	bl	8001e24 <__aeabi_dmul>
 8007b02:	1c06      	adds	r6, r0, #0
 8007b04:	1c0f      	adds	r7, r1, #0
 8007b06:	e3c1      	b.n	800828c <_strtod_r+0xbec>
 8007b08:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8007b0a:	3516      	adds	r5, #22
 8007b0c:	db0a      	blt.n	8007b24 <_strtod_r+0x484>
 8007b0e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007b10:	4b65      	ldr	r3, [pc, #404]	; (8007ca8 <_strtod_r+0x608>)
 8007b12:	00e2      	lsls	r2, r4, #3
 8007b14:	1a9a      	subs	r2, r3, r2
 8007b16:	1c30      	adds	r0, r6, #0
 8007b18:	1c39      	adds	r1, r7, #0
 8007b1a:	6853      	ldr	r3, [r2, #4]
 8007b1c:	6812      	ldr	r2, [r2, #0]
 8007b1e:	f7f9 fd17 	bl	8001550 <__aeabi_ddiv>
 8007b22:	e7ee      	b.n	8007b02 <_strtod_r+0x462>
 8007b24:	9d07      	ldr	r5, [sp, #28]
 8007b26:	1b2c      	subs	r4, r5, r4
 8007b28:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8007b2a:	192c      	adds	r4, r5, r4
 8007b2c:	2c00      	cmp	r4, #0
 8007b2e:	dd56      	ble.n	8007bde <_strtod_r+0x53e>
 8007b30:	230f      	movs	r3, #15
 8007b32:	4023      	ands	r3, r4
 8007b34:	d00a      	beq.n	8007b4c <_strtod_r+0x4ac>
 8007b36:	4a5c      	ldr	r2, [pc, #368]	; (8007ca8 <_strtod_r+0x608>)
 8007b38:	00db      	lsls	r3, r3, #3
 8007b3a:	18d3      	adds	r3, r2, r3
 8007b3c:	6818      	ldr	r0, [r3, #0]
 8007b3e:	6859      	ldr	r1, [r3, #4]
 8007b40:	1c32      	adds	r2, r6, #0
 8007b42:	1c3b      	adds	r3, r7, #0
 8007b44:	f7fa f96e 	bl	8001e24 <__aeabi_dmul>
 8007b48:	1c06      	adds	r6, r0, #0
 8007b4a:	1c0f      	adds	r7, r1, #0
 8007b4c:	230f      	movs	r3, #15
 8007b4e:	439c      	bics	r4, r3
 8007b50:	d100      	bne.n	8007b54 <_strtod_r+0x4b4>
 8007b52:	e0b7      	b.n	8007cc4 <_strtod_r+0x624>
 8007b54:	239a      	movs	r3, #154	; 0x9a
 8007b56:	005b      	lsls	r3, r3, #1
 8007b58:	429c      	cmp	r4, r3
 8007b5a:	dd0e      	ble.n	8007b7a <_strtod_r+0x4da>
 8007b5c:	2400      	movs	r4, #0
 8007b5e:	9407      	str	r4, [sp, #28]
 8007b60:	9409      	str	r4, [sp, #36]	; 0x24
 8007b62:	9410      	str	r4, [sp, #64]	; 0x40
 8007b64:	940e      	str	r4, [sp, #56]	; 0x38
 8007b66:	9d08      	ldr	r5, [sp, #32]
 8007b68:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8007b6a:	2322      	movs	r3, #34	; 0x22
 8007b6c:	2600      	movs	r6, #0
 8007b6e:	602b      	str	r3, [r5, #0]
 8007b70:	4f49      	ldr	r7, [pc, #292]	; (8007c98 <_strtod_r+0x5f8>)
 8007b72:	42b4      	cmp	r4, r6
 8007b74:	d000      	beq.n	8007b78 <_strtod_r+0x4d8>
 8007b76:	e375      	b.n	8008264 <_strtod_r+0xbc4>
 8007b78:	e388      	b.n	800828c <_strtod_r+0xbec>
 8007b7a:	1124      	asrs	r4, r4, #4
 8007b7c:	1c30      	adds	r0, r6, #0
 8007b7e:	1c39      	adds	r1, r7, #0
 8007b80:	2500      	movs	r5, #0
 8007b82:	2c01      	cmp	r4, #1
 8007b84:	dd0b      	ble.n	8007b9e <_strtod_r+0x4fe>
 8007b86:	07e2      	lsls	r2, r4, #31
 8007b88:	d506      	bpl.n	8007b98 <_strtod_r+0x4f8>
 8007b8a:	4b48      	ldr	r3, [pc, #288]	; (8007cac <_strtod_r+0x60c>)
 8007b8c:	00ea      	lsls	r2, r5, #3
 8007b8e:	18d3      	adds	r3, r2, r3
 8007b90:	681a      	ldr	r2, [r3, #0]
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	f7fa f946 	bl	8001e24 <__aeabi_dmul>
 8007b98:	3501      	adds	r5, #1
 8007b9a:	1064      	asrs	r4, r4, #1
 8007b9c:	e7f1      	b.n	8007b82 <_strtod_r+0x4e2>
 8007b9e:	4b44      	ldr	r3, [pc, #272]	; (8007cb0 <_strtod_r+0x610>)
 8007ba0:	00ed      	lsls	r5, r5, #3
 8007ba2:	18cf      	adds	r7, r1, r3
 8007ba4:	4b41      	ldr	r3, [pc, #260]	; (8007cac <_strtod_r+0x60c>)
 8007ba6:	1c06      	adds	r6, r0, #0
 8007ba8:	195d      	adds	r5, r3, r5
 8007baa:	1c32      	adds	r2, r6, #0
 8007bac:	1c3b      	adds	r3, r7, #0
 8007bae:	6828      	ldr	r0, [r5, #0]
 8007bb0:	6869      	ldr	r1, [r5, #4]
 8007bb2:	f7fa f937 	bl	8001e24 <__aeabi_dmul>
 8007bb6:	4b38      	ldr	r3, [pc, #224]	; (8007c98 <_strtod_r+0x5f8>)
 8007bb8:	1c0f      	adds	r7, r1, #0
 8007bba:	400b      	ands	r3, r1
 8007bbc:	493d      	ldr	r1, [pc, #244]	; (8007cb4 <_strtod_r+0x614>)
 8007bbe:	1c06      	adds	r6, r0, #0
 8007bc0:	428b      	cmp	r3, r1
 8007bc2:	d8cb      	bhi.n	8007b5c <_strtod_r+0x4bc>
 8007bc4:	493c      	ldr	r1, [pc, #240]	; (8007cb8 <_strtod_r+0x618>)
 8007bc6:	428b      	cmp	r3, r1
 8007bc8:	d903      	bls.n	8007bd2 <_strtod_r+0x532>
 8007bca:	2301      	movs	r3, #1
 8007bcc:	4f3b      	ldr	r7, [pc, #236]	; (8007cbc <_strtod_r+0x61c>)
 8007bce:	425e      	negs	r6, r3
 8007bd0:	e002      	b.n	8007bd8 <_strtod_r+0x538>
 8007bd2:	25d4      	movs	r5, #212	; 0xd4
 8007bd4:	04ad      	lsls	r5, r5, #18
 8007bd6:	197f      	adds	r7, r7, r5
 8007bd8:	2400      	movs	r4, #0
 8007bda:	940b      	str	r4, [sp, #44]	; 0x2c
 8007bdc:	e074      	b.n	8007cc8 <_strtod_r+0x628>
 8007bde:	2c00      	cmp	r4, #0
 8007be0:	d070      	beq.n	8007cc4 <_strtod_r+0x624>
 8007be2:	4264      	negs	r4, r4
 8007be4:	230f      	movs	r3, #15
 8007be6:	4023      	ands	r3, r4
 8007be8:	d00a      	beq.n	8007c00 <_strtod_r+0x560>
 8007bea:	4a2f      	ldr	r2, [pc, #188]	; (8007ca8 <_strtod_r+0x608>)
 8007bec:	00db      	lsls	r3, r3, #3
 8007bee:	18d3      	adds	r3, r2, r3
 8007bf0:	1c30      	adds	r0, r6, #0
 8007bf2:	1c39      	adds	r1, r7, #0
 8007bf4:	681a      	ldr	r2, [r3, #0]
 8007bf6:	685b      	ldr	r3, [r3, #4]
 8007bf8:	f7f9 fcaa 	bl	8001550 <__aeabi_ddiv>
 8007bfc:	1c06      	adds	r6, r0, #0
 8007bfe:	1c0f      	adds	r7, r1, #0
 8007c00:	1124      	asrs	r4, r4, #4
 8007c02:	d05f      	beq.n	8007cc4 <_strtod_r+0x624>
 8007c04:	2c1f      	cmp	r4, #31
 8007c06:	dd05      	ble.n	8007c14 <_strtod_r+0x574>
 8007c08:	2500      	movs	r5, #0
 8007c0a:	9507      	str	r5, [sp, #28]
 8007c0c:	9509      	str	r5, [sp, #36]	; 0x24
 8007c0e:	9510      	str	r5, [sp, #64]	; 0x40
 8007c10:	950e      	str	r5, [sp, #56]	; 0x38
 8007c12:	e121      	b.n	8007e58 <_strtod_r+0x7b8>
 8007c14:	06e3      	lsls	r3, r4, #27
 8007c16:	256a      	movs	r5, #106	; 0x6a
 8007c18:	17db      	asrs	r3, r3, #31
 8007c1a:	401d      	ands	r5, r3
 8007c1c:	950b      	str	r5, [sp, #44]	; 0x2c
 8007c1e:	4d28      	ldr	r5, [pc, #160]	; (8007cc0 <_strtod_r+0x620>)
 8007c20:	1c30      	adds	r0, r6, #0
 8007c22:	1c39      	adds	r1, r7, #0
 8007c24:	2c00      	cmp	r4, #0
 8007c26:	dd08      	ble.n	8007c3a <_strtod_r+0x59a>
 8007c28:	07e2      	lsls	r2, r4, #31
 8007c2a:	d503      	bpl.n	8007c34 <_strtod_r+0x594>
 8007c2c:	682a      	ldr	r2, [r5, #0]
 8007c2e:	686b      	ldr	r3, [r5, #4]
 8007c30:	f7fa f8f8 	bl	8001e24 <__aeabi_dmul>
 8007c34:	1064      	asrs	r4, r4, #1
 8007c36:	3508      	adds	r5, #8
 8007c38:	e7f4      	b.n	8007c24 <_strtod_r+0x584>
 8007c3a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8007c3c:	1c06      	adds	r6, r0, #0
 8007c3e:	1c0f      	adds	r7, r1, #0
 8007c40:	2c00      	cmp	r4, #0
 8007c42:	d017      	beq.n	8007c74 <_strtod_r+0x5d4>
 8007c44:	004b      	lsls	r3, r1, #1
 8007c46:	0d5b      	lsrs	r3, r3, #21
 8007c48:	216b      	movs	r1, #107	; 0x6b
 8007c4a:	1acb      	subs	r3, r1, r3
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	dd11      	ble.n	8007c74 <_strtod_r+0x5d4>
 8007c50:	2b1f      	cmp	r3, #31
 8007c52:	dd0b      	ble.n	8007c6c <_strtod_r+0x5cc>
 8007c54:	2600      	movs	r6, #0
 8007c56:	2b34      	cmp	r3, #52	; 0x34
 8007c58:	dd02      	ble.n	8007c60 <_strtod_r+0x5c0>
 8007c5a:	23dc      	movs	r3, #220	; 0xdc
 8007c5c:	049f      	lsls	r7, r3, #18
 8007c5e:	e009      	b.n	8007c74 <_strtod_r+0x5d4>
 8007c60:	2101      	movs	r1, #1
 8007c62:	3b20      	subs	r3, #32
 8007c64:	4249      	negs	r1, r1
 8007c66:	4099      	lsls	r1, r3
 8007c68:	400f      	ands	r7, r1
 8007c6a:	e003      	b.n	8007c74 <_strtod_r+0x5d4>
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	4252      	negs	r2, r2
 8007c70:	409a      	lsls	r2, r3
 8007c72:	4016      	ands	r6, r2
 8007c74:	1c30      	adds	r0, r6, #0
 8007c76:	1c39      	adds	r1, r7, #0
 8007c78:	4b04      	ldr	r3, [pc, #16]	; (8007c8c <_strtod_r+0x5ec>)
 8007c7a:	4a03      	ldr	r2, [pc, #12]	; (8007c88 <_strtod_r+0x5e8>)
 8007c7c:	f7f8 fb22 	bl	80002c4 <__aeabi_dcmpeq>
 8007c80:	2800      	cmp	r0, #0
 8007c82:	d1c1      	bne.n	8007c08 <_strtod_r+0x568>
 8007c84:	e020      	b.n	8007cc8 <_strtod_r+0x628>
 8007c86:	46c0      	nop			; (mov r8, r8)
	...
 8007c90:	0800c38d 	.word	0x0800c38d
 8007c94:	0800c4d0 	.word	0x0800c4d0
 8007c98:	7ff00000 	.word	0x7ff00000
 8007c9c:	0800c395 	.word	0x0800c395
 8007ca0:	0800c338 	.word	0x0800c338
 8007ca4:	fff80000 	.word	0xfff80000
 8007ca8:	0800c4e8 	.word	0x0800c4e8
 8007cac:	0800c5b0 	.word	0x0800c5b0
 8007cb0:	fcb00000 	.word	0xfcb00000
 8007cb4:	7ca00000 	.word	0x7ca00000
 8007cb8:	7c900000 	.word	0x7c900000
 8007cbc:	7fefffff 	.word	0x7fefffff
 8007cc0:	0800c350 	.word	0x0800c350
 8007cc4:	2500      	movs	r5, #0
 8007cc6:	950b      	str	r5, [sp, #44]	; 0x2c
 8007cc8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8007cca:	9808      	ldr	r0, [sp, #32]
 8007ccc:	9400      	str	r4, [sp, #0]
 8007cce:	9910      	ldr	r1, [sp, #64]	; 0x40
 8007cd0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007cd2:	9b07      	ldr	r3, [sp, #28]
 8007cd4:	f002 feb0 	bl	800aa38 <__s2b>
 8007cd8:	9010      	str	r0, [sp, #64]	; 0x40
 8007cda:	2800      	cmp	r0, #0
 8007cdc:	d100      	bne.n	8007ce0 <_strtod_r+0x640>
 8007cde:	e73d      	b.n	8007b5c <_strtod_r+0x4bc>
 8007ce0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8007ce2:	2400      	movs	r4, #0
 8007ce4:	426b      	negs	r3, r5
 8007ce6:	17ea      	asrs	r2, r5, #31
 8007ce8:	4013      	ands	r3, r2
 8007cea:	9317      	str	r3, [sp, #92]	; 0x5c
 8007cec:	9407      	str	r4, [sp, #28]
 8007cee:	9409      	str	r4, [sp, #36]	; 0x24
 8007cf0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8007cf2:	9808      	ldr	r0, [sp, #32]
 8007cf4:	686d      	ldr	r5, [r5, #4]
 8007cf6:	1c29      	adds	r1, r5, #0
 8007cf8:	9506      	str	r5, [sp, #24]
 8007cfa:	f002 fe0e 	bl	800a91a <_Balloc>
 8007cfe:	900e      	str	r0, [sp, #56]	; 0x38
 8007d00:	2800      	cmp	r0, #0
 8007d02:	d100      	bne.n	8007d06 <_strtod_r+0x666>
 8007d04:	e72f      	b.n	8007b66 <_strtod_r+0x4c6>
 8007d06:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007d08:	9910      	ldr	r1, [sp, #64]	; 0x40
 8007d0a:	6900      	ldr	r0, [r0, #16]
 8007d0c:	310c      	adds	r1, #12
 8007d0e:	1c02      	adds	r2, r0, #0
 8007d10:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007d12:	3202      	adds	r2, #2
 8007d14:	0092      	lsls	r2, r2, #2
 8007d16:	300c      	adds	r0, #12
 8007d18:	f7ff fc48 	bl	80075ac <memcpy>
 8007d1c:	ab1d      	add	r3, sp, #116	; 0x74
 8007d1e:	9300      	str	r3, [sp, #0]
 8007d20:	ab1e      	add	r3, sp, #120	; 0x78
 8007d22:	9301      	str	r3, [sp, #4]
 8007d24:	9808      	ldr	r0, [sp, #32]
 8007d26:	1c32      	adds	r2, r6, #0
 8007d28:	1c3b      	adds	r3, r7, #0
 8007d2a:	9612      	str	r6, [sp, #72]	; 0x48
 8007d2c:	9713      	str	r7, [sp, #76]	; 0x4c
 8007d2e:	f003 f93f 	bl	800afb0 <__d2b>
 8007d32:	901c      	str	r0, [sp, #112]	; 0x70
 8007d34:	2800      	cmp	r0, #0
 8007d36:	d100      	bne.n	8007d3a <_strtod_r+0x69a>
 8007d38:	e715      	b.n	8007b66 <_strtod_r+0x4c6>
 8007d3a:	9808      	ldr	r0, [sp, #32]
 8007d3c:	2101      	movs	r1, #1
 8007d3e:	f002 ff04 	bl	800ab4a <__i2b>
 8007d42:	9009      	str	r0, [sp, #36]	; 0x24
 8007d44:	2800      	cmp	r0, #0
 8007d46:	d100      	bne.n	8007d4a <_strtod_r+0x6aa>
 8007d48:	e70d      	b.n	8007b66 <_strtod_r+0x4c6>
 8007d4a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8007d4c:	2400      	movs	r4, #0
 8007d4e:	940d      	str	r4, [sp, #52]	; 0x34
 8007d50:	42ac      	cmp	r4, r5
 8007d52:	da00      	bge.n	8007d56 <_strtod_r+0x6b6>
 8007d54:	950d      	str	r5, [sp, #52]	; 0x34
 8007d56:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	da00      	bge.n	8007d5e <_strtod_r+0x6be>
 8007d5c:	e086      	b.n	8007e6c <_strtod_r+0x7cc>
 8007d5e:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8007d60:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007d62:	18ec      	adds	r4, r5, r3
 8007d64:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8007d66:	981e      	ldr	r0, [sp, #120]	; 0x78
 8007d68:	1b5b      	subs	r3, r3, r5
 8007d6a:	2536      	movs	r5, #54	; 0x36
 8007d6c:	181a      	adds	r2, r3, r0
 8007d6e:	1a2d      	subs	r5, r5, r0
 8007d70:	48c7      	ldr	r0, [pc, #796]	; (8008090 <_strtod_r+0x9f0>)
 8007d72:	2301      	movs	r3, #1
 8007d74:	4282      	cmp	r2, r0
 8007d76:	db00      	blt.n	8007d7a <_strtod_r+0x6da>
 8007d78:	e082      	b.n	8007e80 <_strtod_r+0x7e0>
 8007d7a:	1a80      	subs	r0, r0, r2
 8007d7c:	1a2d      	subs	r5, r5, r0
 8007d7e:	281f      	cmp	r0, #31
 8007d80:	dc78      	bgt.n	8007e74 <_strtod_r+0x7d4>
 8007d82:	4083      	lsls	r3, r0
 8007d84:	2000      	movs	r0, #0
 8007d86:	9318      	str	r3, [sp, #96]	; 0x60
 8007d88:	9011      	str	r0, [sp, #68]	; 0x44
 8007d8a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007d8c:	1963      	adds	r3, r4, r5
 8007d8e:	194d      	adds	r5, r1, r5
 8007d90:	930c      	str	r3, [sp, #48]	; 0x30
 8007d92:	182d      	adds	r5, r5, r0
 8007d94:	42a3      	cmp	r3, r4
 8007d96:	dd00      	ble.n	8007d9a <_strtod_r+0x6fa>
 8007d98:	1c23      	adds	r3, r4, #0
 8007d9a:	42ab      	cmp	r3, r5
 8007d9c:	dd00      	ble.n	8007da0 <_strtod_r+0x700>
 8007d9e:	1c2b      	adds	r3, r5, #0
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	dd04      	ble.n	8007dae <_strtod_r+0x70e>
 8007da4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007da6:	1aed      	subs	r5, r5, r3
 8007da8:	1ac9      	subs	r1, r1, r3
 8007daa:	910c      	str	r1, [sp, #48]	; 0x30
 8007dac:	1ae4      	subs	r4, r4, r3
 8007dae:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007db0:	2a00      	cmp	r2, #0
 8007db2:	d169      	bne.n	8007e88 <_strtod_r+0x7e8>
 8007db4:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007db6:	2800      	cmp	r0, #0
 8007db8:	dc7e      	bgt.n	8007eb8 <_strtod_r+0x818>
 8007dba:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007dbc:	2900      	cmp	r1, #0
 8007dbe:	d000      	beq.n	8007dc2 <_strtod_r+0x722>
 8007dc0:	e084      	b.n	8007ecc <_strtod_r+0x82c>
 8007dc2:	2d00      	cmp	r5, #0
 8007dc4:	dd00      	ble.n	8007dc8 <_strtod_r+0x728>
 8007dc6:	e08b      	b.n	8007ee0 <_strtod_r+0x840>
 8007dc8:	2c00      	cmp	r4, #0
 8007dca:	dd00      	ble.n	8007dce <_strtod_r+0x72e>
 8007dcc:	e092      	b.n	8007ef4 <_strtod_r+0x854>
 8007dce:	9808      	ldr	r0, [sp, #32]
 8007dd0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007dd2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007dd4:	f003 f811 	bl	800adfa <__mdiff>
 8007dd8:	9007      	str	r0, [sp, #28]
 8007dda:	2800      	cmp	r0, #0
 8007ddc:	d100      	bne.n	8007de0 <_strtod_r+0x740>
 8007dde:	e6c2      	b.n	8007b66 <_strtod_r+0x4c6>
 8007de0:	68c4      	ldr	r4, [r0, #12]
 8007de2:	2500      	movs	r5, #0
 8007de4:	60c5      	str	r5, [r0, #12]
 8007de6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007de8:	940f      	str	r4, [sp, #60]	; 0x3c
 8007dea:	f002 ffeb 	bl	800adc4 <__mcmp>
 8007dee:	42a8      	cmp	r0, r5
 8007df0:	db00      	blt.n	8007df4 <_strtod_r+0x754>
 8007df2:	e08e      	b.n	8007f12 <_strtod_r+0x872>
 8007df4:	42ac      	cmp	r4, r5
 8007df6:	d000      	beq.n	8007dfa <_strtod_r+0x75a>
 8007df8:	e21f      	b.n	800823a <_strtod_r+0xb9a>
 8007dfa:	42ae      	cmp	r6, r5
 8007dfc:	d000      	beq.n	8007e00 <_strtod_r+0x760>
 8007dfe:	e21c      	b.n	800823a <_strtod_r+0xb9a>
 8007e00:	033b      	lsls	r3, r7, #12
 8007e02:	42ab      	cmp	r3, r5
 8007e04:	d000      	beq.n	8007e08 <_strtod_r+0x768>
 8007e06:	e218      	b.n	800823a <_strtod_r+0xb9a>
 8007e08:	4aa2      	ldr	r2, [pc, #648]	; (8008094 <_strtod_r+0x9f4>)
 8007e0a:	23d6      	movs	r3, #214	; 0xd6
 8007e0c:	403a      	ands	r2, r7
 8007e0e:	04db      	lsls	r3, r3, #19
 8007e10:	429a      	cmp	r2, r3
 8007e12:	d800      	bhi.n	8007e16 <_strtod_r+0x776>
 8007e14:	e211      	b.n	800823a <_strtod_r+0xb9a>
 8007e16:	9807      	ldr	r0, [sp, #28]
 8007e18:	6940      	ldr	r0, [r0, #20]
 8007e1a:	42a8      	cmp	r0, r5
 8007e1c:	d074      	beq.n	8007f08 <_strtod_r+0x868>
 8007e1e:	9907      	ldr	r1, [sp, #28]
 8007e20:	9808      	ldr	r0, [sp, #32]
 8007e22:	2201      	movs	r2, #1
 8007e24:	f002 ff7c 	bl	800ad20 <__lshift>
 8007e28:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007e2a:	9007      	str	r0, [sp, #28]
 8007e2c:	f002 ffca 	bl	800adc4 <__mcmp>
 8007e30:	2800      	cmp	r0, #0
 8007e32:	dc00      	bgt.n	8007e36 <_strtod_r+0x796>
 8007e34:	e201      	b.n	800823a <_strtod_r+0xb9a>
 8007e36:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8007e38:	4b96      	ldr	r3, [pc, #600]	; (8008094 <_strtod_r+0x9f4>)
 8007e3a:	2c00      	cmp	r4, #0
 8007e3c:	d100      	bne.n	8007e40 <_strtod_r+0x7a0>
 8007e3e:	e099      	b.n	8007f74 <_strtod_r+0x8d4>
 8007e40:	1c1a      	adds	r2, r3, #0
 8007e42:	21d6      	movs	r1, #214	; 0xd6
 8007e44:	403a      	ands	r2, r7
 8007e46:	04c9      	lsls	r1, r1, #19
 8007e48:	428a      	cmp	r2, r1
 8007e4a:	d900      	bls.n	8007e4e <_strtod_r+0x7ae>
 8007e4c:	e092      	b.n	8007f74 <_strtod_r+0x8d4>
 8007e4e:	23dc      	movs	r3, #220	; 0xdc
 8007e50:	049b      	lsls	r3, r3, #18
 8007e52:	429a      	cmp	r2, r3
 8007e54:	d900      	bls.n	8007e58 <_strtod_r+0x7b8>
 8007e56:	e1f3      	b.n	8008240 <_strtod_r+0xba0>
 8007e58:	9d08      	ldr	r5, [sp, #32]
 8007e5a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8007e5c:	2322      	movs	r3, #34	; 0x22
 8007e5e:	4f83      	ldr	r7, [pc, #524]	; (800806c <_strtod_r+0x9cc>)
 8007e60:	4e81      	ldr	r6, [pc, #516]	; (8008068 <_strtod_r+0x9c8>)
 8007e62:	602b      	str	r3, [r5, #0]
 8007e64:	2c00      	cmp	r4, #0
 8007e66:	d000      	beq.n	8007e6a <_strtod_r+0x7ca>
 8007e68:	e1fc      	b.n	8008264 <_strtod_r+0xbc4>
 8007e6a:	e20f      	b.n	800828c <_strtod_r+0xbec>
 8007e6c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8007e6e:	1ae1      	subs	r1, r4, r3
 8007e70:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8007e72:	e777      	b.n	8007d64 <_strtod_r+0x6c4>
 8007e74:	4888      	ldr	r0, [pc, #544]	; (8008098 <_strtod_r+0x9f8>)
 8007e76:	1a82      	subs	r2, r0, r2
 8007e78:	1c18      	adds	r0, r3, #0
 8007e7a:	4090      	lsls	r0, r2
 8007e7c:	9011      	str	r0, [sp, #68]	; 0x44
 8007e7e:	e001      	b.n	8007e84 <_strtod_r+0x7e4>
 8007e80:	2200      	movs	r2, #0
 8007e82:	9211      	str	r2, [sp, #68]	; 0x44
 8007e84:	9318      	str	r3, [sp, #96]	; 0x60
 8007e86:	e780      	b.n	8007d8a <_strtod_r+0x6ea>
 8007e88:	9808      	ldr	r0, [sp, #32]
 8007e8a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007e8c:	f002 fef6 	bl	800ac7c <__pow5mult>
 8007e90:	9009      	str	r0, [sp, #36]	; 0x24
 8007e92:	2800      	cmp	r0, #0
 8007e94:	d100      	bne.n	8007e98 <_strtod_r+0x7f8>
 8007e96:	e666      	b.n	8007b66 <_strtod_r+0x4c6>
 8007e98:	9808      	ldr	r0, [sp, #32]
 8007e9a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007e9c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007e9e:	f002 fe5d 	bl	800ab5c <__multiply>
 8007ea2:	900f      	str	r0, [sp, #60]	; 0x3c
 8007ea4:	2800      	cmp	r0, #0
 8007ea6:	d100      	bne.n	8007eaa <_strtod_r+0x80a>
 8007ea8:	e65d      	b.n	8007b66 <_strtod_r+0x4c6>
 8007eaa:	9808      	ldr	r0, [sp, #32]
 8007eac:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007eae:	f002 fd6c 	bl	800a98a <_Bfree>
 8007eb2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007eb4:	931c      	str	r3, [sp, #112]	; 0x70
 8007eb6:	e77d      	b.n	8007db4 <_strtod_r+0x714>
 8007eb8:	9808      	ldr	r0, [sp, #32]
 8007eba:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007ebc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007ebe:	f002 ff2f 	bl	800ad20 <__lshift>
 8007ec2:	901c      	str	r0, [sp, #112]	; 0x70
 8007ec4:	2800      	cmp	r0, #0
 8007ec6:	d000      	beq.n	8007eca <_strtod_r+0x82a>
 8007ec8:	e777      	b.n	8007dba <_strtod_r+0x71a>
 8007eca:	e64c      	b.n	8007b66 <_strtod_r+0x4c6>
 8007ecc:	9808      	ldr	r0, [sp, #32]
 8007ece:	990e      	ldr	r1, [sp, #56]	; 0x38
 8007ed0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007ed2:	f002 fed3 	bl	800ac7c <__pow5mult>
 8007ed6:	900e      	str	r0, [sp, #56]	; 0x38
 8007ed8:	2800      	cmp	r0, #0
 8007eda:	d000      	beq.n	8007ede <_strtod_r+0x83e>
 8007edc:	e771      	b.n	8007dc2 <_strtod_r+0x722>
 8007ede:	e642      	b.n	8007b66 <_strtod_r+0x4c6>
 8007ee0:	9808      	ldr	r0, [sp, #32]
 8007ee2:	990e      	ldr	r1, [sp, #56]	; 0x38
 8007ee4:	1c2a      	adds	r2, r5, #0
 8007ee6:	f002 ff1b 	bl	800ad20 <__lshift>
 8007eea:	900e      	str	r0, [sp, #56]	; 0x38
 8007eec:	2800      	cmp	r0, #0
 8007eee:	d000      	beq.n	8007ef2 <_strtod_r+0x852>
 8007ef0:	e76a      	b.n	8007dc8 <_strtod_r+0x728>
 8007ef2:	e638      	b.n	8007b66 <_strtod_r+0x4c6>
 8007ef4:	9808      	ldr	r0, [sp, #32]
 8007ef6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007ef8:	1c22      	adds	r2, r4, #0
 8007efa:	f002 ff11 	bl	800ad20 <__lshift>
 8007efe:	9009      	str	r0, [sp, #36]	; 0x24
 8007f00:	2800      	cmp	r0, #0
 8007f02:	d000      	beq.n	8007f06 <_strtod_r+0x866>
 8007f04:	e763      	b.n	8007dce <_strtod_r+0x72e>
 8007f06:	e62e      	b.n	8007b66 <_strtod_r+0x4c6>
 8007f08:	9907      	ldr	r1, [sp, #28]
 8007f0a:	6909      	ldr	r1, [r1, #16]
 8007f0c:	2901      	cmp	r1, #1
 8007f0e:	dc86      	bgt.n	8007e1e <_strtod_r+0x77e>
 8007f10:	e193      	b.n	800823a <_strtod_r+0xb9a>
 8007f12:	2800      	cmp	r0, #0
 8007f14:	d165      	bne.n	8007fe2 <_strtod_r+0x942>
 8007f16:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8007f18:	033a      	lsls	r2, r7, #12
 8007f1a:	2c00      	cmp	r4, #0
 8007f1c:	d025      	beq.n	8007f6a <_strtod_r+0x8ca>
 8007f1e:	495f      	ldr	r1, [pc, #380]	; (800809c <_strtod_r+0x9fc>)
 8007f20:	1c3b      	adds	r3, r7, #0
 8007f22:	0b12      	lsrs	r2, r2, #12
 8007f24:	428a      	cmp	r2, r1
 8007f26:	d12e      	bne.n	8007f86 <_strtod_r+0x8e6>
 8007f28:	2101      	movs	r1, #1
 8007f2a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8007f2c:	4249      	negs	r1, r1
 8007f2e:	1c30      	adds	r0, r6, #0
 8007f30:	1c0a      	adds	r2, r1, #0
 8007f32:	2d00      	cmp	r5, #0
 8007f34:	d00a      	beq.n	8007f4c <_strtod_r+0x8ac>
 8007f36:	4c57      	ldr	r4, [pc, #348]	; (8008094 <_strtod_r+0x9f4>)
 8007f38:	25d4      	movs	r5, #212	; 0xd4
 8007f3a:	403c      	ands	r4, r7
 8007f3c:	04ed      	lsls	r5, r5, #19
 8007f3e:	42ac      	cmp	r4, r5
 8007f40:	d804      	bhi.n	8007f4c <_strtod_r+0x8ac>
 8007f42:	0d24      	lsrs	r4, r4, #20
 8007f44:	226b      	movs	r2, #107	; 0x6b
 8007f46:	1b12      	subs	r2, r2, r4
 8007f48:	4091      	lsls	r1, r2
 8007f4a:	1c0a      	adds	r2, r1, #0
 8007f4c:	4290      	cmp	r0, r2
 8007f4e:	d11a      	bne.n	8007f86 <_strtod_r+0x8e6>
 8007f50:	4a53      	ldr	r2, [pc, #332]	; (80080a0 <_strtod_r+0xa00>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d102      	bne.n	8007f5c <_strtod_r+0x8bc>
 8007f56:	3001      	adds	r0, #1
 8007f58:	d100      	bne.n	8007f5c <_strtod_r+0x8bc>
 8007f5a:	e604      	b.n	8007b66 <_strtod_r+0x4c6>
 8007f5c:	4a4d      	ldr	r2, [pc, #308]	; (8008094 <_strtod_r+0x9f4>)
 8007f5e:	2080      	movs	r0, #128	; 0x80
 8007f60:	4013      	ands	r3, r2
 8007f62:	0340      	lsls	r0, r0, #13
 8007f64:	181f      	adds	r7, r3, r0
 8007f66:	2600      	movs	r6, #0
 8007f68:	e167      	b.n	800823a <_strtod_r+0xb9a>
 8007f6a:	2a00      	cmp	r2, #0
 8007f6c:	d10b      	bne.n	8007f86 <_strtod_r+0x8e6>
 8007f6e:	2e00      	cmp	r6, #0
 8007f70:	d109      	bne.n	8007f86 <_strtod_r+0x8e6>
 8007f72:	e760      	b.n	8007e36 <_strtod_r+0x796>
 8007f74:	4d4b      	ldr	r5, [pc, #300]	; (80080a4 <_strtod_r+0xa04>)
 8007f76:	4a49      	ldr	r2, [pc, #292]	; (800809c <_strtod_r+0x9fc>)
 8007f78:	403b      	ands	r3, r7
 8007f7a:	195b      	adds	r3, r3, r5
 8007f7c:	1c17      	adds	r7, r2, #0
 8007f7e:	431f      	orrs	r7, r3
 8007f80:	2301      	movs	r3, #1
 8007f82:	425e      	negs	r6, r3
 8007f84:	e159      	b.n	800823a <_strtod_r+0xb9a>
 8007f86:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8007f88:	2c00      	cmp	r4, #0
 8007f8a:	d003      	beq.n	8007f94 <_strtod_r+0x8f4>
 8007f8c:	423c      	tst	r4, r7
 8007f8e:	d100      	bne.n	8007f92 <_strtod_r+0x8f2>
 8007f90:	e153      	b.n	800823a <_strtod_r+0xb9a>
 8007f92:	e003      	b.n	8007f9c <_strtod_r+0x8fc>
 8007f94:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8007f96:	4235      	tst	r5, r6
 8007f98:	d100      	bne.n	8007f9c <_strtod_r+0x8fc>
 8007f9a:	e14e      	b.n	800823a <_strtod_r+0xb9a>
 8007f9c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8007f9e:	1c30      	adds	r0, r6, #0
 8007fa0:	1c39      	adds	r1, r7, #0
 8007fa2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007fa4:	2c00      	cmp	r4, #0
 8007fa6:	d00a      	beq.n	8007fbe <_strtod_r+0x91e>
 8007fa8:	f7ff fb64 	bl	8007674 <sulp>
 8007fac:	1c02      	adds	r2, r0, #0
 8007fae:	1c0b      	adds	r3, r1, #0
 8007fb0:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007fb2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007fb4:	f7f8 ffb0 	bl	8000f18 <__aeabi_dadd>
 8007fb8:	1c06      	adds	r6, r0, #0
 8007fba:	1c0f      	adds	r7, r1, #0
 8007fbc:	e13d      	b.n	800823a <_strtod_r+0xb9a>
 8007fbe:	f7ff fb59 	bl	8007674 <sulp>
 8007fc2:	1c02      	adds	r2, r0, #0
 8007fc4:	1c0b      	adds	r3, r1, #0
 8007fc6:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007fc8:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007fca:	f7fa f9bb 	bl	8002344 <__aeabi_dsub>
 8007fce:	4b27      	ldr	r3, [pc, #156]	; (800806c <_strtod_r+0x9cc>)
 8007fd0:	4a25      	ldr	r2, [pc, #148]	; (8008068 <_strtod_r+0x9c8>)
 8007fd2:	1c06      	adds	r6, r0, #0
 8007fd4:	1c0f      	adds	r7, r1, #0
 8007fd6:	f7f8 f975 	bl	80002c4 <__aeabi_dcmpeq>
 8007fda:	2800      	cmp	r0, #0
 8007fdc:	d000      	beq.n	8007fe0 <_strtod_r+0x940>
 8007fde:	e73b      	b.n	8007e58 <_strtod_r+0x7b8>
 8007fe0:	e12b      	b.n	800823a <_strtod_r+0xb9a>
 8007fe2:	9807      	ldr	r0, [sp, #28]
 8007fe4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007fe6:	f003 f83b 	bl	800b060 <__ratio>
 8007fea:	4a21      	ldr	r2, [pc, #132]	; (8008070 <_strtod_r+0x9d0>)
 8007fec:	4b21      	ldr	r3, [pc, #132]	; (8008074 <_strtod_r+0x9d4>)
 8007fee:	1c04      	adds	r4, r0, #0
 8007ff0:	1c0d      	adds	r5, r1, #0
 8007ff2:	f7f8 f977 	bl	80002e4 <__aeabi_dcmple>
 8007ff6:	2800      	cmp	r0, #0
 8007ff8:	d05a      	beq.n	80080b0 <_strtod_r+0xa10>
 8007ffa:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8007ffc:	2800      	cmp	r0, #0
 8007ffe:	d006      	beq.n	800800e <_strtod_r+0x96e>
 8008000:	4a29      	ldr	r2, [pc, #164]	; (80080a8 <_strtod_r+0xa08>)
 8008002:	2100      	movs	r1, #0
 8008004:	4c1c      	ldr	r4, [pc, #112]	; (8008078 <_strtod_r+0x9d8>)
 8008006:	4d1d      	ldr	r5, [pc, #116]	; (800807c <_strtod_r+0x9dc>)
 8008008:	910c      	str	r1, [sp, #48]	; 0x30
 800800a:	920d      	str	r2, [sp, #52]	; 0x34
 800800c:	e061      	b.n	80080d2 <_strtod_r+0xa32>
 800800e:	2e00      	cmp	r6, #0
 8008010:	d102      	bne.n	8008018 <_strtod_r+0x978>
 8008012:	033b      	lsls	r3, r7, #12
 8008014:	d105      	bne.n	8008022 <_strtod_r+0x982>
 8008016:	e00b      	b.n	8008030 <_strtod_r+0x990>
 8008018:	2e01      	cmp	r6, #1
 800801a:	d102      	bne.n	8008022 <_strtod_r+0x982>
 800801c:	2f00      	cmp	r7, #0
 800801e:	d100      	bne.n	8008022 <_strtod_r+0x982>
 8008020:	e71a      	b.n	8007e58 <_strtod_r+0x7b8>
 8008022:	4821      	ldr	r0, [pc, #132]	; (80080a8 <_strtod_r+0xa08>)
 8008024:	2300      	movs	r3, #0
 8008026:	4c16      	ldr	r4, [pc, #88]	; (8008080 <_strtod_r+0x9e0>)
 8008028:	4d16      	ldr	r5, [pc, #88]	; (8008084 <_strtod_r+0x9e4>)
 800802a:	930c      	str	r3, [sp, #48]	; 0x30
 800802c:	900d      	str	r0, [sp, #52]	; 0x34
 800802e:	e050      	b.n	80080d2 <_strtod_r+0xa32>
 8008030:	1c20      	adds	r0, r4, #0
 8008032:	1c29      	adds	r1, r5, #0
 8008034:	4a10      	ldr	r2, [pc, #64]	; (8008078 <_strtod_r+0x9d8>)
 8008036:	4b11      	ldr	r3, [pc, #68]	; (800807c <_strtod_r+0x9dc>)
 8008038:	f7f8 f94a 	bl	80002d0 <__aeabi_dcmplt>
 800803c:	2800      	cmp	r0, #0
 800803e:	d108      	bne.n	8008052 <_strtod_r+0x9b2>
 8008040:	1c20      	adds	r0, r4, #0
 8008042:	1c29      	adds	r1, r5, #0
 8008044:	4a10      	ldr	r2, [pc, #64]	; (8008088 <_strtod_r+0x9e8>)
 8008046:	4b11      	ldr	r3, [pc, #68]	; (800808c <_strtod_r+0x9ec>)
 8008048:	f7f9 feec 	bl	8001e24 <__aeabi_dmul>
 800804c:	900c      	str	r0, [sp, #48]	; 0x30
 800804e:	910d      	str	r1, [sp, #52]	; 0x34
 8008050:	e003      	b.n	800805a <_strtod_r+0x9ba>
 8008052:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8008054:	4d15      	ldr	r5, [pc, #84]	; (80080ac <_strtod_r+0xa0c>)
 8008056:	940c      	str	r4, [sp, #48]	; 0x30
 8008058:	950d      	str	r5, [sp, #52]	; 0x34
 800805a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800805c:	2180      	movs	r1, #128	; 0x80
 800805e:	0609      	lsls	r1, r1, #24
 8008060:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8008062:	1845      	adds	r5, r0, r1
 8008064:	e035      	b.n	80080d2 <_strtod_r+0xa32>
 8008066:	46c0      	nop			; (mov r8, r8)
	...
 8008074:	40000000 	.word	0x40000000
 8008078:	00000000 	.word	0x00000000
 800807c:	3ff00000 	.word	0x3ff00000
 8008080:	00000000 	.word	0x00000000
 8008084:	bff00000 	.word	0xbff00000
 8008088:	00000000 	.word	0x00000000
 800808c:	3fe00000 	.word	0x3fe00000
 8008090:	fffffc03 	.word	0xfffffc03
 8008094:	7ff00000 	.word	0x7ff00000
 8008098:	fffffbe3 	.word	0xfffffbe3
 800809c:	000fffff 	.word	0x000fffff
 80080a0:	7fefffff 	.word	0x7fefffff
 80080a4:	fff00000 	.word	0xfff00000
 80080a8:	3ff00000 	.word	0x3ff00000
 80080ac:	3fe00000 	.word	0x3fe00000
 80080b0:	1c20      	adds	r0, r4, #0
 80080b2:	4b80      	ldr	r3, [pc, #512]	; (80082b4 <_strtod_r+0xc14>)
 80080b4:	4a7e      	ldr	r2, [pc, #504]	; (80082b0 <_strtod_r+0xc10>)
 80080b6:	1c29      	adds	r1, r5, #0
 80080b8:	f7f9 feb4 	bl	8001e24 <__aeabi_dmul>
 80080bc:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80080be:	900c      	str	r0, [sp, #48]	; 0x30
 80080c0:	910d      	str	r1, [sp, #52]	; 0x34
 80080c2:	1c0b      	adds	r3, r1, #0
 80080c4:	2c00      	cmp	r4, #0
 80080c6:	d102      	bne.n	80080ce <_strtod_r+0xa2e>
 80080c8:	2580      	movs	r5, #128	; 0x80
 80080ca:	062d      	lsls	r5, r5, #24
 80080cc:	194b      	adds	r3, r1, r5
 80080ce:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80080d0:	1c1d      	adds	r5, r3, #0
 80080d2:	4881      	ldr	r0, [pc, #516]	; (80082d8 <_strtod_r+0xc38>)
 80080d4:	4b81      	ldr	r3, [pc, #516]	; (80082dc <_strtod_r+0xc3c>)
 80080d6:	4038      	ands	r0, r7
 80080d8:	9011      	str	r0, [sp, #68]	; 0x44
 80080da:	4298      	cmp	r0, r3
 80080dc:	d12b      	bne.n	8008136 <_strtod_r+0xa96>
 80080de:	9912      	ldr	r1, [sp, #72]	; 0x48
 80080e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80080e2:	9114      	str	r1, [sp, #80]	; 0x50
 80080e4:	9215      	str	r2, [sp, #84]	; 0x54
 80080e6:	4a7e      	ldr	r2, [pc, #504]	; (80082e0 <_strtod_r+0xc40>)
 80080e8:	1c30      	adds	r0, r6, #0
 80080ea:	18bf      	adds	r7, r7, r2
 80080ec:	1c39      	adds	r1, r7, #0
 80080ee:	f002 feeb 	bl	800aec8 <__ulp>
 80080f2:	1c02      	adds	r2, r0, #0
 80080f4:	1c0b      	adds	r3, r1, #0
 80080f6:	1c20      	adds	r0, r4, #0
 80080f8:	1c29      	adds	r1, r5, #0
 80080fa:	f7f9 fe93 	bl	8001e24 <__aeabi_dmul>
 80080fe:	1c02      	adds	r2, r0, #0
 8008100:	1c0b      	adds	r3, r1, #0
 8008102:	1c30      	adds	r0, r6, #0
 8008104:	1c39      	adds	r1, r7, #0
 8008106:	f7f8 ff07 	bl	8000f18 <__aeabi_dadd>
 800810a:	4a73      	ldr	r2, [pc, #460]	; (80082d8 <_strtod_r+0xc38>)
 800810c:	4b75      	ldr	r3, [pc, #468]	; (80082e4 <_strtod_r+0xc44>)
 800810e:	1c06      	adds	r6, r0, #0
 8008110:	400a      	ands	r2, r1
 8008112:	429a      	cmp	r2, r3
 8008114:	d90b      	bls.n	800812e <_strtod_r+0xa8e>
 8008116:	4b74      	ldr	r3, [pc, #464]	; (80082e8 <_strtod_r+0xc48>)
 8008118:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800811a:	429c      	cmp	r4, r3
 800811c:	d103      	bne.n	8008126 <_strtod_r+0xa86>
 800811e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8008120:	3501      	adds	r5, #1
 8008122:	d100      	bne.n	8008126 <_strtod_r+0xa86>
 8008124:	e51f      	b.n	8007b66 <_strtod_r+0x4c6>
 8008126:	2301      	movs	r3, #1
 8008128:	4f6f      	ldr	r7, [pc, #444]	; (80082e8 <_strtod_r+0xc48>)
 800812a:	425e      	negs	r6, r3
 800812c:	e074      	b.n	8008218 <_strtod_r+0xb78>
 800812e:	20d4      	movs	r0, #212	; 0xd4
 8008130:	0480      	lsls	r0, r0, #18
 8008132:	180f      	adds	r7, r1, r0
 8008134:	e03a      	b.n	80081ac <_strtod_r+0xb0c>
 8008136:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008138:	2900      	cmp	r1, #0
 800813a:	d025      	beq.n	8008188 <_strtod_r+0xae8>
 800813c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800813e:	23d4      	movs	r3, #212	; 0xd4
 8008140:	04db      	lsls	r3, r3, #19
 8008142:	429a      	cmp	r2, r3
 8008144:	d820      	bhi.n	8008188 <_strtod_r+0xae8>
 8008146:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008148:	990d      	ldr	r1, [sp, #52]	; 0x34
 800814a:	4a5b      	ldr	r2, [pc, #364]	; (80082b8 <_strtod_r+0xc18>)
 800814c:	4b5b      	ldr	r3, [pc, #364]	; (80082bc <_strtod_r+0xc1c>)
 800814e:	f7f8 f8c9 	bl	80002e4 <__aeabi_dcmple>
 8008152:	2800      	cmp	r0, #0
 8008154:	d013      	beq.n	800817e <_strtod_r+0xade>
 8008156:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008158:	990d      	ldr	r1, [sp, #52]	; 0x34
 800815a:	f7f8 f93d 	bl	80003d8 <__aeabi_d2uiz>
 800815e:	2800      	cmp	r0, #0
 8008160:	d100      	bne.n	8008164 <_strtod_r+0xac4>
 8008162:	2001      	movs	r0, #1
 8008164:	f7fa fc8a 	bl	8002a7c <__aeabi_ui2d>
 8008168:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800816a:	900c      	str	r0, [sp, #48]	; 0x30
 800816c:	910d      	str	r1, [sp, #52]	; 0x34
 800816e:	1c0b      	adds	r3, r1, #0
 8008170:	2c00      	cmp	r4, #0
 8008172:	d102      	bne.n	800817a <_strtod_r+0xada>
 8008174:	2580      	movs	r5, #128	; 0x80
 8008176:	062d      	lsls	r5, r5, #24
 8008178:	194b      	adds	r3, r1, r5
 800817a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800817c:	1c1d      	adds	r5, r3, #0
 800817e:	20d6      	movs	r0, #214	; 0xd6
 8008180:	04c0      	lsls	r0, r0, #19
 8008182:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008184:	182b      	adds	r3, r5, r0
 8008186:	1a5d      	subs	r5, r3, r1
 8008188:	9812      	ldr	r0, [sp, #72]	; 0x48
 800818a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800818c:	f002 fe9c 	bl	800aec8 <__ulp>
 8008190:	1c02      	adds	r2, r0, #0
 8008192:	1c0b      	adds	r3, r1, #0
 8008194:	1c20      	adds	r0, r4, #0
 8008196:	1c29      	adds	r1, r5, #0
 8008198:	f7f9 fe44 	bl	8001e24 <__aeabi_dmul>
 800819c:	1c02      	adds	r2, r0, #0
 800819e:	1c0b      	adds	r3, r1, #0
 80081a0:	9812      	ldr	r0, [sp, #72]	; 0x48
 80081a2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80081a4:	f7f8 feb8 	bl	8000f18 <__aeabi_dadd>
 80081a8:	1c06      	adds	r6, r0, #0
 80081aa:	1c0f      	adds	r7, r1, #0
 80081ac:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80081ae:	9712      	str	r7, [sp, #72]	; 0x48
 80081b0:	2c00      	cmp	r4, #0
 80081b2:	d131      	bne.n	8008218 <_strtod_r+0xb78>
 80081b4:	4b48      	ldr	r3, [pc, #288]	; (80082d8 <_strtod_r+0xc38>)
 80081b6:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80081b8:	403b      	ands	r3, r7
 80081ba:	429d      	cmp	r5, r3
 80081bc:	d12c      	bne.n	8008218 <_strtod_r+0xb78>
 80081be:	990d      	ldr	r1, [sp, #52]	; 0x34
 80081c0:	980c      	ldr	r0, [sp, #48]	; 0x30
 80081c2:	f7fa fbe9 	bl	8002998 <__aeabi_d2iz>
 80081c6:	f7fa fc1b 	bl	8002a00 <__aeabi_i2d>
 80081ca:	1c02      	adds	r2, r0, #0
 80081cc:	1c0b      	adds	r3, r1, #0
 80081ce:	980c      	ldr	r0, [sp, #48]	; 0x30
 80081d0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80081d2:	f7fa f8b7 	bl	8002344 <__aeabi_dsub>
 80081d6:	1c04      	adds	r4, r0, #0
 80081d8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80081da:	1c0d      	adds	r5, r1, #0
 80081dc:	2800      	cmp	r0, #0
 80081de:	d104      	bne.n	80081ea <_strtod_r+0xb4a>
 80081e0:	2e00      	cmp	r6, #0
 80081e2:	d102      	bne.n	80081ea <_strtod_r+0xb4a>
 80081e4:	9912      	ldr	r1, [sp, #72]	; 0x48
 80081e6:	030b      	lsls	r3, r1, #12
 80081e8:	d00e      	beq.n	8008208 <_strtod_r+0xb68>
 80081ea:	1c20      	adds	r0, r4, #0
 80081ec:	1c29      	adds	r1, r5, #0
 80081ee:	4a34      	ldr	r2, [pc, #208]	; (80082c0 <_strtod_r+0xc20>)
 80081f0:	4b34      	ldr	r3, [pc, #208]	; (80082c4 <_strtod_r+0xc24>)
 80081f2:	f7f8 f86d 	bl	80002d0 <__aeabi_dcmplt>
 80081f6:	2800      	cmp	r0, #0
 80081f8:	d134      	bne.n	8008264 <_strtod_r+0xbc4>
 80081fa:	1c20      	adds	r0, r4, #0
 80081fc:	1c29      	adds	r1, r5, #0
 80081fe:	4a32      	ldr	r2, [pc, #200]	; (80082c8 <_strtod_r+0xc28>)
 8008200:	4b32      	ldr	r3, [pc, #200]	; (80082cc <_strtod_r+0xc2c>)
 8008202:	f7f8 f879 	bl	80002f8 <__aeabi_dcmpgt>
 8008206:	e005      	b.n	8008214 <_strtod_r+0xb74>
 8008208:	1c20      	adds	r0, r4, #0
 800820a:	1c29      	adds	r1, r5, #0
 800820c:	4a30      	ldr	r2, [pc, #192]	; (80082d0 <_strtod_r+0xc30>)
 800820e:	4b31      	ldr	r3, [pc, #196]	; (80082d4 <_strtod_r+0xc34>)
 8008210:	f7f8 f85e 	bl	80002d0 <__aeabi_dcmplt>
 8008214:	2800      	cmp	r0, #0
 8008216:	d125      	bne.n	8008264 <_strtod_r+0xbc4>
 8008218:	9808      	ldr	r0, [sp, #32]
 800821a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800821c:	f002 fbb5 	bl	800a98a <_Bfree>
 8008220:	9808      	ldr	r0, [sp, #32]
 8008222:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008224:	f002 fbb1 	bl	800a98a <_Bfree>
 8008228:	9808      	ldr	r0, [sp, #32]
 800822a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800822c:	f002 fbad 	bl	800a98a <_Bfree>
 8008230:	9808      	ldr	r0, [sp, #32]
 8008232:	9907      	ldr	r1, [sp, #28]
 8008234:	f002 fba9 	bl	800a98a <_Bfree>
 8008238:	e55a      	b.n	8007cf0 <_strtod_r+0x650>
 800823a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800823c:	2c00      	cmp	r4, #0
 800823e:	d011      	beq.n	8008264 <_strtod_r+0xbc4>
 8008240:	4d2a      	ldr	r5, [pc, #168]	; (80082ec <_strtod_r+0xc4c>)
 8008242:	2000      	movs	r0, #0
 8008244:	9014      	str	r0, [sp, #80]	; 0x50
 8008246:	9515      	str	r5, [sp, #84]	; 0x54
 8008248:	1c30      	adds	r0, r6, #0
 800824a:	1c39      	adds	r1, r7, #0
 800824c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800824e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008250:	f7f9 fde8 	bl	8001e24 <__aeabi_dmul>
 8008254:	1c06      	adds	r6, r0, #0
 8008256:	1c0f      	adds	r7, r1, #0
 8008258:	d104      	bne.n	8008264 <_strtod_r+0xbc4>
 800825a:	2800      	cmp	r0, #0
 800825c:	d102      	bne.n	8008264 <_strtod_r+0xbc4>
 800825e:	9c08      	ldr	r4, [sp, #32]
 8008260:	2322      	movs	r3, #34	; 0x22
 8008262:	6023      	str	r3, [r4, #0]
 8008264:	9808      	ldr	r0, [sp, #32]
 8008266:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008268:	f002 fb8f 	bl	800a98a <_Bfree>
 800826c:	9808      	ldr	r0, [sp, #32]
 800826e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008270:	f002 fb8b 	bl	800a98a <_Bfree>
 8008274:	9808      	ldr	r0, [sp, #32]
 8008276:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008278:	f002 fb87 	bl	800a98a <_Bfree>
 800827c:	9808      	ldr	r0, [sp, #32]
 800827e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8008280:	f002 fb83 	bl	800a98a <_Bfree>
 8008284:	9808      	ldr	r0, [sp, #32]
 8008286:	9907      	ldr	r1, [sp, #28]
 8008288:	f002 fb7f 	bl	800a98a <_Bfree>
 800828c:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800828e:	2d00      	cmp	r5, #0
 8008290:	d001      	beq.n	8008296 <_strtod_r+0xbf6>
 8008292:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8008294:	6028      	str	r0, [r5, #0]
 8008296:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8008298:	1c32      	adds	r2, r6, #0
 800829a:	1c3b      	adds	r3, r7, #0
 800829c:	2c00      	cmp	r4, #0
 800829e:	d002      	beq.n	80082a6 <_strtod_r+0xc06>
 80082a0:	2580      	movs	r5, #128	; 0x80
 80082a2:	062d      	lsls	r5, r5, #24
 80082a4:	197b      	adds	r3, r7, r5
 80082a6:	1c10      	adds	r0, r2, #0
 80082a8:	1c19      	adds	r1, r3, #0
 80082aa:	b021      	add	sp, #132	; 0x84
 80082ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082ae:	46c0      	nop			; (mov r8, r8)
 80082b0:	00000000 	.word	0x00000000
 80082b4:	3fe00000 	.word	0x3fe00000
 80082b8:	ffc00000 	.word	0xffc00000
 80082bc:	41dfffff 	.word	0x41dfffff
 80082c0:	94a03595 	.word	0x94a03595
 80082c4:	3fdfffff 	.word	0x3fdfffff
 80082c8:	35afe535 	.word	0x35afe535
 80082cc:	3fe00000 	.word	0x3fe00000
 80082d0:	94a03595 	.word	0x94a03595
 80082d4:	3fcfffff 	.word	0x3fcfffff
 80082d8:	7ff00000 	.word	0x7ff00000
 80082dc:	7fe00000 	.word	0x7fe00000
 80082e0:	fcb00000 	.word	0xfcb00000
 80082e4:	7c9fffff 	.word	0x7c9fffff
 80082e8:	7fefffff 	.word	0x7fefffff
 80082ec:	39500000 	.word	0x39500000

080082f0 <strtof>:
 80082f0:	1c0a      	adds	r2, r1, #0
 80082f2:	490a      	ldr	r1, [pc, #40]	; (800831c <strtof+0x2c>)
 80082f4:	b538      	push	{r3, r4, r5, lr}
 80082f6:	1c03      	adds	r3, r0, #0
 80082f8:	6808      	ldr	r0, [r1, #0]
 80082fa:	1c19      	adds	r1, r3, #0
 80082fc:	f7ff f9d0 	bl	80076a0 <_strtod_r>
 8008300:	1c04      	adds	r4, r0, #0
 8008302:	1c0d      	adds	r5, r1, #0
 8008304:	f002 ff08 	bl	800b118 <__fpclassifyd>
 8008308:	2800      	cmp	r0, #0
 800830a:	d102      	bne.n	8008312 <strtof+0x22>
 800830c:	f002 ff2e 	bl	800b16c <nanf>
 8008310:	e003      	b.n	800831a <strtof+0x2a>
 8008312:	1c20      	adds	r0, r4, #0
 8008314:	1c29      	adds	r1, r5, #0
 8008316:	f7fa fc37 	bl	8002b88 <__aeabi_d2f>
 800831a:	bd38      	pop	{r3, r4, r5, pc}
 800831c:	20000508 	.word	0x20000508

08008320 <_strtol_r>:
 8008320:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008322:	1c1d      	adds	r5, r3, #0
 8008324:	4b42      	ldr	r3, [pc, #264]	; (8008430 <_strtol_r+0x110>)
 8008326:	b087      	sub	sp, #28
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	9005      	str	r0, [sp, #20]
 800832c:	9302      	str	r3, [sp, #8]
 800832e:	9103      	str	r1, [sp, #12]
 8008330:	9201      	str	r2, [sp, #4]
 8008332:	1c0b      	adds	r3, r1, #0
 8008334:	781c      	ldrb	r4, [r3, #0]
 8008336:	9f02      	ldr	r7, [sp, #8]
 8008338:	1c5e      	adds	r6, r3, #1
 800833a:	193a      	adds	r2, r7, r4
 800833c:	7851      	ldrb	r1, [r2, #1]
 800833e:	2208      	movs	r2, #8
 8008340:	400a      	ands	r2, r1
 8008342:	d001      	beq.n	8008348 <_strtol_r+0x28>
 8008344:	1c33      	adds	r3, r6, #0
 8008346:	e7f5      	b.n	8008334 <_strtol_r+0x14>
 8008348:	2c2d      	cmp	r4, #45	; 0x2d
 800834a:	d104      	bne.n	8008356 <_strtol_r+0x36>
 800834c:	2701      	movs	r7, #1
 800834e:	1c9e      	adds	r6, r3, #2
 8008350:	785c      	ldrb	r4, [r3, #1]
 8008352:	9700      	str	r7, [sp, #0]
 8008354:	e004      	b.n	8008360 <_strtol_r+0x40>
 8008356:	9200      	str	r2, [sp, #0]
 8008358:	2c2b      	cmp	r4, #43	; 0x2b
 800835a:	d101      	bne.n	8008360 <_strtol_r+0x40>
 800835c:	785c      	ldrb	r4, [r3, #1]
 800835e:	1c9e      	adds	r6, r3, #2
 8008360:	2310      	movs	r3, #16
 8008362:	1c2a      	adds	r2, r5, #0
 8008364:	439a      	bics	r2, r3
 8008366:	d111      	bne.n	800838c <_strtol_r+0x6c>
 8008368:	2c30      	cmp	r4, #48	; 0x30
 800836a:	d108      	bne.n	800837e <_strtol_r+0x5e>
 800836c:	7832      	ldrb	r2, [r6, #0]
 800836e:	2120      	movs	r1, #32
 8008370:	438a      	bics	r2, r1
 8008372:	2a58      	cmp	r2, #88	; 0x58
 8008374:	d107      	bne.n	8008386 <_strtol_r+0x66>
 8008376:	7874      	ldrb	r4, [r6, #1]
 8008378:	1c1d      	adds	r5, r3, #0
 800837a:	3602      	adds	r6, #2
 800837c:	e006      	b.n	800838c <_strtol_r+0x6c>
 800837e:	2d00      	cmp	r5, #0
 8008380:	d104      	bne.n	800838c <_strtol_r+0x6c>
 8008382:	250a      	movs	r5, #10
 8008384:	e002      	b.n	800838c <_strtol_r+0x6c>
 8008386:	2d00      	cmp	r5, #0
 8008388:	d100      	bne.n	800838c <_strtol_r+0x6c>
 800838a:	2508      	movs	r5, #8
 800838c:	9f00      	ldr	r7, [sp, #0]
 800838e:	1c29      	adds	r1, r5, #0
 8008390:	427b      	negs	r3, r7
 8008392:	417b      	adcs	r3, r7
 8008394:	2780      	movs	r7, #128	; 0x80
 8008396:	063f      	lsls	r7, r7, #24
 8008398:	1aff      	subs	r7, r7, r3
 800839a:	1c38      	adds	r0, r7, #0
 800839c:	f7f7 ff16 	bl	80001cc <__aeabi_uidivmod>
 80083a0:	1c38      	adds	r0, r7, #0
 80083a2:	9104      	str	r1, [sp, #16]
 80083a4:	1c29      	adds	r1, r5, #0
 80083a6:	f7f7 fecd 	bl	8000144 <__aeabi_uidiv>
 80083aa:	2300      	movs	r3, #0
 80083ac:	1c02      	adds	r2, r0, #0
 80083ae:	1c18      	adds	r0, r3, #0
 80083b0:	9f02      	ldr	r7, [sp, #8]
 80083b2:	1939      	adds	r1, r7, r4
 80083b4:	7849      	ldrb	r1, [r1, #1]
 80083b6:	074f      	lsls	r7, r1, #29
 80083b8:	d501      	bpl.n	80083be <_strtol_r+0x9e>
 80083ba:	3c30      	subs	r4, #48	; 0x30
 80083bc:	e007      	b.n	80083ce <_strtol_r+0xae>
 80083be:	2703      	movs	r7, #3
 80083c0:	400f      	ands	r7, r1
 80083c2:	d017      	beq.n	80083f4 <_strtol_r+0xd4>
 80083c4:	2157      	movs	r1, #87	; 0x57
 80083c6:	2f01      	cmp	r7, #1
 80083c8:	d100      	bne.n	80083cc <_strtol_r+0xac>
 80083ca:	2137      	movs	r1, #55	; 0x37
 80083cc:	1a64      	subs	r4, r4, r1
 80083ce:	42ac      	cmp	r4, r5
 80083d0:	da10      	bge.n	80083f4 <_strtol_r+0xd4>
 80083d2:	1c59      	adds	r1, r3, #1
 80083d4:	d00b      	beq.n	80083ee <_strtol_r+0xce>
 80083d6:	4290      	cmp	r0, r2
 80083d8:	d807      	bhi.n	80083ea <_strtol_r+0xca>
 80083da:	d102      	bne.n	80083e2 <_strtol_r+0xc2>
 80083dc:	9f04      	ldr	r7, [sp, #16]
 80083de:	42bc      	cmp	r4, r7
 80083e0:	dc03      	bgt.n	80083ea <_strtol_r+0xca>
 80083e2:	4368      	muls	r0, r5
 80083e4:	2301      	movs	r3, #1
 80083e6:	1820      	adds	r0, r4, r0
 80083e8:	e001      	b.n	80083ee <_strtol_r+0xce>
 80083ea:	2301      	movs	r3, #1
 80083ec:	425b      	negs	r3, r3
 80083ee:	7834      	ldrb	r4, [r6, #0]
 80083f0:	3601      	adds	r6, #1
 80083f2:	e7dd      	b.n	80083b0 <_strtol_r+0x90>
 80083f4:	9f00      	ldr	r7, [sp, #0]
 80083f6:	1c59      	adds	r1, r3, #1
 80083f8:	d10b      	bne.n	8008412 <_strtol_r+0xf2>
 80083fa:	2080      	movs	r0, #128	; 0x80
 80083fc:	427b      	negs	r3, r7
 80083fe:	417b      	adcs	r3, r7
 8008400:	0600      	lsls	r0, r0, #24
 8008402:	9f05      	ldr	r7, [sp, #20]
 8008404:	1ac0      	subs	r0, r0, r3
 8008406:	2322      	movs	r3, #34	; 0x22
 8008408:	603b      	str	r3, [r7, #0]
 800840a:	9f01      	ldr	r7, [sp, #4]
 800840c:	2f00      	cmp	r7, #0
 800840e:	d109      	bne.n	8008424 <_strtol_r+0x104>
 8008410:	e00b      	b.n	800842a <_strtol_r+0x10a>
 8008412:	2f00      	cmp	r7, #0
 8008414:	d000      	beq.n	8008418 <_strtol_r+0xf8>
 8008416:	4240      	negs	r0, r0
 8008418:	9f01      	ldr	r7, [sp, #4]
 800841a:	2f00      	cmp	r7, #0
 800841c:	d005      	beq.n	800842a <_strtol_r+0x10a>
 800841e:	9a03      	ldr	r2, [sp, #12]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d000      	beq.n	8008426 <_strtol_r+0x106>
 8008424:	1e72      	subs	r2, r6, #1
 8008426:	9f01      	ldr	r7, [sp, #4]
 8008428:	603a      	str	r2, [r7, #0]
 800842a:	b007      	add	sp, #28
 800842c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800842e:	46c0      	nop			; (mov r8, r8)
 8008430:	20000414 	.word	0x20000414

08008434 <strtol>:
 8008434:	b538      	push	{r3, r4, r5, lr}
 8008436:	1c13      	adds	r3, r2, #0
 8008438:	4a04      	ldr	r2, [pc, #16]	; (800844c <strtol+0x18>)
 800843a:	1c05      	adds	r5, r0, #0
 800843c:	1c0c      	adds	r4, r1, #0
 800843e:	6810      	ldr	r0, [r2, #0]
 8008440:	1c29      	adds	r1, r5, #0
 8008442:	1c22      	adds	r2, r4, #0
 8008444:	f7ff ff6c 	bl	8008320 <_strtol_r>
 8008448:	bd38      	pop	{r3, r4, r5, pc}
 800844a:	46c0      	nop			; (mov r8, r8)
 800844c:	20000508 	.word	0x20000508

08008450 <_svfprintf_r>:
 8008450:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008452:	b0c5      	sub	sp, #276	; 0x114
 8008454:	1c1f      	adds	r7, r3, #0
 8008456:	910c      	str	r1, [sp, #48]	; 0x30
 8008458:	9212      	str	r2, [sp, #72]	; 0x48
 800845a:	900d      	str	r0, [sp, #52]	; 0x34
 800845c:	f002 fa4e 	bl	800a8fc <_localeconv_r>
 8008460:	6800      	ldr	r0, [r0, #0]
 8008462:	901a      	str	r0, [sp, #104]	; 0x68
 8008464:	f7ff f8ea 	bl	800763c <strlen>
 8008468:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800846a:	9019      	str	r0, [sp, #100]	; 0x64
 800846c:	89ab      	ldrh	r3, [r5, #12]
 800846e:	0618      	lsls	r0, r3, #24
 8008470:	d512      	bpl.n	8008498 <_svfprintf_r+0x48>
 8008472:	6929      	ldr	r1, [r5, #16]
 8008474:	2900      	cmp	r1, #0
 8008476:	d10f      	bne.n	8008498 <_svfprintf_r+0x48>
 8008478:	980d      	ldr	r0, [sp, #52]	; 0x34
 800847a:	2140      	movs	r1, #64	; 0x40
 800847c:	f7fe fe9c 	bl	80071b8 <_malloc_r>
 8008480:	6028      	str	r0, [r5, #0]
 8008482:	6128      	str	r0, [r5, #16]
 8008484:	2800      	cmp	r0, #0
 8008486:	d104      	bne.n	8008492 <_svfprintf_r+0x42>
 8008488:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800848a:	230c      	movs	r3, #12
 800848c:	602b      	str	r3, [r5, #0]
 800848e:	f000 ff7c 	bl	800938a <_svfprintf_r+0xf3a>
 8008492:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008494:	2340      	movs	r3, #64	; 0x40
 8008496:	616b      	str	r3, [r5, #20]
 8008498:	2300      	movs	r3, #0
 800849a:	ac34      	add	r4, sp, #208	; 0xd0
 800849c:	9427      	str	r4, [sp, #156]	; 0x9c
 800849e:	9329      	str	r3, [sp, #164]	; 0xa4
 80084a0:	9328      	str	r3, [sp, #160]	; 0xa0
 80084a2:	9310      	str	r3, [sp, #64]	; 0x40
 80084a4:	9316      	str	r3, [sp, #88]	; 0x58
 80084a6:	9318      	str	r3, [sp, #96]	; 0x60
 80084a8:	931d      	str	r3, [sp, #116]	; 0x74
 80084aa:	931c      	str	r3, [sp, #112]	; 0x70
 80084ac:	9317      	str	r3, [sp, #92]	; 0x5c
 80084ae:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80084b0:	782b      	ldrb	r3, [r5, #0]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d103      	bne.n	80084be <_svfprintf_r+0x6e>
 80084b6:	9812      	ldr	r0, [sp, #72]	; 0x48
 80084b8:	1a2e      	subs	r6, r5, r0
 80084ba:	d104      	bne.n	80084c6 <_svfprintf_r+0x76>
 80084bc:	e01d      	b.n	80084fa <_svfprintf_r+0xaa>
 80084be:	2b25      	cmp	r3, #37	; 0x25
 80084c0:	d0f9      	beq.n	80084b6 <_svfprintf_r+0x66>
 80084c2:	3501      	adds	r5, #1
 80084c4:	e7f4      	b.n	80084b0 <_svfprintf_r+0x60>
 80084c6:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80084c8:	9912      	ldr	r1, [sp, #72]	; 0x48
 80084ca:	18b3      	adds	r3, r6, r2
 80084cc:	9329      	str	r3, [sp, #164]	; 0xa4
 80084ce:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80084d0:	6021      	str	r1, [r4, #0]
 80084d2:	3301      	adds	r3, #1
 80084d4:	6066      	str	r6, [r4, #4]
 80084d6:	9328      	str	r3, [sp, #160]	; 0xa0
 80084d8:	2b07      	cmp	r3, #7
 80084da:	dc01      	bgt.n	80084e0 <_svfprintf_r+0x90>
 80084dc:	3408      	adds	r4, #8
 80084de:	e009      	b.n	80084f4 <_svfprintf_r+0xa4>
 80084e0:	980d      	ldr	r0, [sp, #52]	; 0x34
 80084e2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80084e4:	aa27      	add	r2, sp, #156	; 0x9c
 80084e6:	f002 fe5b 	bl	800b1a0 <__ssprint_r>
 80084ea:	2800      	cmp	r0, #0
 80084ec:	d001      	beq.n	80084f2 <_svfprintf_r+0xa2>
 80084ee:	f000 ff47 	bl	8009380 <_svfprintf_r+0xf30>
 80084f2:	ac34      	add	r4, sp, #208	; 0xd0
 80084f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80084f6:	199b      	adds	r3, r3, r6
 80084f8:	9317      	str	r3, [sp, #92]	; 0x5c
 80084fa:	782b      	ldrb	r3, [r5, #0]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d101      	bne.n	8008504 <_svfprintf_r+0xb4>
 8008500:	f000 ff36 	bl	8009370 <_svfprintf_r+0xf20>
 8008504:	466a      	mov	r2, sp
 8008506:	2300      	movs	r3, #0
 8008508:	327f      	adds	r2, #127	; 0x7f
 800850a:	7013      	strb	r3, [r2, #0]
 800850c:	2201      	movs	r2, #1
 800850e:	4252      	negs	r2, r2
 8008510:	3501      	adds	r5, #1
 8008512:	920a      	str	r2, [sp, #40]	; 0x28
 8008514:	9314      	str	r3, [sp, #80]	; 0x50
 8008516:	1c1e      	adds	r6, r3, #0
 8008518:	1c68      	adds	r0, r5, #1
 800851a:	782d      	ldrb	r5, [r5, #0]
 800851c:	9012      	str	r0, [sp, #72]	; 0x48
 800851e:	950b      	str	r5, [sp, #44]	; 0x2c
 8008520:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008522:	3820      	subs	r0, #32
 8008524:	2858      	cmp	r0, #88	; 0x58
 8008526:	d900      	bls.n	800852a <_svfprintf_r+0xda>
 8008528:	e38e      	b.n	8008c48 <_svfprintf_r+0x7f8>
 800852a:	f7f7 fe01 	bl	8000130 <__gnu_thumb1_case_uhi>
 800852e:	005b      	.short	0x005b
 8008530:	038d038d 	.word	0x038d038d
 8008534:	038d0069 	.word	0x038d0069
 8008538:	038d038d 	.word	0x038d038d
 800853c:	038d038d 	.word	0x038d038d
 8008540:	006b038d 	.word	0x006b038d
 8008544:	038d0059 	.word	0x038d0059
 8008548:	00750072 	.word	0x00750072
 800854c:	00a0038d 	.word	0x00a0038d
 8008550:	00a200a2 	.word	0x00a200a2
 8008554:	00a200a2 	.word	0x00a200a2
 8008558:	00a200a2 	.word	0x00a200a2
 800855c:	00a200a2 	.word	0x00a200a2
 8008560:	038d00a2 	.word	0x038d00a2
 8008564:	038d038d 	.word	0x038d038d
 8008568:	038d038d 	.word	0x038d038d
 800856c:	038d038d 	.word	0x038d038d
 8008570:	038d038d 	.word	0x038d038d
 8008574:	00d0038d 	.word	0x00d0038d
 8008578:	038d00fc 	.word	0x038d00fc
 800857c:	038d00fc 	.word	0x038d00fc
 8008580:	038d038d 	.word	0x038d038d
 8008584:	00b6038d 	.word	0x00b6038d
 8008588:	038d038d 	.word	0x038d038d
 800858c:	038d026e 	.word	0x038d026e
 8008590:	038d038d 	.word	0x038d038d
 8008594:	038d038d 	.word	0x038d038d
 8008598:	038d02c2 	.word	0x038d02c2
 800859c:	0064038d 	.word	0x0064038d
 80085a0:	038d038d 	.word	0x038d038d
 80085a4:	038d038d 	.word	0x038d038d
 80085a8:	038d038d 	.word	0x038d038d
 80085ac:	038d038d 	.word	0x038d038d
 80085b0:	038d038d 	.word	0x038d038d
 80085b4:	006000c5 	.word	0x006000c5
 80085b8:	00fc00fc 	.word	0x00fc00fc
 80085bc:	00b800fc 	.word	0x00b800fc
 80085c0:	038d0060 	.word	0x038d0060
 80085c4:	00ba038d 	.word	0x00ba038d
 80085c8:	0255038d 	.word	0x0255038d
 80085cc:	02900270 	.word	0x02900270
 80085d0:	038d00c3 	.word	0x038d00c3
 80085d4:	038d02a0 	.word	0x038d02a0
 80085d8:	038d02c4 	.word	0x038d02c4
 80085dc:	02e3038d 	.word	0x02e3038d
 80085e0:	232b      	movs	r3, #43	; 0x2b
 80085e2:	e002      	b.n	80085ea <_svfprintf_r+0x19a>
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d100      	bne.n	80085ea <_svfprintf_r+0x19a>
 80085e8:	2320      	movs	r3, #32
 80085ea:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80085ec:	e794      	b.n	8008518 <_svfprintf_r+0xc8>
 80085ee:	466a      	mov	r2, sp
 80085f0:	327f      	adds	r2, #127	; 0x7f
 80085f2:	7013      	strb	r3, [r2, #0]
 80085f4:	e070      	b.n	80086d8 <_svfprintf_r+0x288>
 80085f6:	466a      	mov	r2, sp
 80085f8:	327f      	adds	r2, #127	; 0x7f
 80085fa:	7013      	strb	r3, [r2, #0]
 80085fc:	4dc6      	ldr	r5, [pc, #792]	; (8008918 <_svfprintf_r+0x4c8>)
 80085fe:	e27d      	b.n	8008afc <_svfprintf_r+0x6ac>
 8008600:	2201      	movs	r2, #1
 8008602:	e007      	b.n	8008614 <_svfprintf_r+0x1c4>
 8008604:	683d      	ldr	r5, [r7, #0]
 8008606:	3704      	adds	r7, #4
 8008608:	9514      	str	r5, [sp, #80]	; 0x50
 800860a:	2d00      	cmp	r5, #0
 800860c:	daed      	bge.n	80085ea <_svfprintf_r+0x19a>
 800860e:	426d      	negs	r5, r5
 8008610:	9514      	str	r5, [sp, #80]	; 0x50
 8008612:	2204      	movs	r2, #4
 8008614:	4316      	orrs	r6, r2
 8008616:	e7e8      	b.n	80085ea <_svfprintf_r+0x19a>
 8008618:	9d12      	ldr	r5, [sp, #72]	; 0x48
 800861a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800861c:	782d      	ldrb	r5, [r5, #0]
 800861e:	3201      	adds	r2, #1
 8008620:	950b      	str	r5, [sp, #44]	; 0x2c
 8008622:	2d2a      	cmp	r5, #42	; 0x2a
 8008624:	d001      	beq.n	800862a <_svfprintf_r+0x1da>
 8008626:	2100      	movs	r1, #0
 8008628:	e00d      	b.n	8008646 <_svfprintf_r+0x1f6>
 800862a:	1d39      	adds	r1, r7, #4
 800862c:	683f      	ldr	r7, [r7, #0]
 800862e:	970a      	str	r7, [sp, #40]	; 0x28
 8008630:	2f00      	cmp	r7, #0
 8008632:	da05      	bge.n	8008640 <_svfprintf_r+0x1f0>
 8008634:	9212      	str	r2, [sp, #72]	; 0x48
 8008636:	2201      	movs	r2, #1
 8008638:	4252      	negs	r2, r2
 800863a:	1c0f      	adds	r7, r1, #0
 800863c:	920a      	str	r2, [sp, #40]	; 0x28
 800863e:	e7d4      	b.n	80085ea <_svfprintf_r+0x19a>
 8008640:	1c0f      	adds	r7, r1, #0
 8008642:	9212      	str	r2, [sp, #72]	; 0x48
 8008644:	e7d1      	b.n	80085ea <_svfprintf_r+0x19a>
 8008646:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008648:	9212      	str	r2, [sp, #72]	; 0x48
 800864a:	3830      	subs	r0, #48	; 0x30
 800864c:	2809      	cmp	r0, #9
 800864e:	d806      	bhi.n	800865e <_svfprintf_r+0x20e>
 8008650:	250a      	movs	r5, #10
 8008652:	4369      	muls	r1, r5
 8008654:	7815      	ldrb	r5, [r2, #0]
 8008656:	1809      	adds	r1, r1, r0
 8008658:	950b      	str	r5, [sp, #44]	; 0x2c
 800865a:	3201      	adds	r2, #1
 800865c:	e7f3      	b.n	8008646 <_svfprintf_r+0x1f6>
 800865e:	910a      	str	r1, [sp, #40]	; 0x28
 8008660:	2900      	cmp	r1, #0
 8008662:	db00      	blt.n	8008666 <_svfprintf_r+0x216>
 8008664:	e75c      	b.n	8008520 <_svfprintf_r+0xd0>
 8008666:	2201      	movs	r2, #1
 8008668:	4252      	negs	r2, r2
 800866a:	920a      	str	r2, [sp, #40]	; 0x28
 800866c:	e758      	b.n	8008520 <_svfprintf_r+0xd0>
 800866e:	2280      	movs	r2, #128	; 0x80
 8008670:	e7d0      	b.n	8008614 <_svfprintf_r+0x1c4>
 8008672:	2500      	movs	r5, #0
 8008674:	9514      	str	r5, [sp, #80]	; 0x50
 8008676:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8008678:	210a      	movs	r1, #10
 800867a:	4369      	muls	r1, r5
 800867c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800867e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8008680:	3a30      	subs	r2, #48	; 0x30
 8008682:	188a      	adds	r2, r1, r2
 8008684:	3501      	adds	r5, #1
 8008686:	9214      	str	r2, [sp, #80]	; 0x50
 8008688:	1c2a      	adds	r2, r5, #0
 800868a:	3a01      	subs	r2, #1
 800868c:	7812      	ldrb	r2, [r2, #0]
 800868e:	9512      	str	r5, [sp, #72]	; 0x48
 8008690:	920b      	str	r2, [sp, #44]	; 0x2c
 8008692:	3a30      	subs	r2, #48	; 0x30
 8008694:	2a09      	cmp	r2, #9
 8008696:	d9ee      	bls.n	8008676 <_svfprintf_r+0x226>
 8008698:	e742      	b.n	8008520 <_svfprintf_r+0xd0>
 800869a:	2208      	movs	r2, #8
 800869c:	e7ba      	b.n	8008614 <_svfprintf_r+0x1c4>
 800869e:	2240      	movs	r2, #64	; 0x40
 80086a0:	e7b8      	b.n	8008614 <_svfprintf_r+0x1c4>
 80086a2:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80086a4:	782a      	ldrb	r2, [r5, #0]
 80086a6:	2a6c      	cmp	r2, #108	; 0x6c
 80086a8:	d102      	bne.n	80086b0 <_svfprintf_r+0x260>
 80086aa:	3501      	adds	r5, #1
 80086ac:	9512      	str	r5, [sp, #72]	; 0x48
 80086ae:	e001      	b.n	80086b4 <_svfprintf_r+0x264>
 80086b0:	2210      	movs	r2, #16
 80086b2:	e7af      	b.n	8008614 <_svfprintf_r+0x1c4>
 80086b4:	2220      	movs	r2, #32
 80086b6:	e7ad      	b.n	8008614 <_svfprintf_r+0x1c4>
 80086b8:	6838      	ldr	r0, [r7, #0]
 80086ba:	466a      	mov	r2, sp
 80086bc:	ab2a      	add	r3, sp, #168	; 0xa8
 80086be:	2500      	movs	r5, #0
 80086c0:	327f      	adds	r2, #127	; 0x7f
 80086c2:	2101      	movs	r1, #1
 80086c4:	7018      	strb	r0, [r3, #0]
 80086c6:	7015      	strb	r5, [r2, #0]
 80086c8:	3704      	adds	r7, #4
 80086ca:	910a      	str	r1, [sp, #40]	; 0x28
 80086cc:	e2c9      	b.n	8008c62 <_svfprintf_r+0x812>
 80086ce:	466a      	mov	r2, sp
 80086d0:	327f      	adds	r2, #127	; 0x7f
 80086d2:	7013      	strb	r3, [r2, #0]
 80086d4:	2310      	movs	r3, #16
 80086d6:	431e      	orrs	r6, r3
 80086d8:	06b2      	lsls	r2, r6, #26
 80086da:	d509      	bpl.n	80086f0 <_svfprintf_r+0x2a0>
 80086dc:	1dfb      	adds	r3, r7, #7
 80086de:	2207      	movs	r2, #7
 80086e0:	4393      	bics	r3, r2
 80086e2:	1c1f      	adds	r7, r3, #0
 80086e4:	6818      	ldr	r0, [r3, #0]
 80086e6:	6859      	ldr	r1, [r3, #4]
 80086e8:	3708      	adds	r7, #8
 80086ea:	9008      	str	r0, [sp, #32]
 80086ec:	9109      	str	r1, [sp, #36]	; 0x24
 80086ee:	e00a      	b.n	8008706 <_svfprintf_r+0x2b6>
 80086f0:	1d3b      	adds	r3, r7, #4
 80086f2:	683a      	ldr	r2, [r7, #0]
 80086f4:	06f1      	lsls	r1, r6, #27
 80086f6:	d402      	bmi.n	80086fe <_svfprintf_r+0x2ae>
 80086f8:	0675      	lsls	r5, r6, #25
 80086fa:	d500      	bpl.n	80086fe <_svfprintf_r+0x2ae>
 80086fc:	b212      	sxth	r2, r2
 80086fe:	9208      	str	r2, [sp, #32]
 8008700:	17d2      	asrs	r2, r2, #31
 8008702:	9209      	str	r2, [sp, #36]	; 0x24
 8008704:	1c1f      	adds	r7, r3, #0
 8008706:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008708:	2800      	cmp	r0, #0
 800870a:	db00      	blt.n	800870e <_svfprintf_r+0x2be>
 800870c:	e226      	b.n	8008b5c <_svfprintf_r+0x70c>
 800870e:	9808      	ldr	r0, [sp, #32]
 8008710:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008712:	2300      	movs	r3, #0
 8008714:	4242      	negs	r2, r0
 8008716:	418b      	sbcs	r3, r1
 8008718:	9208      	str	r2, [sp, #32]
 800871a:	9309      	str	r3, [sp, #36]	; 0x24
 800871c:	466b      	mov	r3, sp
 800871e:	222d      	movs	r2, #45	; 0x2d
 8008720:	337f      	adds	r3, #127	; 0x7f
 8008722:	701a      	strb	r2, [r3, #0]
 8008724:	e21a      	b.n	8008b5c <_svfprintf_r+0x70c>
 8008726:	466a      	mov	r2, sp
 8008728:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800872a:	327f      	adds	r2, #127	; 0x7f
 800872c:	7013      	strb	r3, [r2, #0]
 800872e:	1dfb      	adds	r3, r7, #7
 8008730:	2207      	movs	r2, #7
 8008732:	4393      	bics	r3, r2
 8008734:	9613      	str	r6, [sp, #76]	; 0x4c
 8008736:	9515      	str	r5, [sp, #84]	; 0x54
 8008738:	681d      	ldr	r5, [r3, #0]
 800873a:	1c1f      	adds	r7, r3, #0
 800873c:	9516      	str	r5, [sp, #88]	; 0x58
 800873e:	685b      	ldr	r3, [r3, #4]
 8008740:	9816      	ldr	r0, [sp, #88]	; 0x58
 8008742:	9318      	str	r3, [sp, #96]	; 0x60
 8008744:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008746:	3708      	adds	r7, #8
 8008748:	f002 fce6 	bl	800b118 <__fpclassifyd>
 800874c:	2801      	cmp	r0, #1
 800874e:	d112      	bne.n	8008776 <_svfprintf_r+0x326>
 8008750:	9816      	ldr	r0, [sp, #88]	; 0x58
 8008752:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008754:	4b6f      	ldr	r3, [pc, #444]	; (8008914 <_svfprintf_r+0x4c4>)
 8008756:	4a6e      	ldr	r2, [pc, #440]	; (8008910 <_svfprintf_r+0x4c0>)
 8008758:	f7f7 fdba 	bl	80002d0 <__aeabi_dcmplt>
 800875c:	2800      	cmp	r0, #0
 800875e:	d003      	beq.n	8008768 <_svfprintf_r+0x318>
 8008760:	466b      	mov	r3, sp
 8008762:	222d      	movs	r2, #45	; 0x2d
 8008764:	337f      	adds	r3, #127	; 0x7f
 8008766:	701a      	strb	r2, [r3, #0]
 8008768:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800876a:	2d47      	cmp	r5, #71	; 0x47
 800876c:	dc01      	bgt.n	8008772 <_svfprintf_r+0x322>
 800876e:	4d6b      	ldr	r5, [pc, #428]	; (800891c <_svfprintf_r+0x4cc>)
 8008770:	e00d      	b.n	800878e <_svfprintf_r+0x33e>
 8008772:	4d6b      	ldr	r5, [pc, #428]	; (8008920 <_svfprintf_r+0x4d0>)
 8008774:	e00b      	b.n	800878e <_svfprintf_r+0x33e>
 8008776:	9816      	ldr	r0, [sp, #88]	; 0x58
 8008778:	9918      	ldr	r1, [sp, #96]	; 0x60
 800877a:	f002 fccd 	bl	800b118 <__fpclassifyd>
 800877e:	2800      	cmp	r0, #0
 8008780:	d10a      	bne.n	8008798 <_svfprintf_r+0x348>
 8008782:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008784:	2d47      	cmp	r5, #71	; 0x47
 8008786:	dc01      	bgt.n	800878c <_svfprintf_r+0x33c>
 8008788:	4d66      	ldr	r5, [pc, #408]	; (8008924 <_svfprintf_r+0x4d4>)
 800878a:	e000      	b.n	800878e <_svfprintf_r+0x33e>
 800878c:	4d66      	ldr	r5, [pc, #408]	; (8008928 <_svfprintf_r+0x4d8>)
 800878e:	2380      	movs	r3, #128	; 0x80
 8008790:	950e      	str	r5, [sp, #56]	; 0x38
 8008792:	439e      	bics	r6, r3
 8008794:	2503      	movs	r5, #3
 8008796:	e184      	b.n	8008aa2 <_svfprintf_r+0x652>
 8008798:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800879a:	3501      	adds	r5, #1
 800879c:	d009      	beq.n	80087b2 <_svfprintf_r+0x362>
 800879e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80087a0:	2320      	movs	r3, #32
 80087a2:	439d      	bics	r5, r3
 80087a4:	2d47      	cmp	r5, #71	; 0x47
 80087a6:	d106      	bne.n	80087b6 <_svfprintf_r+0x366>
 80087a8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80087aa:	2d00      	cmp	r5, #0
 80087ac:	d103      	bne.n	80087b6 <_svfprintf_r+0x366>
 80087ae:	2501      	movs	r5, #1
 80087b0:	e000      	b.n	80087b4 <_svfprintf_r+0x364>
 80087b2:	2506      	movs	r5, #6
 80087b4:	950a      	str	r5, [sp, #40]	; 0x28
 80087b6:	2380      	movs	r3, #128	; 0x80
 80087b8:	005b      	lsls	r3, r3, #1
 80087ba:	431e      	orrs	r6, r3
 80087bc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80087be:	2b00      	cmp	r3, #0
 80087c0:	da06      	bge.n	80087d0 <_svfprintf_r+0x380>
 80087c2:	9d18      	ldr	r5, [sp, #96]	; 0x60
 80087c4:	2080      	movs	r0, #128	; 0x80
 80087c6:	0600      	lsls	r0, r0, #24
 80087c8:	1828      	adds	r0, r5, r0
 80087ca:	900f      	str	r0, [sp, #60]	; 0x3c
 80087cc:	252d      	movs	r5, #45	; 0x2d
 80087ce:	e002      	b.n	80087d6 <_svfprintf_r+0x386>
 80087d0:	9d18      	ldr	r5, [sp, #96]	; 0x60
 80087d2:	950f      	str	r5, [sp, #60]	; 0x3c
 80087d4:	2500      	movs	r5, #0
 80087d6:	951b      	str	r5, [sp, #108]	; 0x6c
 80087d8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80087da:	2320      	movs	r3, #32
 80087dc:	439d      	bics	r5, r3
 80087de:	9511      	str	r5, [sp, #68]	; 0x44
 80087e0:	2d46      	cmp	r5, #70	; 0x46
 80087e2:	d004      	beq.n	80087ee <_svfprintf_r+0x39e>
 80087e4:	2d45      	cmp	r5, #69	; 0x45
 80087e6:	d105      	bne.n	80087f4 <_svfprintf_r+0x3a4>
 80087e8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80087ea:	3501      	adds	r5, #1
 80087ec:	e003      	b.n	80087f6 <_svfprintf_r+0x3a6>
 80087ee:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80087f0:	2303      	movs	r3, #3
 80087f2:	e001      	b.n	80087f8 <_svfprintf_r+0x3a8>
 80087f4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80087f6:	2302      	movs	r3, #2
 80087f8:	9300      	str	r3, [sp, #0]
 80087fa:	ab21      	add	r3, sp, #132	; 0x84
 80087fc:	9302      	str	r3, [sp, #8]
 80087fe:	ab22      	add	r3, sp, #136	; 0x88
 8008800:	9303      	str	r3, [sp, #12]
 8008802:	ab25      	add	r3, sp, #148	; 0x94
 8008804:	9304      	str	r3, [sp, #16]
 8008806:	9501      	str	r5, [sp, #4]
 8008808:	980d      	ldr	r0, [sp, #52]	; 0x34
 800880a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800880c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800880e:	f000 fe73 	bl	80094f8 <_dtoa_r>
 8008812:	900e      	str	r0, [sp, #56]	; 0x38
 8008814:	9811      	ldr	r0, [sp, #68]	; 0x44
 8008816:	2847      	cmp	r0, #71	; 0x47
 8008818:	d10b      	bne.n	8008832 <_svfprintf_r+0x3e2>
 800881a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800881c:	07c9      	lsls	r1, r1, #31
 800881e:	d408      	bmi.n	8008832 <_svfprintf_r+0x3e2>
 8008820:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8008822:	980e      	ldr	r0, [sp, #56]	; 0x38
 8008824:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008826:	1a2d      	subs	r5, r5, r0
 8008828:	9510      	str	r5, [sp, #64]	; 0x40
 800882a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800882c:	2d47      	cmp	r5, #71	; 0x47
 800882e:	d136      	bne.n	800889e <_svfprintf_r+0x44e>
 8008830:	e02b      	b.n	800888a <_svfprintf_r+0x43a>
 8008832:	980e      	ldr	r0, [sp, #56]	; 0x38
 8008834:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008836:	1940      	adds	r0, r0, r5
 8008838:	9010      	str	r0, [sp, #64]	; 0x40
 800883a:	2946      	cmp	r1, #70	; 0x46
 800883c:	d112      	bne.n	8008864 <_svfprintf_r+0x414>
 800883e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008840:	7813      	ldrb	r3, [r2, #0]
 8008842:	2b30      	cmp	r3, #48	; 0x30
 8008844:	d10a      	bne.n	800885c <_svfprintf_r+0x40c>
 8008846:	9816      	ldr	r0, [sp, #88]	; 0x58
 8008848:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800884a:	4b32      	ldr	r3, [pc, #200]	; (8008914 <_svfprintf_r+0x4c4>)
 800884c:	4a30      	ldr	r2, [pc, #192]	; (8008910 <_svfprintf_r+0x4c0>)
 800884e:	f7f7 fd39 	bl	80002c4 <__aeabi_dcmpeq>
 8008852:	2800      	cmp	r0, #0
 8008854:	d102      	bne.n	800885c <_svfprintf_r+0x40c>
 8008856:	2301      	movs	r3, #1
 8008858:	1b5d      	subs	r5, r3, r5
 800885a:	9521      	str	r5, [sp, #132]	; 0x84
 800885c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800885e:	9821      	ldr	r0, [sp, #132]	; 0x84
 8008860:	182d      	adds	r5, r5, r0
 8008862:	9510      	str	r5, [sp, #64]	; 0x40
 8008864:	9816      	ldr	r0, [sp, #88]	; 0x58
 8008866:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008868:	4b2a      	ldr	r3, [pc, #168]	; (8008914 <_svfprintf_r+0x4c4>)
 800886a:	4a29      	ldr	r2, [pc, #164]	; (8008910 <_svfprintf_r+0x4c0>)
 800886c:	f7f7 fd2a 	bl	80002c4 <__aeabi_dcmpeq>
 8008870:	2800      	cmp	r0, #0
 8008872:	d001      	beq.n	8008878 <_svfprintf_r+0x428>
 8008874:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008876:	9525      	str	r5, [sp, #148]	; 0x94
 8008878:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800887a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800887c:	42ab      	cmp	r3, r5
 800887e:	d2cf      	bcs.n	8008820 <_svfprintf_r+0x3d0>
 8008880:	1c5a      	adds	r2, r3, #1
 8008882:	9225      	str	r2, [sp, #148]	; 0x94
 8008884:	2230      	movs	r2, #48	; 0x30
 8008886:	701a      	strb	r2, [r3, #0]
 8008888:	e7f6      	b.n	8008878 <_svfprintf_r+0x428>
 800888a:	1cd0      	adds	r0, r2, #3
 800888c:	db03      	blt.n	8008896 <_svfprintf_r+0x446>
 800888e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008890:	42aa      	cmp	r2, r5
 8008892:	dc00      	bgt.n	8008896 <_svfprintf_r+0x446>
 8008894:	e07e      	b.n	8008994 <_svfprintf_r+0x544>
 8008896:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008898:	3d02      	subs	r5, #2
 800889a:	950b      	str	r5, [sp, #44]	; 0x2c
 800889c:	e002      	b.n	80088a4 <_svfprintf_r+0x454>
 800889e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80088a0:	2d65      	cmp	r5, #101	; 0x65
 80088a2:	dc5e      	bgt.n	8008962 <_svfprintf_r+0x512>
 80088a4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80088a6:	1e55      	subs	r5, r2, #1
 80088a8:	ab23      	add	r3, sp, #140	; 0x8c
 80088aa:	7018      	strb	r0, [r3, #0]
 80088ac:	9521      	str	r5, [sp, #132]	; 0x84
 80088ae:	3301      	adds	r3, #1
 80088b0:	222b      	movs	r2, #43	; 0x2b
 80088b2:	2d00      	cmp	r5, #0
 80088b4:	da01      	bge.n	80088ba <_svfprintf_r+0x46a>
 80088b6:	426d      	negs	r5, r5
 80088b8:	222d      	movs	r2, #45	; 0x2d
 80088ba:	701a      	strb	r2, [r3, #0]
 80088bc:	2d09      	cmp	r5, #9
 80088be:	dd35      	ble.n	800892c <_svfprintf_r+0x4dc>
 80088c0:	4669      	mov	r1, sp
 80088c2:	319a      	adds	r1, #154	; 0x9a
 80088c4:	910a      	str	r1, [sp, #40]	; 0x28
 80088c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80088c8:	1c28      	adds	r0, r5, #0
 80088ca:	210a      	movs	r1, #10
 80088cc:	9211      	str	r2, [sp, #68]	; 0x44
 80088ce:	f7f7 fcdd 	bl	800028c <__aeabi_idivmod>
 80088d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088d4:	3130      	adds	r1, #48	; 0x30
 80088d6:	7019      	strb	r1, [r3, #0]
 80088d8:	1c28      	adds	r0, r5, #0
 80088da:	210a      	movs	r1, #10
 80088dc:	f7f7 fc80 	bl	80001e0 <__aeabi_idiv>
 80088e0:	1c05      	adds	r5, r0, #0
 80088e2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80088e4:	3801      	subs	r0, #1
 80088e6:	900a      	str	r0, [sp, #40]	; 0x28
 80088e8:	2d09      	cmp	r5, #9
 80088ea:	dcec      	bgt.n	80088c6 <_svfprintf_r+0x476>
 80088ec:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80088ee:	3530      	adds	r5, #48	; 0x30
 80088f0:	3a01      	subs	r2, #1
 80088f2:	466b      	mov	r3, sp
 80088f4:	7015      	strb	r5, [r2, #0]
 80088f6:	338f      	adds	r3, #143	; 0x8f
 80088f8:	1c10      	adds	r0, r2, #0
 80088fa:	4669      	mov	r1, sp
 80088fc:	319b      	adds	r1, #155	; 0x9b
 80088fe:	1e5a      	subs	r2, r3, #1
 8008900:	3301      	adds	r3, #1
 8008902:	4288      	cmp	r0, r1
 8008904:	d219      	bcs.n	800893a <_svfprintf_r+0x4ea>
 8008906:	7801      	ldrb	r1, [r0, #0]
 8008908:	1e9a      	subs	r2, r3, #2
 800890a:	7011      	strb	r1, [r2, #0]
 800890c:	3001      	adds	r0, #1
 800890e:	e7f4      	b.n	80088fa <_svfprintf_r+0x4aa>
	...
 8008918:	0800c398 	.word	0x0800c398
 800891c:	0800c388 	.word	0x0800c388
 8008920:	0800c38c 	.word	0x0800c38c
 8008924:	0800c390 	.word	0x0800c390
 8008928:	0800c394 	.word	0x0800c394
 800892c:	2230      	movs	r2, #48	; 0x30
 800892e:	466b      	mov	r3, sp
 8008930:	338e      	adds	r3, #142	; 0x8e
 8008932:	18ad      	adds	r5, r5, r2
 8008934:	701a      	strb	r2, [r3, #0]
 8008936:	705d      	strb	r5, [r3, #1]
 8008938:	aa24      	add	r2, sp, #144	; 0x90
 800893a:	ab23      	add	r3, sp, #140	; 0x8c
 800893c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800893e:	1ad3      	subs	r3, r2, r3
 8008940:	195d      	adds	r5, r3, r5
 8008942:	950a      	str	r5, [sp, #40]	; 0x28
 8008944:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008946:	931c      	str	r3, [sp, #112]	; 0x70
 8008948:	2d01      	cmp	r5, #1
 800894a:	dc04      	bgt.n	8008956 <_svfprintf_r+0x506>
 800894c:	2500      	movs	r5, #0
 800894e:	9511      	str	r5, [sp, #68]	; 0x44
 8008950:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8008952:	07ed      	lsls	r5, r5, #31
 8008954:	d536      	bpl.n	80089c4 <_svfprintf_r+0x574>
 8008956:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008958:	3501      	adds	r5, #1
 800895a:	950a      	str	r5, [sp, #40]	; 0x28
 800895c:	2500      	movs	r5, #0
 800895e:	9511      	str	r5, [sp, #68]	; 0x44
 8008960:	e030      	b.n	80089c4 <_svfprintf_r+0x574>
 8008962:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008964:	2d66      	cmp	r5, #102	; 0x66
 8008966:	d115      	bne.n	8008994 <_svfprintf_r+0x544>
 8008968:	1c13      	adds	r3, r2, #0
 800896a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800896c:	2a00      	cmp	r2, #0
 800896e:	dd08      	ble.n	8008982 <_svfprintf_r+0x532>
 8008970:	2d00      	cmp	r5, #0
 8008972:	d102      	bne.n	800897a <_svfprintf_r+0x52a>
 8008974:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8008976:	07ed      	lsls	r5, r5, #31
 8008978:	d520      	bpl.n	80089bc <_svfprintf_r+0x56c>
 800897a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800897c:	3301      	adds	r3, #1
 800897e:	18d3      	adds	r3, r2, r3
 8008980:	e01c      	b.n	80089bc <_svfprintf_r+0x56c>
 8008982:	2d00      	cmp	r5, #0
 8008984:	d103      	bne.n	800898e <_svfprintf_r+0x53e>
 8008986:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8008988:	2301      	movs	r3, #1
 800898a:	421d      	tst	r5, r3
 800898c:	d016      	beq.n	80089bc <_svfprintf_r+0x56c>
 800898e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008990:	3302      	adds	r3, #2
 8008992:	e013      	b.n	80089bc <_svfprintf_r+0x56c>
 8008994:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008996:	1e13      	subs	r3, r2, #0
 8008998:	42ab      	cmp	r3, r5
 800899a:	db06      	blt.n	80089aa <_svfprintf_r+0x55a>
 800899c:	2567      	movs	r5, #103	; 0x67
 800899e:	9515      	str	r5, [sp, #84]	; 0x54
 80089a0:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80089a2:	07ed      	lsls	r5, r5, #31
 80089a4:	d50a      	bpl.n	80089bc <_svfprintf_r+0x56c>
 80089a6:	1c53      	adds	r3, r2, #1
 80089a8:	e008      	b.n	80089bc <_svfprintf_r+0x56c>
 80089aa:	2301      	movs	r3, #1
 80089ac:	2a00      	cmp	r2, #0
 80089ae:	dc01      	bgt.n	80089b4 <_svfprintf_r+0x564>
 80089b0:	2302      	movs	r3, #2
 80089b2:	1a9b      	subs	r3, r3, r2
 80089b4:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80089b6:	18eb      	adds	r3, r5, r3
 80089b8:	2567      	movs	r5, #103	; 0x67
 80089ba:	9515      	str	r5, [sp, #84]	; 0x54
 80089bc:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80089be:	9211      	str	r2, [sp, #68]	; 0x44
 80089c0:	950b      	str	r5, [sp, #44]	; 0x2c
 80089c2:	930a      	str	r3, [sp, #40]	; 0x28
 80089c4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80089c6:	2500      	movs	r5, #0
 80089c8:	42a8      	cmp	r0, r5
 80089ca:	d100      	bne.n	80089ce <_svfprintf_r+0x57e>
 80089cc:	e14e      	b.n	8008c6c <_svfprintf_r+0x81c>
 80089ce:	466b      	mov	r3, sp
 80089d0:	222d      	movs	r2, #45	; 0x2d
 80089d2:	337f      	adds	r3, #127	; 0x7f
 80089d4:	701a      	strb	r2, [r3, #0]
 80089d6:	e149      	b.n	8008c6c <_svfprintf_r+0x81c>
 80089d8:	466a      	mov	r2, sp
 80089da:	327f      	adds	r2, #127	; 0x7f
 80089dc:	7013      	strb	r3, [r2, #0]
 80089de:	1d3b      	adds	r3, r7, #4
 80089e0:	06b1      	lsls	r1, r6, #26
 80089e2:	d505      	bpl.n	80089f0 <_svfprintf_r+0x5a0>
 80089e4:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80089e6:	683a      	ldr	r2, [r7, #0]
 80089e8:	17e9      	asrs	r1, r5, #31
 80089ea:	6015      	str	r5, [r2, #0]
 80089ec:	6051      	str	r1, [r2, #4]
 80089ee:	e00a      	b.n	8008a06 <_svfprintf_r+0x5b6>
 80089f0:	06f0      	lsls	r0, r6, #27
 80089f2:	d405      	bmi.n	8008a00 <_svfprintf_r+0x5b0>
 80089f4:	0670      	lsls	r0, r6, #25
 80089f6:	d503      	bpl.n	8008a00 <_svfprintf_r+0x5b0>
 80089f8:	683a      	ldr	r2, [r7, #0]
 80089fa:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80089fc:	8015      	strh	r5, [r2, #0]
 80089fe:	e002      	b.n	8008a06 <_svfprintf_r+0x5b6>
 8008a00:	683a      	ldr	r2, [r7, #0]
 8008a02:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8008a04:	6015      	str	r5, [r2, #0]
 8008a06:	1c1f      	adds	r7, r3, #0
 8008a08:	e551      	b.n	80084ae <_svfprintf_r+0x5e>
 8008a0a:	2310      	movs	r3, #16
 8008a0c:	431e      	orrs	r6, r3
 8008a0e:	2320      	movs	r3, #32
 8008a10:	4033      	ands	r3, r6
 8008a12:	d00a      	beq.n	8008a2a <_svfprintf_r+0x5da>
 8008a14:	1dfb      	adds	r3, r7, #7
 8008a16:	2207      	movs	r2, #7
 8008a18:	4393      	bics	r3, r2
 8008a1a:	6818      	ldr	r0, [r3, #0]
 8008a1c:	6859      	ldr	r1, [r3, #4]
 8008a1e:	9008      	str	r0, [sp, #32]
 8008a20:	9109      	str	r1, [sp, #36]	; 0x24
 8008a22:	1c1f      	adds	r7, r3, #0
 8008a24:	3708      	adds	r7, #8
 8008a26:	2300      	movs	r3, #0
 8008a28:	e093      	b.n	8008b52 <_svfprintf_r+0x702>
 8008a2a:	2110      	movs	r1, #16
 8008a2c:	4031      	ands	r1, r6
 8008a2e:	1d3a      	adds	r2, r7, #4
 8008a30:	2900      	cmp	r1, #0
 8008a32:	d107      	bne.n	8008a44 <_svfprintf_r+0x5f4>
 8008a34:	2340      	movs	r3, #64	; 0x40
 8008a36:	4033      	ands	r3, r6
 8008a38:	d004      	beq.n	8008a44 <_svfprintf_r+0x5f4>
 8008a3a:	883f      	ldrh	r7, [r7, #0]
 8008a3c:	9109      	str	r1, [sp, #36]	; 0x24
 8008a3e:	9708      	str	r7, [sp, #32]
 8008a40:	1c17      	adds	r7, r2, #0
 8008a42:	e7f0      	b.n	8008a26 <_svfprintf_r+0x5d6>
 8008a44:	683f      	ldr	r7, [r7, #0]
 8008a46:	9309      	str	r3, [sp, #36]	; 0x24
 8008a48:	9708      	str	r7, [sp, #32]
 8008a4a:	1c17      	adds	r7, r2, #0
 8008a4c:	e081      	b.n	8008b52 <_svfprintf_r+0x702>
 8008a4e:	6839      	ldr	r1, [r7, #0]
 8008a50:	2200      	movs	r2, #0
 8008a52:	9108      	str	r1, [sp, #32]
 8008a54:	9209      	str	r2, [sp, #36]	; 0x24
 8008a56:	2130      	movs	r1, #48	; 0x30
 8008a58:	aa20      	add	r2, sp, #128	; 0x80
 8008a5a:	4dc2      	ldr	r5, [pc, #776]	; (8008d64 <_svfprintf_r+0x914>)
 8008a5c:	2302      	movs	r3, #2
 8008a5e:	7011      	strb	r1, [r2, #0]
 8008a60:	2178      	movs	r1, #120	; 0x78
 8008a62:	431e      	orrs	r6, r3
 8008a64:	7051      	strb	r1, [r2, #1]
 8008a66:	3704      	adds	r7, #4
 8008a68:	951d      	str	r5, [sp, #116]	; 0x74
 8008a6a:	910b      	str	r1, [sp, #44]	; 0x2c
 8008a6c:	e071      	b.n	8008b52 <_svfprintf_r+0x702>
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008a72:	930e      	str	r3, [sp, #56]	; 0x38
 8008a74:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008a76:	466b      	mov	r3, sp
 8008a78:	9511      	str	r5, [sp, #68]	; 0x44
 8008a7a:	337f      	adds	r3, #127	; 0x7f
 8008a7c:	2500      	movs	r5, #0
 8008a7e:	3704      	adds	r7, #4
 8008a80:	701d      	strb	r5, [r3, #0]
 8008a82:	42a8      	cmp	r0, r5
 8008a84:	db10      	blt.n	8008aa8 <_svfprintf_r+0x658>
 8008a86:	980e      	ldr	r0, [sp, #56]	; 0x38
 8008a88:	1c29      	adds	r1, r5, #0
 8008a8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a8c:	f001 ff3a 	bl	800a904 <memchr>
 8008a90:	42a8      	cmp	r0, r5
 8008a92:	d100      	bne.n	8008a96 <_svfprintf_r+0x646>
 8008a94:	e0e8      	b.n	8008c68 <_svfprintf_r+0x818>
 8008a96:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8008a98:	1b40      	subs	r0, r0, r5
 8008a9a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8008a9c:	900a      	str	r0, [sp, #40]	; 0x28
 8008a9e:	42a8      	cmp	r0, r5
 8008aa0:	dd00      	ble.n	8008aa4 <_svfprintf_r+0x654>
 8008aa2:	950a      	str	r5, [sp, #40]	; 0x28
 8008aa4:	2500      	movs	r5, #0
 8008aa6:	e0e0      	b.n	8008c6a <_svfprintf_r+0x81a>
 8008aa8:	980e      	ldr	r0, [sp, #56]	; 0x38
 8008aaa:	f7fe fdc7 	bl	800763c <strlen>
 8008aae:	900a      	str	r0, [sp, #40]	; 0x28
 8008ab0:	e0db      	b.n	8008c6a <_svfprintf_r+0x81a>
 8008ab2:	2310      	movs	r3, #16
 8008ab4:	431e      	orrs	r6, r3
 8008ab6:	2220      	movs	r2, #32
 8008ab8:	4032      	ands	r2, r6
 8008aba:	d009      	beq.n	8008ad0 <_svfprintf_r+0x680>
 8008abc:	1dfb      	adds	r3, r7, #7
 8008abe:	2207      	movs	r2, #7
 8008ac0:	4393      	bics	r3, r2
 8008ac2:	1c1f      	adds	r7, r3, #0
 8008ac4:	6818      	ldr	r0, [r3, #0]
 8008ac6:	6859      	ldr	r1, [r3, #4]
 8008ac8:	3708      	adds	r7, #8
 8008aca:	9008      	str	r0, [sp, #32]
 8008acc:	9109      	str	r1, [sp, #36]	; 0x24
 8008ace:	e00f      	b.n	8008af0 <_svfprintf_r+0x6a0>
 8008ad0:	2110      	movs	r1, #16
 8008ad2:	4031      	ands	r1, r6
 8008ad4:	1d3b      	adds	r3, r7, #4
 8008ad6:	2900      	cmp	r1, #0
 8008ad8:	d106      	bne.n	8008ae8 <_svfprintf_r+0x698>
 8008ada:	2240      	movs	r2, #64	; 0x40
 8008adc:	4032      	ands	r2, r6
 8008ade:	d003      	beq.n	8008ae8 <_svfprintf_r+0x698>
 8008ae0:	883f      	ldrh	r7, [r7, #0]
 8008ae2:	9109      	str	r1, [sp, #36]	; 0x24
 8008ae4:	9708      	str	r7, [sp, #32]
 8008ae6:	e002      	b.n	8008aee <_svfprintf_r+0x69e>
 8008ae8:	683f      	ldr	r7, [r7, #0]
 8008aea:	9209      	str	r2, [sp, #36]	; 0x24
 8008aec:	9708      	str	r7, [sp, #32]
 8008aee:	1c1f      	adds	r7, r3, #0
 8008af0:	2301      	movs	r3, #1
 8008af2:	e02e      	b.n	8008b52 <_svfprintf_r+0x702>
 8008af4:	466a      	mov	r2, sp
 8008af6:	327f      	adds	r2, #127	; 0x7f
 8008af8:	4d9a      	ldr	r5, [pc, #616]	; (8008d64 <_svfprintf_r+0x914>)
 8008afa:	7013      	strb	r3, [r2, #0]
 8008afc:	2220      	movs	r2, #32
 8008afe:	951d      	str	r5, [sp, #116]	; 0x74
 8008b00:	4032      	ands	r2, r6
 8008b02:	d009      	beq.n	8008b18 <_svfprintf_r+0x6c8>
 8008b04:	1dfb      	adds	r3, r7, #7
 8008b06:	2207      	movs	r2, #7
 8008b08:	4393      	bics	r3, r2
 8008b0a:	1c1f      	adds	r7, r3, #0
 8008b0c:	6818      	ldr	r0, [r3, #0]
 8008b0e:	6859      	ldr	r1, [r3, #4]
 8008b10:	3708      	adds	r7, #8
 8008b12:	9008      	str	r0, [sp, #32]
 8008b14:	9109      	str	r1, [sp, #36]	; 0x24
 8008b16:	e00f      	b.n	8008b38 <_svfprintf_r+0x6e8>
 8008b18:	2110      	movs	r1, #16
 8008b1a:	4031      	ands	r1, r6
 8008b1c:	1d3b      	adds	r3, r7, #4
 8008b1e:	2900      	cmp	r1, #0
 8008b20:	d106      	bne.n	8008b30 <_svfprintf_r+0x6e0>
 8008b22:	2240      	movs	r2, #64	; 0x40
 8008b24:	4032      	ands	r2, r6
 8008b26:	d003      	beq.n	8008b30 <_svfprintf_r+0x6e0>
 8008b28:	883f      	ldrh	r7, [r7, #0]
 8008b2a:	9109      	str	r1, [sp, #36]	; 0x24
 8008b2c:	9708      	str	r7, [sp, #32]
 8008b2e:	e002      	b.n	8008b36 <_svfprintf_r+0x6e6>
 8008b30:	683f      	ldr	r7, [r7, #0]
 8008b32:	9209      	str	r2, [sp, #36]	; 0x24
 8008b34:	9708      	str	r7, [sp, #32]
 8008b36:	1c1f      	adds	r7, r3, #0
 8008b38:	2302      	movs	r3, #2
 8008b3a:	07f1      	lsls	r1, r6, #31
 8008b3c:	d509      	bpl.n	8008b52 <_svfprintf_r+0x702>
 8008b3e:	9a08      	ldr	r2, [sp, #32]
 8008b40:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008b42:	432a      	orrs	r2, r5
 8008b44:	d005      	beq.n	8008b52 <_svfprintf_r+0x702>
 8008b46:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008b48:	aa20      	add	r2, sp, #128	; 0x80
 8008b4a:	2130      	movs	r1, #48	; 0x30
 8008b4c:	7011      	strb	r1, [r2, #0]
 8008b4e:	7055      	strb	r5, [r2, #1]
 8008b50:	431e      	orrs	r6, r3
 8008b52:	466a      	mov	r2, sp
 8008b54:	2100      	movs	r1, #0
 8008b56:	327f      	adds	r2, #127	; 0x7f
 8008b58:	7011      	strb	r1, [r2, #0]
 8008b5a:	e000      	b.n	8008b5e <_svfprintf_r+0x70e>
 8008b5c:	2301      	movs	r3, #1
 8008b5e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008b60:	2d00      	cmp	r5, #0
 8008b62:	db01      	blt.n	8008b68 <_svfprintf_r+0x718>
 8008b64:	2280      	movs	r2, #128	; 0x80
 8008b66:	4396      	bics	r6, r2
 8008b68:	9a08      	ldr	r2, [sp, #32]
 8008b6a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b6c:	4302      	orrs	r2, r0
 8008b6e:	d102      	bne.n	8008b76 <_svfprintf_r+0x726>
 8008b70:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008b72:	2d00      	cmp	r5, #0
 8008b74:	d056      	beq.n	8008c24 <_svfprintf_r+0x7d4>
 8008b76:	466d      	mov	r5, sp
 8008b78:	35cf      	adds	r5, #207	; 0xcf
 8008b7a:	2b01      	cmp	r3, #1
 8008b7c:	d01e      	beq.n	8008bbc <_svfprintf_r+0x76c>
 8008b7e:	2b02      	cmp	r3, #2
 8008b80:	d03a      	beq.n	8008bf8 <_svfprintf_r+0x7a8>
 8008b82:	9808      	ldr	r0, [sp, #32]
 8008b84:	2307      	movs	r3, #7
 8008b86:	4003      	ands	r3, r0
 8008b88:	3330      	adds	r3, #48	; 0x30
 8008b8a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008b8c:	9a08      	ldr	r2, [sp, #32]
 8008b8e:	950e      	str	r5, [sp, #56]	; 0x38
 8008b90:	702b      	strb	r3, [r5, #0]
 8008b92:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008b94:	0748      	lsls	r0, r1, #29
 8008b96:	08d1      	lsrs	r1, r2, #3
 8008b98:	08ea      	lsrs	r2, r5, #3
 8008b9a:	4308      	orrs	r0, r1
 8008b9c:	9209      	str	r2, [sp, #36]	; 0x24
 8008b9e:	9008      	str	r0, [sp, #32]
 8008ba0:	1c02      	adds	r2, r0, #0
 8008ba2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8008ba4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008ba6:	3d01      	subs	r5, #1
 8008ba8:	4302      	orrs	r2, r0
 8008baa:	d1ea      	bne.n	8008b82 <_svfprintf_r+0x732>
 8008bac:	07f1      	lsls	r1, r6, #31
 8008bae:	d543      	bpl.n	8008c38 <_svfprintf_r+0x7e8>
 8008bb0:	2b30      	cmp	r3, #48	; 0x30
 8008bb2:	d041      	beq.n	8008c38 <_svfprintf_r+0x7e8>
 8008bb4:	2230      	movs	r2, #48	; 0x30
 8008bb6:	950e      	str	r5, [sp, #56]	; 0x38
 8008bb8:	702a      	strb	r2, [r5, #0]
 8008bba:	e03d      	b.n	8008c38 <_svfprintf_r+0x7e8>
 8008bbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008bbe:	2a00      	cmp	r2, #0
 8008bc0:	d104      	bne.n	8008bcc <_svfprintf_r+0x77c>
 8008bc2:	9b08      	ldr	r3, [sp, #32]
 8008bc4:	2b09      	cmp	r3, #9
 8008bc6:	d801      	bhi.n	8008bcc <_svfprintf_r+0x77c>
 8008bc8:	3330      	adds	r3, #48	; 0x30
 8008bca:	e033      	b.n	8008c34 <_svfprintf_r+0x7e4>
 8008bcc:	9808      	ldr	r0, [sp, #32]
 8008bce:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008bd0:	220a      	movs	r2, #10
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	950e      	str	r5, [sp, #56]	; 0x38
 8008bd6:	f7f7 fbdd 	bl	8000394 <__aeabi_uldivmod>
 8008bda:	9808      	ldr	r0, [sp, #32]
 8008bdc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008bde:	3230      	adds	r2, #48	; 0x30
 8008be0:	702a      	strb	r2, [r5, #0]
 8008be2:	220a      	movs	r2, #10
 8008be4:	2300      	movs	r3, #0
 8008be6:	f7f7 fbd5 	bl	8000394 <__aeabi_uldivmod>
 8008bea:	1c03      	adds	r3, r0, #0
 8008bec:	9008      	str	r0, [sp, #32]
 8008bee:	9109      	str	r1, [sp, #36]	; 0x24
 8008bf0:	3d01      	subs	r5, #1
 8008bf2:	430b      	orrs	r3, r1
 8008bf4:	d1ea      	bne.n	8008bcc <_svfprintf_r+0x77c>
 8008bf6:	e01f      	b.n	8008c38 <_svfprintf_r+0x7e8>
 8008bf8:	9808      	ldr	r0, [sp, #32]
 8008bfa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008bfc:	991d      	ldr	r1, [sp, #116]	; 0x74
 8008bfe:	230f      	movs	r3, #15
 8008c00:	4003      	ands	r3, r0
 8008c02:	5ccb      	ldrb	r3, [r1, r3]
 8008c04:	0711      	lsls	r1, r2, #28
 8008c06:	0902      	lsrs	r2, r0, #4
 8008c08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c0a:	702b      	strb	r3, [r5, #0]
 8008c0c:	0903      	lsrs	r3, r0, #4
 8008c0e:	4311      	orrs	r1, r2
 8008c10:	9309      	str	r3, [sp, #36]	; 0x24
 8008c12:	9108      	str	r1, [sp, #32]
 8008c14:	1c0b      	adds	r3, r1, #0
 8008c16:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008c18:	950e      	str	r5, [sp, #56]	; 0x38
 8008c1a:	430b      	orrs	r3, r1
 8008c1c:	3d01      	subs	r5, #1
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d1ea      	bne.n	8008bf8 <_svfprintf_r+0x7a8>
 8008c22:	e009      	b.n	8008c38 <_svfprintf_r+0x7e8>
 8008c24:	ad34      	add	r5, sp, #208	; 0xd0
 8008c26:	950e      	str	r5, [sp, #56]	; 0x38
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d105      	bne.n	8008c38 <_svfprintf_r+0x7e8>
 8008c2c:	07f0      	lsls	r0, r6, #31
 8008c2e:	d503      	bpl.n	8008c38 <_svfprintf_r+0x7e8>
 8008c30:	3d01      	subs	r5, #1
 8008c32:	2330      	movs	r3, #48	; 0x30
 8008c34:	702b      	strb	r3, [r5, #0]
 8008c36:	950e      	str	r5, [sp, #56]	; 0x38
 8008c38:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008c3a:	ab34      	add	r3, sp, #208	; 0xd0
 8008c3c:	1a5b      	subs	r3, r3, r1
 8008c3e:	2200      	movs	r2, #0
 8008c40:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008c42:	9211      	str	r2, [sp, #68]	; 0x44
 8008c44:	930a      	str	r3, [sp, #40]	; 0x28
 8008c46:	e011      	b.n	8008c6c <_svfprintf_r+0x81c>
 8008c48:	466a      	mov	r2, sp
 8008c4a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008c4c:	327f      	adds	r2, #127	; 0x7f
 8008c4e:	7013      	strb	r3, [r2, #0]
 8008c50:	2d00      	cmp	r5, #0
 8008c52:	d100      	bne.n	8008c56 <_svfprintf_r+0x806>
 8008c54:	e38c      	b.n	8009370 <_svfprintf_r+0xf20>
 8008c56:	ab2a      	add	r3, sp, #168	; 0xa8
 8008c58:	701d      	strb	r5, [r3, #0]
 8008c5a:	2001      	movs	r0, #1
 8008c5c:	2500      	movs	r5, #0
 8008c5e:	7015      	strb	r5, [r2, #0]
 8008c60:	900a      	str	r0, [sp, #40]	; 0x28
 8008c62:	9511      	str	r5, [sp, #68]	; 0x44
 8008c64:	930e      	str	r3, [sp, #56]	; 0x38
 8008c66:	e001      	b.n	8008c6c <_svfprintf_r+0x81c>
 8008c68:	1c05      	adds	r5, r0, #0
 8008c6a:	9511      	str	r5, [sp, #68]	; 0x44
 8008c6c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008c6e:	9113      	str	r1, [sp, #76]	; 0x4c
 8008c70:	42a9      	cmp	r1, r5
 8008c72:	da00      	bge.n	8008c76 <_svfprintf_r+0x826>
 8008c74:	9513      	str	r5, [sp, #76]	; 0x4c
 8008c76:	466b      	mov	r3, sp
 8008c78:	337f      	adds	r3, #127	; 0x7f
 8008c7a:	781b      	ldrb	r3, [r3, #0]
 8008c7c:	1e5a      	subs	r2, r3, #1
 8008c7e:	4193      	sbcs	r3, r2
 8008c80:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008c82:	18d2      	adds	r2, r2, r3
 8008c84:	2302      	movs	r3, #2
 8008c86:	4033      	ands	r3, r6
 8008c88:	9213      	str	r2, [sp, #76]	; 0x4c
 8008c8a:	9315      	str	r3, [sp, #84]	; 0x54
 8008c8c:	d001      	beq.n	8008c92 <_svfprintf_r+0x842>
 8008c8e:	3202      	adds	r2, #2
 8008c90:	9213      	str	r2, [sp, #76]	; 0x4c
 8008c92:	2384      	movs	r3, #132	; 0x84
 8008c94:	4033      	ands	r3, r6
 8008c96:	931b      	str	r3, [sp, #108]	; 0x6c
 8008c98:	d137      	bne.n	8008d0a <_svfprintf_r+0x8ba>
 8008c9a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008c9c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8008c9e:	1a1b      	subs	r3, r3, r0
 8008ca0:	930f      	str	r3, [sp, #60]	; 0x3c
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	dd31      	ble.n	8008d0a <_svfprintf_r+0x8ba>
 8008ca6:	4b30      	ldr	r3, [pc, #192]	; (8008d68 <_svfprintf_r+0x918>)
 8008ca8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008caa:	6023      	str	r3, [r4, #0]
 8008cac:	2a10      	cmp	r2, #16
 8008cae:	dd18      	ble.n	8008ce2 <_svfprintf_r+0x892>
 8008cb0:	2310      	movs	r3, #16
 8008cb2:	6063      	str	r3, [r4, #4]
 8008cb4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8008cb6:	3310      	adds	r3, #16
 8008cb8:	9329      	str	r3, [sp, #164]	; 0xa4
 8008cba:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8008cbc:	3301      	adds	r3, #1
 8008cbe:	9328      	str	r3, [sp, #160]	; 0xa0
 8008cc0:	2b07      	cmp	r3, #7
 8008cc2:	dc01      	bgt.n	8008cc8 <_svfprintf_r+0x878>
 8008cc4:	3408      	adds	r4, #8
 8008cc6:	e008      	b.n	8008cda <_svfprintf_r+0x88a>
 8008cc8:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008cca:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008ccc:	aa27      	add	r2, sp, #156	; 0x9c
 8008cce:	f002 fa67 	bl	800b1a0 <__ssprint_r>
 8008cd2:	2800      	cmp	r0, #0
 8008cd4:	d000      	beq.n	8008cd8 <_svfprintf_r+0x888>
 8008cd6:	e353      	b.n	8009380 <_svfprintf_r+0xf30>
 8008cd8:	ac34      	add	r4, sp, #208	; 0xd0
 8008cda:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008cdc:	3910      	subs	r1, #16
 8008cde:	910f      	str	r1, [sp, #60]	; 0x3c
 8008ce0:	e7e1      	b.n	8008ca6 <_svfprintf_r+0x856>
 8008ce2:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8008ce4:	6062      	str	r2, [r4, #4]
 8008ce6:	1813      	adds	r3, r2, r0
 8008ce8:	9329      	str	r3, [sp, #164]	; 0xa4
 8008cea:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8008cec:	3301      	adds	r3, #1
 8008cee:	9328      	str	r3, [sp, #160]	; 0xa0
 8008cf0:	2b07      	cmp	r3, #7
 8008cf2:	dc01      	bgt.n	8008cf8 <_svfprintf_r+0x8a8>
 8008cf4:	3408      	adds	r4, #8
 8008cf6:	e008      	b.n	8008d0a <_svfprintf_r+0x8ba>
 8008cf8:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008cfa:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008cfc:	aa27      	add	r2, sp, #156	; 0x9c
 8008cfe:	f002 fa4f 	bl	800b1a0 <__ssprint_r>
 8008d02:	2800      	cmp	r0, #0
 8008d04:	d000      	beq.n	8008d08 <_svfprintf_r+0x8b8>
 8008d06:	e33b      	b.n	8009380 <_svfprintf_r+0xf30>
 8008d08:	ac34      	add	r4, sp, #208	; 0xd0
 8008d0a:	466b      	mov	r3, sp
 8008d0c:	337f      	adds	r3, #127	; 0x7f
 8008d0e:	781a      	ldrb	r2, [r3, #0]
 8008d10:	2a00      	cmp	r2, #0
 8008d12:	d015      	beq.n	8008d40 <_svfprintf_r+0x8f0>
 8008d14:	6023      	str	r3, [r4, #0]
 8008d16:	2301      	movs	r3, #1
 8008d18:	6063      	str	r3, [r4, #4]
 8008d1a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8008d1c:	3301      	adds	r3, #1
 8008d1e:	9329      	str	r3, [sp, #164]	; 0xa4
 8008d20:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8008d22:	3301      	adds	r3, #1
 8008d24:	9328      	str	r3, [sp, #160]	; 0xa0
 8008d26:	2b07      	cmp	r3, #7
 8008d28:	dc01      	bgt.n	8008d2e <_svfprintf_r+0x8de>
 8008d2a:	3408      	adds	r4, #8
 8008d2c:	e008      	b.n	8008d40 <_svfprintf_r+0x8f0>
 8008d2e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008d30:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008d32:	aa27      	add	r2, sp, #156	; 0x9c
 8008d34:	f002 fa34 	bl	800b1a0 <__ssprint_r>
 8008d38:	2800      	cmp	r0, #0
 8008d3a:	d000      	beq.n	8008d3e <_svfprintf_r+0x8ee>
 8008d3c:	e320      	b.n	8009380 <_svfprintf_r+0xf30>
 8008d3e:	ac34      	add	r4, sp, #208	; 0xd0
 8008d40:	9915      	ldr	r1, [sp, #84]	; 0x54
 8008d42:	2900      	cmp	r1, #0
 8008d44:	d01b      	beq.n	8008d7e <_svfprintf_r+0x92e>
 8008d46:	ab20      	add	r3, sp, #128	; 0x80
 8008d48:	6023      	str	r3, [r4, #0]
 8008d4a:	2302      	movs	r3, #2
 8008d4c:	6063      	str	r3, [r4, #4]
 8008d4e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8008d50:	3302      	adds	r3, #2
 8008d52:	9329      	str	r3, [sp, #164]	; 0xa4
 8008d54:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8008d56:	3301      	adds	r3, #1
 8008d58:	9328      	str	r3, [sp, #160]	; 0xa0
 8008d5a:	2b07      	cmp	r3, #7
 8008d5c:	dc06      	bgt.n	8008d6c <_svfprintf_r+0x91c>
 8008d5e:	3408      	adds	r4, #8
 8008d60:	e00d      	b.n	8008d7e <_svfprintf_r+0x92e>
 8008d62:	46c0      	nop			; (mov r8, r8)
 8008d64:	0800c3a9 	.word	0x0800c3a9
 8008d68:	0800c3bc 	.word	0x0800c3bc
 8008d6c:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008d6e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008d70:	aa27      	add	r2, sp, #156	; 0x9c
 8008d72:	f002 fa15 	bl	800b1a0 <__ssprint_r>
 8008d76:	2800      	cmp	r0, #0
 8008d78:	d000      	beq.n	8008d7c <_svfprintf_r+0x92c>
 8008d7a:	e301      	b.n	8009380 <_svfprintf_r+0xf30>
 8008d7c:	ac34      	add	r4, sp, #208	; 0xd0
 8008d7e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008d80:	2a80      	cmp	r2, #128	; 0x80
 8008d82:	d137      	bne.n	8008df4 <_svfprintf_r+0x9a4>
 8008d84:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008d86:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8008d88:	1a1b      	subs	r3, r3, r0
 8008d8a:	930f      	str	r3, [sp, #60]	; 0x3c
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	dd31      	ble.n	8008df4 <_svfprintf_r+0x9a4>
 8008d90:	4bc7      	ldr	r3, [pc, #796]	; (80090b0 <_svfprintf_r+0xc60>)
 8008d92:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008d94:	6023      	str	r3, [r4, #0]
 8008d96:	2a10      	cmp	r2, #16
 8008d98:	dd18      	ble.n	8008dcc <_svfprintf_r+0x97c>
 8008d9a:	2310      	movs	r3, #16
 8008d9c:	6063      	str	r3, [r4, #4]
 8008d9e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8008da0:	3310      	adds	r3, #16
 8008da2:	9329      	str	r3, [sp, #164]	; 0xa4
 8008da4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8008da6:	3301      	adds	r3, #1
 8008da8:	9328      	str	r3, [sp, #160]	; 0xa0
 8008daa:	2b07      	cmp	r3, #7
 8008dac:	dc01      	bgt.n	8008db2 <_svfprintf_r+0x962>
 8008dae:	3408      	adds	r4, #8
 8008db0:	e008      	b.n	8008dc4 <_svfprintf_r+0x974>
 8008db2:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008db4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008db6:	aa27      	add	r2, sp, #156	; 0x9c
 8008db8:	f002 f9f2 	bl	800b1a0 <__ssprint_r>
 8008dbc:	2800      	cmp	r0, #0
 8008dbe:	d000      	beq.n	8008dc2 <_svfprintf_r+0x972>
 8008dc0:	e2de      	b.n	8009380 <_svfprintf_r+0xf30>
 8008dc2:	ac34      	add	r4, sp, #208	; 0xd0
 8008dc4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008dc6:	3910      	subs	r1, #16
 8008dc8:	910f      	str	r1, [sp, #60]	; 0x3c
 8008dca:	e7e1      	b.n	8008d90 <_svfprintf_r+0x940>
 8008dcc:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8008dce:	6062      	str	r2, [r4, #4]
 8008dd0:	1813      	adds	r3, r2, r0
 8008dd2:	9329      	str	r3, [sp, #164]	; 0xa4
 8008dd4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8008dd6:	3301      	adds	r3, #1
 8008dd8:	9328      	str	r3, [sp, #160]	; 0xa0
 8008dda:	2b07      	cmp	r3, #7
 8008ddc:	dc01      	bgt.n	8008de2 <_svfprintf_r+0x992>
 8008dde:	3408      	adds	r4, #8
 8008de0:	e008      	b.n	8008df4 <_svfprintf_r+0x9a4>
 8008de2:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008de4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008de6:	aa27      	add	r2, sp, #156	; 0x9c
 8008de8:	f002 f9da 	bl	800b1a0 <__ssprint_r>
 8008dec:	2800      	cmp	r0, #0
 8008dee:	d000      	beq.n	8008df2 <_svfprintf_r+0x9a2>
 8008df0:	e2c6      	b.n	8009380 <_svfprintf_r+0xf30>
 8008df2:	ac34      	add	r4, sp, #208	; 0xd0
 8008df4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008df6:	1a6d      	subs	r5, r5, r1
 8008df8:	2d00      	cmp	r5, #0
 8008dfa:	dd2e      	ble.n	8008e5a <_svfprintf_r+0xa0a>
 8008dfc:	4bac      	ldr	r3, [pc, #688]	; (80090b0 <_svfprintf_r+0xc60>)
 8008dfe:	6023      	str	r3, [r4, #0]
 8008e00:	2d10      	cmp	r5, #16
 8008e02:	dd16      	ble.n	8008e32 <_svfprintf_r+0x9e2>
 8008e04:	2310      	movs	r3, #16
 8008e06:	6063      	str	r3, [r4, #4]
 8008e08:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8008e0a:	3310      	adds	r3, #16
 8008e0c:	9329      	str	r3, [sp, #164]	; 0xa4
 8008e0e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8008e10:	3301      	adds	r3, #1
 8008e12:	9328      	str	r3, [sp, #160]	; 0xa0
 8008e14:	2b07      	cmp	r3, #7
 8008e16:	dc01      	bgt.n	8008e1c <_svfprintf_r+0x9cc>
 8008e18:	3408      	adds	r4, #8
 8008e1a:	e008      	b.n	8008e2e <_svfprintf_r+0x9de>
 8008e1c:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008e1e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008e20:	aa27      	add	r2, sp, #156	; 0x9c
 8008e22:	f002 f9bd 	bl	800b1a0 <__ssprint_r>
 8008e26:	2800      	cmp	r0, #0
 8008e28:	d000      	beq.n	8008e2c <_svfprintf_r+0x9dc>
 8008e2a:	e2a9      	b.n	8009380 <_svfprintf_r+0xf30>
 8008e2c:	ac34      	add	r4, sp, #208	; 0xd0
 8008e2e:	3d10      	subs	r5, #16
 8008e30:	e7e4      	b.n	8008dfc <_svfprintf_r+0x9ac>
 8008e32:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8008e34:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8008e36:	6065      	str	r5, [r4, #4]
 8008e38:	3301      	adds	r3, #1
 8008e3a:	18ad      	adds	r5, r5, r2
 8008e3c:	9529      	str	r5, [sp, #164]	; 0xa4
 8008e3e:	9328      	str	r3, [sp, #160]	; 0xa0
 8008e40:	2b07      	cmp	r3, #7
 8008e42:	dc01      	bgt.n	8008e48 <_svfprintf_r+0x9f8>
 8008e44:	3408      	adds	r4, #8
 8008e46:	e008      	b.n	8008e5a <_svfprintf_r+0xa0a>
 8008e48:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008e4a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008e4c:	aa27      	add	r2, sp, #156	; 0x9c
 8008e4e:	f002 f9a7 	bl	800b1a0 <__ssprint_r>
 8008e52:	2800      	cmp	r0, #0
 8008e54:	d000      	beq.n	8008e58 <_svfprintf_r+0xa08>
 8008e56:	e293      	b.n	8009380 <_svfprintf_r+0xf30>
 8008e58:	ac34      	add	r4, sp, #208	; 0xd0
 8008e5a:	05f3      	lsls	r3, r6, #23
 8008e5c:	d403      	bmi.n	8008e66 <_svfprintf_r+0xa16>
 8008e5e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8008e60:	6025      	str	r5, [r4, #0]
 8008e62:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008e64:	e0d5      	b.n	8009012 <_svfprintf_r+0xbc2>
 8008e66:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008e68:	2d65      	cmp	r5, #101	; 0x65
 8008e6a:	dc00      	bgt.n	8008e6e <_svfprintf_r+0xa1e>
 8008e6c:	e1b4      	b.n	80091d8 <_svfprintf_r+0xd88>
 8008e6e:	9816      	ldr	r0, [sp, #88]	; 0x58
 8008e70:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008e72:	4b8e      	ldr	r3, [pc, #568]	; (80090ac <_svfprintf_r+0xc5c>)
 8008e74:	4a8c      	ldr	r2, [pc, #560]	; (80090a8 <_svfprintf_r+0xc58>)
 8008e76:	f7f7 fa25 	bl	80002c4 <__aeabi_dcmpeq>
 8008e7a:	2800      	cmp	r0, #0
 8008e7c:	d059      	beq.n	8008f32 <_svfprintf_r+0xae2>
 8008e7e:	4b8d      	ldr	r3, [pc, #564]	; (80090b4 <_svfprintf_r+0xc64>)
 8008e80:	6023      	str	r3, [r4, #0]
 8008e82:	2301      	movs	r3, #1
 8008e84:	6063      	str	r3, [r4, #4]
 8008e86:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8008e88:	3301      	adds	r3, #1
 8008e8a:	9329      	str	r3, [sp, #164]	; 0xa4
 8008e8c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8008e8e:	3301      	adds	r3, #1
 8008e90:	9328      	str	r3, [sp, #160]	; 0xa0
 8008e92:	2b07      	cmp	r3, #7
 8008e94:	dc01      	bgt.n	8008e9a <_svfprintf_r+0xa4a>
 8008e96:	3408      	adds	r4, #8
 8008e98:	e008      	b.n	8008eac <_svfprintf_r+0xa5c>
 8008e9a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008e9c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008e9e:	aa27      	add	r2, sp, #156	; 0x9c
 8008ea0:	f002 f97e 	bl	800b1a0 <__ssprint_r>
 8008ea4:	2800      	cmp	r0, #0
 8008ea6:	d000      	beq.n	8008eaa <_svfprintf_r+0xa5a>
 8008ea8:	e26a      	b.n	8009380 <_svfprintf_r+0xf30>
 8008eaa:	ac34      	add	r4, sp, #208	; 0xd0
 8008eac:	9821      	ldr	r0, [sp, #132]	; 0x84
 8008eae:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008eb0:	42a8      	cmp	r0, r5
 8008eb2:	db02      	blt.n	8008eba <_svfprintf_r+0xa6a>
 8008eb4:	07f0      	lsls	r0, r6, #31
 8008eb6:	d400      	bmi.n	8008eba <_svfprintf_r+0xa6a>
 8008eb8:	e210      	b.n	80092dc <_svfprintf_r+0xe8c>
 8008eba:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8008ebc:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8008ebe:	6025      	str	r5, [r4, #0]
 8008ec0:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8008ec2:	182b      	adds	r3, r5, r0
 8008ec4:	9329      	str	r3, [sp, #164]	; 0xa4
 8008ec6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8008ec8:	6065      	str	r5, [r4, #4]
 8008eca:	3301      	adds	r3, #1
 8008ecc:	9328      	str	r3, [sp, #160]	; 0xa0
 8008ece:	2b07      	cmp	r3, #7
 8008ed0:	dc01      	bgt.n	8008ed6 <_svfprintf_r+0xa86>
 8008ed2:	3408      	adds	r4, #8
 8008ed4:	e008      	b.n	8008ee8 <_svfprintf_r+0xa98>
 8008ed6:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008ed8:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008eda:	aa27      	add	r2, sp, #156	; 0x9c
 8008edc:	f002 f960 	bl	800b1a0 <__ssprint_r>
 8008ee0:	2800      	cmp	r0, #0
 8008ee2:	d000      	beq.n	8008ee6 <_svfprintf_r+0xa96>
 8008ee4:	e24c      	b.n	8009380 <_svfprintf_r+0xf30>
 8008ee6:	ac34      	add	r4, sp, #208	; 0xd0
 8008ee8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008eea:	3d01      	subs	r5, #1
 8008eec:	2d00      	cmp	r5, #0
 8008eee:	dc00      	bgt.n	8008ef2 <_svfprintf_r+0xaa2>
 8008ef0:	e1f4      	b.n	80092dc <_svfprintf_r+0xe8c>
 8008ef2:	4b6f      	ldr	r3, [pc, #444]	; (80090b0 <_svfprintf_r+0xc60>)
 8008ef4:	6023      	str	r3, [r4, #0]
 8008ef6:	2d10      	cmp	r5, #16
 8008ef8:	dd16      	ble.n	8008f28 <_svfprintf_r+0xad8>
 8008efa:	2310      	movs	r3, #16
 8008efc:	6063      	str	r3, [r4, #4]
 8008efe:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8008f00:	3310      	adds	r3, #16
 8008f02:	9329      	str	r3, [sp, #164]	; 0xa4
 8008f04:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8008f06:	3301      	adds	r3, #1
 8008f08:	9328      	str	r3, [sp, #160]	; 0xa0
 8008f0a:	2b07      	cmp	r3, #7
 8008f0c:	dc01      	bgt.n	8008f12 <_svfprintf_r+0xac2>
 8008f0e:	3408      	adds	r4, #8
 8008f10:	e008      	b.n	8008f24 <_svfprintf_r+0xad4>
 8008f12:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008f14:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008f16:	aa27      	add	r2, sp, #156	; 0x9c
 8008f18:	f002 f942 	bl	800b1a0 <__ssprint_r>
 8008f1c:	2800      	cmp	r0, #0
 8008f1e:	d000      	beq.n	8008f22 <_svfprintf_r+0xad2>
 8008f20:	e22e      	b.n	8009380 <_svfprintf_r+0xf30>
 8008f22:	ac34      	add	r4, sp, #208	; 0xd0
 8008f24:	3d10      	subs	r5, #16
 8008f26:	e7e4      	b.n	8008ef2 <_svfprintf_r+0xaa2>
 8008f28:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8008f2a:	6065      	str	r5, [r4, #4]
 8008f2c:	186d      	adds	r5, r5, r1
 8008f2e:	9529      	str	r5, [sp, #164]	; 0xa4
 8008f30:	e142      	b.n	80091b8 <_svfprintf_r+0xd68>
 8008f32:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008f34:	2a00      	cmp	r2, #0
 8008f36:	dc70      	bgt.n	800901a <_svfprintf_r+0xbca>
 8008f38:	4b5e      	ldr	r3, [pc, #376]	; (80090b4 <_svfprintf_r+0xc64>)
 8008f3a:	6023      	str	r3, [r4, #0]
 8008f3c:	2301      	movs	r3, #1
 8008f3e:	6063      	str	r3, [r4, #4]
 8008f40:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8008f42:	3301      	adds	r3, #1
 8008f44:	9329      	str	r3, [sp, #164]	; 0xa4
 8008f46:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8008f48:	3301      	adds	r3, #1
 8008f4a:	9328      	str	r3, [sp, #160]	; 0xa0
 8008f4c:	2b07      	cmp	r3, #7
 8008f4e:	dc01      	bgt.n	8008f54 <_svfprintf_r+0xb04>
 8008f50:	3408      	adds	r4, #8
 8008f52:	e008      	b.n	8008f66 <_svfprintf_r+0xb16>
 8008f54:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008f56:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008f58:	aa27      	add	r2, sp, #156	; 0x9c
 8008f5a:	f002 f921 	bl	800b1a0 <__ssprint_r>
 8008f5e:	2800      	cmp	r0, #0
 8008f60:	d000      	beq.n	8008f64 <_svfprintf_r+0xb14>
 8008f62:	e20d      	b.n	8009380 <_svfprintf_r+0xf30>
 8008f64:	ac34      	add	r4, sp, #208	; 0xd0
 8008f66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d105      	bne.n	8008f78 <_svfprintf_r+0xb28>
 8008f6c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008f6e:	2d00      	cmp	r5, #0
 8008f70:	d102      	bne.n	8008f78 <_svfprintf_r+0xb28>
 8008f72:	07f0      	lsls	r0, r6, #31
 8008f74:	d400      	bmi.n	8008f78 <_svfprintf_r+0xb28>
 8008f76:	e1b1      	b.n	80092dc <_svfprintf_r+0xe8c>
 8008f78:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8008f7a:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8008f7c:	6025      	str	r5, [r4, #0]
 8008f7e:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8008f80:	182b      	adds	r3, r5, r0
 8008f82:	9329      	str	r3, [sp, #164]	; 0xa4
 8008f84:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8008f86:	6065      	str	r5, [r4, #4]
 8008f88:	3301      	adds	r3, #1
 8008f8a:	9328      	str	r3, [sp, #160]	; 0xa0
 8008f8c:	2b07      	cmp	r3, #7
 8008f8e:	dc01      	bgt.n	8008f94 <_svfprintf_r+0xb44>
 8008f90:	3408      	adds	r4, #8
 8008f92:	e008      	b.n	8008fa6 <_svfprintf_r+0xb56>
 8008f94:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008f96:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008f98:	aa27      	add	r2, sp, #156	; 0x9c
 8008f9a:	f002 f901 	bl	800b1a0 <__ssprint_r>
 8008f9e:	2800      	cmp	r0, #0
 8008fa0:	d000      	beq.n	8008fa4 <_svfprintf_r+0xb54>
 8008fa2:	e1ed      	b.n	8009380 <_svfprintf_r+0xf30>
 8008fa4:	ac34      	add	r4, sp, #208	; 0xd0
 8008fa6:	9921      	ldr	r1, [sp, #132]	; 0x84
 8008fa8:	424d      	negs	r5, r1
 8008faa:	2d00      	cmp	r5, #0
 8008fac:	dd2e      	ble.n	800900c <_svfprintf_r+0xbbc>
 8008fae:	4b40      	ldr	r3, [pc, #256]	; (80090b0 <_svfprintf_r+0xc60>)
 8008fb0:	6023      	str	r3, [r4, #0]
 8008fb2:	2d10      	cmp	r5, #16
 8008fb4:	dd16      	ble.n	8008fe4 <_svfprintf_r+0xb94>
 8008fb6:	2310      	movs	r3, #16
 8008fb8:	6063      	str	r3, [r4, #4]
 8008fba:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8008fbc:	3310      	adds	r3, #16
 8008fbe:	9329      	str	r3, [sp, #164]	; 0xa4
 8008fc0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8008fc2:	3301      	adds	r3, #1
 8008fc4:	9328      	str	r3, [sp, #160]	; 0xa0
 8008fc6:	2b07      	cmp	r3, #7
 8008fc8:	dc01      	bgt.n	8008fce <_svfprintf_r+0xb7e>
 8008fca:	3408      	adds	r4, #8
 8008fcc:	e008      	b.n	8008fe0 <_svfprintf_r+0xb90>
 8008fce:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008fd0:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008fd2:	aa27      	add	r2, sp, #156	; 0x9c
 8008fd4:	f002 f8e4 	bl	800b1a0 <__ssprint_r>
 8008fd8:	2800      	cmp	r0, #0
 8008fda:	d000      	beq.n	8008fde <_svfprintf_r+0xb8e>
 8008fdc:	e1d0      	b.n	8009380 <_svfprintf_r+0xf30>
 8008fde:	ac34      	add	r4, sp, #208	; 0xd0
 8008fe0:	3d10      	subs	r5, #16
 8008fe2:	e7e4      	b.n	8008fae <_svfprintf_r+0xb5e>
 8008fe4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8008fe6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8008fe8:	6065      	str	r5, [r4, #4]
 8008fea:	3301      	adds	r3, #1
 8008fec:	18ad      	adds	r5, r5, r2
 8008fee:	9529      	str	r5, [sp, #164]	; 0xa4
 8008ff0:	9328      	str	r3, [sp, #160]	; 0xa0
 8008ff2:	2b07      	cmp	r3, #7
 8008ff4:	dc01      	bgt.n	8008ffa <_svfprintf_r+0xbaa>
 8008ff6:	3408      	adds	r4, #8
 8008ff8:	e008      	b.n	800900c <_svfprintf_r+0xbbc>
 8008ffa:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008ffc:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008ffe:	aa27      	add	r2, sp, #156	; 0x9c
 8009000:	f002 f8ce 	bl	800b1a0 <__ssprint_r>
 8009004:	2800      	cmp	r0, #0
 8009006:	d000      	beq.n	800900a <_svfprintf_r+0xbba>
 8009008:	e1ba      	b.n	8009380 <_svfprintf_r+0xf30>
 800900a:	ac34      	add	r4, sp, #208	; 0xd0
 800900c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800900e:	6025      	str	r5, [r4, #0]
 8009010:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8009012:	6065      	str	r5, [r4, #4]
 8009014:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8009016:	182b      	adds	r3, r5, r0
 8009018:	e0cd      	b.n	80091b6 <_svfprintf_r+0xd66>
 800901a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800901c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800901e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009020:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009022:	182d      	adds	r5, r5, r0
 8009024:	950a      	str	r5, [sp, #40]	; 0x28
 8009026:	1a6d      	subs	r5, r5, r1
 8009028:	4295      	cmp	r5, r2
 800902a:	dd00      	ble.n	800902e <_svfprintf_r+0xbde>
 800902c:	1c15      	adds	r5, r2, #0
 800902e:	2d00      	cmp	r5, #0
 8009030:	dd15      	ble.n	800905e <_svfprintf_r+0xc0e>
 8009032:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009034:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8009036:	6023      	str	r3, [r4, #0]
 8009038:	182b      	adds	r3, r5, r0
 800903a:	9329      	str	r3, [sp, #164]	; 0xa4
 800903c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800903e:	6065      	str	r5, [r4, #4]
 8009040:	3301      	adds	r3, #1
 8009042:	9328      	str	r3, [sp, #160]	; 0xa0
 8009044:	2b07      	cmp	r3, #7
 8009046:	dc01      	bgt.n	800904c <_svfprintf_r+0xbfc>
 8009048:	3408      	adds	r4, #8
 800904a:	e008      	b.n	800905e <_svfprintf_r+0xc0e>
 800904c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800904e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009050:	aa27      	add	r2, sp, #156	; 0x9c
 8009052:	f002 f8a5 	bl	800b1a0 <__ssprint_r>
 8009056:	2800      	cmp	r0, #0
 8009058:	d000      	beq.n	800905c <_svfprintf_r+0xc0c>
 800905a:	e191      	b.n	8009380 <_svfprintf_r+0xf30>
 800905c:	ac34      	add	r4, sp, #208	; 0xd0
 800905e:	43eb      	mvns	r3, r5
 8009060:	17db      	asrs	r3, r3, #31
 8009062:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009064:	401d      	ands	r5, r3
 8009066:	1b4d      	subs	r5, r1, r5
 8009068:	2d00      	cmp	r5, #0
 800906a:	dd39      	ble.n	80090e0 <_svfprintf_r+0xc90>
 800906c:	4b10      	ldr	r3, [pc, #64]	; (80090b0 <_svfprintf_r+0xc60>)
 800906e:	6023      	str	r3, [r4, #0]
 8009070:	2d10      	cmp	r5, #16
 8009072:	dd21      	ble.n	80090b8 <_svfprintf_r+0xc68>
 8009074:	2310      	movs	r3, #16
 8009076:	6063      	str	r3, [r4, #4]
 8009078:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800907a:	3310      	adds	r3, #16
 800907c:	9329      	str	r3, [sp, #164]	; 0xa4
 800907e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8009080:	3301      	adds	r3, #1
 8009082:	9328      	str	r3, [sp, #160]	; 0xa0
 8009084:	2b07      	cmp	r3, #7
 8009086:	dc01      	bgt.n	800908c <_svfprintf_r+0xc3c>
 8009088:	3408      	adds	r4, #8
 800908a:	e008      	b.n	800909e <_svfprintf_r+0xc4e>
 800908c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800908e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009090:	aa27      	add	r2, sp, #156	; 0x9c
 8009092:	f002 f885 	bl	800b1a0 <__ssprint_r>
 8009096:	2800      	cmp	r0, #0
 8009098:	d000      	beq.n	800909c <_svfprintf_r+0xc4c>
 800909a:	e171      	b.n	8009380 <_svfprintf_r+0xf30>
 800909c:	ac34      	add	r4, sp, #208	; 0xd0
 800909e:	3d10      	subs	r5, #16
 80090a0:	e7e4      	b.n	800906c <_svfprintf_r+0xc1c>
 80090a2:	46c0      	nop			; (mov r8, r8)
 80090a4:	46c0      	nop			; (mov r8, r8)
 80090a6:	46c0      	nop			; (mov r8, r8)
	...
 80090b0:	0800c378 	.word	0x0800c378
 80090b4:	0800c3ba 	.word	0x0800c3ba
 80090b8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80090ba:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80090bc:	6065      	str	r5, [r4, #4]
 80090be:	3301      	adds	r3, #1
 80090c0:	18ad      	adds	r5, r5, r2
 80090c2:	9529      	str	r5, [sp, #164]	; 0xa4
 80090c4:	9328      	str	r3, [sp, #160]	; 0xa0
 80090c6:	2b07      	cmp	r3, #7
 80090c8:	dc01      	bgt.n	80090ce <_svfprintf_r+0xc7e>
 80090ca:	3408      	adds	r4, #8
 80090cc:	e008      	b.n	80090e0 <_svfprintf_r+0xc90>
 80090ce:	980d      	ldr	r0, [sp, #52]	; 0x34
 80090d0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80090d2:	aa27      	add	r2, sp, #156	; 0x9c
 80090d4:	f002 f864 	bl	800b1a0 <__ssprint_r>
 80090d8:	2800      	cmp	r0, #0
 80090da:	d000      	beq.n	80090de <_svfprintf_r+0xc8e>
 80090dc:	e150      	b.n	8009380 <_svfprintf_r+0xf30>
 80090de:	ac34      	add	r4, sp, #208	; 0xd0
 80090e0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80090e2:	9811      	ldr	r0, [sp, #68]	; 0x44
 80090e4:	9921      	ldr	r1, [sp, #132]	; 0x84
 80090e6:	182d      	adds	r5, r5, r0
 80090e8:	950e      	str	r5, [sp, #56]	; 0x38
 80090ea:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80090ec:	42a9      	cmp	r1, r5
 80090ee:	db01      	blt.n	80090f4 <_svfprintf_r+0xca4>
 80090f0:	07f0      	lsls	r0, r6, #31
 80090f2:	d516      	bpl.n	8009122 <_svfprintf_r+0xcd2>
 80090f4:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80090f6:	9829      	ldr	r0, [sp, #164]	; 0xa4
 80090f8:	6025      	str	r5, [r4, #0]
 80090fa:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80090fc:	182b      	adds	r3, r5, r0
 80090fe:	9329      	str	r3, [sp, #164]	; 0xa4
 8009100:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8009102:	6065      	str	r5, [r4, #4]
 8009104:	3301      	adds	r3, #1
 8009106:	9328      	str	r3, [sp, #160]	; 0xa0
 8009108:	2b07      	cmp	r3, #7
 800910a:	dc01      	bgt.n	8009110 <_svfprintf_r+0xcc0>
 800910c:	3408      	adds	r4, #8
 800910e:	e008      	b.n	8009122 <_svfprintf_r+0xcd2>
 8009110:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009112:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009114:	aa27      	add	r2, sp, #156	; 0x9c
 8009116:	f002 f843 	bl	800b1a0 <__ssprint_r>
 800911a:	2800      	cmp	r0, #0
 800911c:	d000      	beq.n	8009120 <_svfprintf_r+0xcd0>
 800911e:	e12f      	b.n	8009380 <_svfprintf_r+0xf30>
 8009120:	ac34      	add	r4, sp, #208	; 0xd0
 8009122:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8009124:	9821      	ldr	r0, [sp, #132]	; 0x84
 8009126:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009128:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800912a:	1a2b      	subs	r3, r5, r0
 800912c:	1a8d      	subs	r5, r1, r2
 800912e:	429d      	cmp	r5, r3
 8009130:	dd00      	ble.n	8009134 <_svfprintf_r+0xce4>
 8009132:	1c1d      	adds	r5, r3, #0
 8009134:	2d00      	cmp	r5, #0
 8009136:	dd15      	ble.n	8009164 <_svfprintf_r+0xd14>
 8009138:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800913a:	9829      	ldr	r0, [sp, #164]	; 0xa4
 800913c:	6023      	str	r3, [r4, #0]
 800913e:	182b      	adds	r3, r5, r0
 8009140:	9329      	str	r3, [sp, #164]	; 0xa4
 8009142:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8009144:	6065      	str	r5, [r4, #4]
 8009146:	3301      	adds	r3, #1
 8009148:	9328      	str	r3, [sp, #160]	; 0xa0
 800914a:	2b07      	cmp	r3, #7
 800914c:	dc01      	bgt.n	8009152 <_svfprintf_r+0xd02>
 800914e:	3408      	adds	r4, #8
 8009150:	e008      	b.n	8009164 <_svfprintf_r+0xd14>
 8009152:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009154:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009156:	aa27      	add	r2, sp, #156	; 0x9c
 8009158:	f002 f822 	bl	800b1a0 <__ssprint_r>
 800915c:	2800      	cmp	r0, #0
 800915e:	d000      	beq.n	8009162 <_svfprintf_r+0xd12>
 8009160:	e10e      	b.n	8009380 <_svfprintf_r+0xf30>
 8009162:	ac34      	add	r4, sp, #208	; 0xd0
 8009164:	43eb      	mvns	r3, r5
 8009166:	1c2a      	adds	r2, r5, #0
 8009168:	9821      	ldr	r0, [sp, #132]	; 0x84
 800916a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800916c:	17db      	asrs	r3, r3, #31
 800916e:	401a      	ands	r2, r3
 8009170:	1a2b      	subs	r3, r5, r0
 8009172:	1a9d      	subs	r5, r3, r2
 8009174:	2d00      	cmp	r5, #0
 8009176:	dc00      	bgt.n	800917a <_svfprintf_r+0xd2a>
 8009178:	e0b0      	b.n	80092dc <_svfprintf_r+0xe8c>
 800917a:	4b89      	ldr	r3, [pc, #548]	; (80093a0 <_svfprintf_r+0xf50>)
 800917c:	6023      	str	r3, [r4, #0]
 800917e:	2d10      	cmp	r5, #16
 8009180:	dd16      	ble.n	80091b0 <_svfprintf_r+0xd60>
 8009182:	2310      	movs	r3, #16
 8009184:	6063      	str	r3, [r4, #4]
 8009186:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8009188:	3310      	adds	r3, #16
 800918a:	9329      	str	r3, [sp, #164]	; 0xa4
 800918c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800918e:	3301      	adds	r3, #1
 8009190:	9328      	str	r3, [sp, #160]	; 0xa0
 8009192:	2b07      	cmp	r3, #7
 8009194:	dc01      	bgt.n	800919a <_svfprintf_r+0xd4a>
 8009196:	3408      	adds	r4, #8
 8009198:	e008      	b.n	80091ac <_svfprintf_r+0xd5c>
 800919a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800919c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800919e:	aa27      	add	r2, sp, #156	; 0x9c
 80091a0:	f001 fffe 	bl	800b1a0 <__ssprint_r>
 80091a4:	2800      	cmp	r0, #0
 80091a6:	d000      	beq.n	80091aa <_svfprintf_r+0xd5a>
 80091a8:	e0ea      	b.n	8009380 <_svfprintf_r+0xf30>
 80091aa:	ac34      	add	r4, sp, #208	; 0xd0
 80091ac:	3d10      	subs	r5, #16
 80091ae:	e7e4      	b.n	800917a <_svfprintf_r+0xd2a>
 80091b0:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80091b2:	6065      	str	r5, [r4, #4]
 80091b4:	186b      	adds	r3, r5, r1
 80091b6:	9329      	str	r3, [sp, #164]	; 0xa4
 80091b8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80091ba:	3301      	adds	r3, #1
 80091bc:	9328      	str	r3, [sp, #160]	; 0xa0
 80091be:	2b07      	cmp	r3, #7
 80091c0:	dc00      	bgt.n	80091c4 <_svfprintf_r+0xd74>
 80091c2:	e08a      	b.n	80092da <_svfprintf_r+0xe8a>
 80091c4:	980d      	ldr	r0, [sp, #52]	; 0x34
 80091c6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80091c8:	aa27      	add	r2, sp, #156	; 0x9c
 80091ca:	f001 ffe9 	bl	800b1a0 <__ssprint_r>
 80091ce:	2800      	cmp	r0, #0
 80091d0:	d000      	beq.n	80091d4 <_svfprintf_r+0xd84>
 80091d2:	e0d5      	b.n	8009380 <_svfprintf_r+0xf30>
 80091d4:	ac34      	add	r4, sp, #208	; 0xd0
 80091d6:	e081      	b.n	80092dc <_svfprintf_r+0xe8c>
 80091d8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80091da:	2d01      	cmp	r5, #1
 80091dc:	dc02      	bgt.n	80091e4 <_svfprintf_r+0xd94>
 80091de:	2301      	movs	r3, #1
 80091e0:	421e      	tst	r6, r3
 80091e2:	d06e      	beq.n	80092c2 <_svfprintf_r+0xe72>
 80091e4:	2301      	movs	r3, #1
 80091e6:	6063      	str	r3, [r4, #4]
 80091e8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80091ea:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80091ec:	3301      	adds	r3, #1
 80091ee:	9329      	str	r3, [sp, #164]	; 0xa4
 80091f0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80091f2:	6025      	str	r5, [r4, #0]
 80091f4:	3301      	adds	r3, #1
 80091f6:	9328      	str	r3, [sp, #160]	; 0xa0
 80091f8:	2b07      	cmp	r3, #7
 80091fa:	dc01      	bgt.n	8009200 <_svfprintf_r+0xdb0>
 80091fc:	3408      	adds	r4, #8
 80091fe:	e008      	b.n	8009212 <_svfprintf_r+0xdc2>
 8009200:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009202:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009204:	aa27      	add	r2, sp, #156	; 0x9c
 8009206:	f001 ffcb 	bl	800b1a0 <__ssprint_r>
 800920a:	2800      	cmp	r0, #0
 800920c:	d000      	beq.n	8009210 <_svfprintf_r+0xdc0>
 800920e:	e0b7      	b.n	8009380 <_svfprintf_r+0xf30>
 8009210:	ac34      	add	r4, sp, #208	; 0xd0
 8009212:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8009214:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8009216:	6025      	str	r5, [r4, #0]
 8009218:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800921a:	182b      	adds	r3, r5, r0
 800921c:	9329      	str	r3, [sp, #164]	; 0xa4
 800921e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8009220:	6065      	str	r5, [r4, #4]
 8009222:	3301      	adds	r3, #1
 8009224:	9328      	str	r3, [sp, #160]	; 0xa0
 8009226:	2b07      	cmp	r3, #7
 8009228:	dc01      	bgt.n	800922e <_svfprintf_r+0xdde>
 800922a:	3408      	adds	r4, #8
 800922c:	e008      	b.n	8009240 <_svfprintf_r+0xdf0>
 800922e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009230:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009232:	aa27      	add	r2, sp, #156	; 0x9c
 8009234:	f001 ffb4 	bl	800b1a0 <__ssprint_r>
 8009238:	2800      	cmp	r0, #0
 800923a:	d000      	beq.n	800923e <_svfprintf_r+0xdee>
 800923c:	e0a0      	b.n	8009380 <_svfprintf_r+0xf30>
 800923e:	ac34      	add	r4, sp, #208	; 0xd0
 8009240:	9816      	ldr	r0, [sp, #88]	; 0x58
 8009242:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009244:	4b55      	ldr	r3, [pc, #340]	; (800939c <_svfprintf_r+0xf4c>)
 8009246:	4a54      	ldr	r2, [pc, #336]	; (8009398 <_svfprintf_r+0xf48>)
 8009248:	f7f7 f83c 	bl	80002c4 <__aeabi_dcmpeq>
 800924c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800924e:	3d01      	subs	r5, #1
 8009250:	2800      	cmp	r0, #0
 8009252:	d108      	bne.n	8009266 <_svfprintf_r+0xe16>
 8009254:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009256:	6065      	str	r5, [r4, #4]
 8009258:	3301      	adds	r3, #1
 800925a:	6023      	str	r3, [r4, #0]
 800925c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800925e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8009260:	3b01      	subs	r3, #1
 8009262:	195b      	adds	r3, r3, r5
 8009264:	e032      	b.n	80092cc <_svfprintf_r+0xe7c>
 8009266:	2d00      	cmp	r5, #0
 8009268:	dd33      	ble.n	80092d2 <_svfprintf_r+0xe82>
 800926a:	4b4d      	ldr	r3, [pc, #308]	; (80093a0 <_svfprintf_r+0xf50>)
 800926c:	6023      	str	r3, [r4, #0]
 800926e:	2d10      	cmp	r5, #16
 8009270:	dd15      	ble.n	800929e <_svfprintf_r+0xe4e>
 8009272:	2310      	movs	r3, #16
 8009274:	6063      	str	r3, [r4, #4]
 8009276:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8009278:	3310      	adds	r3, #16
 800927a:	9329      	str	r3, [sp, #164]	; 0xa4
 800927c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800927e:	3301      	adds	r3, #1
 8009280:	9328      	str	r3, [sp, #160]	; 0xa0
 8009282:	2b07      	cmp	r3, #7
 8009284:	dc01      	bgt.n	800928a <_svfprintf_r+0xe3a>
 8009286:	3408      	adds	r4, #8
 8009288:	e007      	b.n	800929a <_svfprintf_r+0xe4a>
 800928a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800928c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800928e:	aa27      	add	r2, sp, #156	; 0x9c
 8009290:	f001 ff86 	bl	800b1a0 <__ssprint_r>
 8009294:	2800      	cmp	r0, #0
 8009296:	d173      	bne.n	8009380 <_svfprintf_r+0xf30>
 8009298:	ac34      	add	r4, sp, #208	; 0xd0
 800929a:	3d10      	subs	r5, #16
 800929c:	e7e5      	b.n	800926a <_svfprintf_r+0xe1a>
 800929e:	9829      	ldr	r0, [sp, #164]	; 0xa4
 80092a0:	6065      	str	r5, [r4, #4]
 80092a2:	182d      	adds	r5, r5, r0
 80092a4:	9529      	str	r5, [sp, #164]	; 0xa4
 80092a6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80092a8:	3301      	adds	r3, #1
 80092aa:	9328      	str	r3, [sp, #160]	; 0xa0
 80092ac:	2b07      	cmp	r3, #7
 80092ae:	dd0f      	ble.n	80092d0 <_svfprintf_r+0xe80>
 80092b0:	980d      	ldr	r0, [sp, #52]	; 0x34
 80092b2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80092b4:	aa27      	add	r2, sp, #156	; 0x9c
 80092b6:	f001 ff73 	bl	800b1a0 <__ssprint_r>
 80092ba:	2800      	cmp	r0, #0
 80092bc:	d160      	bne.n	8009380 <_svfprintf_r+0xf30>
 80092be:	ac34      	add	r4, sp, #208	; 0xd0
 80092c0:	e007      	b.n	80092d2 <_svfprintf_r+0xe82>
 80092c2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80092c4:	6063      	str	r3, [r4, #4]
 80092c6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80092c8:	6025      	str	r5, [r4, #0]
 80092ca:	3301      	adds	r3, #1
 80092cc:	9329      	str	r3, [sp, #164]	; 0xa4
 80092ce:	e7ea      	b.n	80092a6 <_svfprintf_r+0xe56>
 80092d0:	3408      	adds	r4, #8
 80092d2:	ab23      	add	r3, sp, #140	; 0x8c
 80092d4:	6023      	str	r3, [r4, #0]
 80092d6:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 80092d8:	e69b      	b.n	8009012 <_svfprintf_r+0xbc2>
 80092da:	3408      	adds	r4, #8
 80092dc:	0771      	lsls	r1, r6, #29
 80092de:	d40b      	bmi.n	80092f8 <_svfprintf_r+0xea8>
 80092e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80092e2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80092e4:	42ab      	cmp	r3, r5
 80092e6:	da00      	bge.n	80092ea <_svfprintf_r+0xe9a>
 80092e8:	1c2b      	adds	r3, r5, #0
 80092ea:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80092ec:	9829      	ldr	r0, [sp, #164]	; 0xa4
 80092ee:	18ed      	adds	r5, r5, r3
 80092f0:	9517      	str	r5, [sp, #92]	; 0x5c
 80092f2:	2800      	cmp	r0, #0
 80092f4:	d037      	beq.n	8009366 <_svfprintf_r+0xf16>
 80092f6:	e02f      	b.n	8009358 <_svfprintf_r+0xf08>
 80092f8:	9914      	ldr	r1, [sp, #80]	; 0x50
 80092fa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80092fc:	1a8d      	subs	r5, r1, r2
 80092fe:	2d00      	cmp	r5, #0
 8009300:	ddee      	ble.n	80092e0 <_svfprintf_r+0xe90>
 8009302:	4b28      	ldr	r3, [pc, #160]	; (80093a4 <_svfprintf_r+0xf54>)
 8009304:	6023      	str	r3, [r4, #0]
 8009306:	2d10      	cmp	r5, #16
 8009308:	dd15      	ble.n	8009336 <_svfprintf_r+0xee6>
 800930a:	2310      	movs	r3, #16
 800930c:	6063      	str	r3, [r4, #4]
 800930e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8009310:	3310      	adds	r3, #16
 8009312:	9329      	str	r3, [sp, #164]	; 0xa4
 8009314:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8009316:	3301      	adds	r3, #1
 8009318:	9328      	str	r3, [sp, #160]	; 0xa0
 800931a:	2b07      	cmp	r3, #7
 800931c:	dc01      	bgt.n	8009322 <_svfprintf_r+0xed2>
 800931e:	3408      	adds	r4, #8
 8009320:	e007      	b.n	8009332 <_svfprintf_r+0xee2>
 8009322:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009324:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009326:	aa27      	add	r2, sp, #156	; 0x9c
 8009328:	f001 ff3a 	bl	800b1a0 <__ssprint_r>
 800932c:	2800      	cmp	r0, #0
 800932e:	d127      	bne.n	8009380 <_svfprintf_r+0xf30>
 8009330:	ac34      	add	r4, sp, #208	; 0xd0
 8009332:	3d10      	subs	r5, #16
 8009334:	e7e5      	b.n	8009302 <_svfprintf_r+0xeb2>
 8009336:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8009338:	6065      	str	r5, [r4, #4]
 800933a:	18ed      	adds	r5, r5, r3
 800933c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800933e:	9529      	str	r5, [sp, #164]	; 0xa4
 8009340:	3301      	adds	r3, #1
 8009342:	9328      	str	r3, [sp, #160]	; 0xa0
 8009344:	2b07      	cmp	r3, #7
 8009346:	ddcb      	ble.n	80092e0 <_svfprintf_r+0xe90>
 8009348:	980d      	ldr	r0, [sp, #52]	; 0x34
 800934a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800934c:	aa27      	add	r2, sp, #156	; 0x9c
 800934e:	f001 ff27 	bl	800b1a0 <__ssprint_r>
 8009352:	2800      	cmp	r0, #0
 8009354:	d0c4      	beq.n	80092e0 <_svfprintf_r+0xe90>
 8009356:	e013      	b.n	8009380 <_svfprintf_r+0xf30>
 8009358:	980d      	ldr	r0, [sp, #52]	; 0x34
 800935a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800935c:	aa27      	add	r2, sp, #156	; 0x9c
 800935e:	f001 ff1f 	bl	800b1a0 <__ssprint_r>
 8009362:	2800      	cmp	r0, #0
 8009364:	d10c      	bne.n	8009380 <_svfprintf_r+0xf30>
 8009366:	2300      	movs	r3, #0
 8009368:	9328      	str	r3, [sp, #160]	; 0xa0
 800936a:	ac34      	add	r4, sp, #208	; 0xd0
 800936c:	f7ff f89f 	bl	80084ae <_svfprintf_r+0x5e>
 8009370:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 8009372:	2d00      	cmp	r5, #0
 8009374:	d004      	beq.n	8009380 <_svfprintf_r+0xf30>
 8009376:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009378:	990c      	ldr	r1, [sp, #48]	; 0x30
 800937a:	aa27      	add	r2, sp, #156	; 0x9c
 800937c:	f001 ff10 	bl	800b1a0 <__ssprint_r>
 8009380:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009382:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8009384:	89ab      	ldrh	r3, [r5, #12]
 8009386:	0659      	lsls	r1, r3, #25
 8009388:	d501      	bpl.n	800938e <_svfprintf_r+0xf3e>
 800938a:	2001      	movs	r0, #1
 800938c:	4240      	negs	r0, r0
 800938e:	b045      	add	sp, #276	; 0x114
 8009390:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009392:	46c0      	nop			; (mov r8, r8)
 8009394:	46c0      	nop			; (mov r8, r8)
 8009396:	46c0      	nop			; (mov r8, r8)
	...
 80093a0:	0800c378 	.word	0x0800c378
 80093a4:	0800c3bc 	.word	0x0800c3bc

080093a8 <_sbrk>:
 80093a8:	4b09      	ldr	r3, [pc, #36]	; (80093d0 <_sbrk+0x28>)
 80093aa:	681a      	ldr	r2, [r3, #0]
 80093ac:	2a00      	cmp	r2, #0
 80093ae:	d101      	bne.n	80093b4 <_sbrk+0xc>
 80093b0:	4a08      	ldr	r2, [pc, #32]	; (80093d4 <_sbrk+0x2c>)
 80093b2:	601a      	str	r2, [r3, #0]
 80093b4:	681a      	ldr	r2, [r3, #0]
 80093b6:	4669      	mov	r1, sp
 80093b8:	1810      	adds	r0, r2, r0
 80093ba:	4288      	cmp	r0, r1
 80093bc:	d905      	bls.n	80093ca <_sbrk+0x22>
 80093be:	4b06      	ldr	r3, [pc, #24]	; (80093d8 <_sbrk+0x30>)
 80093c0:	220c      	movs	r2, #12
 80093c2:	2001      	movs	r0, #1
 80093c4:	601a      	str	r2, [r3, #0]
 80093c6:	4240      	negs	r0, r0
 80093c8:	e001      	b.n	80093ce <_sbrk+0x26>
 80093ca:	6018      	str	r0, [r3, #0]
 80093cc:	1c10      	adds	r0, r2, #0
 80093ce:	4770      	bx	lr
 80093d0:	20000698 	.word	0x20000698
 80093d4:	20000a48 	.word	0x20000a48
 80093d8:	20000a44 	.word	0x20000a44

080093dc <quorem>:
 80093dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093de:	b089      	sub	sp, #36	; 0x24
 80093e0:	9106      	str	r1, [sp, #24]
 80093e2:	690b      	ldr	r3, [r1, #16]
 80093e4:	6901      	ldr	r1, [r0, #16]
 80093e6:	1c05      	adds	r5, r0, #0
 80093e8:	2600      	movs	r6, #0
 80093ea:	4299      	cmp	r1, r3
 80093ec:	db7f      	blt.n	80094ee <quorem+0x112>
 80093ee:	9c06      	ldr	r4, [sp, #24]
 80093f0:	1e5f      	subs	r7, r3, #1
 80093f2:	3414      	adds	r4, #20
 80093f4:	9404      	str	r4, [sp, #16]
 80093f6:	9904      	ldr	r1, [sp, #16]
 80093f8:	00bc      	lsls	r4, r7, #2
 80093fa:	1909      	adds	r1, r1, r4
 80093fc:	1c02      	adds	r2, r0, #0
 80093fe:	680b      	ldr	r3, [r1, #0]
 8009400:	3214      	adds	r2, #20
 8009402:	9105      	str	r1, [sp, #20]
 8009404:	1914      	adds	r4, r2, r4
 8009406:	1c19      	adds	r1, r3, #0
 8009408:	3101      	adds	r1, #1
 800940a:	6820      	ldr	r0, [r4, #0]
 800940c:	9203      	str	r2, [sp, #12]
 800940e:	f7f6 fe99 	bl	8000144 <__aeabi_uidiv>
 8009412:	9002      	str	r0, [sp, #8]
 8009414:	42b0      	cmp	r0, r6
 8009416:	d038      	beq.n	800948a <quorem+0xae>
 8009418:	9904      	ldr	r1, [sp, #16]
 800941a:	9b03      	ldr	r3, [sp, #12]
 800941c:	468c      	mov	ip, r1
 800941e:	9601      	str	r6, [sp, #4]
 8009420:	9607      	str	r6, [sp, #28]
 8009422:	4662      	mov	r2, ip
 8009424:	3204      	adds	r2, #4
 8009426:	4694      	mov	ip, r2
 8009428:	3a04      	subs	r2, #4
 800942a:	ca40      	ldmia	r2!, {r6}
 800942c:	9902      	ldr	r1, [sp, #8]
 800942e:	b2b0      	uxth	r0, r6
 8009430:	4348      	muls	r0, r1
 8009432:	0c31      	lsrs	r1, r6, #16
 8009434:	9e02      	ldr	r6, [sp, #8]
 8009436:	9a01      	ldr	r2, [sp, #4]
 8009438:	4371      	muls	r1, r6
 800943a:	1810      	adds	r0, r2, r0
 800943c:	0c02      	lsrs	r2, r0, #16
 800943e:	1851      	adds	r1, r2, r1
 8009440:	0c0a      	lsrs	r2, r1, #16
 8009442:	9201      	str	r2, [sp, #4]
 8009444:	681a      	ldr	r2, [r3, #0]
 8009446:	b280      	uxth	r0, r0
 8009448:	b296      	uxth	r6, r2
 800944a:	9a07      	ldr	r2, [sp, #28]
 800944c:	b289      	uxth	r1, r1
 800944e:	18b6      	adds	r6, r6, r2
 8009450:	1a30      	subs	r0, r6, r0
 8009452:	681e      	ldr	r6, [r3, #0]
 8009454:	0c32      	lsrs	r2, r6, #16
 8009456:	1a52      	subs	r2, r2, r1
 8009458:	1406      	asrs	r6, r0, #16
 800945a:	1992      	adds	r2, r2, r6
 800945c:	1411      	asrs	r1, r2, #16
 800945e:	b280      	uxth	r0, r0
 8009460:	0412      	lsls	r2, r2, #16
 8009462:	9e05      	ldr	r6, [sp, #20]
 8009464:	4310      	orrs	r0, r2
 8009466:	9107      	str	r1, [sp, #28]
 8009468:	c301      	stmia	r3!, {r0}
 800946a:	4566      	cmp	r6, ip
 800946c:	d2d9      	bcs.n	8009422 <quorem+0x46>
 800946e:	6821      	ldr	r1, [r4, #0]
 8009470:	2900      	cmp	r1, #0
 8009472:	d10a      	bne.n	800948a <quorem+0xae>
 8009474:	9e03      	ldr	r6, [sp, #12]
 8009476:	3c04      	subs	r4, #4
 8009478:	42b4      	cmp	r4, r6
 800947a:	d801      	bhi.n	8009480 <quorem+0xa4>
 800947c:	612f      	str	r7, [r5, #16]
 800947e:	e004      	b.n	800948a <quorem+0xae>
 8009480:	6821      	ldr	r1, [r4, #0]
 8009482:	2900      	cmp	r1, #0
 8009484:	d1fa      	bne.n	800947c <quorem+0xa0>
 8009486:	3f01      	subs	r7, #1
 8009488:	e7f4      	b.n	8009474 <quorem+0x98>
 800948a:	1c28      	adds	r0, r5, #0
 800948c:	9906      	ldr	r1, [sp, #24]
 800948e:	f001 fc99 	bl	800adc4 <__mcmp>
 8009492:	2800      	cmp	r0, #0
 8009494:	db2a      	blt.n	80094ec <quorem+0x110>
 8009496:	9c02      	ldr	r4, [sp, #8]
 8009498:	9a03      	ldr	r2, [sp, #12]
 800949a:	3401      	adds	r4, #1
 800949c:	9b04      	ldr	r3, [sp, #16]
 800949e:	9402      	str	r4, [sp, #8]
 80094a0:	2400      	movs	r4, #0
 80094a2:	6811      	ldr	r1, [r2, #0]
 80094a4:	cb40      	ldmia	r3!, {r6}
 80094a6:	b288      	uxth	r0, r1
 80094a8:	1900      	adds	r0, r0, r4
 80094aa:	6814      	ldr	r4, [r2, #0]
 80094ac:	b2b1      	uxth	r1, r6
 80094ae:	1a40      	subs	r0, r0, r1
 80094b0:	0c36      	lsrs	r6, r6, #16
 80094b2:	0c21      	lsrs	r1, r4, #16
 80094b4:	1b89      	subs	r1, r1, r6
 80094b6:	1404      	asrs	r4, r0, #16
 80094b8:	1909      	adds	r1, r1, r4
 80094ba:	140c      	asrs	r4, r1, #16
 80094bc:	b280      	uxth	r0, r0
 80094be:	0409      	lsls	r1, r1, #16
 80094c0:	9e05      	ldr	r6, [sp, #20]
 80094c2:	4301      	orrs	r1, r0
 80094c4:	c202      	stmia	r2!, {r1}
 80094c6:	429e      	cmp	r6, r3
 80094c8:	d2eb      	bcs.n	80094a2 <quorem+0xc6>
 80094ca:	9c03      	ldr	r4, [sp, #12]
 80094cc:	00bb      	lsls	r3, r7, #2
 80094ce:	18e3      	adds	r3, r4, r3
 80094d0:	681e      	ldr	r6, [r3, #0]
 80094d2:	2e00      	cmp	r6, #0
 80094d4:	d10a      	bne.n	80094ec <quorem+0x110>
 80094d6:	9c03      	ldr	r4, [sp, #12]
 80094d8:	3b04      	subs	r3, #4
 80094da:	42a3      	cmp	r3, r4
 80094dc:	d801      	bhi.n	80094e2 <quorem+0x106>
 80094de:	612f      	str	r7, [r5, #16]
 80094e0:	e004      	b.n	80094ec <quorem+0x110>
 80094e2:	681e      	ldr	r6, [r3, #0]
 80094e4:	2e00      	cmp	r6, #0
 80094e6:	d1fa      	bne.n	80094de <quorem+0x102>
 80094e8:	3f01      	subs	r7, #1
 80094ea:	e7f4      	b.n	80094d6 <quorem+0xfa>
 80094ec:	9e02      	ldr	r6, [sp, #8]
 80094ee:	1c30      	adds	r0, r6, #0
 80094f0:	b009      	add	sp, #36	; 0x24
 80094f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094f4:	0000      	movs	r0, r0
	...

080094f8 <_dtoa_r>:
 80094f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80094fa:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80094fc:	b09b      	sub	sp, #108	; 0x6c
 80094fe:	9007      	str	r0, [sp, #28]
 8009500:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 8009502:	9204      	str	r2, [sp, #16]
 8009504:	9305      	str	r3, [sp, #20]
 8009506:	2c00      	cmp	r4, #0
 8009508:	d108      	bne.n	800951c <_dtoa_r+0x24>
 800950a:	2010      	movs	r0, #16
 800950c:	f7fd fe40 	bl	8007190 <malloc>
 8009510:	9907      	ldr	r1, [sp, #28]
 8009512:	6248      	str	r0, [r1, #36]	; 0x24
 8009514:	6044      	str	r4, [r0, #4]
 8009516:	6084      	str	r4, [r0, #8]
 8009518:	6004      	str	r4, [r0, #0]
 800951a:	60c4      	str	r4, [r0, #12]
 800951c:	9c07      	ldr	r4, [sp, #28]
 800951e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009520:	6819      	ldr	r1, [r3, #0]
 8009522:	2900      	cmp	r1, #0
 8009524:	d00a      	beq.n	800953c <_dtoa_r+0x44>
 8009526:	685b      	ldr	r3, [r3, #4]
 8009528:	2201      	movs	r2, #1
 800952a:	409a      	lsls	r2, r3
 800952c:	604b      	str	r3, [r1, #4]
 800952e:	608a      	str	r2, [r1, #8]
 8009530:	1c20      	adds	r0, r4, #0
 8009532:	f001 fa2a 	bl	800a98a <_Bfree>
 8009536:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009538:	2200      	movs	r2, #0
 800953a:	601a      	str	r2, [r3, #0]
 800953c:	9805      	ldr	r0, [sp, #20]
 800953e:	2800      	cmp	r0, #0
 8009540:	da05      	bge.n	800954e <_dtoa_r+0x56>
 8009542:	2301      	movs	r3, #1
 8009544:	602b      	str	r3, [r5, #0]
 8009546:	0043      	lsls	r3, r0, #1
 8009548:	085b      	lsrs	r3, r3, #1
 800954a:	9305      	str	r3, [sp, #20]
 800954c:	e001      	b.n	8009552 <_dtoa_r+0x5a>
 800954e:	2300      	movs	r3, #0
 8009550:	602b      	str	r3, [r5, #0]
 8009552:	9e05      	ldr	r6, [sp, #20]
 8009554:	4bbe      	ldr	r3, [pc, #760]	; (8009850 <_dtoa_r+0x358>)
 8009556:	1c32      	adds	r2, r6, #0
 8009558:	401a      	ands	r2, r3
 800955a:	429a      	cmp	r2, r3
 800955c:	d118      	bne.n	8009590 <_dtoa_r+0x98>
 800955e:	4bbd      	ldr	r3, [pc, #756]	; (8009854 <_dtoa_r+0x35c>)
 8009560:	9c22      	ldr	r4, [sp, #136]	; 0x88
 8009562:	9d04      	ldr	r5, [sp, #16]
 8009564:	6023      	str	r3, [r4, #0]
 8009566:	2d00      	cmp	r5, #0
 8009568:	d101      	bne.n	800956e <_dtoa_r+0x76>
 800956a:	0336      	lsls	r6, r6, #12
 800956c:	d001      	beq.n	8009572 <_dtoa_r+0x7a>
 800956e:	48ba      	ldr	r0, [pc, #744]	; (8009858 <_dtoa_r+0x360>)
 8009570:	e000      	b.n	8009574 <_dtoa_r+0x7c>
 8009572:	48ba      	ldr	r0, [pc, #744]	; (800985c <_dtoa_r+0x364>)
 8009574:	9c24      	ldr	r4, [sp, #144]	; 0x90
 8009576:	2c00      	cmp	r4, #0
 8009578:	d101      	bne.n	800957e <_dtoa_r+0x86>
 800957a:	f000 fd93 	bl	800a0a4 <_dtoa_r+0xbac>
 800957e:	78c2      	ldrb	r2, [r0, #3]
 8009580:	1cc3      	adds	r3, r0, #3
 8009582:	2a00      	cmp	r2, #0
 8009584:	d000      	beq.n	8009588 <_dtoa_r+0x90>
 8009586:	3305      	adds	r3, #5
 8009588:	9d24      	ldr	r5, [sp, #144]	; 0x90
 800958a:	602b      	str	r3, [r5, #0]
 800958c:	f000 fd8a 	bl	800a0a4 <_dtoa_r+0xbac>
 8009590:	9c04      	ldr	r4, [sp, #16]
 8009592:	9d05      	ldr	r5, [sp, #20]
 8009594:	4ba5      	ldr	r3, [pc, #660]	; (800982c <_dtoa_r+0x334>)
 8009596:	4aa4      	ldr	r2, [pc, #656]	; (8009828 <_dtoa_r+0x330>)
 8009598:	1c20      	adds	r0, r4, #0
 800959a:	1c29      	adds	r1, r5, #0
 800959c:	f7f6 fe92 	bl	80002c4 <__aeabi_dcmpeq>
 80095a0:	1e07      	subs	r7, r0, #0
 80095a2:	d00c      	beq.n	80095be <_dtoa_r+0xc6>
 80095a4:	9c22      	ldr	r4, [sp, #136]	; 0x88
 80095a6:	9d24      	ldr	r5, [sp, #144]	; 0x90
 80095a8:	2301      	movs	r3, #1
 80095aa:	6023      	str	r3, [r4, #0]
 80095ac:	2d00      	cmp	r5, #0
 80095ae:	d101      	bne.n	80095b4 <_dtoa_r+0xbc>
 80095b0:	f000 fd75 	bl	800a09e <_dtoa_r+0xba6>
 80095b4:	48aa      	ldr	r0, [pc, #680]	; (8009860 <_dtoa_r+0x368>)
 80095b6:	6028      	str	r0, [r5, #0]
 80095b8:	3801      	subs	r0, #1
 80095ba:	f000 fd73 	bl	800a0a4 <_dtoa_r+0xbac>
 80095be:	ab19      	add	r3, sp, #100	; 0x64
 80095c0:	9300      	str	r3, [sp, #0]
 80095c2:	ab18      	add	r3, sp, #96	; 0x60
 80095c4:	9301      	str	r3, [sp, #4]
 80095c6:	9807      	ldr	r0, [sp, #28]
 80095c8:	1c2b      	adds	r3, r5, #0
 80095ca:	1c22      	adds	r2, r4, #0
 80095cc:	f001 fcf0 	bl	800afb0 <__d2b>
 80095d0:	0073      	lsls	r3, r6, #1
 80095d2:	900a      	str	r0, [sp, #40]	; 0x28
 80095d4:	0d5b      	lsrs	r3, r3, #21
 80095d6:	d009      	beq.n	80095ec <_dtoa_r+0xf4>
 80095d8:	1c20      	adds	r0, r4, #0
 80095da:	4ca2      	ldr	r4, [pc, #648]	; (8009864 <_dtoa_r+0x36c>)
 80095dc:	032a      	lsls	r2, r5, #12
 80095de:	0b12      	lsrs	r2, r2, #12
 80095e0:	1c21      	adds	r1, r4, #0
 80095e2:	4311      	orrs	r1, r2
 80095e4:	4aa0      	ldr	r2, [pc, #640]	; (8009868 <_dtoa_r+0x370>)
 80095e6:	9716      	str	r7, [sp, #88]	; 0x58
 80095e8:	189e      	adds	r6, r3, r2
 80095ea:	e01b      	b.n	8009624 <_dtoa_r+0x12c>
 80095ec:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80095ee:	9c19      	ldr	r4, [sp, #100]	; 0x64
 80095f0:	191d      	adds	r5, r3, r4
 80095f2:	4b9e      	ldr	r3, [pc, #632]	; (800986c <_dtoa_r+0x374>)
 80095f4:	429d      	cmp	r5, r3
 80095f6:	db09      	blt.n	800960c <_dtoa_r+0x114>
 80095f8:	499d      	ldr	r1, [pc, #628]	; (8009870 <_dtoa_r+0x378>)
 80095fa:	9a04      	ldr	r2, [sp, #16]
 80095fc:	4b9d      	ldr	r3, [pc, #628]	; (8009874 <_dtoa_r+0x37c>)
 80095fe:	1868      	adds	r0, r5, r1
 8009600:	40c2      	lsrs	r2, r0
 8009602:	1b5b      	subs	r3, r3, r5
 8009604:	1c10      	adds	r0, r2, #0
 8009606:	409e      	lsls	r6, r3
 8009608:	4330      	orrs	r0, r6
 800960a:	e004      	b.n	8009616 <_dtoa_r+0x11e>
 800960c:	489a      	ldr	r0, [pc, #616]	; (8009878 <_dtoa_r+0x380>)
 800960e:	9b04      	ldr	r3, [sp, #16]
 8009610:	1b40      	subs	r0, r0, r5
 8009612:	4083      	lsls	r3, r0
 8009614:	1c18      	adds	r0, r3, #0
 8009616:	f7f9 fa31 	bl	8002a7c <__aeabi_ui2d>
 800961a:	4c98      	ldr	r4, [pc, #608]	; (800987c <_dtoa_r+0x384>)
 800961c:	1e6e      	subs	r6, r5, #1
 800961e:	2501      	movs	r5, #1
 8009620:	1909      	adds	r1, r1, r4
 8009622:	9516      	str	r5, [sp, #88]	; 0x58
 8009624:	4a82      	ldr	r2, [pc, #520]	; (8009830 <_dtoa_r+0x338>)
 8009626:	4b83      	ldr	r3, [pc, #524]	; (8009834 <_dtoa_r+0x33c>)
 8009628:	f7f8 fe8c 	bl	8002344 <__aeabi_dsub>
 800962c:	4a82      	ldr	r2, [pc, #520]	; (8009838 <_dtoa_r+0x340>)
 800962e:	4b83      	ldr	r3, [pc, #524]	; (800983c <_dtoa_r+0x344>)
 8009630:	f7f8 fbf8 	bl	8001e24 <__aeabi_dmul>
 8009634:	4a82      	ldr	r2, [pc, #520]	; (8009840 <_dtoa_r+0x348>)
 8009636:	4b83      	ldr	r3, [pc, #524]	; (8009844 <_dtoa_r+0x34c>)
 8009638:	f7f7 fc6e 	bl	8000f18 <__aeabi_dadd>
 800963c:	1c04      	adds	r4, r0, #0
 800963e:	1c30      	adds	r0, r6, #0
 8009640:	1c0d      	adds	r5, r1, #0
 8009642:	f7f9 f9dd 	bl	8002a00 <__aeabi_i2d>
 8009646:	4a80      	ldr	r2, [pc, #512]	; (8009848 <_dtoa_r+0x350>)
 8009648:	4b80      	ldr	r3, [pc, #512]	; (800984c <_dtoa_r+0x354>)
 800964a:	f7f8 fbeb 	bl	8001e24 <__aeabi_dmul>
 800964e:	1c02      	adds	r2, r0, #0
 8009650:	1c0b      	adds	r3, r1, #0
 8009652:	1c20      	adds	r0, r4, #0
 8009654:	1c29      	adds	r1, r5, #0
 8009656:	f7f7 fc5f 	bl	8000f18 <__aeabi_dadd>
 800965a:	1c04      	adds	r4, r0, #0
 800965c:	1c0d      	adds	r5, r1, #0
 800965e:	f7f9 f99b 	bl	8002998 <__aeabi_d2iz>
 8009662:	4b72      	ldr	r3, [pc, #456]	; (800982c <_dtoa_r+0x334>)
 8009664:	4a70      	ldr	r2, [pc, #448]	; (8009828 <_dtoa_r+0x330>)
 8009666:	9006      	str	r0, [sp, #24]
 8009668:	1c29      	adds	r1, r5, #0
 800966a:	1c20      	adds	r0, r4, #0
 800966c:	f7f6 fe30 	bl	80002d0 <__aeabi_dcmplt>
 8009670:	2800      	cmp	r0, #0
 8009672:	d00d      	beq.n	8009690 <_dtoa_r+0x198>
 8009674:	9806      	ldr	r0, [sp, #24]
 8009676:	f7f9 f9c3 	bl	8002a00 <__aeabi_i2d>
 800967a:	1c0b      	adds	r3, r1, #0
 800967c:	1c02      	adds	r2, r0, #0
 800967e:	1c29      	adds	r1, r5, #0
 8009680:	1c20      	adds	r0, r4, #0
 8009682:	f7f6 fe1f 	bl	80002c4 <__aeabi_dcmpeq>
 8009686:	9c06      	ldr	r4, [sp, #24]
 8009688:	4243      	negs	r3, r0
 800968a:	4143      	adcs	r3, r0
 800968c:	1ae4      	subs	r4, r4, r3
 800968e:	9406      	str	r4, [sp, #24]
 8009690:	9c06      	ldr	r4, [sp, #24]
 8009692:	2501      	movs	r5, #1
 8009694:	9513      	str	r5, [sp, #76]	; 0x4c
 8009696:	2c16      	cmp	r4, #22
 8009698:	d810      	bhi.n	80096bc <_dtoa_r+0x1c4>
 800969a:	4a79      	ldr	r2, [pc, #484]	; (8009880 <_dtoa_r+0x388>)
 800969c:	00e3      	lsls	r3, r4, #3
 800969e:	18d3      	adds	r3, r2, r3
 80096a0:	6818      	ldr	r0, [r3, #0]
 80096a2:	6859      	ldr	r1, [r3, #4]
 80096a4:	9a04      	ldr	r2, [sp, #16]
 80096a6:	9b05      	ldr	r3, [sp, #20]
 80096a8:	f7f6 fe26 	bl	80002f8 <__aeabi_dcmpgt>
 80096ac:	2800      	cmp	r0, #0
 80096ae:	d004      	beq.n	80096ba <_dtoa_r+0x1c2>
 80096b0:	3c01      	subs	r4, #1
 80096b2:	2500      	movs	r5, #0
 80096b4:	9406      	str	r4, [sp, #24]
 80096b6:	9513      	str	r5, [sp, #76]	; 0x4c
 80096b8:	e000      	b.n	80096bc <_dtoa_r+0x1c4>
 80096ba:	9013      	str	r0, [sp, #76]	; 0x4c
 80096bc:	9818      	ldr	r0, [sp, #96]	; 0x60
 80096be:	2400      	movs	r4, #0
 80096c0:	1b86      	subs	r6, r0, r6
 80096c2:	1c35      	adds	r5, r6, #0
 80096c4:	9402      	str	r4, [sp, #8]
 80096c6:	3d01      	subs	r5, #1
 80096c8:	9509      	str	r5, [sp, #36]	; 0x24
 80096ca:	d504      	bpl.n	80096d6 <_dtoa_r+0x1de>
 80096cc:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80096ce:	2500      	movs	r5, #0
 80096d0:	4264      	negs	r4, r4
 80096d2:	9402      	str	r4, [sp, #8]
 80096d4:	9509      	str	r5, [sp, #36]	; 0x24
 80096d6:	9c06      	ldr	r4, [sp, #24]
 80096d8:	2c00      	cmp	r4, #0
 80096da:	db06      	blt.n	80096ea <_dtoa_r+0x1f2>
 80096dc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80096de:	9412      	str	r4, [sp, #72]	; 0x48
 80096e0:	192d      	adds	r5, r5, r4
 80096e2:	2400      	movs	r4, #0
 80096e4:	9509      	str	r5, [sp, #36]	; 0x24
 80096e6:	940d      	str	r4, [sp, #52]	; 0x34
 80096e8:	e007      	b.n	80096fa <_dtoa_r+0x202>
 80096ea:	9c06      	ldr	r4, [sp, #24]
 80096ec:	9d02      	ldr	r5, [sp, #8]
 80096ee:	1b2d      	subs	r5, r5, r4
 80096f0:	9502      	str	r5, [sp, #8]
 80096f2:	4265      	negs	r5, r4
 80096f4:	2400      	movs	r4, #0
 80096f6:	950d      	str	r5, [sp, #52]	; 0x34
 80096f8:	9412      	str	r4, [sp, #72]	; 0x48
 80096fa:	9d20      	ldr	r5, [sp, #128]	; 0x80
 80096fc:	2401      	movs	r4, #1
 80096fe:	2d09      	cmp	r5, #9
 8009700:	d824      	bhi.n	800974c <_dtoa_r+0x254>
 8009702:	2d05      	cmp	r5, #5
 8009704:	dd02      	ble.n	800970c <_dtoa_r+0x214>
 8009706:	3d04      	subs	r5, #4
 8009708:	9520      	str	r5, [sp, #128]	; 0x80
 800970a:	2400      	movs	r4, #0
 800970c:	9820      	ldr	r0, [sp, #128]	; 0x80
 800970e:	3802      	subs	r0, #2
 8009710:	2803      	cmp	r0, #3
 8009712:	d823      	bhi.n	800975c <_dtoa_r+0x264>
 8009714:	f7f6 fd02 	bl	800011c <__gnu_thumb1_case_uqi>
 8009718:	04020e06 	.word	0x04020e06
 800971c:	2501      	movs	r5, #1
 800971e:	e002      	b.n	8009726 <_dtoa_r+0x22e>
 8009720:	2501      	movs	r5, #1
 8009722:	e008      	b.n	8009736 <_dtoa_r+0x23e>
 8009724:	2500      	movs	r5, #0
 8009726:	9510      	str	r5, [sp, #64]	; 0x40
 8009728:	9d21      	ldr	r5, [sp, #132]	; 0x84
 800972a:	2d00      	cmp	r5, #0
 800972c:	dd1f      	ble.n	800976e <_dtoa_r+0x276>
 800972e:	950c      	str	r5, [sp, #48]	; 0x30
 8009730:	9508      	str	r5, [sp, #32]
 8009732:	e009      	b.n	8009748 <_dtoa_r+0x250>
 8009734:	2500      	movs	r5, #0
 8009736:	9510      	str	r5, [sp, #64]	; 0x40
 8009738:	9806      	ldr	r0, [sp, #24]
 800973a:	9d21      	ldr	r5, [sp, #132]	; 0x84
 800973c:	182d      	adds	r5, r5, r0
 800973e:	950c      	str	r5, [sp, #48]	; 0x30
 8009740:	3501      	adds	r5, #1
 8009742:	9508      	str	r5, [sp, #32]
 8009744:	2d00      	cmp	r5, #0
 8009746:	dd18      	ble.n	800977a <_dtoa_r+0x282>
 8009748:	1c2b      	adds	r3, r5, #0
 800974a:	e017      	b.n	800977c <_dtoa_r+0x284>
 800974c:	4263      	negs	r3, r4
 800974e:	2500      	movs	r5, #0
 8009750:	930c      	str	r3, [sp, #48]	; 0x30
 8009752:	9308      	str	r3, [sp, #32]
 8009754:	9520      	str	r5, [sp, #128]	; 0x80
 8009756:	9410      	str	r4, [sp, #64]	; 0x40
 8009758:	2312      	movs	r3, #18
 800975a:	e006      	b.n	800976a <_dtoa_r+0x272>
 800975c:	2501      	movs	r5, #1
 800975e:	426b      	negs	r3, r5
 8009760:	9510      	str	r5, [sp, #64]	; 0x40
 8009762:	930c      	str	r3, [sp, #48]	; 0x30
 8009764:	9308      	str	r3, [sp, #32]
 8009766:	2500      	movs	r5, #0
 8009768:	2312      	movs	r3, #18
 800976a:	9521      	str	r5, [sp, #132]	; 0x84
 800976c:	e006      	b.n	800977c <_dtoa_r+0x284>
 800976e:	2501      	movs	r5, #1
 8009770:	950c      	str	r5, [sp, #48]	; 0x30
 8009772:	9508      	str	r5, [sp, #32]
 8009774:	1c2b      	adds	r3, r5, #0
 8009776:	9521      	str	r5, [sp, #132]	; 0x84
 8009778:	e000      	b.n	800977c <_dtoa_r+0x284>
 800977a:	2301      	movs	r3, #1
 800977c:	9807      	ldr	r0, [sp, #28]
 800977e:	2200      	movs	r2, #0
 8009780:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009782:	606a      	str	r2, [r5, #4]
 8009784:	2204      	movs	r2, #4
 8009786:	1c10      	adds	r0, r2, #0
 8009788:	3014      	adds	r0, #20
 800978a:	6869      	ldr	r1, [r5, #4]
 800978c:	4298      	cmp	r0, r3
 800978e:	d803      	bhi.n	8009798 <_dtoa_r+0x2a0>
 8009790:	3101      	adds	r1, #1
 8009792:	6069      	str	r1, [r5, #4]
 8009794:	0052      	lsls	r2, r2, #1
 8009796:	e7f6      	b.n	8009786 <_dtoa_r+0x28e>
 8009798:	9807      	ldr	r0, [sp, #28]
 800979a:	f001 f8be 	bl	800a91a <_Balloc>
 800979e:	6028      	str	r0, [r5, #0]
 80097a0:	9d07      	ldr	r5, [sp, #28]
 80097a2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80097a4:	9d08      	ldr	r5, [sp, #32]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80097aa:	2d0e      	cmp	r5, #14
 80097ac:	d900      	bls.n	80097b0 <_dtoa_r+0x2b8>
 80097ae:	e187      	b.n	8009ac0 <_dtoa_r+0x5c8>
 80097b0:	2c00      	cmp	r4, #0
 80097b2:	d100      	bne.n	80097b6 <_dtoa_r+0x2be>
 80097b4:	e184      	b.n	8009ac0 <_dtoa_r+0x5c8>
 80097b6:	9c04      	ldr	r4, [sp, #16]
 80097b8:	9d05      	ldr	r5, [sp, #20]
 80097ba:	9414      	str	r4, [sp, #80]	; 0x50
 80097bc:	9515      	str	r5, [sp, #84]	; 0x54
 80097be:	9d06      	ldr	r5, [sp, #24]
 80097c0:	2d00      	cmp	r5, #0
 80097c2:	dd61      	ble.n	8009888 <_dtoa_r+0x390>
 80097c4:	1c2a      	adds	r2, r5, #0
 80097c6:	230f      	movs	r3, #15
 80097c8:	401a      	ands	r2, r3
 80097ca:	492d      	ldr	r1, [pc, #180]	; (8009880 <_dtoa_r+0x388>)
 80097cc:	00d2      	lsls	r2, r2, #3
 80097ce:	188a      	adds	r2, r1, r2
 80097d0:	6814      	ldr	r4, [r2, #0]
 80097d2:	6855      	ldr	r5, [r2, #4]
 80097d4:	940e      	str	r4, [sp, #56]	; 0x38
 80097d6:	950f      	str	r5, [sp, #60]	; 0x3c
 80097d8:	9d06      	ldr	r5, [sp, #24]
 80097da:	4c2a      	ldr	r4, [pc, #168]	; (8009884 <_dtoa_r+0x38c>)
 80097dc:	112f      	asrs	r7, r5, #4
 80097de:	2502      	movs	r5, #2
 80097e0:	06f8      	lsls	r0, r7, #27
 80097e2:	d517      	bpl.n	8009814 <_dtoa_r+0x31c>
 80097e4:	401f      	ands	r7, r3
 80097e6:	9814      	ldr	r0, [sp, #80]	; 0x50
 80097e8:	9915      	ldr	r1, [sp, #84]	; 0x54
 80097ea:	6a22      	ldr	r2, [r4, #32]
 80097ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80097ee:	f7f7 feaf 	bl	8001550 <__aeabi_ddiv>
 80097f2:	2503      	movs	r5, #3
 80097f4:	9004      	str	r0, [sp, #16]
 80097f6:	9105      	str	r1, [sp, #20]
 80097f8:	e00c      	b.n	8009814 <_dtoa_r+0x31c>
 80097fa:	07f9      	lsls	r1, r7, #31
 80097fc:	d508      	bpl.n	8009810 <_dtoa_r+0x318>
 80097fe:	980e      	ldr	r0, [sp, #56]	; 0x38
 8009800:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009802:	6822      	ldr	r2, [r4, #0]
 8009804:	6863      	ldr	r3, [r4, #4]
 8009806:	f7f8 fb0d 	bl	8001e24 <__aeabi_dmul>
 800980a:	900e      	str	r0, [sp, #56]	; 0x38
 800980c:	910f      	str	r1, [sp, #60]	; 0x3c
 800980e:	3501      	adds	r5, #1
 8009810:	107f      	asrs	r7, r7, #1
 8009812:	3408      	adds	r4, #8
 8009814:	2f00      	cmp	r7, #0
 8009816:	d1f0      	bne.n	80097fa <_dtoa_r+0x302>
 8009818:	9804      	ldr	r0, [sp, #16]
 800981a:	9905      	ldr	r1, [sp, #20]
 800981c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800981e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009820:	f7f7 fe96 	bl	8001550 <__aeabi_ddiv>
 8009824:	e04e      	b.n	80098c4 <_dtoa_r+0x3cc>
 8009826:	46c0      	nop			; (mov r8, r8)
	...
 8009834:	3ff80000 	.word	0x3ff80000
 8009838:	636f4361 	.word	0x636f4361
 800983c:	3fd287a7 	.word	0x3fd287a7
 8009840:	8b60c8b3 	.word	0x8b60c8b3
 8009844:	3fc68a28 	.word	0x3fc68a28
 8009848:	509f79fb 	.word	0x509f79fb
 800984c:	3fd34413 	.word	0x3fd34413
 8009850:	7ff00000 	.word	0x7ff00000
 8009854:	0000270f 	.word	0x0000270f
 8009858:	0800c4d6 	.word	0x0800c4d6
 800985c:	0800c4cd 	.word	0x0800c4cd
 8009860:	0800c3bb 	.word	0x0800c3bb
 8009864:	3ff00000 	.word	0x3ff00000
 8009868:	fffffc01 	.word	0xfffffc01
 800986c:	fffffbef 	.word	0xfffffbef
 8009870:	00000412 	.word	0x00000412
 8009874:	fffffc0e 	.word	0xfffffc0e
 8009878:	fffffbee 	.word	0xfffffbee
 800987c:	fe100000 	.word	0xfe100000
 8009880:	0800c4e8 	.word	0x0800c4e8
 8009884:	0800c5b0 	.word	0x0800c5b0
 8009888:	9c06      	ldr	r4, [sp, #24]
 800988a:	2502      	movs	r5, #2
 800988c:	4267      	negs	r7, r4
 800988e:	2f00      	cmp	r7, #0
 8009890:	d01a      	beq.n	80098c8 <_dtoa_r+0x3d0>
 8009892:	230f      	movs	r3, #15
 8009894:	403b      	ands	r3, r7
 8009896:	4acc      	ldr	r2, [pc, #816]	; (8009bc8 <_dtoa_r+0x6d0>)
 8009898:	00db      	lsls	r3, r3, #3
 800989a:	18d3      	adds	r3, r2, r3
 800989c:	9814      	ldr	r0, [sp, #80]	; 0x50
 800989e:	9915      	ldr	r1, [sp, #84]	; 0x54
 80098a0:	681a      	ldr	r2, [r3, #0]
 80098a2:	685b      	ldr	r3, [r3, #4]
 80098a4:	f7f8 fabe 	bl	8001e24 <__aeabi_dmul>
 80098a8:	4ec8      	ldr	r6, [pc, #800]	; (8009bcc <_dtoa_r+0x6d4>)
 80098aa:	113f      	asrs	r7, r7, #4
 80098ac:	2f00      	cmp	r7, #0
 80098ae:	d009      	beq.n	80098c4 <_dtoa_r+0x3cc>
 80098b0:	07fa      	lsls	r2, r7, #31
 80098b2:	d504      	bpl.n	80098be <_dtoa_r+0x3c6>
 80098b4:	6832      	ldr	r2, [r6, #0]
 80098b6:	6873      	ldr	r3, [r6, #4]
 80098b8:	3501      	adds	r5, #1
 80098ba:	f7f8 fab3 	bl	8001e24 <__aeabi_dmul>
 80098be:	107f      	asrs	r7, r7, #1
 80098c0:	3608      	adds	r6, #8
 80098c2:	e7f3      	b.n	80098ac <_dtoa_r+0x3b4>
 80098c4:	9004      	str	r0, [sp, #16]
 80098c6:	9105      	str	r1, [sp, #20]
 80098c8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80098ca:	2c00      	cmp	r4, #0
 80098cc:	d01e      	beq.n	800990c <_dtoa_r+0x414>
 80098ce:	9e04      	ldr	r6, [sp, #16]
 80098d0:	9f05      	ldr	r7, [sp, #20]
 80098d2:	4bb4      	ldr	r3, [pc, #720]	; (8009ba4 <_dtoa_r+0x6ac>)
 80098d4:	4ab2      	ldr	r2, [pc, #712]	; (8009ba0 <_dtoa_r+0x6a8>)
 80098d6:	1c30      	adds	r0, r6, #0
 80098d8:	1c39      	adds	r1, r7, #0
 80098da:	f7f6 fcf9 	bl	80002d0 <__aeabi_dcmplt>
 80098de:	2800      	cmp	r0, #0
 80098e0:	d014      	beq.n	800990c <_dtoa_r+0x414>
 80098e2:	9c08      	ldr	r4, [sp, #32]
 80098e4:	2c00      	cmp	r4, #0
 80098e6:	d011      	beq.n	800990c <_dtoa_r+0x414>
 80098e8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80098ea:	2c00      	cmp	r4, #0
 80098ec:	dc00      	bgt.n	80098f0 <_dtoa_r+0x3f8>
 80098ee:	e0e3      	b.n	8009ab8 <_dtoa_r+0x5c0>
 80098f0:	9c06      	ldr	r4, [sp, #24]
 80098f2:	1c30      	adds	r0, r6, #0
 80098f4:	3c01      	subs	r4, #1
 80098f6:	1c39      	adds	r1, r7, #0
 80098f8:	4aab      	ldr	r2, [pc, #684]	; (8009ba8 <_dtoa_r+0x6b0>)
 80098fa:	4bac      	ldr	r3, [pc, #688]	; (8009bac <_dtoa_r+0x6b4>)
 80098fc:	9411      	str	r4, [sp, #68]	; 0x44
 80098fe:	f7f8 fa91 	bl	8001e24 <__aeabi_dmul>
 8009902:	3501      	adds	r5, #1
 8009904:	9004      	str	r0, [sp, #16]
 8009906:	9105      	str	r1, [sp, #20]
 8009908:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800990a:	e002      	b.n	8009912 <_dtoa_r+0x41a>
 800990c:	9c06      	ldr	r4, [sp, #24]
 800990e:	9411      	str	r4, [sp, #68]	; 0x44
 8009910:	9c08      	ldr	r4, [sp, #32]
 8009912:	1c28      	adds	r0, r5, #0
 8009914:	9e04      	ldr	r6, [sp, #16]
 8009916:	9f05      	ldr	r7, [sp, #20]
 8009918:	940e      	str	r4, [sp, #56]	; 0x38
 800991a:	f7f9 f871 	bl	8002a00 <__aeabi_i2d>
 800991e:	1c32      	adds	r2, r6, #0
 8009920:	1c3b      	adds	r3, r7, #0
 8009922:	f7f8 fa7f 	bl	8001e24 <__aeabi_dmul>
 8009926:	4aa2      	ldr	r2, [pc, #648]	; (8009bb0 <_dtoa_r+0x6b8>)
 8009928:	4ba2      	ldr	r3, [pc, #648]	; (8009bb4 <_dtoa_r+0x6bc>)
 800992a:	f7f7 faf5 	bl	8000f18 <__aeabi_dadd>
 800992e:	1c04      	adds	r4, r0, #0
 8009930:	48a7      	ldr	r0, [pc, #668]	; (8009bd0 <_dtoa_r+0x6d8>)
 8009932:	1808      	adds	r0, r1, r0
 8009934:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009936:	9004      	str	r0, [sp, #16]
 8009938:	1c05      	adds	r5, r0, #0
 800993a:	2900      	cmp	r1, #0
 800993c:	d11b      	bne.n	8009976 <_dtoa_r+0x47e>
 800993e:	4a9e      	ldr	r2, [pc, #632]	; (8009bb8 <_dtoa_r+0x6c0>)
 8009940:	4b9e      	ldr	r3, [pc, #632]	; (8009bbc <_dtoa_r+0x6c4>)
 8009942:	1c30      	adds	r0, r6, #0
 8009944:	1c39      	adds	r1, r7, #0
 8009946:	f7f8 fcfd 	bl	8002344 <__aeabi_dsub>
 800994a:	1c22      	adds	r2, r4, #0
 800994c:	9b04      	ldr	r3, [sp, #16]
 800994e:	1c06      	adds	r6, r0, #0
 8009950:	1c0f      	adds	r7, r1, #0
 8009952:	f7f6 fcd1 	bl	80002f8 <__aeabi_dcmpgt>
 8009956:	2800      	cmp	r0, #0
 8009958:	d000      	beq.n	800995c <_dtoa_r+0x464>
 800995a:	e25c      	b.n	8009e16 <_dtoa_r+0x91e>
 800995c:	1c22      	adds	r2, r4, #0
 800995e:	2580      	movs	r5, #128	; 0x80
 8009960:	9c04      	ldr	r4, [sp, #16]
 8009962:	062d      	lsls	r5, r5, #24
 8009964:	1c30      	adds	r0, r6, #0
 8009966:	1c39      	adds	r1, r7, #0
 8009968:	1963      	adds	r3, r4, r5
 800996a:	f7f6 fcb1 	bl	80002d0 <__aeabi_dcmplt>
 800996e:	2800      	cmp	r0, #0
 8009970:	d000      	beq.n	8009974 <_dtoa_r+0x47c>
 8009972:	e247      	b.n	8009e04 <_dtoa_r+0x90c>
 8009974:	e0a0      	b.n	8009ab8 <_dtoa_r+0x5c0>
 8009976:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009978:	4b93      	ldr	r3, [pc, #588]	; (8009bc8 <_dtoa_r+0x6d0>)
 800997a:	3a01      	subs	r2, #1
 800997c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800997e:	00d2      	lsls	r2, r2, #3
 8009980:	189b      	adds	r3, r3, r2
 8009982:	2800      	cmp	r0, #0
 8009984:	d049      	beq.n	8009a1a <_dtoa_r+0x522>
 8009986:	681a      	ldr	r2, [r3, #0]
 8009988:	685b      	ldr	r3, [r3, #4]
 800998a:	488d      	ldr	r0, [pc, #564]	; (8009bc0 <_dtoa_r+0x6c8>)
 800998c:	498d      	ldr	r1, [pc, #564]	; (8009bc4 <_dtoa_r+0x6cc>)
 800998e:	f7f7 fddf 	bl	8001550 <__aeabi_ddiv>
 8009992:	1c2b      	adds	r3, r5, #0
 8009994:	1c22      	adds	r2, r4, #0
 8009996:	f7f8 fcd5 	bl	8002344 <__aeabi_dsub>
 800999a:	9004      	str	r0, [sp, #16]
 800999c:	9105      	str	r1, [sp, #20]
 800999e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80099a0:	1c39      	adds	r1, r7, #0
 80099a2:	1c30      	adds	r0, r6, #0
 80099a4:	f7f8 fff8 	bl	8002998 <__aeabi_d2iz>
 80099a8:	1c04      	adds	r4, r0, #0
 80099aa:	f7f9 f829 	bl	8002a00 <__aeabi_i2d>
 80099ae:	1c02      	adds	r2, r0, #0
 80099b0:	1c0b      	adds	r3, r1, #0
 80099b2:	1c30      	adds	r0, r6, #0
 80099b4:	1c39      	adds	r1, r7, #0
 80099b6:	f7f8 fcc5 	bl	8002344 <__aeabi_dsub>
 80099ba:	3501      	adds	r5, #1
 80099bc:	1e6b      	subs	r3, r5, #1
 80099be:	3430      	adds	r4, #48	; 0x30
 80099c0:	701c      	strb	r4, [r3, #0]
 80099c2:	9a04      	ldr	r2, [sp, #16]
 80099c4:	9b05      	ldr	r3, [sp, #20]
 80099c6:	1c06      	adds	r6, r0, #0
 80099c8:	1c0f      	adds	r7, r1, #0
 80099ca:	f7f6 fc81 	bl	80002d0 <__aeabi_dcmplt>
 80099ce:	2800      	cmp	r0, #0
 80099d0:	d000      	beq.n	80099d4 <_dtoa_r+0x4dc>
 80099d2:	e353      	b.n	800a07c <_dtoa_r+0xb84>
 80099d4:	1c32      	adds	r2, r6, #0
 80099d6:	1c3b      	adds	r3, r7, #0
 80099d8:	4972      	ldr	r1, [pc, #456]	; (8009ba4 <_dtoa_r+0x6ac>)
 80099da:	4871      	ldr	r0, [pc, #452]	; (8009ba0 <_dtoa_r+0x6a8>)
 80099dc:	f7f8 fcb2 	bl	8002344 <__aeabi_dsub>
 80099e0:	9a04      	ldr	r2, [sp, #16]
 80099e2:	9b05      	ldr	r3, [sp, #20]
 80099e4:	f7f6 fc74 	bl	80002d0 <__aeabi_dcmplt>
 80099e8:	2800      	cmp	r0, #0
 80099ea:	d000      	beq.n	80099ee <_dtoa_r+0x4f6>
 80099ec:	e0cb      	b.n	8009b86 <_dtoa_r+0x68e>
 80099ee:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80099f0:	1b2b      	subs	r3, r5, r4
 80099f2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80099f4:	42a3      	cmp	r3, r4
 80099f6:	da5f      	bge.n	8009ab8 <_dtoa_r+0x5c0>
 80099f8:	9804      	ldr	r0, [sp, #16]
 80099fa:	9905      	ldr	r1, [sp, #20]
 80099fc:	4a6a      	ldr	r2, [pc, #424]	; (8009ba8 <_dtoa_r+0x6b0>)
 80099fe:	4b6b      	ldr	r3, [pc, #428]	; (8009bac <_dtoa_r+0x6b4>)
 8009a00:	f7f8 fa10 	bl	8001e24 <__aeabi_dmul>
 8009a04:	4a68      	ldr	r2, [pc, #416]	; (8009ba8 <_dtoa_r+0x6b0>)
 8009a06:	4b69      	ldr	r3, [pc, #420]	; (8009bac <_dtoa_r+0x6b4>)
 8009a08:	9004      	str	r0, [sp, #16]
 8009a0a:	9105      	str	r1, [sp, #20]
 8009a0c:	1c30      	adds	r0, r6, #0
 8009a0e:	1c39      	adds	r1, r7, #0
 8009a10:	f7f8 fa08 	bl	8001e24 <__aeabi_dmul>
 8009a14:	1c06      	adds	r6, r0, #0
 8009a16:	1c0f      	adds	r7, r1, #0
 8009a18:	e7c2      	b.n	80099a0 <_dtoa_r+0x4a8>
 8009a1a:	6818      	ldr	r0, [r3, #0]
 8009a1c:	6859      	ldr	r1, [r3, #4]
 8009a1e:	1c22      	adds	r2, r4, #0
 8009a20:	1c2b      	adds	r3, r5, #0
 8009a22:	f7f8 f9ff 	bl	8001e24 <__aeabi_dmul>
 8009a26:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8009a28:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8009a2a:	9004      	str	r0, [sp, #16]
 8009a2c:	9105      	str	r1, [sp, #20]
 8009a2e:	1965      	adds	r5, r4, r5
 8009a30:	9517      	str	r5, [sp, #92]	; 0x5c
 8009a32:	1c39      	adds	r1, r7, #0
 8009a34:	1c30      	adds	r0, r6, #0
 8009a36:	f7f8 ffaf 	bl	8002998 <__aeabi_d2iz>
 8009a3a:	1c05      	adds	r5, r0, #0
 8009a3c:	f7f8 ffe0 	bl	8002a00 <__aeabi_i2d>
 8009a40:	1c02      	adds	r2, r0, #0
 8009a42:	1c0b      	adds	r3, r1, #0
 8009a44:	1c30      	adds	r0, r6, #0
 8009a46:	1c39      	adds	r1, r7, #0
 8009a48:	f7f8 fc7c 	bl	8002344 <__aeabi_dsub>
 8009a4c:	3530      	adds	r5, #48	; 0x30
 8009a4e:	7025      	strb	r5, [r4, #0]
 8009a50:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8009a52:	3401      	adds	r4, #1
 8009a54:	1c06      	adds	r6, r0, #0
 8009a56:	1c0f      	adds	r7, r1, #0
 8009a58:	42ac      	cmp	r4, r5
 8009a5a:	d126      	bne.n	8009aaa <_dtoa_r+0x5b2>
 8009a5c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8009a5e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8009a60:	4a57      	ldr	r2, [pc, #348]	; (8009bc0 <_dtoa_r+0x6c8>)
 8009a62:	4b58      	ldr	r3, [pc, #352]	; (8009bc4 <_dtoa_r+0x6cc>)
 8009a64:	1825      	adds	r5, r4, r0
 8009a66:	9804      	ldr	r0, [sp, #16]
 8009a68:	9905      	ldr	r1, [sp, #20]
 8009a6a:	f7f7 fa55 	bl	8000f18 <__aeabi_dadd>
 8009a6e:	1c02      	adds	r2, r0, #0
 8009a70:	1c0b      	adds	r3, r1, #0
 8009a72:	1c30      	adds	r0, r6, #0
 8009a74:	1c39      	adds	r1, r7, #0
 8009a76:	f7f6 fc3f 	bl	80002f8 <__aeabi_dcmpgt>
 8009a7a:	2800      	cmp	r0, #0
 8009a7c:	d000      	beq.n	8009a80 <_dtoa_r+0x588>
 8009a7e:	e082      	b.n	8009b86 <_dtoa_r+0x68e>
 8009a80:	9a04      	ldr	r2, [sp, #16]
 8009a82:	9b05      	ldr	r3, [sp, #20]
 8009a84:	484e      	ldr	r0, [pc, #312]	; (8009bc0 <_dtoa_r+0x6c8>)
 8009a86:	494f      	ldr	r1, [pc, #316]	; (8009bc4 <_dtoa_r+0x6cc>)
 8009a88:	f7f8 fc5c 	bl	8002344 <__aeabi_dsub>
 8009a8c:	1c02      	adds	r2, r0, #0
 8009a8e:	1c0b      	adds	r3, r1, #0
 8009a90:	1c30      	adds	r0, r6, #0
 8009a92:	1c39      	adds	r1, r7, #0
 8009a94:	f7f6 fc1c 	bl	80002d0 <__aeabi_dcmplt>
 8009a98:	2800      	cmp	r0, #0
 8009a9a:	d00d      	beq.n	8009ab8 <_dtoa_r+0x5c0>
 8009a9c:	1e6b      	subs	r3, r5, #1
 8009a9e:	781a      	ldrb	r2, [r3, #0]
 8009aa0:	2a30      	cmp	r2, #48	; 0x30
 8009aa2:	d000      	beq.n	8009aa6 <_dtoa_r+0x5ae>
 8009aa4:	e2ea      	b.n	800a07c <_dtoa_r+0xb84>
 8009aa6:	1c1d      	adds	r5, r3, #0
 8009aa8:	e7f8      	b.n	8009a9c <_dtoa_r+0x5a4>
 8009aaa:	4a3f      	ldr	r2, [pc, #252]	; (8009ba8 <_dtoa_r+0x6b0>)
 8009aac:	4b3f      	ldr	r3, [pc, #252]	; (8009bac <_dtoa_r+0x6b4>)
 8009aae:	f7f8 f9b9 	bl	8001e24 <__aeabi_dmul>
 8009ab2:	1c06      	adds	r6, r0, #0
 8009ab4:	1c0f      	adds	r7, r1, #0
 8009ab6:	e7bc      	b.n	8009a32 <_dtoa_r+0x53a>
 8009ab8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8009aba:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8009abc:	9404      	str	r4, [sp, #16]
 8009abe:	9505      	str	r5, [sp, #20]
 8009ac0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	da00      	bge.n	8009ac8 <_dtoa_r+0x5d0>
 8009ac6:	e09f      	b.n	8009c08 <_dtoa_r+0x710>
 8009ac8:	9d06      	ldr	r5, [sp, #24]
 8009aca:	2d0e      	cmp	r5, #14
 8009acc:	dd00      	ble.n	8009ad0 <_dtoa_r+0x5d8>
 8009ace:	e09b      	b.n	8009c08 <_dtoa_r+0x710>
 8009ad0:	4a3d      	ldr	r2, [pc, #244]	; (8009bc8 <_dtoa_r+0x6d0>)
 8009ad2:	00eb      	lsls	r3, r5, #3
 8009ad4:	18d3      	adds	r3, r2, r3
 8009ad6:	681c      	ldr	r4, [r3, #0]
 8009ad8:	685d      	ldr	r5, [r3, #4]
 8009ada:	9402      	str	r4, [sp, #8]
 8009adc:	9503      	str	r5, [sp, #12]
 8009ade:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8009ae0:	2d00      	cmp	r5, #0
 8009ae2:	da14      	bge.n	8009b0e <_dtoa_r+0x616>
 8009ae4:	9c08      	ldr	r4, [sp, #32]
 8009ae6:	2c00      	cmp	r4, #0
 8009ae8:	dc11      	bgt.n	8009b0e <_dtoa_r+0x616>
 8009aea:	d000      	beq.n	8009aee <_dtoa_r+0x5f6>
 8009aec:	e18c      	b.n	8009e08 <_dtoa_r+0x910>
 8009aee:	4a32      	ldr	r2, [pc, #200]	; (8009bb8 <_dtoa_r+0x6c0>)
 8009af0:	4b32      	ldr	r3, [pc, #200]	; (8009bbc <_dtoa_r+0x6c4>)
 8009af2:	9802      	ldr	r0, [sp, #8]
 8009af4:	9903      	ldr	r1, [sp, #12]
 8009af6:	f7f8 f995 	bl	8001e24 <__aeabi_dmul>
 8009afa:	9a04      	ldr	r2, [sp, #16]
 8009afc:	9b05      	ldr	r3, [sp, #20]
 8009afe:	f7f6 fc05 	bl	800030c <__aeabi_dcmpge>
 8009b02:	9f08      	ldr	r7, [sp, #32]
 8009b04:	1c3e      	adds	r6, r7, #0
 8009b06:	2800      	cmp	r0, #0
 8009b08:	d000      	beq.n	8009b0c <_dtoa_r+0x614>
 8009b0a:	e17f      	b.n	8009e0c <_dtoa_r+0x914>
 8009b0c:	e187      	b.n	8009e1e <_dtoa_r+0x926>
 8009b0e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8009b10:	9e04      	ldr	r6, [sp, #16]
 8009b12:	9f05      	ldr	r7, [sp, #20]
 8009b14:	9a02      	ldr	r2, [sp, #8]
 8009b16:	9b03      	ldr	r3, [sp, #12]
 8009b18:	1c30      	adds	r0, r6, #0
 8009b1a:	1c39      	adds	r1, r7, #0
 8009b1c:	f7f7 fd18 	bl	8001550 <__aeabi_ddiv>
 8009b20:	f7f8 ff3a 	bl	8002998 <__aeabi_d2iz>
 8009b24:	1c04      	adds	r4, r0, #0
 8009b26:	f7f8 ff6b 	bl	8002a00 <__aeabi_i2d>
 8009b2a:	9a02      	ldr	r2, [sp, #8]
 8009b2c:	9b03      	ldr	r3, [sp, #12]
 8009b2e:	f7f8 f979 	bl	8001e24 <__aeabi_dmul>
 8009b32:	1c02      	adds	r2, r0, #0
 8009b34:	1c0b      	adds	r3, r1, #0
 8009b36:	1c30      	adds	r0, r6, #0
 8009b38:	1c39      	adds	r1, r7, #0
 8009b3a:	f7f8 fc03 	bl	8002344 <__aeabi_dsub>
 8009b3e:	3501      	adds	r5, #1
 8009b40:	1c02      	adds	r2, r0, #0
 8009b42:	1c20      	adds	r0, r4, #0
 8009b44:	3030      	adds	r0, #48	; 0x30
 8009b46:	1c0b      	adds	r3, r1, #0
 8009b48:	1e69      	subs	r1, r5, #1
 8009b4a:	7008      	strb	r0, [r1, #0]
 8009b4c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8009b4e:	1a29      	subs	r1, r5, r0
 8009b50:	9808      	ldr	r0, [sp, #32]
 8009b52:	4281      	cmp	r1, r0
 8009b54:	d148      	bne.n	8009be8 <_dtoa_r+0x6f0>
 8009b56:	1c10      	adds	r0, r2, #0
 8009b58:	1c19      	adds	r1, r3, #0
 8009b5a:	f7f7 f9dd 	bl	8000f18 <__aeabi_dadd>
 8009b5e:	9a02      	ldr	r2, [sp, #8]
 8009b60:	9b03      	ldr	r3, [sp, #12]
 8009b62:	1c06      	adds	r6, r0, #0
 8009b64:	1c0f      	adds	r7, r1, #0
 8009b66:	f7f6 fbc7 	bl	80002f8 <__aeabi_dcmpgt>
 8009b6a:	2800      	cmp	r0, #0
 8009b6c:	d10d      	bne.n	8009b8a <_dtoa_r+0x692>
 8009b6e:	1c30      	adds	r0, r6, #0
 8009b70:	1c39      	adds	r1, r7, #0
 8009b72:	9a02      	ldr	r2, [sp, #8]
 8009b74:	9b03      	ldr	r3, [sp, #12]
 8009b76:	f7f6 fba5 	bl	80002c4 <__aeabi_dcmpeq>
 8009b7a:	2800      	cmp	r0, #0
 8009b7c:	d100      	bne.n	8009b80 <_dtoa_r+0x688>
 8009b7e:	e27f      	b.n	800a080 <_dtoa_r+0xb88>
 8009b80:	07e1      	lsls	r1, r4, #31
 8009b82:	d402      	bmi.n	8009b8a <_dtoa_r+0x692>
 8009b84:	e27c      	b.n	800a080 <_dtoa_r+0xb88>
 8009b86:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8009b88:	9406      	str	r4, [sp, #24]
 8009b8a:	1e6b      	subs	r3, r5, #1
 8009b8c:	781a      	ldrb	r2, [r3, #0]
 8009b8e:	2a39      	cmp	r2, #57	; 0x39
 8009b90:	d126      	bne.n	8009be0 <_dtoa_r+0x6e8>
 8009b92:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8009b94:	42a3      	cmp	r3, r4
 8009b96:	d01d      	beq.n	8009bd4 <_dtoa_r+0x6dc>
 8009b98:	1c1d      	adds	r5, r3, #0
 8009b9a:	e7f6      	b.n	8009b8a <_dtoa_r+0x692>
 8009b9c:	46c0      	nop			; (mov r8, r8)
 8009b9e:	46c0      	nop			; (mov r8, r8)
 8009ba0:	00000000 	.word	0x00000000
 8009ba4:	3ff00000 	.word	0x3ff00000
 8009ba8:	00000000 	.word	0x00000000
 8009bac:	40240000 	.word	0x40240000
 8009bb0:	00000000 	.word	0x00000000
 8009bb4:	401c0000 	.word	0x401c0000
 8009bb8:	00000000 	.word	0x00000000
 8009bbc:	40140000 	.word	0x40140000
 8009bc0:	00000000 	.word	0x00000000
 8009bc4:	3fe00000 	.word	0x3fe00000
 8009bc8:	0800c4e8 	.word	0x0800c4e8
 8009bcc:	0800c5b0 	.word	0x0800c5b0
 8009bd0:	fcc00000 	.word	0xfcc00000
 8009bd4:	9c06      	ldr	r4, [sp, #24]
 8009bd6:	2230      	movs	r2, #48	; 0x30
 8009bd8:	3401      	adds	r4, #1
 8009bda:	9406      	str	r4, [sp, #24]
 8009bdc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8009bde:	7022      	strb	r2, [r4, #0]
 8009be0:	781a      	ldrb	r2, [r3, #0]
 8009be2:	3201      	adds	r2, #1
 8009be4:	701a      	strb	r2, [r3, #0]
 8009be6:	e24b      	b.n	800a080 <_dtoa_r+0xb88>
 8009be8:	1c10      	adds	r0, r2, #0
 8009bea:	1c19      	adds	r1, r3, #0
 8009bec:	4bc9      	ldr	r3, [pc, #804]	; (8009f14 <_dtoa_r+0xa1c>)
 8009bee:	4ac8      	ldr	r2, [pc, #800]	; (8009f10 <_dtoa_r+0xa18>)
 8009bf0:	f7f8 f918 	bl	8001e24 <__aeabi_dmul>
 8009bf4:	4ac8      	ldr	r2, [pc, #800]	; (8009f18 <_dtoa_r+0xa20>)
 8009bf6:	4bc9      	ldr	r3, [pc, #804]	; (8009f1c <_dtoa_r+0xa24>)
 8009bf8:	1c06      	adds	r6, r0, #0
 8009bfa:	1c0f      	adds	r7, r1, #0
 8009bfc:	f7f6 fb62 	bl	80002c4 <__aeabi_dcmpeq>
 8009c00:	2800      	cmp	r0, #0
 8009c02:	d100      	bne.n	8009c06 <_dtoa_r+0x70e>
 8009c04:	e786      	b.n	8009b14 <_dtoa_r+0x61c>
 8009c06:	e23b      	b.n	800a080 <_dtoa_r+0xb88>
 8009c08:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8009c0a:	2d00      	cmp	r5, #0
 8009c0c:	d031      	beq.n	8009c72 <_dtoa_r+0x77a>
 8009c0e:	9c20      	ldr	r4, [sp, #128]	; 0x80
 8009c10:	2c01      	cmp	r4, #1
 8009c12:	dc0b      	bgt.n	8009c2c <_dtoa_r+0x734>
 8009c14:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8009c16:	2d00      	cmp	r5, #0
 8009c18:	d002      	beq.n	8009c20 <_dtoa_r+0x728>
 8009c1a:	48c1      	ldr	r0, [pc, #772]	; (8009f20 <_dtoa_r+0xa28>)
 8009c1c:	181b      	adds	r3, r3, r0
 8009c1e:	e002      	b.n	8009c26 <_dtoa_r+0x72e>
 8009c20:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009c22:	2336      	movs	r3, #54	; 0x36
 8009c24:	1a5b      	subs	r3, r3, r1
 8009c26:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8009c28:	9c02      	ldr	r4, [sp, #8]
 8009c2a:	e016      	b.n	8009c5a <_dtoa_r+0x762>
 8009c2c:	9d08      	ldr	r5, [sp, #32]
 8009c2e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8009c30:	3d01      	subs	r5, #1
 8009c32:	42ac      	cmp	r4, r5
 8009c34:	db01      	blt.n	8009c3a <_dtoa_r+0x742>
 8009c36:	1b65      	subs	r5, r4, r5
 8009c38:	e006      	b.n	8009c48 <_dtoa_r+0x750>
 8009c3a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8009c3c:	950d      	str	r5, [sp, #52]	; 0x34
 8009c3e:	1b2b      	subs	r3, r5, r4
 8009c40:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8009c42:	2500      	movs	r5, #0
 8009c44:	18e4      	adds	r4, r4, r3
 8009c46:	9412      	str	r4, [sp, #72]	; 0x48
 8009c48:	9c08      	ldr	r4, [sp, #32]
 8009c4a:	2c00      	cmp	r4, #0
 8009c4c:	da03      	bge.n	8009c56 <_dtoa_r+0x75e>
 8009c4e:	9802      	ldr	r0, [sp, #8]
 8009c50:	2300      	movs	r3, #0
 8009c52:	1b04      	subs	r4, r0, r4
 8009c54:	e001      	b.n	8009c5a <_dtoa_r+0x762>
 8009c56:	9c02      	ldr	r4, [sp, #8]
 8009c58:	9b08      	ldr	r3, [sp, #32]
 8009c5a:	9902      	ldr	r1, [sp, #8]
 8009c5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c5e:	18c9      	adds	r1, r1, r3
 8009c60:	9102      	str	r1, [sp, #8]
 8009c62:	18d2      	adds	r2, r2, r3
 8009c64:	9807      	ldr	r0, [sp, #28]
 8009c66:	2101      	movs	r1, #1
 8009c68:	9209      	str	r2, [sp, #36]	; 0x24
 8009c6a:	f000 ff6e 	bl	800ab4a <__i2b>
 8009c6e:	1c06      	adds	r6, r0, #0
 8009c70:	e002      	b.n	8009c78 <_dtoa_r+0x780>
 8009c72:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8009c74:	9c02      	ldr	r4, [sp, #8]
 8009c76:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8009c78:	2c00      	cmp	r4, #0
 8009c7a:	d00c      	beq.n	8009c96 <_dtoa_r+0x79e>
 8009c7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	dd09      	ble.n	8009c96 <_dtoa_r+0x79e>
 8009c82:	42a3      	cmp	r3, r4
 8009c84:	dd00      	ble.n	8009c88 <_dtoa_r+0x790>
 8009c86:	1c23      	adds	r3, r4, #0
 8009c88:	9802      	ldr	r0, [sp, #8]
 8009c8a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009c8c:	1ac0      	subs	r0, r0, r3
 8009c8e:	1ac9      	subs	r1, r1, r3
 8009c90:	9002      	str	r0, [sp, #8]
 8009c92:	1ae4      	subs	r4, r4, r3
 8009c94:	9109      	str	r1, [sp, #36]	; 0x24
 8009c96:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009c98:	2a00      	cmp	r2, #0
 8009c9a:	dd21      	ble.n	8009ce0 <_dtoa_r+0x7e8>
 8009c9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d018      	beq.n	8009cd4 <_dtoa_r+0x7dc>
 8009ca2:	2d00      	cmp	r5, #0
 8009ca4:	dd10      	ble.n	8009cc8 <_dtoa_r+0x7d0>
 8009ca6:	1c31      	adds	r1, r6, #0
 8009ca8:	1c2a      	adds	r2, r5, #0
 8009caa:	9807      	ldr	r0, [sp, #28]
 8009cac:	f000 ffe6 	bl	800ac7c <__pow5mult>
 8009cb0:	1c06      	adds	r6, r0, #0
 8009cb2:	1c31      	adds	r1, r6, #0
 8009cb4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009cb6:	9807      	ldr	r0, [sp, #28]
 8009cb8:	f000 ff50 	bl	800ab5c <__multiply>
 8009cbc:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009cbe:	1c07      	adds	r7, r0, #0
 8009cc0:	9807      	ldr	r0, [sp, #28]
 8009cc2:	f000 fe62 	bl	800a98a <_Bfree>
 8009cc6:	970a      	str	r7, [sp, #40]	; 0x28
 8009cc8:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009cca:	1b42      	subs	r2, r0, r5
 8009ccc:	d008      	beq.n	8009ce0 <_dtoa_r+0x7e8>
 8009cce:	9807      	ldr	r0, [sp, #28]
 8009cd0:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009cd2:	e002      	b.n	8009cda <_dtoa_r+0x7e2>
 8009cd4:	9807      	ldr	r0, [sp, #28]
 8009cd6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009cd8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009cda:	f000 ffcf 	bl	800ac7c <__pow5mult>
 8009cde:	900a      	str	r0, [sp, #40]	; 0x28
 8009ce0:	9807      	ldr	r0, [sp, #28]
 8009ce2:	2101      	movs	r1, #1
 8009ce4:	f000 ff31 	bl	800ab4a <__i2b>
 8009ce8:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8009cea:	1c07      	adds	r7, r0, #0
 8009cec:	2d00      	cmp	r5, #0
 8009cee:	dd05      	ble.n	8009cfc <_dtoa_r+0x804>
 8009cf0:	1c39      	adds	r1, r7, #0
 8009cf2:	9807      	ldr	r0, [sp, #28]
 8009cf4:	1c2a      	adds	r2, r5, #0
 8009cf6:	f000 ffc1 	bl	800ac7c <__pow5mult>
 8009cfa:	1c07      	adds	r7, r0, #0
 8009cfc:	9820      	ldr	r0, [sp, #128]	; 0x80
 8009cfe:	2500      	movs	r5, #0
 8009d00:	2801      	cmp	r0, #1
 8009d02:	dc10      	bgt.n	8009d26 <_dtoa_r+0x82e>
 8009d04:	9904      	ldr	r1, [sp, #16]
 8009d06:	42a9      	cmp	r1, r5
 8009d08:	d10d      	bne.n	8009d26 <_dtoa_r+0x82e>
 8009d0a:	9a05      	ldr	r2, [sp, #20]
 8009d0c:	0313      	lsls	r3, r2, #12
 8009d0e:	42ab      	cmp	r3, r5
 8009d10:	d109      	bne.n	8009d26 <_dtoa_r+0x82e>
 8009d12:	4b84      	ldr	r3, [pc, #528]	; (8009f24 <_dtoa_r+0xa2c>)
 8009d14:	4213      	tst	r3, r2
 8009d16:	d006      	beq.n	8009d26 <_dtoa_r+0x82e>
 8009d18:	9d02      	ldr	r5, [sp, #8]
 8009d1a:	3501      	adds	r5, #1
 8009d1c:	9502      	str	r5, [sp, #8]
 8009d1e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009d20:	3501      	adds	r5, #1
 8009d22:	9509      	str	r5, [sp, #36]	; 0x24
 8009d24:	2501      	movs	r5, #1
 8009d26:	9912      	ldr	r1, [sp, #72]	; 0x48
 8009d28:	2001      	movs	r0, #1
 8009d2a:	2900      	cmp	r1, #0
 8009d2c:	d008      	beq.n	8009d40 <_dtoa_r+0x848>
 8009d2e:	693b      	ldr	r3, [r7, #16]
 8009d30:	3303      	adds	r3, #3
 8009d32:	009b      	lsls	r3, r3, #2
 8009d34:	18fb      	adds	r3, r7, r3
 8009d36:	6858      	ldr	r0, [r3, #4]
 8009d38:	f000 febe 	bl	800aab8 <__hi0bits>
 8009d3c:	2320      	movs	r3, #32
 8009d3e:	1a18      	subs	r0, r3, r0
 8009d40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d42:	231f      	movs	r3, #31
 8009d44:	1880      	adds	r0, r0, r2
 8009d46:	4018      	ands	r0, r3
 8009d48:	d00d      	beq.n	8009d66 <_dtoa_r+0x86e>
 8009d4a:	2320      	movs	r3, #32
 8009d4c:	1a1b      	subs	r3, r3, r0
 8009d4e:	2b04      	cmp	r3, #4
 8009d50:	dd06      	ble.n	8009d60 <_dtoa_r+0x868>
 8009d52:	231c      	movs	r3, #28
 8009d54:	1a18      	subs	r0, r3, r0
 8009d56:	9b02      	ldr	r3, [sp, #8]
 8009d58:	1824      	adds	r4, r4, r0
 8009d5a:	181b      	adds	r3, r3, r0
 8009d5c:	9302      	str	r3, [sp, #8]
 8009d5e:	e008      	b.n	8009d72 <_dtoa_r+0x87a>
 8009d60:	2b04      	cmp	r3, #4
 8009d62:	d008      	beq.n	8009d76 <_dtoa_r+0x87e>
 8009d64:	1c18      	adds	r0, r3, #0
 8009d66:	9902      	ldr	r1, [sp, #8]
 8009d68:	301c      	adds	r0, #28
 8009d6a:	1809      	adds	r1, r1, r0
 8009d6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d6e:	9102      	str	r1, [sp, #8]
 8009d70:	1824      	adds	r4, r4, r0
 8009d72:	1812      	adds	r2, r2, r0
 8009d74:	9209      	str	r2, [sp, #36]	; 0x24
 8009d76:	9b02      	ldr	r3, [sp, #8]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	dd05      	ble.n	8009d88 <_dtoa_r+0x890>
 8009d7c:	9807      	ldr	r0, [sp, #28]
 8009d7e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009d80:	1c1a      	adds	r2, r3, #0
 8009d82:	f000 ffcd 	bl	800ad20 <__lshift>
 8009d86:	900a      	str	r0, [sp, #40]	; 0x28
 8009d88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009d8a:	2800      	cmp	r0, #0
 8009d8c:	dd05      	ble.n	8009d9a <_dtoa_r+0x8a2>
 8009d8e:	1c39      	adds	r1, r7, #0
 8009d90:	9807      	ldr	r0, [sp, #28]
 8009d92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d94:	f000 ffc4 	bl	800ad20 <__lshift>
 8009d98:	1c07      	adds	r7, r0, #0
 8009d9a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009d9c:	2900      	cmp	r1, #0
 8009d9e:	d01b      	beq.n	8009dd8 <_dtoa_r+0x8e0>
 8009da0:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009da2:	1c39      	adds	r1, r7, #0
 8009da4:	f001 f80e 	bl	800adc4 <__mcmp>
 8009da8:	2800      	cmp	r0, #0
 8009daa:	da15      	bge.n	8009dd8 <_dtoa_r+0x8e0>
 8009dac:	9a06      	ldr	r2, [sp, #24]
 8009dae:	2300      	movs	r3, #0
 8009db0:	3a01      	subs	r2, #1
 8009db2:	9206      	str	r2, [sp, #24]
 8009db4:	9807      	ldr	r0, [sp, #28]
 8009db6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009db8:	220a      	movs	r2, #10
 8009dba:	f000 fdff 	bl	800a9bc <__multadd>
 8009dbe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009dc0:	900a      	str	r0, [sp, #40]	; 0x28
 8009dc2:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009dc4:	9308      	str	r3, [sp, #32]
 8009dc6:	2800      	cmp	r0, #0
 8009dc8:	d006      	beq.n	8009dd8 <_dtoa_r+0x8e0>
 8009dca:	1c31      	adds	r1, r6, #0
 8009dcc:	9807      	ldr	r0, [sp, #28]
 8009dce:	220a      	movs	r2, #10
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	f000 fdf3 	bl	800a9bc <__multadd>
 8009dd6:	1c06      	adds	r6, r0, #0
 8009dd8:	9908      	ldr	r1, [sp, #32]
 8009dda:	2900      	cmp	r1, #0
 8009ddc:	dc2a      	bgt.n	8009e34 <_dtoa_r+0x93c>
 8009dde:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009de0:	2a02      	cmp	r2, #2
 8009de2:	dd27      	ble.n	8009e34 <_dtoa_r+0x93c>
 8009de4:	2900      	cmp	r1, #0
 8009de6:	d111      	bne.n	8009e0c <_dtoa_r+0x914>
 8009de8:	1c39      	adds	r1, r7, #0
 8009dea:	9807      	ldr	r0, [sp, #28]
 8009dec:	2205      	movs	r2, #5
 8009dee:	9b08      	ldr	r3, [sp, #32]
 8009df0:	f000 fde4 	bl	800a9bc <__multadd>
 8009df4:	1c07      	adds	r7, r0, #0
 8009df6:	1c39      	adds	r1, r7, #0
 8009df8:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009dfa:	f000 ffe3 	bl	800adc4 <__mcmp>
 8009dfe:	2800      	cmp	r0, #0
 8009e00:	dc0d      	bgt.n	8009e1e <_dtoa_r+0x926>
 8009e02:	e003      	b.n	8009e0c <_dtoa_r+0x914>
 8009e04:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8009e06:	e000      	b.n	8009e0a <_dtoa_r+0x912>
 8009e08:	2700      	movs	r7, #0
 8009e0a:	1c3e      	adds	r6, r7, #0
 8009e0c:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8009e0e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8009e10:	43e4      	mvns	r4, r4
 8009e12:	9406      	str	r4, [sp, #24]
 8009e14:	e00b      	b.n	8009e2e <_dtoa_r+0x936>
 8009e16:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8009e18:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8009e1a:	9506      	str	r5, [sp, #24]
 8009e1c:	1c3e      	adds	r6, r7, #0
 8009e1e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8009e20:	2331      	movs	r3, #49	; 0x31
 8009e22:	7023      	strb	r3, [r4, #0]
 8009e24:	9c06      	ldr	r4, [sp, #24]
 8009e26:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8009e28:	3401      	adds	r4, #1
 8009e2a:	3501      	adds	r5, #1
 8009e2c:	9406      	str	r4, [sp, #24]
 8009e2e:	9602      	str	r6, [sp, #8]
 8009e30:	2600      	movs	r6, #0
 8009e32:	e10f      	b.n	800a054 <_dtoa_r+0xb5c>
 8009e34:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009e36:	2800      	cmp	r0, #0
 8009e38:	d100      	bne.n	8009e3c <_dtoa_r+0x944>
 8009e3a:	e0c5      	b.n	8009fc8 <_dtoa_r+0xad0>
 8009e3c:	2c00      	cmp	r4, #0
 8009e3e:	dd05      	ble.n	8009e4c <_dtoa_r+0x954>
 8009e40:	1c31      	adds	r1, r6, #0
 8009e42:	9807      	ldr	r0, [sp, #28]
 8009e44:	1c22      	adds	r2, r4, #0
 8009e46:	f000 ff6b 	bl	800ad20 <__lshift>
 8009e4a:	1c06      	adds	r6, r0, #0
 8009e4c:	9602      	str	r6, [sp, #8]
 8009e4e:	2d00      	cmp	r5, #0
 8009e50:	d012      	beq.n	8009e78 <_dtoa_r+0x980>
 8009e52:	6871      	ldr	r1, [r6, #4]
 8009e54:	9807      	ldr	r0, [sp, #28]
 8009e56:	f000 fd60 	bl	800a91a <_Balloc>
 8009e5a:	6932      	ldr	r2, [r6, #16]
 8009e5c:	1c31      	adds	r1, r6, #0
 8009e5e:	3202      	adds	r2, #2
 8009e60:	1c04      	adds	r4, r0, #0
 8009e62:	0092      	lsls	r2, r2, #2
 8009e64:	310c      	adds	r1, #12
 8009e66:	300c      	adds	r0, #12
 8009e68:	f7fd fba0 	bl	80075ac <memcpy>
 8009e6c:	9807      	ldr	r0, [sp, #28]
 8009e6e:	1c21      	adds	r1, r4, #0
 8009e70:	2201      	movs	r2, #1
 8009e72:	f000 ff55 	bl	800ad20 <__lshift>
 8009e76:	9002      	str	r0, [sp, #8]
 8009e78:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8009e7a:	9d08      	ldr	r5, [sp, #32]
 8009e7c:	1c23      	adds	r3, r4, #0
 8009e7e:	3b01      	subs	r3, #1
 8009e80:	195b      	adds	r3, r3, r5
 8009e82:	9409      	str	r4, [sp, #36]	; 0x24
 8009e84:	9310      	str	r3, [sp, #64]	; 0x40
 8009e86:	1c39      	adds	r1, r7, #0
 8009e88:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009e8a:	f7ff faa7 	bl	80093dc <quorem>
 8009e8e:	1c31      	adds	r1, r6, #0
 8009e90:	900d      	str	r0, [sp, #52]	; 0x34
 8009e92:	1c04      	adds	r4, r0, #0
 8009e94:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009e96:	f000 ff95 	bl	800adc4 <__mcmp>
 8009e9a:	1c39      	adds	r1, r7, #0
 8009e9c:	900c      	str	r0, [sp, #48]	; 0x30
 8009e9e:	9a02      	ldr	r2, [sp, #8]
 8009ea0:	9807      	ldr	r0, [sp, #28]
 8009ea2:	f000 ffaa 	bl	800adfa <__mdiff>
 8009ea6:	1c05      	adds	r5, r0, #0
 8009ea8:	68c0      	ldr	r0, [r0, #12]
 8009eaa:	3430      	adds	r4, #48	; 0x30
 8009eac:	2800      	cmp	r0, #0
 8009eae:	d105      	bne.n	8009ebc <_dtoa_r+0x9c4>
 8009eb0:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009eb2:	1c29      	adds	r1, r5, #0
 8009eb4:	f000 ff86 	bl	800adc4 <__mcmp>
 8009eb8:	9008      	str	r0, [sp, #32]
 8009eba:	e001      	b.n	8009ec0 <_dtoa_r+0x9c8>
 8009ebc:	2101      	movs	r1, #1
 8009ebe:	9108      	str	r1, [sp, #32]
 8009ec0:	1c29      	adds	r1, r5, #0
 8009ec2:	9807      	ldr	r0, [sp, #28]
 8009ec4:	f000 fd61 	bl	800a98a <_Bfree>
 8009ec8:	9b08      	ldr	r3, [sp, #32]
 8009eca:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8009ecc:	432b      	orrs	r3, r5
 8009ece:	d10d      	bne.n	8009eec <_dtoa_r+0x9f4>
 8009ed0:	9804      	ldr	r0, [sp, #16]
 8009ed2:	2301      	movs	r3, #1
 8009ed4:	4203      	tst	r3, r0
 8009ed6:	d109      	bne.n	8009eec <_dtoa_r+0x9f4>
 8009ed8:	2c39      	cmp	r4, #57	; 0x39
 8009eda:	d044      	beq.n	8009f66 <_dtoa_r+0xa6e>
 8009edc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009ede:	2d00      	cmp	r5, #0
 8009ee0:	dd01      	ble.n	8009ee6 <_dtoa_r+0x9ee>
 8009ee2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8009ee4:	3431      	adds	r4, #49	; 0x31
 8009ee6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009ee8:	3501      	adds	r5, #1
 8009eea:	e044      	b.n	8009f76 <_dtoa_r+0xa7e>
 8009eec:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009eee:	2d00      	cmp	r5, #0
 8009ef0:	da03      	bge.n	8009efa <_dtoa_r+0xa02>
 8009ef2:	9d08      	ldr	r5, [sp, #32]
 8009ef4:	2d00      	cmp	r5, #0
 8009ef6:	dc17      	bgt.n	8009f28 <_dtoa_r+0xa30>
 8009ef8:	e028      	b.n	8009f4c <_dtoa_r+0xa54>
 8009efa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009efc:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8009efe:	432b      	orrs	r3, r5
 8009f00:	d129      	bne.n	8009f56 <_dtoa_r+0xa5e>
 8009f02:	9804      	ldr	r0, [sp, #16]
 8009f04:	2301      	movs	r3, #1
 8009f06:	4203      	tst	r3, r0
 8009f08:	d125      	bne.n	8009f56 <_dtoa_r+0xa5e>
 8009f0a:	e7f2      	b.n	8009ef2 <_dtoa_r+0x9fa>
 8009f0c:	46c0      	nop			; (mov r8, r8)
 8009f0e:	46c0      	nop			; (mov r8, r8)
 8009f10:	00000000 	.word	0x00000000
 8009f14:	40240000 	.word	0x40240000
	...
 8009f20:	00000433 	.word	0x00000433
 8009f24:	7ff00000 	.word	0x7ff00000
 8009f28:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009f2a:	9807      	ldr	r0, [sp, #28]
 8009f2c:	2201      	movs	r2, #1
 8009f2e:	f000 fef7 	bl	800ad20 <__lshift>
 8009f32:	1c39      	adds	r1, r7, #0
 8009f34:	900a      	str	r0, [sp, #40]	; 0x28
 8009f36:	f000 ff45 	bl	800adc4 <__mcmp>
 8009f3a:	2800      	cmp	r0, #0
 8009f3c:	dc02      	bgt.n	8009f44 <_dtoa_r+0xa4c>
 8009f3e:	d105      	bne.n	8009f4c <_dtoa_r+0xa54>
 8009f40:	07e1      	lsls	r1, r4, #31
 8009f42:	d503      	bpl.n	8009f4c <_dtoa_r+0xa54>
 8009f44:	2c39      	cmp	r4, #57	; 0x39
 8009f46:	d00e      	beq.n	8009f66 <_dtoa_r+0xa6e>
 8009f48:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8009f4a:	3431      	adds	r4, #49	; 0x31
 8009f4c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009f4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f50:	3501      	adds	r5, #1
 8009f52:	7014      	strb	r4, [r2, #0]
 8009f54:	e07e      	b.n	800a054 <_dtoa_r+0xb5c>
 8009f56:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009f58:	3501      	adds	r5, #1
 8009f5a:	950c      	str	r5, [sp, #48]	; 0x30
 8009f5c:	9d08      	ldr	r5, [sp, #32]
 8009f5e:	2d00      	cmp	r5, #0
 8009f60:	dd0c      	ble.n	8009f7c <_dtoa_r+0xa84>
 8009f62:	2c39      	cmp	r4, #57	; 0x39
 8009f64:	d105      	bne.n	8009f72 <_dtoa_r+0xa7a>
 8009f66:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009f68:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8009f6a:	2339      	movs	r3, #57	; 0x39
 8009f6c:	3501      	adds	r5, #1
 8009f6e:	7023      	strb	r3, [r4, #0]
 8009f70:	e05b      	b.n	800a02a <_dtoa_r+0xb32>
 8009f72:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009f74:	3401      	adds	r4, #1
 8009f76:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f78:	7004      	strb	r4, [r0, #0]
 8009f7a:	e06b      	b.n	800a054 <_dtoa_r+0xb5c>
 8009f7c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009f7e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009f80:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009f82:	700c      	strb	r4, [r1, #0]
 8009f84:	4291      	cmp	r1, r2
 8009f86:	d03d      	beq.n	800a004 <_dtoa_r+0xb0c>
 8009f88:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009f8a:	220a      	movs	r2, #10
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	9807      	ldr	r0, [sp, #28]
 8009f90:	f000 fd14 	bl	800a9bc <__multadd>
 8009f94:	9c02      	ldr	r4, [sp, #8]
 8009f96:	900a      	str	r0, [sp, #40]	; 0x28
 8009f98:	1c31      	adds	r1, r6, #0
 8009f9a:	9807      	ldr	r0, [sp, #28]
 8009f9c:	220a      	movs	r2, #10
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	42a6      	cmp	r6, r4
 8009fa2:	d104      	bne.n	8009fae <_dtoa_r+0xab6>
 8009fa4:	f000 fd0a 	bl	800a9bc <__multadd>
 8009fa8:	1c06      	adds	r6, r0, #0
 8009faa:	9002      	str	r0, [sp, #8]
 8009fac:	e009      	b.n	8009fc2 <_dtoa_r+0xaca>
 8009fae:	f000 fd05 	bl	800a9bc <__multadd>
 8009fb2:	9902      	ldr	r1, [sp, #8]
 8009fb4:	1c06      	adds	r6, r0, #0
 8009fb6:	220a      	movs	r2, #10
 8009fb8:	9807      	ldr	r0, [sp, #28]
 8009fba:	2300      	movs	r3, #0
 8009fbc:	f000 fcfe 	bl	800a9bc <__multadd>
 8009fc0:	9002      	str	r0, [sp, #8]
 8009fc2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009fc4:	9509      	str	r5, [sp, #36]	; 0x24
 8009fc6:	e75e      	b.n	8009e86 <_dtoa_r+0x98e>
 8009fc8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8009fca:	1c39      	adds	r1, r7, #0
 8009fcc:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009fce:	f7ff fa05 	bl	80093dc <quorem>
 8009fd2:	1c04      	adds	r4, r0, #0
 8009fd4:	3430      	adds	r4, #48	; 0x30
 8009fd6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8009fd8:	9908      	ldr	r1, [sp, #32]
 8009fda:	702c      	strb	r4, [r5, #0]
 8009fdc:	3501      	adds	r5, #1
 8009fde:	1a2b      	subs	r3, r5, r0
 8009fe0:	428b      	cmp	r3, r1
 8009fe2:	db07      	blt.n	8009ff4 <_dtoa_r+0xafc>
 8009fe4:	1e0b      	subs	r3, r1, #0
 8009fe6:	dc00      	bgt.n	8009fea <_dtoa_r+0xaf2>
 8009fe8:	2301      	movs	r3, #1
 8009fea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009fec:	9602      	str	r6, [sp, #8]
 8009fee:	18d5      	adds	r5, r2, r3
 8009ff0:	2600      	movs	r6, #0
 8009ff2:	e007      	b.n	800a004 <_dtoa_r+0xb0c>
 8009ff4:	9807      	ldr	r0, [sp, #28]
 8009ff6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009ff8:	220a      	movs	r2, #10
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	f000 fcde 	bl	800a9bc <__multadd>
 800a000:	900a      	str	r0, [sp, #40]	; 0x28
 800a002:	e7e2      	b.n	8009fca <_dtoa_r+0xad2>
 800a004:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a006:	9807      	ldr	r0, [sp, #28]
 800a008:	2201      	movs	r2, #1
 800a00a:	f000 fe89 	bl	800ad20 <__lshift>
 800a00e:	1c39      	adds	r1, r7, #0
 800a010:	900a      	str	r0, [sp, #40]	; 0x28
 800a012:	f000 fed7 	bl	800adc4 <__mcmp>
 800a016:	2800      	cmp	r0, #0
 800a018:	dc07      	bgt.n	800a02a <_dtoa_r+0xb32>
 800a01a:	d115      	bne.n	800a048 <_dtoa_r+0xb50>
 800a01c:	07e3      	lsls	r3, r4, #31
 800a01e:	d404      	bmi.n	800a02a <_dtoa_r+0xb32>
 800a020:	e012      	b.n	800a048 <_dtoa_r+0xb50>
 800a022:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800a024:	42a3      	cmp	r3, r4
 800a026:	d005      	beq.n	800a034 <_dtoa_r+0xb3c>
 800a028:	1c1d      	adds	r5, r3, #0
 800a02a:	1e6b      	subs	r3, r5, #1
 800a02c:	781a      	ldrb	r2, [r3, #0]
 800a02e:	2a39      	cmp	r2, #57	; 0x39
 800a030:	d0f7      	beq.n	800a022 <_dtoa_r+0xb2a>
 800a032:	e006      	b.n	800a042 <_dtoa_r+0xb4a>
 800a034:	9c06      	ldr	r4, [sp, #24]
 800a036:	2331      	movs	r3, #49	; 0x31
 800a038:	3401      	adds	r4, #1
 800a03a:	9406      	str	r4, [sp, #24]
 800a03c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800a03e:	7023      	strb	r3, [r4, #0]
 800a040:	e008      	b.n	800a054 <_dtoa_r+0xb5c>
 800a042:	3201      	adds	r2, #1
 800a044:	701a      	strb	r2, [r3, #0]
 800a046:	e005      	b.n	800a054 <_dtoa_r+0xb5c>
 800a048:	1e6b      	subs	r3, r5, #1
 800a04a:	781a      	ldrb	r2, [r3, #0]
 800a04c:	2a30      	cmp	r2, #48	; 0x30
 800a04e:	d101      	bne.n	800a054 <_dtoa_r+0xb5c>
 800a050:	1c1d      	adds	r5, r3, #0
 800a052:	e7f9      	b.n	800a048 <_dtoa_r+0xb50>
 800a054:	9807      	ldr	r0, [sp, #28]
 800a056:	1c39      	adds	r1, r7, #0
 800a058:	f000 fc97 	bl	800a98a <_Bfree>
 800a05c:	9c02      	ldr	r4, [sp, #8]
 800a05e:	2c00      	cmp	r4, #0
 800a060:	d00e      	beq.n	800a080 <_dtoa_r+0xb88>
 800a062:	2e00      	cmp	r6, #0
 800a064:	d005      	beq.n	800a072 <_dtoa_r+0xb7a>
 800a066:	42a6      	cmp	r6, r4
 800a068:	d003      	beq.n	800a072 <_dtoa_r+0xb7a>
 800a06a:	9807      	ldr	r0, [sp, #28]
 800a06c:	1c31      	adds	r1, r6, #0
 800a06e:	f000 fc8c 	bl	800a98a <_Bfree>
 800a072:	9807      	ldr	r0, [sp, #28]
 800a074:	9902      	ldr	r1, [sp, #8]
 800a076:	f000 fc88 	bl	800a98a <_Bfree>
 800a07a:	e001      	b.n	800a080 <_dtoa_r+0xb88>
 800a07c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800a07e:	9406      	str	r4, [sp, #24]
 800a080:	9807      	ldr	r0, [sp, #28]
 800a082:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a084:	f000 fc81 	bl	800a98a <_Bfree>
 800a088:	2300      	movs	r3, #0
 800a08a:	702b      	strb	r3, [r5, #0]
 800a08c:	9b06      	ldr	r3, [sp, #24]
 800a08e:	9c22      	ldr	r4, [sp, #136]	; 0x88
 800a090:	3301      	adds	r3, #1
 800a092:	6023      	str	r3, [r4, #0]
 800a094:	9c24      	ldr	r4, [sp, #144]	; 0x90
 800a096:	2c00      	cmp	r4, #0
 800a098:	d003      	beq.n	800a0a2 <_dtoa_r+0xbaa>
 800a09a:	6025      	str	r5, [r4, #0]
 800a09c:	e001      	b.n	800a0a2 <_dtoa_r+0xbaa>
 800a09e:	4802      	ldr	r0, [pc, #8]	; (800a0a8 <_dtoa_r+0xbb0>)
 800a0a0:	e000      	b.n	800a0a4 <_dtoa_r+0xbac>
 800a0a2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a0a4:	b01b      	add	sp, #108	; 0x6c
 800a0a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a0a8:	0800c3ba 	.word	0x0800c3ba
 800a0ac:	46c0      	nop			; (mov r8, r8)
 800a0ae:	46c0      	nop			; (mov r8, r8)

0800a0b0 <_malloc_trim_r>:
 800a0b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a0b2:	1c0d      	adds	r5, r1, #0
 800a0b4:	4f24      	ldr	r7, [pc, #144]	; (800a148 <_malloc_trim_r+0x98>)
 800a0b6:	1c04      	adds	r4, r0, #0
 800a0b8:	f7fd fa81 	bl	80075be <__malloc_lock>
 800a0bc:	4e23      	ldr	r6, [pc, #140]	; (800a14c <_malloc_trim_r+0x9c>)
 800a0be:	2203      	movs	r2, #3
 800a0c0:	68b3      	ldr	r3, [r6, #8]
 800a0c2:	1c38      	adds	r0, r7, #0
 800a0c4:	685b      	ldr	r3, [r3, #4]
 800a0c6:	3811      	subs	r0, #17
 800a0c8:	4393      	bics	r3, r2
 800a0ca:	18c0      	adds	r0, r0, r3
 800a0cc:	1b40      	subs	r0, r0, r5
 800a0ce:	1c39      	adds	r1, r7, #0
 800a0d0:	9301      	str	r3, [sp, #4]
 800a0d2:	f7f6 f837 	bl	8000144 <__aeabi_uidiv>
 800a0d6:	1e45      	subs	r5, r0, #1
 800a0d8:	437d      	muls	r5, r7
 800a0da:	42bd      	cmp	r5, r7
 800a0dc:	da04      	bge.n	800a0e8 <_malloc_trim_r+0x38>
 800a0de:	1c20      	adds	r0, r4, #0
 800a0e0:	f7fd fa6e 	bl	80075c0 <__malloc_unlock>
 800a0e4:	2000      	movs	r0, #0
 800a0e6:	e02d      	b.n	800a144 <_malloc_trim_r+0x94>
 800a0e8:	2100      	movs	r1, #0
 800a0ea:	1c20      	adds	r0, r4, #0
 800a0ec:	f7fd fa6a 	bl	80075c4 <_sbrk_r>
 800a0f0:	68b1      	ldr	r1, [r6, #8]
 800a0f2:	9a01      	ldr	r2, [sp, #4]
 800a0f4:	188b      	adds	r3, r1, r2
 800a0f6:	4298      	cmp	r0, r3
 800a0f8:	d1f1      	bne.n	800a0de <_malloc_trim_r+0x2e>
 800a0fa:	4269      	negs	r1, r5
 800a0fc:	1c20      	adds	r0, r4, #0
 800a0fe:	f7fd fa61 	bl	80075c4 <_sbrk_r>
 800a102:	3001      	adds	r0, #1
 800a104:	d110      	bne.n	800a128 <_malloc_trim_r+0x78>
 800a106:	1c20      	adds	r0, r4, #0
 800a108:	2100      	movs	r1, #0
 800a10a:	f7fd fa5b 	bl	80075c4 <_sbrk_r>
 800a10e:	68b3      	ldr	r3, [r6, #8]
 800a110:	1ac2      	subs	r2, r0, r3
 800a112:	2a0f      	cmp	r2, #15
 800a114:	dde3      	ble.n	800a0de <_malloc_trim_r+0x2e>
 800a116:	490e      	ldr	r1, [pc, #56]	; (800a150 <_malloc_trim_r+0xa0>)
 800a118:	6809      	ldr	r1, [r1, #0]
 800a11a:	1a40      	subs	r0, r0, r1
 800a11c:	490d      	ldr	r1, [pc, #52]	; (800a154 <_malloc_trim_r+0xa4>)
 800a11e:	6008      	str	r0, [r1, #0]
 800a120:	2101      	movs	r1, #1
 800a122:	430a      	orrs	r2, r1
 800a124:	605a      	str	r2, [r3, #4]
 800a126:	e7da      	b.n	800a0de <_malloc_trim_r+0x2e>
 800a128:	9901      	ldr	r1, [sp, #4]
 800a12a:	68b3      	ldr	r3, [r6, #8]
 800a12c:	1b4a      	subs	r2, r1, r5
 800a12e:	2601      	movs	r6, #1
 800a130:	4332      	orrs	r2, r6
 800a132:	605a      	str	r2, [r3, #4]
 800a134:	4b07      	ldr	r3, [pc, #28]	; (800a154 <_malloc_trim_r+0xa4>)
 800a136:	1c20      	adds	r0, r4, #0
 800a138:	681a      	ldr	r2, [r3, #0]
 800a13a:	1b55      	subs	r5, r2, r5
 800a13c:	601d      	str	r5, [r3, #0]
 800a13e:	f7fd fa3f 	bl	80075c0 <__malloc_unlock>
 800a142:	1c30      	adds	r0, r6, #0
 800a144:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a146:	46c0      	nop			; (mov r8, r8)
 800a148:	00001000 	.word	0x00001000
 800a14c:	20000004 	.word	0x20000004
 800a150:	20000410 	.word	0x20000410
 800a154:	20000670 	.word	0x20000670

0800a158 <_free_r>:
 800a158:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a15a:	1c04      	adds	r4, r0, #0
 800a15c:	1e0d      	subs	r5, r1, #0
 800a15e:	d100      	bne.n	800a162 <_free_r+0xa>
 800a160:	e0aa      	b.n	800a2b8 <_free_r+0x160>
 800a162:	f7fd fa2c 	bl	80075be <__malloc_lock>
 800a166:	1c29      	adds	r1, r5, #0
 800a168:	3908      	subs	r1, #8
 800a16a:	684f      	ldr	r7, [r1, #4]
 800a16c:	2001      	movs	r0, #1
 800a16e:	1c3b      	adds	r3, r7, #0
 800a170:	4383      	bics	r3, r0
 800a172:	18c8      	adds	r0, r1, r3
 800a174:	6846      	ldr	r6, [r0, #4]
 800a176:	2203      	movs	r2, #3
 800a178:	4396      	bics	r6, r2
 800a17a:	4a50      	ldr	r2, [pc, #320]	; (800a2bc <_free_r+0x164>)
 800a17c:	6895      	ldr	r5, [r2, #8]
 800a17e:	46ac      	mov	ip, r5
 800a180:	2501      	movs	r5, #1
 800a182:	402f      	ands	r7, r5
 800a184:	4560      	cmp	r0, ip
 800a186:	d11a      	bne.n	800a1be <_free_r+0x66>
 800a188:	18f3      	adds	r3, r6, r3
 800a18a:	2f00      	cmp	r7, #0
 800a18c:	d106      	bne.n	800a19c <_free_r+0x44>
 800a18e:	6808      	ldr	r0, [r1, #0]
 800a190:	1a09      	subs	r1, r1, r0
 800a192:	688d      	ldr	r5, [r1, #8]
 800a194:	181b      	adds	r3, r3, r0
 800a196:	68c8      	ldr	r0, [r1, #12]
 800a198:	60e8      	str	r0, [r5, #12]
 800a19a:	6085      	str	r5, [r0, #8]
 800a19c:	2001      	movs	r0, #1
 800a19e:	4318      	orrs	r0, r3
 800a1a0:	6048      	str	r0, [r1, #4]
 800a1a2:	6091      	str	r1, [r2, #8]
 800a1a4:	4a46      	ldr	r2, [pc, #280]	; (800a2c0 <_free_r+0x168>)
 800a1a6:	6812      	ldr	r2, [r2, #0]
 800a1a8:	4293      	cmp	r3, r2
 800a1aa:	d304      	bcc.n	800a1b6 <_free_r+0x5e>
 800a1ac:	4b45      	ldr	r3, [pc, #276]	; (800a2c4 <_free_r+0x16c>)
 800a1ae:	1c20      	adds	r0, r4, #0
 800a1b0:	6819      	ldr	r1, [r3, #0]
 800a1b2:	f7ff ff7d 	bl	800a0b0 <_malloc_trim_r>
 800a1b6:	1c20      	adds	r0, r4, #0
 800a1b8:	f7fd fa02 	bl	80075c0 <__malloc_unlock>
 800a1bc:	e07c      	b.n	800a2b8 <_free_r+0x160>
 800a1be:	2500      	movs	r5, #0
 800a1c0:	6046      	str	r6, [r0, #4]
 800a1c2:	9501      	str	r5, [sp, #4]
 800a1c4:	42af      	cmp	r7, r5
 800a1c6:	d10d      	bne.n	800a1e4 <_free_r+0x8c>
 800a1c8:	680f      	ldr	r7, [r1, #0]
 800a1ca:	2508      	movs	r5, #8
 800a1cc:	1bc9      	subs	r1, r1, r7
 800a1ce:	19db      	adds	r3, r3, r7
 800a1d0:	688f      	ldr	r7, [r1, #8]
 800a1d2:	18ad      	adds	r5, r5, r2
 800a1d4:	42af      	cmp	r7, r5
 800a1d6:	d003      	beq.n	800a1e0 <_free_r+0x88>
 800a1d8:	68cd      	ldr	r5, [r1, #12]
 800a1da:	60fd      	str	r5, [r7, #12]
 800a1dc:	60af      	str	r7, [r5, #8]
 800a1de:	e001      	b.n	800a1e4 <_free_r+0x8c>
 800a1e0:	2501      	movs	r5, #1
 800a1e2:	9501      	str	r5, [sp, #4]
 800a1e4:	1987      	adds	r7, r0, r6
 800a1e6:	687d      	ldr	r5, [r7, #4]
 800a1e8:	2701      	movs	r7, #1
 800a1ea:	423d      	tst	r5, r7
 800a1ec:	d110      	bne.n	800a210 <_free_r+0xb8>
 800a1ee:	9d01      	ldr	r5, [sp, #4]
 800a1f0:	199b      	adds	r3, r3, r6
 800a1f2:	6886      	ldr	r6, [r0, #8]
 800a1f4:	2d00      	cmp	r5, #0
 800a1f6:	d108      	bne.n	800a20a <_free_r+0xb2>
 800a1f8:	4d33      	ldr	r5, [pc, #204]	; (800a2c8 <_free_r+0x170>)
 800a1fa:	42ae      	cmp	r6, r5
 800a1fc:	d105      	bne.n	800a20a <_free_r+0xb2>
 800a1fe:	60f1      	str	r1, [r6, #12]
 800a200:	60b1      	str	r1, [r6, #8]
 800a202:	9701      	str	r7, [sp, #4]
 800a204:	60ce      	str	r6, [r1, #12]
 800a206:	608e      	str	r6, [r1, #8]
 800a208:	e002      	b.n	800a210 <_free_r+0xb8>
 800a20a:	68c0      	ldr	r0, [r0, #12]
 800a20c:	60f0      	str	r0, [r6, #12]
 800a20e:	6086      	str	r6, [r0, #8]
 800a210:	2001      	movs	r0, #1
 800a212:	1c06      	adds	r6, r0, #0
 800a214:	9d01      	ldr	r5, [sp, #4]
 800a216:	431e      	orrs	r6, r3
 800a218:	604e      	str	r6, [r1, #4]
 800a21a:	50cb      	str	r3, [r1, r3]
 800a21c:	2d00      	cmp	r5, #0
 800a21e:	d1ca      	bne.n	800a1b6 <_free_r+0x5e>
 800a220:	4d2a      	ldr	r5, [pc, #168]	; (800a2cc <_free_r+0x174>)
 800a222:	42ab      	cmp	r3, r5
 800a224:	d80d      	bhi.n	800a242 <_free_r+0xea>
 800a226:	08db      	lsrs	r3, r3, #3
 800a228:	109d      	asrs	r5, r3, #2
 800a22a:	40a8      	lsls	r0, r5
 800a22c:	6855      	ldr	r5, [r2, #4]
 800a22e:	00db      	lsls	r3, r3, #3
 800a230:	4328      	orrs	r0, r5
 800a232:	6050      	str	r0, [r2, #4]
 800a234:	18d2      	adds	r2, r2, r3
 800a236:	6893      	ldr	r3, [r2, #8]
 800a238:	60ca      	str	r2, [r1, #12]
 800a23a:	608b      	str	r3, [r1, #8]
 800a23c:	6091      	str	r1, [r2, #8]
 800a23e:	60d9      	str	r1, [r3, #12]
 800a240:	e7b9      	b.n	800a1b6 <_free_r+0x5e>
 800a242:	0a5d      	lsrs	r5, r3, #9
 800a244:	2d04      	cmp	r5, #4
 800a246:	d802      	bhi.n	800a24e <_free_r+0xf6>
 800a248:	0998      	lsrs	r0, r3, #6
 800a24a:	3038      	adds	r0, #56	; 0x38
 800a24c:	e016      	b.n	800a27c <_free_r+0x124>
 800a24e:	2d14      	cmp	r5, #20
 800a250:	d802      	bhi.n	800a258 <_free_r+0x100>
 800a252:	1c28      	adds	r0, r5, #0
 800a254:	305b      	adds	r0, #91	; 0x5b
 800a256:	e011      	b.n	800a27c <_free_r+0x124>
 800a258:	2d54      	cmp	r5, #84	; 0x54
 800a25a:	d802      	bhi.n	800a262 <_free_r+0x10a>
 800a25c:	0b18      	lsrs	r0, r3, #12
 800a25e:	306e      	adds	r0, #110	; 0x6e
 800a260:	e00c      	b.n	800a27c <_free_r+0x124>
 800a262:	20aa      	movs	r0, #170	; 0xaa
 800a264:	0040      	lsls	r0, r0, #1
 800a266:	4285      	cmp	r5, r0
 800a268:	d802      	bhi.n	800a270 <_free_r+0x118>
 800a26a:	0bd8      	lsrs	r0, r3, #15
 800a26c:	3077      	adds	r0, #119	; 0x77
 800a26e:	e005      	b.n	800a27c <_free_r+0x124>
 800a270:	4e17      	ldr	r6, [pc, #92]	; (800a2d0 <_free_r+0x178>)
 800a272:	207e      	movs	r0, #126	; 0x7e
 800a274:	42b5      	cmp	r5, r6
 800a276:	d801      	bhi.n	800a27c <_free_r+0x124>
 800a278:	0c98      	lsrs	r0, r3, #18
 800a27a:	307c      	adds	r0, #124	; 0x7c
 800a27c:	00c6      	lsls	r6, r0, #3
 800a27e:	1996      	adds	r6, r2, r6
 800a280:	68b5      	ldr	r5, [r6, #8]
 800a282:	42b5      	cmp	r5, r6
 800a284:	d001      	beq.n	800a28a <_free_r+0x132>
 800a286:	1c2a      	adds	r2, r5, #0
 800a288:	e00b      	b.n	800a2a2 <_free_r+0x14a>
 800a28a:	1080      	asrs	r0, r0, #2
 800a28c:	2301      	movs	r3, #1
 800a28e:	4083      	lsls	r3, r0
 800a290:	1c18      	adds	r0, r3, #0
 800a292:	6853      	ldr	r3, [r2, #4]
 800a294:	4318      	orrs	r0, r3
 800a296:	6050      	str	r0, [r2, #4]
 800a298:	1c2a      	adds	r2, r5, #0
 800a29a:	e008      	b.n	800a2ae <_free_r+0x156>
 800a29c:	6892      	ldr	r2, [r2, #8]
 800a29e:	42b2      	cmp	r2, r6
 800a2a0:	d004      	beq.n	800a2ac <_free_r+0x154>
 800a2a2:	6855      	ldr	r5, [r2, #4]
 800a2a4:	2003      	movs	r0, #3
 800a2a6:	4385      	bics	r5, r0
 800a2a8:	42ab      	cmp	r3, r5
 800a2aa:	d3f7      	bcc.n	800a29c <_free_r+0x144>
 800a2ac:	68d5      	ldr	r5, [r2, #12]
 800a2ae:	60cd      	str	r5, [r1, #12]
 800a2b0:	608a      	str	r2, [r1, #8]
 800a2b2:	60a9      	str	r1, [r5, #8]
 800a2b4:	60d1      	str	r1, [r2, #12]
 800a2b6:	e77e      	b.n	800a1b6 <_free_r+0x5e>
 800a2b8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800a2ba:	46c0      	nop			; (mov r8, r8)
 800a2bc:	20000004 	.word	0x20000004
 800a2c0:	2000040c 	.word	0x2000040c
 800a2c4:	2000066c 	.word	0x2000066c
 800a2c8:	2000000c 	.word	0x2000000c
 800a2cc:	000001ff 	.word	0x000001ff
 800a2d0:	00000554 	.word	0x00000554

0800a2d4 <rshift>:
 800a2d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a2d6:	1c03      	adds	r3, r0, #0
 800a2d8:	6906      	ldr	r6, [r0, #16]
 800a2da:	3314      	adds	r3, #20
 800a2dc:	114c      	asrs	r4, r1, #5
 800a2de:	1c1a      	adds	r2, r3, #0
 800a2e0:	42b4      	cmp	r4, r6
 800a2e2:	da27      	bge.n	800a334 <rshift+0x60>
 800a2e4:	00b6      	lsls	r6, r6, #2
 800a2e6:	199e      	adds	r6, r3, r6
 800a2e8:	00a4      	lsls	r4, r4, #2
 800a2ea:	221f      	movs	r2, #31
 800a2ec:	9601      	str	r6, [sp, #4]
 800a2ee:	191c      	adds	r4, r3, r4
 800a2f0:	4011      	ands	r1, r2
 800a2f2:	d101      	bne.n	800a2f8 <rshift+0x24>
 800a2f4:	1c19      	adds	r1, r3, #0
 800a2f6:	e016      	b.n	800a326 <rshift+0x52>
 800a2f8:	2220      	movs	r2, #32
 800a2fa:	cc20      	ldmia	r4!, {r5}
 800a2fc:	1a52      	subs	r2, r2, r1
 800a2fe:	4694      	mov	ip, r2
 800a300:	40cd      	lsrs	r5, r1
 800a302:	1c1f      	adds	r7, r3, #0
 800a304:	9e01      	ldr	r6, [sp, #4]
 800a306:	1c3a      	adds	r2, r7, #0
 800a308:	42b4      	cmp	r4, r6
 800a30a:	d207      	bcs.n	800a31c <rshift+0x48>
 800a30c:	6822      	ldr	r2, [r4, #0]
 800a30e:	4666      	mov	r6, ip
 800a310:	40b2      	lsls	r2, r6
 800a312:	4315      	orrs	r5, r2
 800a314:	c720      	stmia	r7!, {r5}
 800a316:	cc20      	ldmia	r4!, {r5}
 800a318:	40cd      	lsrs	r5, r1
 800a31a:	e7f3      	b.n	800a304 <rshift+0x30>
 800a31c:	603d      	str	r5, [r7, #0]
 800a31e:	2d00      	cmp	r5, #0
 800a320:	d008      	beq.n	800a334 <rshift+0x60>
 800a322:	3204      	adds	r2, #4
 800a324:	e006      	b.n	800a334 <rshift+0x60>
 800a326:	9d01      	ldr	r5, [sp, #4]
 800a328:	1c0a      	adds	r2, r1, #0
 800a32a:	42ac      	cmp	r4, r5
 800a32c:	d202      	bcs.n	800a334 <rshift+0x60>
 800a32e:	cc04      	ldmia	r4!, {r2}
 800a330:	c104      	stmia	r1!, {r2}
 800a332:	e7f8      	b.n	800a326 <rshift+0x52>
 800a334:	1ad3      	subs	r3, r2, r3
 800a336:	109b      	asrs	r3, r3, #2
 800a338:	6103      	str	r3, [r0, #16]
 800a33a:	d100      	bne.n	800a33e <rshift+0x6a>
 800a33c:	6143      	str	r3, [r0, #20]
 800a33e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

0800a340 <__hexdig_fun>:
 800a340:	1c02      	adds	r2, r0, #0
 800a342:	3a30      	subs	r2, #48	; 0x30
 800a344:	1c03      	adds	r3, r0, #0
 800a346:	2a09      	cmp	r2, #9
 800a348:	d801      	bhi.n	800a34e <__hexdig_fun+0xe>
 800a34a:	3b20      	subs	r3, #32
 800a34c:	e00b      	b.n	800a366 <__hexdig_fun+0x26>
 800a34e:	1c02      	adds	r2, r0, #0
 800a350:	3a61      	subs	r2, #97	; 0x61
 800a352:	2a05      	cmp	r2, #5
 800a354:	d801      	bhi.n	800a35a <__hexdig_fun+0x1a>
 800a356:	3b47      	subs	r3, #71	; 0x47
 800a358:	e005      	b.n	800a366 <__hexdig_fun+0x26>
 800a35a:	1c1a      	adds	r2, r3, #0
 800a35c:	3a41      	subs	r2, #65	; 0x41
 800a35e:	2000      	movs	r0, #0
 800a360:	2a05      	cmp	r2, #5
 800a362:	d801      	bhi.n	800a368 <__hexdig_fun+0x28>
 800a364:	3b27      	subs	r3, #39	; 0x27
 800a366:	b2d8      	uxtb	r0, r3
 800a368:	4770      	bx	lr

0800a36a <__gethex>:
 800a36a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a36c:	b08f      	sub	sp, #60	; 0x3c
 800a36e:	9206      	str	r2, [sp, #24]
 800a370:	930c      	str	r3, [sp, #48]	; 0x30
 800a372:	910a      	str	r1, [sp, #40]	; 0x28
 800a374:	9008      	str	r0, [sp, #32]
 800a376:	f000 fac1 	bl	800a8fc <_localeconv_r>
 800a37a:	6800      	ldr	r0, [r0, #0]
 800a37c:	900b      	str	r0, [sp, #44]	; 0x2c
 800a37e:	f7fd f95d 	bl	800763c <strlen>
 800a382:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800a384:	9007      	str	r0, [sp, #28]
 800a386:	182b      	adds	r3, r5, r0
 800a388:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800a38a:	3b01      	subs	r3, #1
 800a38c:	781b      	ldrb	r3, [r3, #0]
 800a38e:	682a      	ldr	r2, [r5, #0]
 800a390:	930d      	str	r3, [sp, #52]	; 0x34
 800a392:	1c93      	adds	r3, r2, #2
 800a394:	9305      	str	r3, [sp, #20]
 800a396:	9d05      	ldr	r5, [sp, #20]
 800a398:	1a99      	subs	r1, r3, r2
 800a39a:	7828      	ldrb	r0, [r5, #0]
 800a39c:	3902      	subs	r1, #2
 800a39e:	9109      	str	r1, [sp, #36]	; 0x24
 800a3a0:	3301      	adds	r3, #1
 800a3a2:	2830      	cmp	r0, #48	; 0x30
 800a3a4:	d0f6      	beq.n	800a394 <__gethex+0x2a>
 800a3a6:	f7ff ffcb 	bl	800a340 <__hexdig_fun>
 800a3aa:	1e06      	subs	r6, r0, #0
 800a3ac:	d11f      	bne.n	800a3ee <__gethex+0x84>
 800a3ae:	9805      	ldr	r0, [sp, #20]
 800a3b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a3b2:	9a07      	ldr	r2, [sp, #28]
 800a3b4:	f000 fede 	bl	800b174 <strncmp>
 800a3b8:	2800      	cmp	r0, #0
 800a3ba:	d13b      	bne.n	800a434 <__gethex+0xca>
 800a3bc:	9807      	ldr	r0, [sp, #28]
 800a3be:	182f      	adds	r7, r5, r0
 800a3c0:	7838      	ldrb	r0, [r7, #0]
 800a3c2:	f7ff ffbd 	bl	800a340 <__hexdig_fun>
 800a3c6:	2800      	cmp	r0, #0
 800a3c8:	d037      	beq.n	800a43a <__gethex+0xd0>
 800a3ca:	9705      	str	r7, [sp, #20]
 800a3cc:	9d05      	ldr	r5, [sp, #20]
 800a3ce:	7828      	ldrb	r0, [r5, #0]
 800a3d0:	2830      	cmp	r0, #48	; 0x30
 800a3d2:	d103      	bne.n	800a3dc <__gethex+0x72>
 800a3d4:	9d05      	ldr	r5, [sp, #20]
 800a3d6:	3501      	adds	r5, #1
 800a3d8:	9505      	str	r5, [sp, #20]
 800a3da:	e7f7      	b.n	800a3cc <__gethex+0x62>
 800a3dc:	f7ff ffb0 	bl	800a340 <__hexdig_fun>
 800a3e0:	4245      	negs	r5, r0
 800a3e2:	4145      	adcs	r5, r0
 800a3e4:	9503      	str	r5, [sp, #12]
 800a3e6:	2501      	movs	r5, #1
 800a3e8:	1c3e      	adds	r6, r7, #0
 800a3ea:	9509      	str	r5, [sp, #36]	; 0x24
 800a3ec:	e002      	b.n	800a3f4 <__gethex+0x8a>
 800a3ee:	2500      	movs	r5, #0
 800a3f0:	9503      	str	r5, [sp, #12]
 800a3f2:	1c2e      	adds	r6, r5, #0
 800a3f4:	9f05      	ldr	r7, [sp, #20]
 800a3f6:	7838      	ldrb	r0, [r7, #0]
 800a3f8:	f7ff ffa2 	bl	800a340 <__hexdig_fun>
 800a3fc:	2800      	cmp	r0, #0
 800a3fe:	d001      	beq.n	800a404 <__gethex+0x9a>
 800a400:	3701      	adds	r7, #1
 800a402:	e7f8      	b.n	800a3f6 <__gethex+0x8c>
 800a404:	1c38      	adds	r0, r7, #0
 800a406:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a408:	9a07      	ldr	r2, [sp, #28]
 800a40a:	f000 feb3 	bl	800b174 <strncmp>
 800a40e:	2800      	cmp	r0, #0
 800a410:	d10b      	bne.n	800a42a <__gethex+0xc0>
 800a412:	2e00      	cmp	r6, #0
 800a414:	d10b      	bne.n	800a42e <__gethex+0xc4>
 800a416:	9d07      	ldr	r5, [sp, #28]
 800a418:	197f      	adds	r7, r7, r5
 800a41a:	1c3e      	adds	r6, r7, #0
 800a41c:	7838      	ldrb	r0, [r7, #0]
 800a41e:	f7ff ff8f 	bl	800a340 <__hexdig_fun>
 800a422:	2800      	cmp	r0, #0
 800a424:	d001      	beq.n	800a42a <__gethex+0xc0>
 800a426:	3701      	adds	r7, #1
 800a428:	e7f8      	b.n	800a41c <__gethex+0xb2>
 800a42a:	2e00      	cmp	r6, #0
 800a42c:	d009      	beq.n	800a442 <__gethex+0xd8>
 800a42e:	1bf6      	subs	r6, r6, r7
 800a430:	00b6      	lsls	r6, r6, #2
 800a432:	e006      	b.n	800a442 <__gethex+0xd8>
 800a434:	9f05      	ldr	r7, [sp, #20]
 800a436:	9604      	str	r6, [sp, #16]
 800a438:	e000      	b.n	800a43c <__gethex+0xd2>
 800a43a:	9004      	str	r0, [sp, #16]
 800a43c:	2501      	movs	r5, #1
 800a43e:	9503      	str	r5, [sp, #12]
 800a440:	e000      	b.n	800a444 <__gethex+0xda>
 800a442:	9604      	str	r6, [sp, #16]
 800a444:	783b      	ldrb	r3, [r7, #0]
 800a446:	2b50      	cmp	r3, #80	; 0x50
 800a448:	d001      	beq.n	800a44e <__gethex+0xe4>
 800a44a:	2b70      	cmp	r3, #112	; 0x70
 800a44c:	d127      	bne.n	800a49e <__gethex+0x134>
 800a44e:	787b      	ldrb	r3, [r7, #1]
 800a450:	2b2b      	cmp	r3, #43	; 0x2b
 800a452:	d004      	beq.n	800a45e <__gethex+0xf4>
 800a454:	2b2d      	cmp	r3, #45	; 0x2d
 800a456:	d004      	beq.n	800a462 <__gethex+0xf8>
 800a458:	1c7c      	adds	r4, r7, #1
 800a45a:	2600      	movs	r6, #0
 800a45c:	e003      	b.n	800a466 <__gethex+0xfc>
 800a45e:	2600      	movs	r6, #0
 800a460:	e000      	b.n	800a464 <__gethex+0xfa>
 800a462:	2601      	movs	r6, #1
 800a464:	1cbc      	adds	r4, r7, #2
 800a466:	7820      	ldrb	r0, [r4, #0]
 800a468:	f7ff ff6a 	bl	800a340 <__hexdig_fun>
 800a46c:	1e43      	subs	r3, r0, #1
 800a46e:	b2db      	uxtb	r3, r3
 800a470:	1c05      	adds	r5, r0, #0
 800a472:	2b18      	cmp	r3, #24
 800a474:	d813      	bhi.n	800a49e <__gethex+0x134>
 800a476:	3401      	adds	r4, #1
 800a478:	7820      	ldrb	r0, [r4, #0]
 800a47a:	f7ff ff61 	bl	800a340 <__hexdig_fun>
 800a47e:	1e43      	subs	r3, r0, #1
 800a480:	b2db      	uxtb	r3, r3
 800a482:	3d10      	subs	r5, #16
 800a484:	2b18      	cmp	r3, #24
 800a486:	d803      	bhi.n	800a490 <__gethex+0x126>
 800a488:	230a      	movs	r3, #10
 800a48a:	435d      	muls	r5, r3
 800a48c:	182d      	adds	r5, r5, r0
 800a48e:	e7f2      	b.n	800a476 <__gethex+0x10c>
 800a490:	2e00      	cmp	r6, #0
 800a492:	d000      	beq.n	800a496 <__gethex+0x12c>
 800a494:	426d      	negs	r5, r5
 800a496:	9804      	ldr	r0, [sp, #16]
 800a498:	1940      	adds	r0, r0, r5
 800a49a:	9004      	str	r0, [sp, #16]
 800a49c:	e000      	b.n	800a4a0 <__gethex+0x136>
 800a49e:	1c3c      	adds	r4, r7, #0
 800a4a0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800a4a2:	602c      	str	r4, [r5, #0]
 800a4a4:	9d03      	ldr	r5, [sp, #12]
 800a4a6:	2d00      	cmp	r5, #0
 800a4a8:	d006      	beq.n	800a4b8 <__gethex+0x14e>
 800a4aa:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a4ac:	2006      	movs	r0, #6
 800a4ae:	426b      	negs	r3, r5
 800a4b0:	416b      	adcs	r3, r5
 800a4b2:	425b      	negs	r3, r3
 800a4b4:	4018      	ands	r0, r3
 800a4b6:	e174      	b.n	800a7a2 <__gethex+0x438>
 800a4b8:	9d05      	ldr	r5, [sp, #20]
 800a4ba:	9903      	ldr	r1, [sp, #12]
 800a4bc:	1b7b      	subs	r3, r7, r5
 800a4be:	3b01      	subs	r3, #1
 800a4c0:	2b07      	cmp	r3, #7
 800a4c2:	dd02      	ble.n	800a4ca <__gethex+0x160>
 800a4c4:	3101      	adds	r1, #1
 800a4c6:	105b      	asrs	r3, r3, #1
 800a4c8:	e7fa      	b.n	800a4c0 <__gethex+0x156>
 800a4ca:	9808      	ldr	r0, [sp, #32]
 800a4cc:	f000 fa25 	bl	800a91a <_Balloc>
 800a4d0:	1c05      	adds	r5, r0, #0
 800a4d2:	3514      	adds	r5, #20
 800a4d4:	9503      	str	r5, [sp, #12]
 800a4d6:	9509      	str	r5, [sp, #36]	; 0x24
 800a4d8:	2500      	movs	r5, #0
 800a4da:	1c04      	adds	r4, r0, #0
 800a4dc:	1c2e      	adds	r6, r5, #0
 800a4de:	9a05      	ldr	r2, [sp, #20]
 800a4e0:	4297      	cmp	r7, r2
 800a4e2:	d927      	bls.n	800a534 <__gethex+0x1ca>
 800a4e4:	3f01      	subs	r7, #1
 800a4e6:	783b      	ldrb	r3, [r7, #0]
 800a4e8:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a4ea:	970a      	str	r7, [sp, #40]	; 0x28
 800a4ec:	4283      	cmp	r3, r0
 800a4ee:	d008      	beq.n	800a502 <__gethex+0x198>
 800a4f0:	2e20      	cmp	r6, #32
 800a4f2:	d114      	bne.n	800a51e <__gethex+0x1b4>
 800a4f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a4f6:	6005      	str	r5, [r0, #0]
 800a4f8:	3004      	adds	r0, #4
 800a4fa:	2500      	movs	r5, #0
 800a4fc:	9009      	str	r0, [sp, #36]	; 0x24
 800a4fe:	1c2e      	adds	r6, r5, #0
 800a500:	e00d      	b.n	800a51e <__gethex+0x1b4>
 800a502:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a504:	9a07      	ldr	r2, [sp, #28]
 800a506:	9b05      	ldr	r3, [sp, #20]
 800a508:	1a8f      	subs	r7, r1, r2
 800a50a:	3701      	adds	r7, #1
 800a50c:	429f      	cmp	r7, r3
 800a50e:	d3ef      	bcc.n	800a4f0 <__gethex+0x186>
 800a510:	1c38      	adds	r0, r7, #0
 800a512:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a514:	f000 fe2e 	bl	800b174 <strncmp>
 800a518:	2800      	cmp	r0, #0
 800a51a:	d0e0      	beq.n	800a4de <__gethex+0x174>
 800a51c:	e7e8      	b.n	800a4f0 <__gethex+0x186>
 800a51e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a520:	7808      	ldrb	r0, [r1, #0]
 800a522:	f7ff ff0d 	bl	800a340 <__hexdig_fun>
 800a526:	230f      	movs	r3, #15
 800a528:	4018      	ands	r0, r3
 800a52a:	40b0      	lsls	r0, r6
 800a52c:	4305      	orrs	r5, r0
 800a52e:	3604      	adds	r6, #4
 800a530:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800a532:	e7d4      	b.n	800a4de <__gethex+0x174>
 800a534:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a536:	9b03      	ldr	r3, [sp, #12]
 800a538:	c620      	stmia	r6!, {r5}
 800a53a:	1af6      	subs	r6, r6, r3
 800a53c:	10b6      	asrs	r6, r6, #2
 800a53e:	6126      	str	r6, [r4, #16]
 800a540:	1c28      	adds	r0, r5, #0
 800a542:	f000 fab9 	bl	800aab8 <__hi0bits>
 800a546:	9d06      	ldr	r5, [sp, #24]
 800a548:	0176      	lsls	r6, r6, #5
 800a54a:	682f      	ldr	r7, [r5, #0]
 800a54c:	1a36      	subs	r6, r6, r0
 800a54e:	42be      	cmp	r6, r7
 800a550:	dd27      	ble.n	800a5a2 <__gethex+0x238>
 800a552:	1bf6      	subs	r6, r6, r7
 800a554:	1c20      	adds	r0, r4, #0
 800a556:	1c31      	adds	r1, r6, #0
 800a558:	f000 fdbc 	bl	800b0d4 <__any_on>
 800a55c:	2500      	movs	r5, #0
 800a55e:	42a8      	cmp	r0, r5
 800a560:	d017      	beq.n	800a592 <__gethex+0x228>
 800a562:	1e73      	subs	r3, r6, #1
 800a564:	221f      	movs	r2, #31
 800a566:	2501      	movs	r5, #1
 800a568:	401a      	ands	r2, r3
 800a56a:	1c28      	adds	r0, r5, #0
 800a56c:	4090      	lsls	r0, r2
 800a56e:	1159      	asrs	r1, r3, #5
 800a570:	1c02      	adds	r2, r0, #0
 800a572:	9803      	ldr	r0, [sp, #12]
 800a574:	0089      	lsls	r1, r1, #2
 800a576:	5809      	ldr	r1, [r1, r0]
 800a578:	4211      	tst	r1, r2
 800a57a:	d00a      	beq.n	800a592 <__gethex+0x228>
 800a57c:	42ab      	cmp	r3, r5
 800a57e:	dc01      	bgt.n	800a584 <__gethex+0x21a>
 800a580:	2502      	movs	r5, #2
 800a582:	e006      	b.n	800a592 <__gethex+0x228>
 800a584:	1eb1      	subs	r1, r6, #2
 800a586:	1c20      	adds	r0, r4, #0
 800a588:	f000 fda4 	bl	800b0d4 <__any_on>
 800a58c:	2800      	cmp	r0, #0
 800a58e:	d0f7      	beq.n	800a580 <__gethex+0x216>
 800a590:	2503      	movs	r5, #3
 800a592:	1c31      	adds	r1, r6, #0
 800a594:	1c20      	adds	r0, r4, #0
 800a596:	f7ff fe9d 	bl	800a2d4 <rshift>
 800a59a:	9904      	ldr	r1, [sp, #16]
 800a59c:	1989      	adds	r1, r1, r6
 800a59e:	9104      	str	r1, [sp, #16]
 800a5a0:	e00f      	b.n	800a5c2 <__gethex+0x258>
 800a5a2:	2500      	movs	r5, #0
 800a5a4:	42be      	cmp	r6, r7
 800a5a6:	da0c      	bge.n	800a5c2 <__gethex+0x258>
 800a5a8:	1bbe      	subs	r6, r7, r6
 800a5aa:	1c21      	adds	r1, r4, #0
 800a5ac:	1c32      	adds	r2, r6, #0
 800a5ae:	9808      	ldr	r0, [sp, #32]
 800a5b0:	f000 fbb6 	bl	800ad20 <__lshift>
 800a5b4:	9a04      	ldr	r2, [sp, #16]
 800a5b6:	1c03      	adds	r3, r0, #0
 800a5b8:	1b92      	subs	r2, r2, r6
 800a5ba:	3314      	adds	r3, #20
 800a5bc:	1c04      	adds	r4, r0, #0
 800a5be:	9204      	str	r2, [sp, #16]
 800a5c0:	9303      	str	r3, [sp, #12]
 800a5c2:	9806      	ldr	r0, [sp, #24]
 800a5c4:	9904      	ldr	r1, [sp, #16]
 800a5c6:	6880      	ldr	r0, [r0, #8]
 800a5c8:	4281      	cmp	r1, r0
 800a5ca:	dd08      	ble.n	800a5de <__gethex+0x274>
 800a5cc:	9808      	ldr	r0, [sp, #32]
 800a5ce:	1c21      	adds	r1, r4, #0
 800a5d0:	f000 f9db 	bl	800a98a <_Bfree>
 800a5d4:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	602b      	str	r3, [r5, #0]
 800a5da:	20a3      	movs	r0, #163	; 0xa3
 800a5dc:	e0e1      	b.n	800a7a2 <__gethex+0x438>
 800a5de:	9806      	ldr	r0, [sp, #24]
 800a5e0:	9904      	ldr	r1, [sp, #16]
 800a5e2:	6846      	ldr	r6, [r0, #4]
 800a5e4:	42b1      	cmp	r1, r6
 800a5e6:	da54      	bge.n	800a692 <__gethex+0x328>
 800a5e8:	1a76      	subs	r6, r6, r1
 800a5ea:	42be      	cmp	r6, r7
 800a5ec:	db2d      	blt.n	800a64a <__gethex+0x2e0>
 800a5ee:	68c3      	ldr	r3, [r0, #12]
 800a5f0:	2b02      	cmp	r3, #2
 800a5f2:	d01a      	beq.n	800a62a <__gethex+0x2c0>
 800a5f4:	2b03      	cmp	r3, #3
 800a5f6:	d01c      	beq.n	800a632 <__gethex+0x2c8>
 800a5f8:	2b01      	cmp	r3, #1
 800a5fa:	d11d      	bne.n	800a638 <__gethex+0x2ce>
 800a5fc:	42be      	cmp	r6, r7
 800a5fe:	d11b      	bne.n	800a638 <__gethex+0x2ce>
 800a600:	2f01      	cmp	r7, #1
 800a602:	dc0b      	bgt.n	800a61c <__gethex+0x2b2>
 800a604:	9a06      	ldr	r2, [sp, #24]
 800a606:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a608:	6852      	ldr	r2, [r2, #4]
 800a60a:	2301      	movs	r3, #1
 800a60c:	602a      	str	r2, [r5, #0]
 800a60e:	9d03      	ldr	r5, [sp, #12]
 800a610:	6123      	str	r3, [r4, #16]
 800a612:	602b      	str	r3, [r5, #0]
 800a614:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800a616:	2062      	movs	r0, #98	; 0x62
 800a618:	602c      	str	r4, [r5, #0]
 800a61a:	e0c2      	b.n	800a7a2 <__gethex+0x438>
 800a61c:	1e79      	subs	r1, r7, #1
 800a61e:	1c20      	adds	r0, r4, #0
 800a620:	f000 fd58 	bl	800b0d4 <__any_on>
 800a624:	2800      	cmp	r0, #0
 800a626:	d1ed      	bne.n	800a604 <__gethex+0x29a>
 800a628:	e006      	b.n	800a638 <__gethex+0x2ce>
 800a62a:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800a62c:	2d00      	cmp	r5, #0
 800a62e:	d0e9      	beq.n	800a604 <__gethex+0x29a>
 800a630:	e002      	b.n	800a638 <__gethex+0x2ce>
 800a632:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800a634:	2d00      	cmp	r5, #0
 800a636:	d1e5      	bne.n	800a604 <__gethex+0x29a>
 800a638:	9808      	ldr	r0, [sp, #32]
 800a63a:	1c21      	adds	r1, r4, #0
 800a63c:	f000 f9a5 	bl	800a98a <_Bfree>
 800a640:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800a642:	2300      	movs	r3, #0
 800a644:	602b      	str	r3, [r5, #0]
 800a646:	2050      	movs	r0, #80	; 0x50
 800a648:	e0ab      	b.n	800a7a2 <__gethex+0x438>
 800a64a:	1e70      	subs	r0, r6, #1
 800a64c:	9004      	str	r0, [sp, #16]
 800a64e:	2d00      	cmp	r5, #0
 800a650:	d107      	bne.n	800a662 <__gethex+0x2f8>
 800a652:	2800      	cmp	r0, #0
 800a654:	dd06      	ble.n	800a664 <__gethex+0x2fa>
 800a656:	1c20      	adds	r0, r4, #0
 800a658:	9904      	ldr	r1, [sp, #16]
 800a65a:	f000 fd3b 	bl	800b0d4 <__any_on>
 800a65e:	1c05      	adds	r5, r0, #0
 800a660:	e000      	b.n	800a664 <__gethex+0x2fa>
 800a662:	2501      	movs	r5, #1
 800a664:	9904      	ldr	r1, [sp, #16]
 800a666:	9803      	ldr	r0, [sp, #12]
 800a668:	114b      	asrs	r3, r1, #5
 800a66a:	221f      	movs	r2, #31
 800a66c:	009b      	lsls	r3, r3, #2
 800a66e:	4011      	ands	r1, r2
 800a670:	581b      	ldr	r3, [r3, r0]
 800a672:	2201      	movs	r2, #1
 800a674:	408a      	lsls	r2, r1
 800a676:	4213      	tst	r3, r2
 800a678:	d001      	beq.n	800a67e <__gethex+0x314>
 800a67a:	2302      	movs	r3, #2
 800a67c:	431d      	orrs	r5, r3
 800a67e:	1c31      	adds	r1, r6, #0
 800a680:	1c20      	adds	r0, r4, #0
 800a682:	f7ff fe27 	bl	800a2d4 <rshift>
 800a686:	9906      	ldr	r1, [sp, #24]
 800a688:	1bbf      	subs	r7, r7, r6
 800a68a:	6849      	ldr	r1, [r1, #4]
 800a68c:	2602      	movs	r6, #2
 800a68e:	9104      	str	r1, [sp, #16]
 800a690:	e000      	b.n	800a694 <__gethex+0x32a>
 800a692:	2601      	movs	r6, #1
 800a694:	2d00      	cmp	r5, #0
 800a696:	d07e      	beq.n	800a796 <__gethex+0x42c>
 800a698:	9a06      	ldr	r2, [sp, #24]
 800a69a:	68d3      	ldr	r3, [r2, #12]
 800a69c:	2b02      	cmp	r3, #2
 800a69e:	d00b      	beq.n	800a6b8 <__gethex+0x34e>
 800a6a0:	2b03      	cmp	r3, #3
 800a6a2:	d00d      	beq.n	800a6c0 <__gethex+0x356>
 800a6a4:	2b01      	cmp	r3, #1
 800a6a6:	d174      	bne.n	800a792 <__gethex+0x428>
 800a6a8:	07a8      	lsls	r0, r5, #30
 800a6aa:	d572      	bpl.n	800a792 <__gethex+0x428>
 800a6ac:	9903      	ldr	r1, [sp, #12]
 800a6ae:	680a      	ldr	r2, [r1, #0]
 800a6b0:	4315      	orrs	r5, r2
 800a6b2:	421d      	tst	r5, r3
 800a6b4:	d107      	bne.n	800a6c6 <__gethex+0x35c>
 800a6b6:	e06c      	b.n	800a792 <__gethex+0x428>
 800a6b8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800a6ba:	2301      	movs	r3, #1
 800a6bc:	1b5d      	subs	r5, r3, r5
 800a6be:	9515      	str	r5, [sp, #84]	; 0x54
 800a6c0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800a6c2:	2d00      	cmp	r5, #0
 800a6c4:	d065      	beq.n	800a792 <__gethex+0x428>
 800a6c6:	6925      	ldr	r5, [r4, #16]
 800a6c8:	1c23      	adds	r3, r4, #0
 800a6ca:	00a8      	lsls	r0, r5, #2
 800a6cc:	3314      	adds	r3, #20
 800a6ce:	9005      	str	r0, [sp, #20]
 800a6d0:	1819      	adds	r1, r3, r0
 800a6d2:	681a      	ldr	r2, [r3, #0]
 800a6d4:	1c50      	adds	r0, r2, #1
 800a6d6:	d002      	beq.n	800a6de <__gethex+0x374>
 800a6d8:	3201      	adds	r2, #1
 800a6da:	601a      	str	r2, [r3, #0]
 800a6dc:	e021      	b.n	800a722 <__gethex+0x3b8>
 800a6de:	2200      	movs	r2, #0
 800a6e0:	c304      	stmia	r3!, {r2}
 800a6e2:	4299      	cmp	r1, r3
 800a6e4:	d8f5      	bhi.n	800a6d2 <__gethex+0x368>
 800a6e6:	68a1      	ldr	r1, [r4, #8]
 800a6e8:	428d      	cmp	r5, r1
 800a6ea:	db12      	blt.n	800a712 <__gethex+0x3a8>
 800a6ec:	6861      	ldr	r1, [r4, #4]
 800a6ee:	9808      	ldr	r0, [sp, #32]
 800a6f0:	3101      	adds	r1, #1
 800a6f2:	f000 f912 	bl	800a91a <_Balloc>
 800a6f6:	6922      	ldr	r2, [r4, #16]
 800a6f8:	1c21      	adds	r1, r4, #0
 800a6fa:	3202      	adds	r2, #2
 800a6fc:	9003      	str	r0, [sp, #12]
 800a6fe:	310c      	adds	r1, #12
 800a700:	0092      	lsls	r2, r2, #2
 800a702:	300c      	adds	r0, #12
 800a704:	f7fc ff52 	bl	80075ac <memcpy>
 800a708:	1c21      	adds	r1, r4, #0
 800a70a:	9808      	ldr	r0, [sp, #32]
 800a70c:	f000 f93d 	bl	800a98a <_Bfree>
 800a710:	9c03      	ldr	r4, [sp, #12]
 800a712:	6923      	ldr	r3, [r4, #16]
 800a714:	1c5a      	adds	r2, r3, #1
 800a716:	3304      	adds	r3, #4
 800a718:	009b      	lsls	r3, r3, #2
 800a71a:	6122      	str	r2, [r4, #16]
 800a71c:	18e3      	adds	r3, r4, r3
 800a71e:	2201      	movs	r2, #1
 800a720:	605a      	str	r2, [r3, #4]
 800a722:	1c22      	adds	r2, r4, #0
 800a724:	3214      	adds	r2, #20
 800a726:	2e02      	cmp	r6, #2
 800a728:	d110      	bne.n	800a74c <__gethex+0x3e2>
 800a72a:	9d06      	ldr	r5, [sp, #24]
 800a72c:	682b      	ldr	r3, [r5, #0]
 800a72e:	3b01      	subs	r3, #1
 800a730:	429f      	cmp	r7, r3
 800a732:	d12c      	bne.n	800a78e <__gethex+0x424>
 800a734:	1178      	asrs	r0, r7, #5
 800a736:	0080      	lsls	r0, r0, #2
 800a738:	211f      	movs	r1, #31
 800a73a:	2301      	movs	r3, #1
 800a73c:	4039      	ands	r1, r7
 800a73e:	1c1d      	adds	r5, r3, #0
 800a740:	5882      	ldr	r2, [r0, r2]
 800a742:	408d      	lsls	r5, r1
 800a744:	422a      	tst	r2, r5
 800a746:	d022      	beq.n	800a78e <__gethex+0x424>
 800a748:	1c1e      	adds	r6, r3, #0
 800a74a:	e020      	b.n	800a78e <__gethex+0x424>
 800a74c:	6920      	ldr	r0, [r4, #16]
 800a74e:	42a8      	cmp	r0, r5
 800a750:	dd0e      	ble.n	800a770 <__gethex+0x406>
 800a752:	1c20      	adds	r0, r4, #0
 800a754:	2101      	movs	r1, #1
 800a756:	f7ff fdbd 	bl	800a2d4 <rshift>
 800a75a:	9d04      	ldr	r5, [sp, #16]
 800a75c:	2601      	movs	r6, #1
 800a75e:	3501      	adds	r5, #1
 800a760:	9504      	str	r5, [sp, #16]
 800a762:	9d06      	ldr	r5, [sp, #24]
 800a764:	68ab      	ldr	r3, [r5, #8]
 800a766:	9d04      	ldr	r5, [sp, #16]
 800a768:	429d      	cmp	r5, r3
 800a76a:	dd00      	ble.n	800a76e <__gethex+0x404>
 800a76c:	e72e      	b.n	800a5cc <__gethex+0x262>
 800a76e:	e00e      	b.n	800a78e <__gethex+0x424>
 800a770:	251f      	movs	r5, #31
 800a772:	403d      	ands	r5, r7
 800a774:	2601      	movs	r6, #1
 800a776:	2d00      	cmp	r5, #0
 800a778:	d009      	beq.n	800a78e <__gethex+0x424>
 800a77a:	9805      	ldr	r0, [sp, #20]
 800a77c:	1812      	adds	r2, r2, r0
 800a77e:	3a04      	subs	r2, #4
 800a780:	6810      	ldr	r0, [r2, #0]
 800a782:	f000 f999 	bl	800aab8 <__hi0bits>
 800a786:	2320      	movs	r3, #32
 800a788:	1b5d      	subs	r5, r3, r5
 800a78a:	42a8      	cmp	r0, r5
 800a78c:	dbe1      	blt.n	800a752 <__gethex+0x3e8>
 800a78e:	2320      	movs	r3, #32
 800a790:	e000      	b.n	800a794 <__gethex+0x42a>
 800a792:	2310      	movs	r3, #16
 800a794:	431e      	orrs	r6, r3
 800a796:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800a798:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a79a:	602c      	str	r4, [r5, #0]
 800a79c:	9d04      	ldr	r5, [sp, #16]
 800a79e:	6005      	str	r5, [r0, #0]
 800a7a0:	1c30      	adds	r0, r6, #0
 800a7a2:	b00f      	add	sp, #60	; 0x3c
 800a7a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a7a6 <L_shift>:
 800a7a6:	2308      	movs	r3, #8
 800a7a8:	1a9a      	subs	r2, r3, r2
 800a7aa:	b570      	push	{r4, r5, r6, lr}
 800a7ac:	0092      	lsls	r2, r2, #2
 800a7ae:	2520      	movs	r5, #32
 800a7b0:	1aad      	subs	r5, r5, r2
 800a7b2:	6843      	ldr	r3, [r0, #4]
 800a7b4:	6806      	ldr	r6, [r0, #0]
 800a7b6:	1c1c      	adds	r4, r3, #0
 800a7b8:	40ac      	lsls	r4, r5
 800a7ba:	4334      	orrs	r4, r6
 800a7bc:	40d3      	lsrs	r3, r2
 800a7be:	6004      	str	r4, [r0, #0]
 800a7c0:	6043      	str	r3, [r0, #4]
 800a7c2:	3004      	adds	r0, #4
 800a7c4:	4288      	cmp	r0, r1
 800a7c6:	d3f4      	bcc.n	800a7b2 <L_shift+0xc>
 800a7c8:	bd70      	pop	{r4, r5, r6, pc}

0800a7ca <__hexnan>:
 800a7ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a7cc:	680b      	ldr	r3, [r1, #0]
 800a7ce:	b089      	sub	sp, #36	; 0x24
 800a7d0:	9201      	str	r2, [sp, #4]
 800a7d2:	9901      	ldr	r1, [sp, #4]
 800a7d4:	115a      	asrs	r2, r3, #5
 800a7d6:	0092      	lsls	r2, r2, #2
 800a7d8:	188a      	adds	r2, r1, r2
 800a7da:	9203      	str	r2, [sp, #12]
 800a7dc:	221f      	movs	r2, #31
 800a7de:	4013      	ands	r3, r2
 800a7e0:	9007      	str	r0, [sp, #28]
 800a7e2:	9305      	str	r3, [sp, #20]
 800a7e4:	d002      	beq.n	800a7ec <__hexnan+0x22>
 800a7e6:	9a03      	ldr	r2, [sp, #12]
 800a7e8:	3204      	adds	r2, #4
 800a7ea:	9203      	str	r2, [sp, #12]
 800a7ec:	9b07      	ldr	r3, [sp, #28]
 800a7ee:	9e03      	ldr	r6, [sp, #12]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	3e04      	subs	r6, #4
 800a7f4:	2500      	movs	r5, #0
 800a7f6:	6035      	str	r5, [r6, #0]
 800a7f8:	9304      	str	r3, [sp, #16]
 800a7fa:	1c37      	adds	r7, r6, #0
 800a7fc:	1c34      	adds	r4, r6, #0
 800a7fe:	9506      	str	r5, [sp, #24]
 800a800:	9500      	str	r5, [sp, #0]
 800a802:	9b04      	ldr	r3, [sp, #16]
 800a804:	785b      	ldrb	r3, [r3, #1]
 800a806:	9302      	str	r3, [sp, #8]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d03e      	beq.n	800a88a <__hexnan+0xc0>
 800a80c:	9802      	ldr	r0, [sp, #8]
 800a80e:	f7ff fd97 	bl	800a340 <__hexdig_fun>
 800a812:	2800      	cmp	r0, #0
 800a814:	d122      	bne.n	800a85c <__hexnan+0x92>
 800a816:	9902      	ldr	r1, [sp, #8]
 800a818:	2920      	cmp	r1, #32
 800a81a:	d817      	bhi.n	800a84c <__hexnan+0x82>
 800a81c:	9a06      	ldr	r2, [sp, #24]
 800a81e:	9b00      	ldr	r3, [sp, #0]
 800a820:	429a      	cmp	r2, r3
 800a822:	da2e      	bge.n	800a882 <__hexnan+0xb8>
 800a824:	42bc      	cmp	r4, r7
 800a826:	d206      	bcs.n	800a836 <__hexnan+0x6c>
 800a828:	2d07      	cmp	r5, #7
 800a82a:	dc04      	bgt.n	800a836 <__hexnan+0x6c>
 800a82c:	1c20      	adds	r0, r4, #0
 800a82e:	1c39      	adds	r1, r7, #0
 800a830:	1c2a      	adds	r2, r5, #0
 800a832:	f7ff ffb8 	bl	800a7a6 <L_shift>
 800a836:	9901      	ldr	r1, [sp, #4]
 800a838:	2508      	movs	r5, #8
 800a83a:	428c      	cmp	r4, r1
 800a83c:	d921      	bls.n	800a882 <__hexnan+0xb8>
 800a83e:	9a00      	ldr	r2, [sp, #0]
 800a840:	1f27      	subs	r7, r4, #4
 800a842:	2500      	movs	r5, #0
 800a844:	603d      	str	r5, [r7, #0]
 800a846:	9206      	str	r2, [sp, #24]
 800a848:	1c3c      	adds	r4, r7, #0
 800a84a:	e01a      	b.n	800a882 <__hexnan+0xb8>
 800a84c:	9b02      	ldr	r3, [sp, #8]
 800a84e:	2b29      	cmp	r3, #41	; 0x29
 800a850:	d14f      	bne.n	800a8f2 <__hexnan+0x128>
 800a852:	9b04      	ldr	r3, [sp, #16]
 800a854:	9907      	ldr	r1, [sp, #28]
 800a856:	3302      	adds	r3, #2
 800a858:	600b      	str	r3, [r1, #0]
 800a85a:	e016      	b.n	800a88a <__hexnan+0xc0>
 800a85c:	9a00      	ldr	r2, [sp, #0]
 800a85e:	3501      	adds	r5, #1
 800a860:	3201      	adds	r2, #1
 800a862:	9200      	str	r2, [sp, #0]
 800a864:	2d08      	cmp	r5, #8
 800a866:	dd06      	ble.n	800a876 <__hexnan+0xac>
 800a868:	9b01      	ldr	r3, [sp, #4]
 800a86a:	429c      	cmp	r4, r3
 800a86c:	d909      	bls.n	800a882 <__hexnan+0xb8>
 800a86e:	3c04      	subs	r4, #4
 800a870:	2300      	movs	r3, #0
 800a872:	6023      	str	r3, [r4, #0]
 800a874:	2501      	movs	r5, #1
 800a876:	6821      	ldr	r1, [r4, #0]
 800a878:	220f      	movs	r2, #15
 800a87a:	010b      	lsls	r3, r1, #4
 800a87c:	4010      	ands	r0, r2
 800a87e:	4318      	orrs	r0, r3
 800a880:	6020      	str	r0, [r4, #0]
 800a882:	9a04      	ldr	r2, [sp, #16]
 800a884:	3201      	adds	r2, #1
 800a886:	9204      	str	r2, [sp, #16]
 800a888:	e7bb      	b.n	800a802 <__hexnan+0x38>
 800a88a:	9900      	ldr	r1, [sp, #0]
 800a88c:	2900      	cmp	r1, #0
 800a88e:	d030      	beq.n	800a8f2 <__hexnan+0x128>
 800a890:	42bc      	cmp	r4, r7
 800a892:	d206      	bcs.n	800a8a2 <__hexnan+0xd8>
 800a894:	2d07      	cmp	r5, #7
 800a896:	dc04      	bgt.n	800a8a2 <__hexnan+0xd8>
 800a898:	1c20      	adds	r0, r4, #0
 800a89a:	1c39      	adds	r1, r7, #0
 800a89c:	1c2a      	adds	r2, r5, #0
 800a89e:	f7ff ff82 	bl	800a7a6 <L_shift>
 800a8a2:	9a01      	ldr	r2, [sp, #4]
 800a8a4:	4294      	cmp	r4, r2
 800a8a6:	d90b      	bls.n	800a8c0 <__hexnan+0xf6>
 800a8a8:	1c13      	adds	r3, r2, #0
 800a8aa:	3304      	adds	r3, #4
 800a8ac:	cc02      	ldmia	r4!, {r1}
 800a8ae:	1f1a      	subs	r2, r3, #4
 800a8b0:	6011      	str	r1, [r2, #0]
 800a8b2:	42a6      	cmp	r6, r4
 800a8b4:	d2f9      	bcs.n	800a8aa <__hexnan+0xe0>
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	c304      	stmia	r3!, {r2}
 800a8ba:	429e      	cmp	r6, r3
 800a8bc:	d2fb      	bcs.n	800a8b6 <__hexnan+0xec>
 800a8be:	e00d      	b.n	800a8dc <__hexnan+0x112>
 800a8c0:	9b05      	ldr	r3, [sp, #20]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d00a      	beq.n	800a8dc <__hexnan+0x112>
 800a8c6:	9a05      	ldr	r2, [sp, #20]
 800a8c8:	9b03      	ldr	r3, [sp, #12]
 800a8ca:	2120      	movs	r1, #32
 800a8cc:	1a89      	subs	r1, r1, r2
 800a8ce:	2201      	movs	r2, #1
 800a8d0:	3b04      	subs	r3, #4
 800a8d2:	4252      	negs	r2, r2
 800a8d4:	40ca      	lsrs	r2, r1
 800a8d6:	6819      	ldr	r1, [r3, #0]
 800a8d8:	400a      	ands	r2, r1
 800a8da:	601a      	str	r2, [r3, #0]
 800a8dc:	6832      	ldr	r2, [r6, #0]
 800a8de:	2a00      	cmp	r2, #0
 800a8e0:	d109      	bne.n	800a8f6 <__hexnan+0x12c>
 800a8e2:	9b01      	ldr	r3, [sp, #4]
 800a8e4:	429e      	cmp	r6, r3
 800a8e6:	d102      	bne.n	800a8ee <__hexnan+0x124>
 800a8e8:	2301      	movs	r3, #1
 800a8ea:	6033      	str	r3, [r6, #0]
 800a8ec:	e003      	b.n	800a8f6 <__hexnan+0x12c>
 800a8ee:	3e04      	subs	r6, #4
 800a8f0:	e7f4      	b.n	800a8dc <__hexnan+0x112>
 800a8f2:	2004      	movs	r0, #4
 800a8f4:	e000      	b.n	800a8f8 <__hexnan+0x12e>
 800a8f6:	2005      	movs	r0, #5
 800a8f8:	b009      	add	sp, #36	; 0x24
 800a8fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a8fc <_localeconv_r>:
 800a8fc:	4800      	ldr	r0, [pc, #0]	; (800a900 <_localeconv_r+0x4>)
 800a8fe:	4770      	bx	lr
 800a900:	2000050c 	.word	0x2000050c

0800a904 <memchr>:
 800a904:	b2c9      	uxtb	r1, r1
 800a906:	1882      	adds	r2, r0, r2
 800a908:	4290      	cmp	r0, r2
 800a90a:	d004      	beq.n	800a916 <memchr+0x12>
 800a90c:	7803      	ldrb	r3, [r0, #0]
 800a90e:	428b      	cmp	r3, r1
 800a910:	d002      	beq.n	800a918 <memchr+0x14>
 800a912:	3001      	adds	r0, #1
 800a914:	e7f8      	b.n	800a908 <memchr+0x4>
 800a916:	2000      	movs	r0, #0
 800a918:	4770      	bx	lr

0800a91a <_Balloc>:
 800a91a:	b570      	push	{r4, r5, r6, lr}
 800a91c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a91e:	1c04      	adds	r4, r0, #0
 800a920:	1c0e      	adds	r6, r1, #0
 800a922:	2d00      	cmp	r5, #0
 800a924:	d107      	bne.n	800a936 <_Balloc+0x1c>
 800a926:	2010      	movs	r0, #16
 800a928:	f7fc fc32 	bl	8007190 <malloc>
 800a92c:	6260      	str	r0, [r4, #36]	; 0x24
 800a92e:	6045      	str	r5, [r0, #4]
 800a930:	6085      	str	r5, [r0, #8]
 800a932:	6005      	str	r5, [r0, #0]
 800a934:	60c5      	str	r5, [r0, #12]
 800a936:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a938:	68eb      	ldr	r3, [r5, #12]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d009      	beq.n	800a952 <_Balloc+0x38>
 800a93e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a940:	00b2      	lsls	r2, r6, #2
 800a942:	68db      	ldr	r3, [r3, #12]
 800a944:	189a      	adds	r2, r3, r2
 800a946:	6810      	ldr	r0, [r2, #0]
 800a948:	2800      	cmp	r0, #0
 800a94a:	d00e      	beq.n	800a96a <_Balloc+0x50>
 800a94c:	6803      	ldr	r3, [r0, #0]
 800a94e:	6013      	str	r3, [r2, #0]
 800a950:	e017      	b.n	800a982 <_Balloc+0x68>
 800a952:	1c20      	adds	r0, r4, #0
 800a954:	2104      	movs	r1, #4
 800a956:	2221      	movs	r2, #33	; 0x21
 800a958:	f000 fcac 	bl	800b2b4 <_calloc_r>
 800a95c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a95e:	60e8      	str	r0, [r5, #12]
 800a960:	68db      	ldr	r3, [r3, #12]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d1eb      	bne.n	800a93e <_Balloc+0x24>
 800a966:	2000      	movs	r0, #0
 800a968:	e00e      	b.n	800a988 <_Balloc+0x6e>
 800a96a:	2101      	movs	r1, #1
 800a96c:	1c0d      	adds	r5, r1, #0
 800a96e:	40b5      	lsls	r5, r6
 800a970:	1d6a      	adds	r2, r5, #5
 800a972:	0092      	lsls	r2, r2, #2
 800a974:	1c20      	adds	r0, r4, #0
 800a976:	f000 fc9d 	bl	800b2b4 <_calloc_r>
 800a97a:	2800      	cmp	r0, #0
 800a97c:	d0f3      	beq.n	800a966 <_Balloc+0x4c>
 800a97e:	6046      	str	r6, [r0, #4]
 800a980:	6085      	str	r5, [r0, #8]
 800a982:	2200      	movs	r2, #0
 800a984:	6102      	str	r2, [r0, #16]
 800a986:	60c2      	str	r2, [r0, #12]
 800a988:	bd70      	pop	{r4, r5, r6, pc}

0800a98a <_Bfree>:
 800a98a:	b570      	push	{r4, r5, r6, lr}
 800a98c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a98e:	1c06      	adds	r6, r0, #0
 800a990:	1c0d      	adds	r5, r1, #0
 800a992:	2c00      	cmp	r4, #0
 800a994:	d107      	bne.n	800a9a6 <_Bfree+0x1c>
 800a996:	2010      	movs	r0, #16
 800a998:	f7fc fbfa 	bl	8007190 <malloc>
 800a99c:	6270      	str	r0, [r6, #36]	; 0x24
 800a99e:	6044      	str	r4, [r0, #4]
 800a9a0:	6084      	str	r4, [r0, #8]
 800a9a2:	6004      	str	r4, [r0, #0]
 800a9a4:	60c4      	str	r4, [r0, #12]
 800a9a6:	2d00      	cmp	r5, #0
 800a9a8:	d007      	beq.n	800a9ba <_Bfree+0x30>
 800a9aa:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800a9ac:	6869      	ldr	r1, [r5, #4]
 800a9ae:	68d2      	ldr	r2, [r2, #12]
 800a9b0:	008b      	lsls	r3, r1, #2
 800a9b2:	18d3      	adds	r3, r2, r3
 800a9b4:	681a      	ldr	r2, [r3, #0]
 800a9b6:	602a      	str	r2, [r5, #0]
 800a9b8:	601d      	str	r5, [r3, #0]
 800a9ba:	bd70      	pop	{r4, r5, r6, pc}

0800a9bc <__multadd>:
 800a9bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a9be:	1c0c      	adds	r4, r1, #0
 800a9c0:	1c1e      	adds	r6, r3, #0
 800a9c2:	690d      	ldr	r5, [r1, #16]
 800a9c4:	1c07      	adds	r7, r0, #0
 800a9c6:	3114      	adds	r1, #20
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	6808      	ldr	r0, [r1, #0]
 800a9cc:	3301      	adds	r3, #1
 800a9ce:	b280      	uxth	r0, r0
 800a9d0:	4350      	muls	r0, r2
 800a9d2:	1980      	adds	r0, r0, r6
 800a9d4:	4684      	mov	ip, r0
 800a9d6:	0c06      	lsrs	r6, r0, #16
 800a9d8:	6808      	ldr	r0, [r1, #0]
 800a9da:	0c00      	lsrs	r0, r0, #16
 800a9dc:	4350      	muls	r0, r2
 800a9de:	1830      	adds	r0, r6, r0
 800a9e0:	0c06      	lsrs	r6, r0, #16
 800a9e2:	0400      	lsls	r0, r0, #16
 800a9e4:	9001      	str	r0, [sp, #4]
 800a9e6:	4660      	mov	r0, ip
 800a9e8:	b280      	uxth	r0, r0
 800a9ea:	4684      	mov	ip, r0
 800a9ec:	9801      	ldr	r0, [sp, #4]
 800a9ee:	4484      	add	ip, r0
 800a9f0:	4660      	mov	r0, ip
 800a9f2:	c101      	stmia	r1!, {r0}
 800a9f4:	42ab      	cmp	r3, r5
 800a9f6:	dbe8      	blt.n	800a9ca <__multadd+0xe>
 800a9f8:	2e00      	cmp	r6, #0
 800a9fa:	d01b      	beq.n	800aa34 <__multadd+0x78>
 800a9fc:	68a3      	ldr	r3, [r4, #8]
 800a9fe:	429d      	cmp	r5, r3
 800aa00:	db12      	blt.n	800aa28 <__multadd+0x6c>
 800aa02:	6861      	ldr	r1, [r4, #4]
 800aa04:	1c38      	adds	r0, r7, #0
 800aa06:	3101      	adds	r1, #1
 800aa08:	f7ff ff87 	bl	800a91a <_Balloc>
 800aa0c:	6922      	ldr	r2, [r4, #16]
 800aa0e:	1c21      	adds	r1, r4, #0
 800aa10:	3202      	adds	r2, #2
 800aa12:	9001      	str	r0, [sp, #4]
 800aa14:	310c      	adds	r1, #12
 800aa16:	0092      	lsls	r2, r2, #2
 800aa18:	300c      	adds	r0, #12
 800aa1a:	f7fc fdc7 	bl	80075ac <memcpy>
 800aa1e:	1c21      	adds	r1, r4, #0
 800aa20:	1c38      	adds	r0, r7, #0
 800aa22:	f7ff ffb2 	bl	800a98a <_Bfree>
 800aa26:	9c01      	ldr	r4, [sp, #4]
 800aa28:	1d2b      	adds	r3, r5, #4
 800aa2a:	009b      	lsls	r3, r3, #2
 800aa2c:	18e3      	adds	r3, r4, r3
 800aa2e:	3501      	adds	r5, #1
 800aa30:	605e      	str	r6, [r3, #4]
 800aa32:	6125      	str	r5, [r4, #16]
 800aa34:	1c20      	adds	r0, r4, #0
 800aa36:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0800aa38 <__s2b>:
 800aa38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aa3a:	1c06      	adds	r6, r0, #0
 800aa3c:	1c18      	adds	r0, r3, #0
 800aa3e:	1c0f      	adds	r7, r1, #0
 800aa40:	3008      	adds	r0, #8
 800aa42:	2109      	movs	r1, #9
 800aa44:	9301      	str	r3, [sp, #4]
 800aa46:	1c14      	adds	r4, r2, #0
 800aa48:	f7f5 fbca 	bl	80001e0 <__aeabi_idiv>
 800aa4c:	2301      	movs	r3, #1
 800aa4e:	2100      	movs	r1, #0
 800aa50:	4298      	cmp	r0, r3
 800aa52:	dd02      	ble.n	800aa5a <__s2b+0x22>
 800aa54:	005b      	lsls	r3, r3, #1
 800aa56:	3101      	adds	r1, #1
 800aa58:	e7fa      	b.n	800aa50 <__s2b+0x18>
 800aa5a:	1c30      	adds	r0, r6, #0
 800aa5c:	f7ff ff5d 	bl	800a91a <_Balloc>
 800aa60:	9b08      	ldr	r3, [sp, #32]
 800aa62:	1c01      	adds	r1, r0, #0
 800aa64:	6143      	str	r3, [r0, #20]
 800aa66:	2301      	movs	r3, #1
 800aa68:	6103      	str	r3, [r0, #16]
 800aa6a:	2c09      	cmp	r4, #9
 800aa6c:	dd12      	ble.n	800aa94 <__s2b+0x5c>
 800aa6e:	1c3b      	adds	r3, r7, #0
 800aa70:	3309      	adds	r3, #9
 800aa72:	9300      	str	r3, [sp, #0]
 800aa74:	1c1d      	adds	r5, r3, #0
 800aa76:	193f      	adds	r7, r7, r4
 800aa78:	782b      	ldrb	r3, [r5, #0]
 800aa7a:	1c30      	adds	r0, r6, #0
 800aa7c:	3b30      	subs	r3, #48	; 0x30
 800aa7e:	220a      	movs	r2, #10
 800aa80:	f7ff ff9c 	bl	800a9bc <__multadd>
 800aa84:	3501      	adds	r5, #1
 800aa86:	1c01      	adds	r1, r0, #0
 800aa88:	42bd      	cmp	r5, r7
 800aa8a:	d1f5      	bne.n	800aa78 <__s2b+0x40>
 800aa8c:	9b00      	ldr	r3, [sp, #0]
 800aa8e:	191f      	adds	r7, r3, r4
 800aa90:	3f08      	subs	r7, #8
 800aa92:	e001      	b.n	800aa98 <__s2b+0x60>
 800aa94:	370a      	adds	r7, #10
 800aa96:	2409      	movs	r4, #9
 800aa98:	1c25      	adds	r5, r4, #0
 800aa9a:	9b01      	ldr	r3, [sp, #4]
 800aa9c:	429d      	cmp	r5, r3
 800aa9e:	da09      	bge.n	800aab4 <__s2b+0x7c>
 800aaa0:	1b3b      	subs	r3, r7, r4
 800aaa2:	5d5b      	ldrb	r3, [r3, r5]
 800aaa4:	1c30      	adds	r0, r6, #0
 800aaa6:	3b30      	subs	r3, #48	; 0x30
 800aaa8:	220a      	movs	r2, #10
 800aaaa:	f7ff ff87 	bl	800a9bc <__multadd>
 800aaae:	3501      	adds	r5, #1
 800aab0:	1c01      	adds	r1, r0, #0
 800aab2:	e7f2      	b.n	800aa9a <__s2b+0x62>
 800aab4:	1c08      	adds	r0, r1, #0
 800aab6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0800aab8 <__hi0bits>:
 800aab8:	2200      	movs	r2, #0
 800aaba:	1c03      	adds	r3, r0, #0
 800aabc:	0c01      	lsrs	r1, r0, #16
 800aabe:	4291      	cmp	r1, r2
 800aac0:	d101      	bne.n	800aac6 <__hi0bits+0xe>
 800aac2:	0403      	lsls	r3, r0, #16
 800aac4:	2210      	movs	r2, #16
 800aac6:	0e19      	lsrs	r1, r3, #24
 800aac8:	d101      	bne.n	800aace <__hi0bits+0x16>
 800aaca:	3208      	adds	r2, #8
 800aacc:	021b      	lsls	r3, r3, #8
 800aace:	0f19      	lsrs	r1, r3, #28
 800aad0:	d101      	bne.n	800aad6 <__hi0bits+0x1e>
 800aad2:	3204      	adds	r2, #4
 800aad4:	011b      	lsls	r3, r3, #4
 800aad6:	0f99      	lsrs	r1, r3, #30
 800aad8:	d101      	bne.n	800aade <__hi0bits+0x26>
 800aada:	3202      	adds	r2, #2
 800aadc:	009b      	lsls	r3, r3, #2
 800aade:	2b00      	cmp	r3, #0
 800aae0:	db04      	blt.n	800aaec <__hi0bits+0x34>
 800aae2:	2020      	movs	r0, #32
 800aae4:	0059      	lsls	r1, r3, #1
 800aae6:	d502      	bpl.n	800aaee <__hi0bits+0x36>
 800aae8:	1c50      	adds	r0, r2, #1
 800aaea:	e000      	b.n	800aaee <__hi0bits+0x36>
 800aaec:	1c10      	adds	r0, r2, #0
 800aaee:	4770      	bx	lr

0800aaf0 <__lo0bits>:
 800aaf0:	6803      	ldr	r3, [r0, #0]
 800aaf2:	2207      	movs	r2, #7
 800aaf4:	1c01      	adds	r1, r0, #0
 800aaf6:	401a      	ands	r2, r3
 800aaf8:	d00b      	beq.n	800ab12 <__lo0bits+0x22>
 800aafa:	2201      	movs	r2, #1
 800aafc:	2000      	movs	r0, #0
 800aafe:	4213      	tst	r3, r2
 800ab00:	d122      	bne.n	800ab48 <__lo0bits+0x58>
 800ab02:	2002      	movs	r0, #2
 800ab04:	4203      	tst	r3, r0
 800ab06:	d001      	beq.n	800ab0c <__lo0bits+0x1c>
 800ab08:	40d3      	lsrs	r3, r2
 800ab0a:	e01b      	b.n	800ab44 <__lo0bits+0x54>
 800ab0c:	089b      	lsrs	r3, r3, #2
 800ab0e:	600b      	str	r3, [r1, #0]
 800ab10:	e01a      	b.n	800ab48 <__lo0bits+0x58>
 800ab12:	b298      	uxth	r0, r3
 800ab14:	2800      	cmp	r0, #0
 800ab16:	d101      	bne.n	800ab1c <__lo0bits+0x2c>
 800ab18:	0c1b      	lsrs	r3, r3, #16
 800ab1a:	2210      	movs	r2, #16
 800ab1c:	b2d8      	uxtb	r0, r3
 800ab1e:	2800      	cmp	r0, #0
 800ab20:	d101      	bne.n	800ab26 <__lo0bits+0x36>
 800ab22:	3208      	adds	r2, #8
 800ab24:	0a1b      	lsrs	r3, r3, #8
 800ab26:	0718      	lsls	r0, r3, #28
 800ab28:	d101      	bne.n	800ab2e <__lo0bits+0x3e>
 800ab2a:	3204      	adds	r2, #4
 800ab2c:	091b      	lsrs	r3, r3, #4
 800ab2e:	0798      	lsls	r0, r3, #30
 800ab30:	d101      	bne.n	800ab36 <__lo0bits+0x46>
 800ab32:	3202      	adds	r2, #2
 800ab34:	089b      	lsrs	r3, r3, #2
 800ab36:	07d8      	lsls	r0, r3, #31
 800ab38:	d404      	bmi.n	800ab44 <__lo0bits+0x54>
 800ab3a:	085b      	lsrs	r3, r3, #1
 800ab3c:	2020      	movs	r0, #32
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d002      	beq.n	800ab48 <__lo0bits+0x58>
 800ab42:	3201      	adds	r2, #1
 800ab44:	600b      	str	r3, [r1, #0]
 800ab46:	1c10      	adds	r0, r2, #0
 800ab48:	4770      	bx	lr

0800ab4a <__i2b>:
 800ab4a:	b510      	push	{r4, lr}
 800ab4c:	1c0c      	adds	r4, r1, #0
 800ab4e:	2101      	movs	r1, #1
 800ab50:	f7ff fee3 	bl	800a91a <_Balloc>
 800ab54:	2301      	movs	r3, #1
 800ab56:	6144      	str	r4, [r0, #20]
 800ab58:	6103      	str	r3, [r0, #16]
 800ab5a:	bd10      	pop	{r4, pc}

0800ab5c <__multiply>:
 800ab5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab5e:	1c0c      	adds	r4, r1, #0
 800ab60:	1c15      	adds	r5, r2, #0
 800ab62:	6909      	ldr	r1, [r1, #16]
 800ab64:	6912      	ldr	r2, [r2, #16]
 800ab66:	b08b      	sub	sp, #44	; 0x2c
 800ab68:	4291      	cmp	r1, r2
 800ab6a:	da02      	bge.n	800ab72 <__multiply+0x16>
 800ab6c:	1c23      	adds	r3, r4, #0
 800ab6e:	1c2c      	adds	r4, r5, #0
 800ab70:	1c1d      	adds	r5, r3, #0
 800ab72:	6927      	ldr	r7, [r4, #16]
 800ab74:	692e      	ldr	r6, [r5, #16]
 800ab76:	68a2      	ldr	r2, [r4, #8]
 800ab78:	19bb      	adds	r3, r7, r6
 800ab7a:	6861      	ldr	r1, [r4, #4]
 800ab7c:	9302      	str	r3, [sp, #8]
 800ab7e:	4293      	cmp	r3, r2
 800ab80:	dd00      	ble.n	800ab84 <__multiply+0x28>
 800ab82:	3101      	adds	r1, #1
 800ab84:	f7ff fec9 	bl	800a91a <_Balloc>
 800ab88:	1c03      	adds	r3, r0, #0
 800ab8a:	9003      	str	r0, [sp, #12]
 800ab8c:	9802      	ldr	r0, [sp, #8]
 800ab8e:	3314      	adds	r3, #20
 800ab90:	0082      	lsls	r2, r0, #2
 800ab92:	189a      	adds	r2, r3, r2
 800ab94:	1c19      	adds	r1, r3, #0
 800ab96:	4291      	cmp	r1, r2
 800ab98:	d202      	bcs.n	800aba0 <__multiply+0x44>
 800ab9a:	2000      	movs	r0, #0
 800ab9c:	c101      	stmia	r1!, {r0}
 800ab9e:	e7fa      	b.n	800ab96 <__multiply+0x3a>
 800aba0:	3514      	adds	r5, #20
 800aba2:	3414      	adds	r4, #20
 800aba4:	00bf      	lsls	r7, r7, #2
 800aba6:	46ac      	mov	ip, r5
 800aba8:	00b6      	lsls	r6, r6, #2
 800abaa:	19e7      	adds	r7, r4, r7
 800abac:	4466      	add	r6, ip
 800abae:	9404      	str	r4, [sp, #16]
 800abb0:	9707      	str	r7, [sp, #28]
 800abb2:	9609      	str	r6, [sp, #36]	; 0x24
 800abb4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800abb6:	45b4      	cmp	ip, r6
 800abb8:	d256      	bcs.n	800ac68 <__multiply+0x10c>
 800abba:	4665      	mov	r5, ip
 800abbc:	882d      	ldrh	r5, [r5, #0]
 800abbe:	9505      	str	r5, [sp, #20]
 800abc0:	2d00      	cmp	r5, #0
 800abc2:	d01f      	beq.n	800ac04 <__multiply+0xa8>
 800abc4:	9c04      	ldr	r4, [sp, #16]
 800abc6:	1c19      	adds	r1, r3, #0
 800abc8:	2000      	movs	r0, #0
 800abca:	680f      	ldr	r7, [r1, #0]
 800abcc:	cc40      	ldmia	r4!, {r6}
 800abce:	b2bf      	uxth	r7, r7
 800abd0:	9d05      	ldr	r5, [sp, #20]
 800abd2:	9706      	str	r7, [sp, #24]
 800abd4:	b2b7      	uxth	r7, r6
 800abd6:	436f      	muls	r7, r5
 800abd8:	9d06      	ldr	r5, [sp, #24]
 800abda:	0c36      	lsrs	r6, r6, #16
 800abdc:	19ef      	adds	r7, r5, r7
 800abde:	183f      	adds	r7, r7, r0
 800abe0:	6808      	ldr	r0, [r1, #0]
 800abe2:	9108      	str	r1, [sp, #32]
 800abe4:	0c05      	lsrs	r5, r0, #16
 800abe6:	9805      	ldr	r0, [sp, #20]
 800abe8:	4346      	muls	r6, r0
 800abea:	0c38      	lsrs	r0, r7, #16
 800abec:	19ad      	adds	r5, r5, r6
 800abee:	182d      	adds	r5, r5, r0
 800abf0:	0c28      	lsrs	r0, r5, #16
 800abf2:	b2bf      	uxth	r7, r7
 800abf4:	042d      	lsls	r5, r5, #16
 800abf6:	433d      	orrs	r5, r7
 800abf8:	c120      	stmia	r1!, {r5}
 800abfa:	9d07      	ldr	r5, [sp, #28]
 800abfc:	42ac      	cmp	r4, r5
 800abfe:	d3e4      	bcc.n	800abca <__multiply+0x6e>
 800ac00:	9e08      	ldr	r6, [sp, #32]
 800ac02:	6070      	str	r0, [r6, #4]
 800ac04:	4667      	mov	r7, ip
 800ac06:	887d      	ldrh	r5, [r7, #2]
 800ac08:	2d00      	cmp	r5, #0
 800ac0a:	d022      	beq.n	800ac52 <__multiply+0xf6>
 800ac0c:	2600      	movs	r6, #0
 800ac0e:	6818      	ldr	r0, [r3, #0]
 800ac10:	9c04      	ldr	r4, [sp, #16]
 800ac12:	1c19      	adds	r1, r3, #0
 800ac14:	9601      	str	r6, [sp, #4]
 800ac16:	8827      	ldrh	r7, [r4, #0]
 800ac18:	b280      	uxth	r0, r0
 800ac1a:	436f      	muls	r7, r5
 800ac1c:	9706      	str	r7, [sp, #24]
 800ac1e:	9e06      	ldr	r6, [sp, #24]
 800ac20:	884f      	ldrh	r7, [r1, #2]
 800ac22:	9105      	str	r1, [sp, #20]
 800ac24:	19f6      	adds	r6, r6, r7
 800ac26:	9f01      	ldr	r7, [sp, #4]
 800ac28:	19f7      	adds	r7, r6, r7
 800ac2a:	9706      	str	r7, [sp, #24]
 800ac2c:	043f      	lsls	r7, r7, #16
 800ac2e:	4338      	orrs	r0, r7
 800ac30:	6008      	str	r0, [r1, #0]
 800ac32:	cc01      	ldmia	r4!, {r0}
 800ac34:	888f      	ldrh	r7, [r1, #4]
 800ac36:	0c00      	lsrs	r0, r0, #16
 800ac38:	4368      	muls	r0, r5
 800ac3a:	19c0      	adds	r0, r0, r7
 800ac3c:	9f06      	ldr	r7, [sp, #24]
 800ac3e:	3104      	adds	r1, #4
 800ac40:	0c3e      	lsrs	r6, r7, #16
 800ac42:	1980      	adds	r0, r0, r6
 800ac44:	9f07      	ldr	r7, [sp, #28]
 800ac46:	0c06      	lsrs	r6, r0, #16
 800ac48:	9601      	str	r6, [sp, #4]
 800ac4a:	42a7      	cmp	r7, r4
 800ac4c:	d8e3      	bhi.n	800ac16 <__multiply+0xba>
 800ac4e:	9905      	ldr	r1, [sp, #20]
 800ac50:	6048      	str	r0, [r1, #4]
 800ac52:	2504      	movs	r5, #4
 800ac54:	44ac      	add	ip, r5
 800ac56:	195b      	adds	r3, r3, r5
 800ac58:	e7ac      	b.n	800abb4 <__multiply+0x58>
 800ac5a:	3a04      	subs	r2, #4
 800ac5c:	6810      	ldr	r0, [r2, #0]
 800ac5e:	2800      	cmp	r0, #0
 800ac60:	d105      	bne.n	800ac6e <__multiply+0x112>
 800ac62:	9f02      	ldr	r7, [sp, #8]
 800ac64:	3f01      	subs	r7, #1
 800ac66:	9702      	str	r7, [sp, #8]
 800ac68:	9d02      	ldr	r5, [sp, #8]
 800ac6a:	2d00      	cmp	r5, #0
 800ac6c:	dcf5      	bgt.n	800ac5a <__multiply+0xfe>
 800ac6e:	9f03      	ldr	r7, [sp, #12]
 800ac70:	9e02      	ldr	r6, [sp, #8]
 800ac72:	1c38      	adds	r0, r7, #0
 800ac74:	613e      	str	r6, [r7, #16]
 800ac76:	b00b      	add	sp, #44	; 0x2c
 800ac78:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800ac7c <__pow5mult>:
 800ac7c:	2303      	movs	r3, #3
 800ac7e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ac80:	4013      	ands	r3, r2
 800ac82:	1c05      	adds	r5, r0, #0
 800ac84:	1c0e      	adds	r6, r1, #0
 800ac86:	1c14      	adds	r4, r2, #0
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d007      	beq.n	800ac9c <__pow5mult+0x20>
 800ac8c:	4a22      	ldr	r2, [pc, #136]	; (800ad18 <__pow5mult+0x9c>)
 800ac8e:	3b01      	subs	r3, #1
 800ac90:	009b      	lsls	r3, r3, #2
 800ac92:	589a      	ldr	r2, [r3, r2]
 800ac94:	2300      	movs	r3, #0
 800ac96:	f7ff fe91 	bl	800a9bc <__multadd>
 800ac9a:	1c06      	adds	r6, r0, #0
 800ac9c:	10a4      	asrs	r4, r4, #2
 800ac9e:	9401      	str	r4, [sp, #4]
 800aca0:	d037      	beq.n	800ad12 <__pow5mult+0x96>
 800aca2:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 800aca4:	2c00      	cmp	r4, #0
 800aca6:	d107      	bne.n	800acb8 <__pow5mult+0x3c>
 800aca8:	2010      	movs	r0, #16
 800acaa:	f7fc fa71 	bl	8007190 <malloc>
 800acae:	6268      	str	r0, [r5, #36]	; 0x24
 800acb0:	6044      	str	r4, [r0, #4]
 800acb2:	6084      	str	r4, [r0, #8]
 800acb4:	6004      	str	r4, [r0, #0]
 800acb6:	60c4      	str	r4, [r0, #12]
 800acb8:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 800acba:	68bc      	ldr	r4, [r7, #8]
 800acbc:	2c00      	cmp	r4, #0
 800acbe:	d110      	bne.n	800ace2 <__pow5mult+0x66>
 800acc0:	1c28      	adds	r0, r5, #0
 800acc2:	4916      	ldr	r1, [pc, #88]	; (800ad1c <__pow5mult+0xa0>)
 800acc4:	f7ff ff41 	bl	800ab4a <__i2b>
 800acc8:	2300      	movs	r3, #0
 800acca:	60b8      	str	r0, [r7, #8]
 800accc:	1c04      	adds	r4, r0, #0
 800acce:	6003      	str	r3, [r0, #0]
 800acd0:	e007      	b.n	800ace2 <__pow5mult+0x66>
 800acd2:	9b01      	ldr	r3, [sp, #4]
 800acd4:	105b      	asrs	r3, r3, #1
 800acd6:	9301      	str	r3, [sp, #4]
 800acd8:	d01b      	beq.n	800ad12 <__pow5mult+0x96>
 800acda:	6820      	ldr	r0, [r4, #0]
 800acdc:	2800      	cmp	r0, #0
 800acde:	d00f      	beq.n	800ad00 <__pow5mult+0x84>
 800ace0:	1c04      	adds	r4, r0, #0
 800ace2:	9b01      	ldr	r3, [sp, #4]
 800ace4:	07db      	lsls	r3, r3, #31
 800ace6:	d5f4      	bpl.n	800acd2 <__pow5mult+0x56>
 800ace8:	1c31      	adds	r1, r6, #0
 800acea:	1c22      	adds	r2, r4, #0
 800acec:	1c28      	adds	r0, r5, #0
 800acee:	f7ff ff35 	bl	800ab5c <__multiply>
 800acf2:	1c31      	adds	r1, r6, #0
 800acf4:	1c07      	adds	r7, r0, #0
 800acf6:	1c28      	adds	r0, r5, #0
 800acf8:	f7ff fe47 	bl	800a98a <_Bfree>
 800acfc:	1c3e      	adds	r6, r7, #0
 800acfe:	e7e8      	b.n	800acd2 <__pow5mult+0x56>
 800ad00:	1c28      	adds	r0, r5, #0
 800ad02:	1c21      	adds	r1, r4, #0
 800ad04:	1c22      	adds	r2, r4, #0
 800ad06:	f7ff ff29 	bl	800ab5c <__multiply>
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	6020      	str	r0, [r4, #0]
 800ad0e:	6003      	str	r3, [r0, #0]
 800ad10:	e7e6      	b.n	800ace0 <__pow5mult+0x64>
 800ad12:	1c30      	adds	r0, r6, #0
 800ad14:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ad16:	46c0      	nop			; (mov r8, r8)
 800ad18:	0800c5d8 	.word	0x0800c5d8
 800ad1c:	00000271 	.word	0x00000271

0800ad20 <__lshift>:
 800ad20:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad22:	1c0c      	adds	r4, r1, #0
 800ad24:	b085      	sub	sp, #20
 800ad26:	9003      	str	r0, [sp, #12]
 800ad28:	6920      	ldr	r0, [r4, #16]
 800ad2a:	1155      	asrs	r5, r2, #5
 800ad2c:	1828      	adds	r0, r5, r0
 800ad2e:	9002      	str	r0, [sp, #8]
 800ad30:	6849      	ldr	r1, [r1, #4]
 800ad32:	3001      	adds	r0, #1
 800ad34:	68a3      	ldr	r3, [r4, #8]
 800ad36:	1c17      	adds	r7, r2, #0
 800ad38:	9000      	str	r0, [sp, #0]
 800ad3a:	9a00      	ldr	r2, [sp, #0]
 800ad3c:	429a      	cmp	r2, r3
 800ad3e:	dd02      	ble.n	800ad46 <__lshift+0x26>
 800ad40:	3101      	adds	r1, #1
 800ad42:	005b      	lsls	r3, r3, #1
 800ad44:	e7f9      	b.n	800ad3a <__lshift+0x1a>
 800ad46:	9803      	ldr	r0, [sp, #12]
 800ad48:	f7ff fde7 	bl	800a91a <_Balloc>
 800ad4c:	1c02      	adds	r2, r0, #0
 800ad4e:	1c06      	adds	r6, r0, #0
 800ad50:	3214      	adds	r2, #20
 800ad52:	2300      	movs	r3, #0
 800ad54:	42ab      	cmp	r3, r5
 800ad56:	da04      	bge.n	800ad62 <__lshift+0x42>
 800ad58:	0099      	lsls	r1, r3, #2
 800ad5a:	2000      	movs	r0, #0
 800ad5c:	5050      	str	r0, [r2, r1]
 800ad5e:	3301      	adds	r3, #1
 800ad60:	e7f8      	b.n	800ad54 <__lshift+0x34>
 800ad62:	43eb      	mvns	r3, r5
 800ad64:	17db      	asrs	r3, r3, #31
 800ad66:	401d      	ands	r5, r3
 800ad68:	00ad      	lsls	r5, r5, #2
 800ad6a:	6920      	ldr	r0, [r4, #16]
 800ad6c:	1955      	adds	r5, r2, r5
 800ad6e:	1c22      	adds	r2, r4, #0
 800ad70:	3214      	adds	r2, #20
 800ad72:	0083      	lsls	r3, r0, #2
 800ad74:	189b      	adds	r3, r3, r2
 800ad76:	469c      	mov	ip, r3
 800ad78:	231f      	movs	r3, #31
 800ad7a:	401f      	ands	r7, r3
 800ad7c:	d014      	beq.n	800ada8 <__lshift+0x88>
 800ad7e:	2320      	movs	r3, #32
 800ad80:	1bdb      	subs	r3, r3, r7
 800ad82:	9301      	str	r3, [sp, #4]
 800ad84:	2300      	movs	r3, #0
 800ad86:	6810      	ldr	r0, [r2, #0]
 800ad88:	1c29      	adds	r1, r5, #0
 800ad8a:	40b8      	lsls	r0, r7
 800ad8c:	4303      	orrs	r3, r0
 800ad8e:	c508      	stmia	r5!, {r3}
 800ad90:	ca08      	ldmia	r2!, {r3}
 800ad92:	9801      	ldr	r0, [sp, #4]
 800ad94:	40c3      	lsrs	r3, r0
 800ad96:	4594      	cmp	ip, r2
 800ad98:	d8f5      	bhi.n	800ad86 <__lshift+0x66>
 800ad9a:	604b      	str	r3, [r1, #4]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d007      	beq.n	800adb0 <__lshift+0x90>
 800ada0:	9902      	ldr	r1, [sp, #8]
 800ada2:	3102      	adds	r1, #2
 800ada4:	9100      	str	r1, [sp, #0]
 800ada6:	e003      	b.n	800adb0 <__lshift+0x90>
 800ada8:	ca08      	ldmia	r2!, {r3}
 800adaa:	c508      	stmia	r5!, {r3}
 800adac:	4594      	cmp	ip, r2
 800adae:	d8fb      	bhi.n	800ada8 <__lshift+0x88>
 800adb0:	9b00      	ldr	r3, [sp, #0]
 800adb2:	9803      	ldr	r0, [sp, #12]
 800adb4:	3b01      	subs	r3, #1
 800adb6:	6133      	str	r3, [r6, #16]
 800adb8:	1c21      	adds	r1, r4, #0
 800adba:	f7ff fde6 	bl	800a98a <_Bfree>
 800adbe:	1c30      	adds	r0, r6, #0
 800adc0:	b005      	add	sp, #20
 800adc2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800adc4 <__mcmp>:
 800adc4:	b510      	push	{r4, lr}
 800adc6:	6902      	ldr	r2, [r0, #16]
 800adc8:	690c      	ldr	r4, [r1, #16]
 800adca:	1c03      	adds	r3, r0, #0
 800adcc:	1b10      	subs	r0, r2, r4
 800adce:	d113      	bne.n	800adf8 <__mcmp+0x34>
 800add0:	1c1a      	adds	r2, r3, #0
 800add2:	00a0      	lsls	r0, r4, #2
 800add4:	3214      	adds	r2, #20
 800add6:	3114      	adds	r1, #20
 800add8:	1813      	adds	r3, r2, r0
 800adda:	1809      	adds	r1, r1, r0
 800addc:	3b04      	subs	r3, #4
 800adde:	3904      	subs	r1, #4
 800ade0:	681c      	ldr	r4, [r3, #0]
 800ade2:	6808      	ldr	r0, [r1, #0]
 800ade4:	4284      	cmp	r4, r0
 800ade6:	d004      	beq.n	800adf2 <__mcmp+0x2e>
 800ade8:	4284      	cmp	r4, r0
 800adea:	4180      	sbcs	r0, r0
 800adec:	2301      	movs	r3, #1
 800adee:	4318      	orrs	r0, r3
 800adf0:	e002      	b.n	800adf8 <__mcmp+0x34>
 800adf2:	4293      	cmp	r3, r2
 800adf4:	d8f2      	bhi.n	800addc <__mcmp+0x18>
 800adf6:	2000      	movs	r0, #0
 800adf8:	bd10      	pop	{r4, pc}

0800adfa <__mdiff>:
 800adfa:	b5f0      	push	{r4, r5, r6, r7, lr}
 800adfc:	1c07      	adds	r7, r0, #0
 800adfe:	b085      	sub	sp, #20
 800ae00:	1c08      	adds	r0, r1, #0
 800ae02:	1c0d      	adds	r5, r1, #0
 800ae04:	1c11      	adds	r1, r2, #0
 800ae06:	1c14      	adds	r4, r2, #0
 800ae08:	f7ff ffdc 	bl	800adc4 <__mcmp>
 800ae0c:	1e06      	subs	r6, r0, #0
 800ae0e:	d107      	bne.n	800ae20 <__mdiff+0x26>
 800ae10:	1c38      	adds	r0, r7, #0
 800ae12:	1c31      	adds	r1, r6, #0
 800ae14:	f7ff fd81 	bl	800a91a <_Balloc>
 800ae18:	2301      	movs	r3, #1
 800ae1a:	6103      	str	r3, [r0, #16]
 800ae1c:	6146      	str	r6, [r0, #20]
 800ae1e:	e050      	b.n	800aec2 <__mdiff+0xc8>
 800ae20:	2800      	cmp	r0, #0
 800ae22:	db01      	blt.n	800ae28 <__mdiff+0x2e>
 800ae24:	2600      	movs	r6, #0
 800ae26:	e003      	b.n	800ae30 <__mdiff+0x36>
 800ae28:	1c2b      	adds	r3, r5, #0
 800ae2a:	2601      	movs	r6, #1
 800ae2c:	1c25      	adds	r5, r4, #0
 800ae2e:	1c1c      	adds	r4, r3, #0
 800ae30:	6869      	ldr	r1, [r5, #4]
 800ae32:	1c38      	adds	r0, r7, #0
 800ae34:	f7ff fd71 	bl	800a91a <_Balloc>
 800ae38:	692a      	ldr	r2, [r5, #16]
 800ae3a:	1c2b      	adds	r3, r5, #0
 800ae3c:	3314      	adds	r3, #20
 800ae3e:	0091      	lsls	r1, r2, #2
 800ae40:	1859      	adds	r1, r3, r1
 800ae42:	9102      	str	r1, [sp, #8]
 800ae44:	6921      	ldr	r1, [r4, #16]
 800ae46:	1c25      	adds	r5, r4, #0
 800ae48:	3514      	adds	r5, #20
 800ae4a:	0089      	lsls	r1, r1, #2
 800ae4c:	1869      	adds	r1, r5, r1
 800ae4e:	1c04      	adds	r4, r0, #0
 800ae50:	9103      	str	r1, [sp, #12]
 800ae52:	60c6      	str	r6, [r0, #12]
 800ae54:	3414      	adds	r4, #20
 800ae56:	2100      	movs	r1, #0
 800ae58:	cb40      	ldmia	r3!, {r6}
 800ae5a:	cd80      	ldmia	r5!, {r7}
 800ae5c:	46b4      	mov	ip, r6
 800ae5e:	b2b6      	uxth	r6, r6
 800ae60:	1871      	adds	r1, r6, r1
 800ae62:	b2be      	uxth	r6, r7
 800ae64:	1b8e      	subs	r6, r1, r6
 800ae66:	4661      	mov	r1, ip
 800ae68:	9601      	str	r6, [sp, #4]
 800ae6a:	0c3f      	lsrs	r7, r7, #16
 800ae6c:	0c0e      	lsrs	r6, r1, #16
 800ae6e:	1bf7      	subs	r7, r6, r7
 800ae70:	9e01      	ldr	r6, [sp, #4]
 800ae72:	3404      	adds	r4, #4
 800ae74:	1431      	asrs	r1, r6, #16
 800ae76:	187f      	adds	r7, r7, r1
 800ae78:	1439      	asrs	r1, r7, #16
 800ae7a:	043f      	lsls	r7, r7, #16
 800ae7c:	9700      	str	r7, [sp, #0]
 800ae7e:	9f01      	ldr	r7, [sp, #4]
 800ae80:	1f26      	subs	r6, r4, #4
 800ae82:	46b4      	mov	ip, r6
 800ae84:	b2be      	uxth	r6, r7
 800ae86:	9f00      	ldr	r7, [sp, #0]
 800ae88:	4337      	orrs	r7, r6
 800ae8a:	4666      	mov	r6, ip
 800ae8c:	6037      	str	r7, [r6, #0]
 800ae8e:	9f03      	ldr	r7, [sp, #12]
 800ae90:	42bd      	cmp	r5, r7
 800ae92:	d3e1      	bcc.n	800ae58 <__mdiff+0x5e>
 800ae94:	9e02      	ldr	r6, [sp, #8]
 800ae96:	1c25      	adds	r5, r4, #0
 800ae98:	42b3      	cmp	r3, r6
 800ae9a:	d20b      	bcs.n	800aeb4 <__mdiff+0xba>
 800ae9c:	cb80      	ldmia	r3!, {r7}
 800ae9e:	b2bd      	uxth	r5, r7
 800aea0:	186d      	adds	r5, r5, r1
 800aea2:	142e      	asrs	r6, r5, #16
 800aea4:	0c3f      	lsrs	r7, r7, #16
 800aea6:	19f6      	adds	r6, r6, r7
 800aea8:	1431      	asrs	r1, r6, #16
 800aeaa:	b2ad      	uxth	r5, r5
 800aeac:	0436      	lsls	r6, r6, #16
 800aeae:	4335      	orrs	r5, r6
 800aeb0:	c420      	stmia	r4!, {r5}
 800aeb2:	e7ef      	b.n	800ae94 <__mdiff+0x9a>
 800aeb4:	3d04      	subs	r5, #4
 800aeb6:	682f      	ldr	r7, [r5, #0]
 800aeb8:	2f00      	cmp	r7, #0
 800aeba:	d101      	bne.n	800aec0 <__mdiff+0xc6>
 800aebc:	3a01      	subs	r2, #1
 800aebe:	e7f9      	b.n	800aeb4 <__mdiff+0xba>
 800aec0:	6102      	str	r2, [r0, #16]
 800aec2:	b005      	add	sp, #20
 800aec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800aec8 <__ulp>:
 800aec8:	4b0e      	ldr	r3, [pc, #56]	; (800af04 <__ulp+0x3c>)
 800aeca:	4a0f      	ldr	r2, [pc, #60]	; (800af08 <__ulp+0x40>)
 800aecc:	400b      	ands	r3, r1
 800aece:	189b      	adds	r3, r3, r2
 800aed0:	b510      	push	{r4, lr}
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	dd01      	ble.n	800aeda <__ulp+0x12>
 800aed6:	1c19      	adds	r1, r3, #0
 800aed8:	e009      	b.n	800aeee <__ulp+0x26>
 800aeda:	425b      	negs	r3, r3
 800aedc:	151b      	asrs	r3, r3, #20
 800aede:	2000      	movs	r0, #0
 800aee0:	2100      	movs	r1, #0
 800aee2:	2b13      	cmp	r3, #19
 800aee4:	dc05      	bgt.n	800aef2 <__ulp+0x2a>
 800aee6:	2280      	movs	r2, #128	; 0x80
 800aee8:	0312      	lsls	r2, r2, #12
 800aeea:	1c11      	adds	r1, r2, #0
 800aeec:	4119      	asrs	r1, r3
 800aeee:	2000      	movs	r0, #0
 800aef0:	e006      	b.n	800af00 <__ulp+0x38>
 800aef2:	2201      	movs	r2, #1
 800aef4:	2b32      	cmp	r3, #50	; 0x32
 800aef6:	dc02      	bgt.n	800aefe <__ulp+0x36>
 800aef8:	2433      	movs	r4, #51	; 0x33
 800aefa:	1ae3      	subs	r3, r4, r3
 800aefc:	409a      	lsls	r2, r3
 800aefe:	1c10      	adds	r0, r2, #0
 800af00:	bd10      	pop	{r4, pc}
 800af02:	46c0      	nop			; (mov r8, r8)
 800af04:	7ff00000 	.word	0x7ff00000
 800af08:	fcc00000 	.word	0xfcc00000

0800af0c <__b2d>:
 800af0c:	6903      	ldr	r3, [r0, #16]
 800af0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800af10:	1c06      	adds	r6, r0, #0
 800af12:	3614      	adds	r6, #20
 800af14:	009b      	lsls	r3, r3, #2
 800af16:	18f3      	adds	r3, r6, r3
 800af18:	1c1c      	adds	r4, r3, #0
 800af1a:	3c04      	subs	r4, #4
 800af1c:	6825      	ldr	r5, [r4, #0]
 800af1e:	1c0f      	adds	r7, r1, #0
 800af20:	1c28      	adds	r0, r5, #0
 800af22:	9301      	str	r3, [sp, #4]
 800af24:	f7ff fdc8 	bl	800aab8 <__hi0bits>
 800af28:	2320      	movs	r3, #32
 800af2a:	1a1b      	subs	r3, r3, r0
 800af2c:	603b      	str	r3, [r7, #0]
 800af2e:	491f      	ldr	r1, [pc, #124]	; (800afac <__b2d+0xa0>)
 800af30:	280a      	cmp	r0, #10
 800af32:	dc13      	bgt.n	800af5c <__b2d+0x50>
 800af34:	230b      	movs	r3, #11
 800af36:	1a1b      	subs	r3, r3, r0
 800af38:	1c2f      	adds	r7, r5, #0
 800af3a:	40df      	lsrs	r7, r3
 800af3c:	469c      	mov	ip, r3
 800af3e:	1c0b      	adds	r3, r1, #0
 800af40:	433b      	orrs	r3, r7
 800af42:	2100      	movs	r1, #0
 800af44:	42b4      	cmp	r4, r6
 800af46:	d902      	bls.n	800af4e <__b2d+0x42>
 800af48:	9901      	ldr	r1, [sp, #4]
 800af4a:	3908      	subs	r1, #8
 800af4c:	6809      	ldr	r1, [r1, #0]
 800af4e:	4664      	mov	r4, ip
 800af50:	40e1      	lsrs	r1, r4
 800af52:	3015      	adds	r0, #21
 800af54:	4085      	lsls	r5, r0
 800af56:	1c0a      	adds	r2, r1, #0
 800af58:	432a      	orrs	r2, r5
 800af5a:	e022      	b.n	800afa2 <__b2d+0x96>
 800af5c:	2700      	movs	r7, #0
 800af5e:	42b4      	cmp	r4, r6
 800af60:	d902      	bls.n	800af68 <__b2d+0x5c>
 800af62:	9c01      	ldr	r4, [sp, #4]
 800af64:	3c08      	subs	r4, #8
 800af66:	6827      	ldr	r7, [r4, #0]
 800af68:	230b      	movs	r3, #11
 800af6a:	425b      	negs	r3, r3
 800af6c:	181b      	adds	r3, r3, r0
 800af6e:	469c      	mov	ip, r3
 800af70:	2b00      	cmp	r3, #0
 800af72:	d013      	beq.n	800af9c <__b2d+0x90>
 800af74:	232b      	movs	r3, #43	; 0x2b
 800af76:	1a18      	subs	r0, r3, r0
 800af78:	4663      	mov	r3, ip
 800af7a:	409d      	lsls	r5, r3
 800af7c:	4329      	orrs	r1, r5
 800af7e:	1c3d      	adds	r5, r7, #0
 800af80:	1c0b      	adds	r3, r1, #0
 800af82:	40c5      	lsrs	r5, r0
 800af84:	432b      	orrs	r3, r5
 800af86:	2100      	movs	r1, #0
 800af88:	42b4      	cmp	r4, r6
 800af8a:	d901      	bls.n	800af90 <__b2d+0x84>
 800af8c:	3c04      	subs	r4, #4
 800af8e:	6821      	ldr	r1, [r4, #0]
 800af90:	40c1      	lsrs	r1, r0
 800af92:	4664      	mov	r4, ip
 800af94:	40a7      	lsls	r7, r4
 800af96:	1c0a      	adds	r2, r1, #0
 800af98:	433a      	orrs	r2, r7
 800af9a:	e002      	b.n	800afa2 <__b2d+0x96>
 800af9c:	1c0b      	adds	r3, r1, #0
 800af9e:	432b      	orrs	r3, r5
 800afa0:	1c3a      	adds	r2, r7, #0
 800afa2:	1c10      	adds	r0, r2, #0
 800afa4:	1c19      	adds	r1, r3, #0
 800afa6:	b003      	add	sp, #12
 800afa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800afaa:	46c0      	nop			; (mov r8, r8)
 800afac:	3ff00000 	.word	0x3ff00000

0800afb0 <__d2b>:
 800afb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800afb2:	2101      	movs	r1, #1
 800afb4:	1c1d      	adds	r5, r3, #0
 800afb6:	1c14      	adds	r4, r2, #0
 800afb8:	f7ff fcaf 	bl	800a91a <_Balloc>
 800afbc:	006f      	lsls	r7, r5, #1
 800afbe:	032b      	lsls	r3, r5, #12
 800afc0:	1c06      	adds	r6, r0, #0
 800afc2:	0b1b      	lsrs	r3, r3, #12
 800afc4:	0d7f      	lsrs	r7, r7, #21
 800afc6:	d002      	beq.n	800afce <__d2b+0x1e>
 800afc8:	2280      	movs	r2, #128	; 0x80
 800afca:	0352      	lsls	r2, r2, #13
 800afcc:	4313      	orrs	r3, r2
 800afce:	9301      	str	r3, [sp, #4]
 800afd0:	2c00      	cmp	r4, #0
 800afd2:	d019      	beq.n	800b008 <__d2b+0x58>
 800afd4:	4668      	mov	r0, sp
 800afd6:	9400      	str	r4, [sp, #0]
 800afd8:	f7ff fd8a 	bl	800aaf0 <__lo0bits>
 800afdc:	9a00      	ldr	r2, [sp, #0]
 800afde:	2800      	cmp	r0, #0
 800afe0:	d009      	beq.n	800aff6 <__d2b+0x46>
 800afe2:	9b01      	ldr	r3, [sp, #4]
 800afe4:	2120      	movs	r1, #32
 800afe6:	1c1c      	adds	r4, r3, #0
 800afe8:	1a09      	subs	r1, r1, r0
 800afea:	408c      	lsls	r4, r1
 800afec:	4322      	orrs	r2, r4
 800afee:	40c3      	lsrs	r3, r0
 800aff0:	6172      	str	r2, [r6, #20]
 800aff2:	9301      	str	r3, [sp, #4]
 800aff4:	e000      	b.n	800aff8 <__d2b+0x48>
 800aff6:	6172      	str	r2, [r6, #20]
 800aff8:	9c01      	ldr	r4, [sp, #4]
 800affa:	61b4      	str	r4, [r6, #24]
 800affc:	4263      	negs	r3, r4
 800affe:	4163      	adcs	r3, r4
 800b000:	2402      	movs	r4, #2
 800b002:	1ae4      	subs	r4, r4, r3
 800b004:	6134      	str	r4, [r6, #16]
 800b006:	e007      	b.n	800b018 <__d2b+0x68>
 800b008:	a801      	add	r0, sp, #4
 800b00a:	f7ff fd71 	bl	800aaf0 <__lo0bits>
 800b00e:	9901      	ldr	r1, [sp, #4]
 800b010:	2401      	movs	r4, #1
 800b012:	6171      	str	r1, [r6, #20]
 800b014:	6134      	str	r4, [r6, #16]
 800b016:	3020      	adds	r0, #32
 800b018:	2f00      	cmp	r7, #0
 800b01a:	d009      	beq.n	800b030 <__d2b+0x80>
 800b01c:	4a0d      	ldr	r2, [pc, #52]	; (800b054 <__d2b+0xa4>)
 800b01e:	9c08      	ldr	r4, [sp, #32]
 800b020:	18bf      	adds	r7, r7, r2
 800b022:	183f      	adds	r7, r7, r0
 800b024:	6027      	str	r7, [r4, #0]
 800b026:	2335      	movs	r3, #53	; 0x35
 800b028:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800b02a:	1a18      	subs	r0, r3, r0
 800b02c:	6020      	str	r0, [r4, #0]
 800b02e:	e00e      	b.n	800b04e <__d2b+0x9e>
 800b030:	4909      	ldr	r1, [pc, #36]	; (800b058 <__d2b+0xa8>)
 800b032:	9a08      	ldr	r2, [sp, #32]
 800b034:	1840      	adds	r0, r0, r1
 800b036:	4909      	ldr	r1, [pc, #36]	; (800b05c <__d2b+0xac>)
 800b038:	6010      	str	r0, [r2, #0]
 800b03a:	1863      	adds	r3, r4, r1
 800b03c:	009b      	lsls	r3, r3, #2
 800b03e:	18f3      	adds	r3, r6, r3
 800b040:	6958      	ldr	r0, [r3, #20]
 800b042:	f7ff fd39 	bl	800aab8 <__hi0bits>
 800b046:	0164      	lsls	r4, r4, #5
 800b048:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b04a:	1a24      	subs	r4, r4, r0
 800b04c:	6014      	str	r4, [r2, #0]
 800b04e:	1c30      	adds	r0, r6, #0
 800b050:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b052:	46c0      	nop			; (mov r8, r8)
 800b054:	fffffbcd 	.word	0xfffffbcd
 800b058:	fffffbce 	.word	0xfffffbce
 800b05c:	3fffffff 	.word	0x3fffffff

0800b060 <__ratio>:
 800b060:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b062:	1c0e      	adds	r6, r1, #0
 800b064:	4669      	mov	r1, sp
 800b066:	1c07      	adds	r7, r0, #0
 800b068:	f7ff ff50 	bl	800af0c <__b2d>
 800b06c:	1c04      	adds	r4, r0, #0
 800b06e:	1c0d      	adds	r5, r1, #0
 800b070:	1c30      	adds	r0, r6, #0
 800b072:	a901      	add	r1, sp, #4
 800b074:	f7ff ff4a 	bl	800af0c <__b2d>
 800b078:	1c02      	adds	r2, r0, #0
 800b07a:	1c0b      	adds	r3, r1, #0
 800b07c:	9800      	ldr	r0, [sp, #0]
 800b07e:	9901      	ldr	r1, [sp, #4]
 800b080:	693f      	ldr	r7, [r7, #16]
 800b082:	1a40      	subs	r0, r0, r1
 800b084:	6931      	ldr	r1, [r6, #16]
 800b086:	4684      	mov	ip, r0
 800b088:	1a79      	subs	r1, r7, r1
 800b08a:	0149      	lsls	r1, r1, #5
 800b08c:	4461      	add	r1, ip
 800b08e:	2900      	cmp	r1, #0
 800b090:	dd02      	ble.n	800b098 <__ratio+0x38>
 800b092:	0509      	lsls	r1, r1, #20
 800b094:	194d      	adds	r5, r1, r5
 800b096:	e001      	b.n	800b09c <__ratio+0x3c>
 800b098:	0509      	lsls	r1, r1, #20
 800b09a:	1a5b      	subs	r3, r3, r1
 800b09c:	1c20      	adds	r0, r4, #0
 800b09e:	1c29      	adds	r1, r5, #0
 800b0a0:	f7f6 fa56 	bl	8001550 <__aeabi_ddiv>
 800b0a4:	b003      	add	sp, #12
 800b0a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b0a8 <__copybits>:
 800b0a8:	3901      	subs	r1, #1
 800b0aa:	b510      	push	{r4, lr}
 800b0ac:	1c13      	adds	r3, r2, #0
 800b0ae:	1149      	asrs	r1, r1, #5
 800b0b0:	6912      	ldr	r2, [r2, #16]
 800b0b2:	3101      	adds	r1, #1
 800b0b4:	0089      	lsls	r1, r1, #2
 800b0b6:	3314      	adds	r3, #20
 800b0b8:	0092      	lsls	r2, r2, #2
 800b0ba:	1841      	adds	r1, r0, r1
 800b0bc:	189a      	adds	r2, r3, r2
 800b0be:	4293      	cmp	r3, r2
 800b0c0:	d202      	bcs.n	800b0c8 <__copybits+0x20>
 800b0c2:	cb10      	ldmia	r3!, {r4}
 800b0c4:	c010      	stmia	r0!, {r4}
 800b0c6:	e7fa      	b.n	800b0be <__copybits+0x16>
 800b0c8:	4288      	cmp	r0, r1
 800b0ca:	d202      	bcs.n	800b0d2 <__copybits+0x2a>
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	c008      	stmia	r0!, {r3}
 800b0d0:	e7fa      	b.n	800b0c8 <__copybits+0x20>
 800b0d2:	bd10      	pop	{r4, pc}

0800b0d4 <__any_on>:
 800b0d4:	1c02      	adds	r2, r0, #0
 800b0d6:	6900      	ldr	r0, [r0, #16]
 800b0d8:	b510      	push	{r4, lr}
 800b0da:	3214      	adds	r2, #20
 800b0dc:	114b      	asrs	r3, r1, #5
 800b0de:	4283      	cmp	r3, r0
 800b0e0:	dc0d      	bgt.n	800b0fe <__any_on+0x2a>
 800b0e2:	da0d      	bge.n	800b100 <__any_on+0x2c>
 800b0e4:	201f      	movs	r0, #31
 800b0e6:	4001      	ands	r1, r0
 800b0e8:	d00a      	beq.n	800b100 <__any_on+0x2c>
 800b0ea:	0098      	lsls	r0, r3, #2
 800b0ec:	5884      	ldr	r4, [r0, r2]
 800b0ee:	1c20      	adds	r0, r4, #0
 800b0f0:	40c8      	lsrs	r0, r1
 800b0f2:	4088      	lsls	r0, r1
 800b0f4:	1c01      	adds	r1, r0, #0
 800b0f6:	2001      	movs	r0, #1
 800b0f8:	42a1      	cmp	r1, r4
 800b0fa:	d10c      	bne.n	800b116 <__any_on+0x42>
 800b0fc:	e000      	b.n	800b100 <__any_on+0x2c>
 800b0fe:	1c03      	adds	r3, r0, #0
 800b100:	009b      	lsls	r3, r3, #2
 800b102:	18d3      	adds	r3, r2, r3
 800b104:	4293      	cmp	r3, r2
 800b106:	d905      	bls.n	800b114 <__any_on+0x40>
 800b108:	3b04      	subs	r3, #4
 800b10a:	6819      	ldr	r1, [r3, #0]
 800b10c:	2900      	cmp	r1, #0
 800b10e:	d0f9      	beq.n	800b104 <__any_on+0x30>
 800b110:	2001      	movs	r0, #1
 800b112:	e000      	b.n	800b116 <__any_on+0x42>
 800b114:	2000      	movs	r0, #0
 800b116:	bd10      	pop	{r4, pc}

0800b118 <__fpclassifyd>:
 800b118:	b530      	push	{r4, r5, lr}
 800b11a:	1c0b      	adds	r3, r1, #0
 800b11c:	1c04      	adds	r4, r0, #0
 800b11e:	1c02      	adds	r2, r0, #0
 800b120:	431c      	orrs	r4, r3
 800b122:	2002      	movs	r0, #2
 800b124:	2c00      	cmp	r4, #0
 800b126:	d017      	beq.n	800b158 <__fpclassifyd+0x40>
 800b128:	2480      	movs	r4, #128	; 0x80
 800b12a:	0624      	lsls	r4, r4, #24
 800b12c:	42a3      	cmp	r3, r4
 800b12e:	d101      	bne.n	800b134 <__fpclassifyd+0x1c>
 800b130:	2a00      	cmp	r2, #0
 800b132:	d011      	beq.n	800b158 <__fpclassifyd+0x40>
 800b134:	4809      	ldr	r0, [pc, #36]	; (800b15c <__fpclassifyd+0x44>)
 800b136:	0059      	lsls	r1, r3, #1
 800b138:	0849      	lsrs	r1, r1, #1
 800b13a:	4c09      	ldr	r4, [pc, #36]	; (800b160 <__fpclassifyd+0x48>)
 800b13c:	180d      	adds	r5, r1, r0
 800b13e:	2004      	movs	r0, #4
 800b140:	42a5      	cmp	r5, r4
 800b142:	d909      	bls.n	800b158 <__fpclassifyd+0x40>
 800b144:	4c07      	ldr	r4, [pc, #28]	; (800b164 <__fpclassifyd+0x4c>)
 800b146:	2003      	movs	r0, #3
 800b148:	42a1      	cmp	r1, r4
 800b14a:	d905      	bls.n	800b158 <__fpclassifyd+0x40>
 800b14c:	4c06      	ldr	r4, [pc, #24]	; (800b168 <__fpclassifyd+0x50>)
 800b14e:	2000      	movs	r0, #0
 800b150:	42a1      	cmp	r1, r4
 800b152:	d101      	bne.n	800b158 <__fpclassifyd+0x40>
 800b154:	4250      	negs	r0, r2
 800b156:	4150      	adcs	r0, r2
 800b158:	bd30      	pop	{r4, r5, pc}
 800b15a:	46c0      	nop			; (mov r8, r8)
 800b15c:	fff00000 	.word	0xfff00000
 800b160:	7fdfffff 	.word	0x7fdfffff
 800b164:	000fffff 	.word	0x000fffff
 800b168:	7ff00000 	.word	0x7ff00000

0800b16c <nanf>:
 800b16c:	4800      	ldr	r0, [pc, #0]	; (800b170 <nanf+0x4>)
 800b16e:	4770      	bx	lr
 800b170:	7fc00000 	.word	0x7fc00000

0800b174 <strncmp>:
 800b174:	1c03      	adds	r3, r0, #0
 800b176:	2000      	movs	r0, #0
 800b178:	b510      	push	{r4, lr}
 800b17a:	4282      	cmp	r2, r0
 800b17c:	d00f      	beq.n	800b19e <strncmp+0x2a>
 800b17e:	781c      	ldrb	r4, [r3, #0]
 800b180:	7808      	ldrb	r0, [r1, #0]
 800b182:	42a0      	cmp	r0, r4
 800b184:	d101      	bne.n	800b18a <strncmp+0x16>
 800b186:	2a01      	cmp	r2, #1
 800b188:	d103      	bne.n	800b192 <strncmp+0x1e>
 800b18a:	7818      	ldrb	r0, [r3, #0]
 800b18c:	780b      	ldrb	r3, [r1, #0]
 800b18e:	1ac0      	subs	r0, r0, r3
 800b190:	e005      	b.n	800b19e <strncmp+0x2a>
 800b192:	3a01      	subs	r2, #1
 800b194:	2800      	cmp	r0, #0
 800b196:	d0f8      	beq.n	800b18a <strncmp+0x16>
 800b198:	3301      	adds	r3, #1
 800b19a:	3101      	adds	r1, #1
 800b19c:	e7ef      	b.n	800b17e <strncmp+0xa>
 800b19e:	bd10      	pop	{r4, pc}

0800b1a0 <__ssprint_r>:
 800b1a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b1a2:	b087      	sub	sp, #28
 800b1a4:	9003      	str	r0, [sp, #12]
 800b1a6:	6810      	ldr	r0, [r2, #0]
 800b1a8:	1c0c      	adds	r4, r1, #0
 800b1aa:	9004      	str	r0, [sp, #16]
 800b1ac:	6890      	ldr	r0, [r2, #8]
 800b1ae:	1c16      	adds	r6, r2, #0
 800b1b0:	2800      	cmp	r0, #0
 800b1b2:	d003      	beq.n	800b1bc <__ssprint_r+0x1c>
 800b1b4:	2100      	movs	r1, #0
 800b1b6:	9102      	str	r1, [sp, #8]
 800b1b8:	1c0d      	adds	r5, r1, #0
 800b1ba:	e01e      	b.n	800b1fa <__ssprint_r+0x5a>
 800b1bc:	6050      	str	r0, [r2, #4]
 800b1be:	e074      	b.n	800b2aa <__ssprint_r+0x10a>
 800b1c0:	68a7      	ldr	r7, [r4, #8]
 800b1c2:	42bd      	cmp	r5, r7
 800b1c4:	d363      	bcc.n	800b28e <__ssprint_r+0xee>
 800b1c6:	2290      	movs	r2, #144	; 0x90
 800b1c8:	89a3      	ldrh	r3, [r4, #12]
 800b1ca:	00d2      	lsls	r2, r2, #3
 800b1cc:	4213      	tst	r3, r2
 800b1ce:	d11e      	bne.n	800b20e <__ssprint_r+0x6e>
 800b1d0:	42bd      	cmp	r5, r7
 800b1d2:	d35c      	bcc.n	800b28e <__ssprint_r+0xee>
 800b1d4:	1c3a      	adds	r2, r7, #0
 800b1d6:	9902      	ldr	r1, [sp, #8]
 800b1d8:	6820      	ldr	r0, [r4, #0]
 800b1da:	f000 f897 	bl	800b30c <memmove>
 800b1de:	68a1      	ldr	r1, [r4, #8]
 800b1e0:	6822      	ldr	r2, [r4, #0]
 800b1e2:	1bcb      	subs	r3, r1, r7
 800b1e4:	60a3      	str	r3, [r4, #8]
 800b1e6:	68b0      	ldr	r0, [r6, #8]
 800b1e8:	9b02      	ldr	r3, [sp, #8]
 800b1ea:	19d7      	adds	r7, r2, r7
 800b1ec:	195b      	adds	r3, r3, r5
 800b1ee:	1b45      	subs	r5, r0, r5
 800b1f0:	6027      	str	r7, [r4, #0]
 800b1f2:	9302      	str	r3, [sp, #8]
 800b1f4:	60b5      	str	r5, [r6, #8]
 800b1f6:	d04c      	beq.n	800b292 <__ssprint_r+0xf2>
 800b1f8:	2500      	movs	r5, #0
 800b1fa:	2d00      	cmp	r5, #0
 800b1fc:	d1e0      	bne.n	800b1c0 <__ssprint_r+0x20>
 800b1fe:	9a04      	ldr	r2, [sp, #16]
 800b200:	9b04      	ldr	r3, [sp, #16]
 800b202:	6812      	ldr	r2, [r2, #0]
 800b204:	685d      	ldr	r5, [r3, #4]
 800b206:	3308      	adds	r3, #8
 800b208:	9202      	str	r2, [sp, #8]
 800b20a:	9304      	str	r3, [sp, #16]
 800b20c:	e7f5      	b.n	800b1fa <__ssprint_r+0x5a>
 800b20e:	6921      	ldr	r1, [r4, #16]
 800b210:	6820      	ldr	r0, [r4, #0]
 800b212:	2203      	movs	r2, #3
 800b214:	1a40      	subs	r0, r0, r1
 800b216:	9005      	str	r0, [sp, #20]
 800b218:	6960      	ldr	r0, [r4, #20]
 800b21a:	4342      	muls	r2, r0
 800b21c:	0fd0      	lsrs	r0, r2, #31
 800b21e:	1882      	adds	r2, r0, r2
 800b220:	1052      	asrs	r2, r2, #1
 800b222:	9201      	str	r2, [sp, #4]
 800b224:	9a05      	ldr	r2, [sp, #20]
 800b226:	9801      	ldr	r0, [sp, #4]
 800b228:	3201      	adds	r2, #1
 800b22a:	1952      	adds	r2, r2, r5
 800b22c:	4290      	cmp	r0, r2
 800b22e:	d200      	bcs.n	800b232 <__ssprint_r+0x92>
 800b230:	9201      	str	r2, [sp, #4]
 800b232:	9803      	ldr	r0, [sp, #12]
 800b234:	055a      	lsls	r2, r3, #21
 800b236:	d513      	bpl.n	800b260 <__ssprint_r+0xc0>
 800b238:	9901      	ldr	r1, [sp, #4]
 800b23a:	f7fb ffbd 	bl	80071b8 <_malloc_r>
 800b23e:	1e07      	subs	r7, r0, #0
 800b240:	d103      	bne.n	800b24a <__ssprint_r+0xaa>
 800b242:	9803      	ldr	r0, [sp, #12]
 800b244:	230c      	movs	r3, #12
 800b246:	6003      	str	r3, [r0, #0]
 800b248:	e026      	b.n	800b298 <__ssprint_r+0xf8>
 800b24a:	9a05      	ldr	r2, [sp, #20]
 800b24c:	6921      	ldr	r1, [r4, #16]
 800b24e:	f7fc f9ad 	bl	80075ac <memcpy>
 800b252:	89a2      	ldrh	r2, [r4, #12]
 800b254:	4b16      	ldr	r3, [pc, #88]	; (800b2b0 <__ssprint_r+0x110>)
 800b256:	4013      	ands	r3, r2
 800b258:	2280      	movs	r2, #128	; 0x80
 800b25a:	4313      	orrs	r3, r2
 800b25c:	81a3      	strh	r3, [r4, #12]
 800b25e:	e00c      	b.n	800b27a <__ssprint_r+0xda>
 800b260:	9a01      	ldr	r2, [sp, #4]
 800b262:	f000 f875 	bl	800b350 <_realloc_r>
 800b266:	1e07      	subs	r7, r0, #0
 800b268:	d107      	bne.n	800b27a <__ssprint_r+0xda>
 800b26a:	6921      	ldr	r1, [r4, #16]
 800b26c:	9803      	ldr	r0, [sp, #12]
 800b26e:	f7fe ff73 	bl	800a158 <_free_r>
 800b272:	9903      	ldr	r1, [sp, #12]
 800b274:	230c      	movs	r3, #12
 800b276:	600b      	str	r3, [r1, #0]
 800b278:	e00e      	b.n	800b298 <__ssprint_r+0xf8>
 800b27a:	9a05      	ldr	r2, [sp, #20]
 800b27c:	9b01      	ldr	r3, [sp, #4]
 800b27e:	6127      	str	r7, [r4, #16]
 800b280:	6163      	str	r3, [r4, #20]
 800b282:	18bf      	adds	r7, r7, r2
 800b284:	1a9b      	subs	r3, r3, r2
 800b286:	6027      	str	r7, [r4, #0]
 800b288:	60a3      	str	r3, [r4, #8]
 800b28a:	1c2f      	adds	r7, r5, #0
 800b28c:	e7a0      	b.n	800b1d0 <__ssprint_r+0x30>
 800b28e:	1c2f      	adds	r7, r5, #0
 800b290:	e7a0      	b.n	800b1d4 <__ssprint_r+0x34>
 800b292:	6075      	str	r5, [r6, #4]
 800b294:	1c28      	adds	r0, r5, #0
 800b296:	e008      	b.n	800b2aa <__ssprint_r+0x10a>
 800b298:	89a3      	ldrh	r3, [r4, #12]
 800b29a:	2240      	movs	r2, #64	; 0x40
 800b29c:	4313      	orrs	r3, r2
 800b29e:	81a3      	strh	r3, [r4, #12]
 800b2a0:	2001      	movs	r0, #1
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	60b3      	str	r3, [r6, #8]
 800b2a6:	6073      	str	r3, [r6, #4]
 800b2a8:	4240      	negs	r0, r0
 800b2aa:	b007      	add	sp, #28
 800b2ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b2ae:	46c0      	nop			; (mov r8, r8)
 800b2b0:	fffffb7f 	.word	0xfffffb7f

0800b2b4 <_calloc_r>:
 800b2b4:	b510      	push	{r4, lr}
 800b2b6:	4351      	muls	r1, r2
 800b2b8:	f7fb ff7e 	bl	80071b8 <_malloc_r>
 800b2bc:	1e04      	subs	r4, r0, #0
 800b2be:	d023      	beq.n	800b308 <_calloc_r+0x54>
 800b2c0:	1c03      	adds	r3, r0, #0
 800b2c2:	3b08      	subs	r3, #8
 800b2c4:	685a      	ldr	r2, [r3, #4]
 800b2c6:	2303      	movs	r3, #3
 800b2c8:	439a      	bics	r2, r3
 800b2ca:	3a04      	subs	r2, #4
 800b2cc:	2a24      	cmp	r2, #36	; 0x24
 800b2ce:	d818      	bhi.n	800b302 <_calloc_r+0x4e>
 800b2d0:	1c03      	adds	r3, r0, #0
 800b2d2:	2a13      	cmp	r2, #19
 800b2d4:	d910      	bls.n	800b2f8 <_calloc_r+0x44>
 800b2d6:	2100      	movs	r1, #0
 800b2d8:	6001      	str	r1, [r0, #0]
 800b2da:	6041      	str	r1, [r0, #4]
 800b2dc:	3308      	adds	r3, #8
 800b2de:	2a1b      	cmp	r2, #27
 800b2e0:	d90a      	bls.n	800b2f8 <_calloc_r+0x44>
 800b2e2:	6081      	str	r1, [r0, #8]
 800b2e4:	60c1      	str	r1, [r0, #12]
 800b2e6:	2a24      	cmp	r2, #36	; 0x24
 800b2e8:	d002      	beq.n	800b2f0 <_calloc_r+0x3c>
 800b2ea:	1c03      	adds	r3, r0, #0
 800b2ec:	3310      	adds	r3, #16
 800b2ee:	e003      	b.n	800b2f8 <_calloc_r+0x44>
 800b2f0:	1c03      	adds	r3, r0, #0
 800b2f2:	6101      	str	r1, [r0, #16]
 800b2f4:	3318      	adds	r3, #24
 800b2f6:	6141      	str	r1, [r0, #20]
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	601a      	str	r2, [r3, #0]
 800b2fc:	605a      	str	r2, [r3, #4]
 800b2fe:	609a      	str	r2, [r3, #8]
 800b300:	e002      	b.n	800b308 <_calloc_r+0x54>
 800b302:	2100      	movs	r1, #0
 800b304:	f000 f81b 	bl	800b33e <memset>
 800b308:	1c20      	adds	r0, r4, #0
 800b30a:	bd10      	pop	{r4, pc}

0800b30c <memmove>:
 800b30c:	b570      	push	{r4, r5, r6, lr}
 800b30e:	4281      	cmp	r1, r0
 800b310:	d301      	bcc.n	800b316 <memmove+0xa>
 800b312:	2300      	movs	r3, #0
 800b314:	e00c      	b.n	800b330 <memmove+0x24>
 800b316:	188c      	adds	r4, r1, r2
 800b318:	42a0      	cmp	r0, r4
 800b31a:	d2fa      	bcs.n	800b312 <memmove+0x6>
 800b31c:	1885      	adds	r5, r0, r2
 800b31e:	1c13      	adds	r3, r2, #0
 800b320:	3b01      	subs	r3, #1
 800b322:	d30b      	bcc.n	800b33c <memmove+0x30>
 800b324:	4251      	negs	r1, r2
 800b326:	1866      	adds	r6, r4, r1
 800b328:	5cf6      	ldrb	r6, [r6, r3]
 800b32a:	1869      	adds	r1, r5, r1
 800b32c:	54ce      	strb	r6, [r1, r3]
 800b32e:	e7f7      	b.n	800b320 <memmove+0x14>
 800b330:	4293      	cmp	r3, r2
 800b332:	d003      	beq.n	800b33c <memmove+0x30>
 800b334:	5ccc      	ldrb	r4, [r1, r3]
 800b336:	54c4      	strb	r4, [r0, r3]
 800b338:	3301      	adds	r3, #1
 800b33a:	e7f9      	b.n	800b330 <memmove+0x24>
 800b33c:	bd70      	pop	{r4, r5, r6, pc}

0800b33e <memset>:
 800b33e:	1c03      	adds	r3, r0, #0
 800b340:	1882      	adds	r2, r0, r2
 800b342:	4293      	cmp	r3, r2
 800b344:	d002      	beq.n	800b34c <memset+0xe>
 800b346:	7019      	strb	r1, [r3, #0]
 800b348:	3301      	adds	r3, #1
 800b34a:	e7fa      	b.n	800b342 <memset+0x4>
 800b34c:	4770      	bx	lr
	...

0800b350 <_realloc_r>:
 800b350:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b352:	b087      	sub	sp, #28
 800b354:	9003      	str	r0, [sp, #12]
 800b356:	1c0c      	adds	r4, r1, #0
 800b358:	9205      	str	r2, [sp, #20]
 800b35a:	d103      	bne.n	800b364 <_realloc_r+0x14>
 800b35c:	1c11      	adds	r1, r2, #0
 800b35e:	f7fb ff2b 	bl	80071b8 <_malloc_r>
 800b362:	e195      	b.n	800b690 <_realloc_r+0x340>
 800b364:	1c27      	adds	r7, r4, #0
 800b366:	9803      	ldr	r0, [sp, #12]
 800b368:	3f08      	subs	r7, #8
 800b36a:	f7fc f928 	bl	80075be <__malloc_lock>
 800b36e:	687d      	ldr	r5, [r7, #4]
 800b370:	2303      	movs	r3, #3
 800b372:	1c2e      	adds	r6, r5, #0
 800b374:	439e      	bics	r6, r3
 800b376:	9b05      	ldr	r3, [sp, #20]
 800b378:	9601      	str	r6, [sp, #4]
 800b37a:	330b      	adds	r3, #11
 800b37c:	2b16      	cmp	r3, #22
 800b37e:	d904      	bls.n	800b38a <_realloc_r+0x3a>
 800b380:	2207      	movs	r2, #7
 800b382:	4393      	bics	r3, r2
 800b384:	9302      	str	r3, [sp, #8]
 800b386:	d502      	bpl.n	800b38e <_realloc_r+0x3e>
 800b388:	e005      	b.n	800b396 <_realloc_r+0x46>
 800b38a:	2610      	movs	r6, #16
 800b38c:	9602      	str	r6, [sp, #8]
 800b38e:	9e02      	ldr	r6, [sp, #8]
 800b390:	9805      	ldr	r0, [sp, #20]
 800b392:	4286      	cmp	r6, r0
 800b394:	d204      	bcs.n	800b3a0 <_realloc_r+0x50>
 800b396:	9c03      	ldr	r4, [sp, #12]
 800b398:	230c      	movs	r3, #12
 800b39a:	6023      	str	r3, [r4, #0]
 800b39c:	2000      	movs	r0, #0
 800b39e:	e177      	b.n	800b690 <_realloc_r+0x340>
 800b3a0:	9e01      	ldr	r6, [sp, #4]
 800b3a2:	9802      	ldr	r0, [sp, #8]
 800b3a4:	4286      	cmp	r6, r0
 800b3a6:	db00      	blt.n	800b3aa <_realloc_r+0x5a>
 800b3a8:	e14e      	b.n	800b648 <_realloc_r+0x2f8>
 800b3aa:	49ba      	ldr	r1, [pc, #744]	; (800b694 <_realloc_r+0x344>)
 800b3ac:	19bb      	adds	r3, r7, r6
 800b3ae:	688a      	ldr	r2, [r1, #8]
 800b3b0:	685e      	ldr	r6, [r3, #4]
 800b3b2:	4694      	mov	ip, r2
 800b3b4:	4293      	cmp	r3, r2
 800b3b6:	d006      	beq.n	800b3c6 <_realloc_r+0x76>
 800b3b8:	2201      	movs	r2, #1
 800b3ba:	1c30      	adds	r0, r6, #0
 800b3bc:	4390      	bics	r0, r2
 800b3be:	1818      	adds	r0, r3, r0
 800b3c0:	6840      	ldr	r0, [r0, #4]
 800b3c2:	4210      	tst	r0, r2
 800b3c4:	d124      	bne.n	800b410 <_realloc_r+0xc0>
 800b3c6:	2203      	movs	r2, #3
 800b3c8:	1c30      	adds	r0, r6, #0
 800b3ca:	9e01      	ldr	r6, [sp, #4]
 800b3cc:	4390      	bics	r0, r2
 800b3ce:	1982      	adds	r2, r0, r6
 800b3d0:	9e02      	ldr	r6, [sp, #8]
 800b3d2:	4563      	cmp	r3, ip
 800b3d4:	d114      	bne.n	800b400 <_realloc_r+0xb0>
 800b3d6:	3610      	adds	r6, #16
 800b3d8:	42b2      	cmp	r2, r6
 800b3da:	db1b      	blt.n	800b414 <_realloc_r+0xc4>
 800b3dc:	9802      	ldr	r0, [sp, #8]
 800b3de:	1c23      	adds	r3, r4, #0
 800b3e0:	183e      	adds	r6, r7, r0
 800b3e2:	608e      	str	r6, [r1, #8]
 800b3e4:	1a12      	subs	r2, r2, r0
 800b3e6:	2101      	movs	r1, #1
 800b3e8:	430a      	orrs	r2, r1
 800b3ea:	6072      	str	r2, [r6, #4]
 800b3ec:	3b08      	subs	r3, #8
 800b3ee:	685a      	ldr	r2, [r3, #4]
 800b3f0:	4011      	ands	r1, r2
 800b3f2:	4301      	orrs	r1, r0
 800b3f4:	6059      	str	r1, [r3, #4]
 800b3f6:	9803      	ldr	r0, [sp, #12]
 800b3f8:	f7fc f8e2 	bl	80075c0 <__malloc_unlock>
 800b3fc:	1c20      	adds	r0, r4, #0
 800b3fe:	e147      	b.n	800b690 <_realloc_r+0x340>
 800b400:	42b2      	cmp	r2, r6
 800b402:	db07      	blt.n	800b414 <_realloc_r+0xc4>
 800b404:	68d9      	ldr	r1, [r3, #12]
 800b406:	689b      	ldr	r3, [r3, #8]
 800b408:	9201      	str	r2, [sp, #4]
 800b40a:	60d9      	str	r1, [r3, #12]
 800b40c:	608b      	str	r3, [r1, #8]
 800b40e:	e11b      	b.n	800b648 <_realloc_r+0x2f8>
 800b410:	2000      	movs	r0, #0
 800b412:	1c03      	adds	r3, r0, #0
 800b414:	07e9      	lsls	r1, r5, #31
 800b416:	d500      	bpl.n	800b41a <_realloc_r+0xca>
 800b418:	e0c5      	b.n	800b5a6 <_realloc_r+0x256>
 800b41a:	1c22      	adds	r2, r4, #0
 800b41c:	3a08      	subs	r2, #8
 800b41e:	6815      	ldr	r5, [r2, #0]
 800b420:	2203      	movs	r2, #3
 800b422:	1b7d      	subs	r5, r7, r5
 800b424:	686e      	ldr	r6, [r5, #4]
 800b426:	4396      	bics	r6, r2
 800b428:	9a01      	ldr	r2, [sp, #4]
 800b42a:	18b6      	adds	r6, r6, r2
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d100      	bne.n	800b432 <_realloc_r+0xe2>
 800b430:	e083      	b.n	800b53a <_realloc_r+0x1ea>
 800b432:	1830      	adds	r0, r6, r0
 800b434:	9004      	str	r0, [sp, #16]
 800b436:	4563      	cmp	r3, ip
 800b438:	d144      	bne.n	800b4c4 <_realloc_r+0x174>
 800b43a:	9b02      	ldr	r3, [sp, #8]
 800b43c:	3310      	adds	r3, #16
 800b43e:	4298      	cmp	r0, r3
 800b440:	db7b      	blt.n	800b53a <_realloc_r+0x1ea>
 800b442:	68aa      	ldr	r2, [r5, #8]
 800b444:	68eb      	ldr	r3, [r5, #12]
 800b446:	1c2e      	adds	r6, r5, #0
 800b448:	60d3      	str	r3, [r2, #12]
 800b44a:	609a      	str	r2, [r3, #8]
 800b44c:	9a01      	ldr	r2, [sp, #4]
 800b44e:	3608      	adds	r6, #8
 800b450:	3a04      	subs	r2, #4
 800b452:	2a24      	cmp	r2, #36	; 0x24
 800b454:	d824      	bhi.n	800b4a0 <_realloc_r+0x150>
 800b456:	1c33      	adds	r3, r6, #0
 800b458:	2a13      	cmp	r2, #19
 800b45a:	d91a      	bls.n	800b492 <_realloc_r+0x142>
 800b45c:	6823      	ldr	r3, [r4, #0]
 800b45e:	60ab      	str	r3, [r5, #8]
 800b460:	6860      	ldr	r0, [r4, #4]
 800b462:	60e8      	str	r0, [r5, #12]
 800b464:	2a1b      	cmp	r2, #27
 800b466:	d803      	bhi.n	800b470 <_realloc_r+0x120>
 800b468:	1c2b      	adds	r3, r5, #0
 800b46a:	3310      	adds	r3, #16
 800b46c:	3408      	adds	r4, #8
 800b46e:	e010      	b.n	800b492 <_realloc_r+0x142>
 800b470:	68a1      	ldr	r1, [r4, #8]
 800b472:	6129      	str	r1, [r5, #16]
 800b474:	68e3      	ldr	r3, [r4, #12]
 800b476:	616b      	str	r3, [r5, #20]
 800b478:	2a24      	cmp	r2, #36	; 0x24
 800b47a:	d003      	beq.n	800b484 <_realloc_r+0x134>
 800b47c:	1c2b      	adds	r3, r5, #0
 800b47e:	3318      	adds	r3, #24
 800b480:	3410      	adds	r4, #16
 800b482:	e006      	b.n	800b492 <_realloc_r+0x142>
 800b484:	6920      	ldr	r0, [r4, #16]
 800b486:	1c2b      	adds	r3, r5, #0
 800b488:	61a8      	str	r0, [r5, #24]
 800b48a:	6961      	ldr	r1, [r4, #20]
 800b48c:	3320      	adds	r3, #32
 800b48e:	61e9      	str	r1, [r5, #28]
 800b490:	3418      	adds	r4, #24
 800b492:	6822      	ldr	r2, [r4, #0]
 800b494:	601a      	str	r2, [r3, #0]
 800b496:	6860      	ldr	r0, [r4, #4]
 800b498:	6058      	str	r0, [r3, #4]
 800b49a:	68a4      	ldr	r4, [r4, #8]
 800b49c:	609c      	str	r4, [r3, #8]
 800b49e:	e003      	b.n	800b4a8 <_realloc_r+0x158>
 800b4a0:	1c30      	adds	r0, r6, #0
 800b4a2:	1c21      	adds	r1, r4, #0
 800b4a4:	f7ff ff32 	bl	800b30c <memmove>
 800b4a8:	9c02      	ldr	r4, [sp, #8]
 800b4aa:	4b7a      	ldr	r3, [pc, #488]	; (800b694 <_realloc_r+0x344>)
 800b4ac:	9804      	ldr	r0, [sp, #16]
 800b4ae:	192a      	adds	r2, r5, r4
 800b4b0:	609a      	str	r2, [r3, #8]
 800b4b2:	1b07      	subs	r7, r0, r4
 800b4b4:	2301      	movs	r3, #1
 800b4b6:	431f      	orrs	r7, r3
 800b4b8:	6057      	str	r7, [r2, #4]
 800b4ba:	6869      	ldr	r1, [r5, #4]
 800b4bc:	400b      	ands	r3, r1
 800b4be:	4323      	orrs	r3, r4
 800b4c0:	606b      	str	r3, [r5, #4]
 800b4c2:	e0bc      	b.n	800b63e <_realloc_r+0x2ee>
 800b4c4:	9a02      	ldr	r2, [sp, #8]
 800b4c6:	4290      	cmp	r0, r2
 800b4c8:	db37      	blt.n	800b53a <_realloc_r+0x1ea>
 800b4ca:	68da      	ldr	r2, [r3, #12]
 800b4cc:	689b      	ldr	r3, [r3, #8]
 800b4ce:	1c28      	adds	r0, r5, #0
 800b4d0:	60da      	str	r2, [r3, #12]
 800b4d2:	6093      	str	r3, [r2, #8]
 800b4d4:	68aa      	ldr	r2, [r5, #8]
 800b4d6:	68eb      	ldr	r3, [r5, #12]
 800b4d8:	3008      	adds	r0, #8
 800b4da:	60d3      	str	r3, [r2, #12]
 800b4dc:	609a      	str	r2, [r3, #8]
 800b4de:	9a01      	ldr	r2, [sp, #4]
 800b4e0:	3a04      	subs	r2, #4
 800b4e2:	2a24      	cmp	r2, #36	; 0x24
 800b4e4:	d824      	bhi.n	800b530 <_realloc_r+0x1e0>
 800b4e6:	2a13      	cmp	r2, #19
 800b4e8:	d919      	bls.n	800b51e <_realloc_r+0x1ce>
 800b4ea:	6823      	ldr	r3, [r4, #0]
 800b4ec:	60ab      	str	r3, [r5, #8]
 800b4ee:	6866      	ldr	r6, [r4, #4]
 800b4f0:	60ee      	str	r6, [r5, #12]
 800b4f2:	2a1b      	cmp	r2, #27
 800b4f4:	d802      	bhi.n	800b4fc <_realloc_r+0x1ac>
 800b4f6:	3008      	adds	r0, #8
 800b4f8:	3408      	adds	r4, #8
 800b4fa:	e010      	b.n	800b51e <_realloc_r+0x1ce>
 800b4fc:	68a0      	ldr	r0, [r4, #8]
 800b4fe:	6128      	str	r0, [r5, #16]
 800b500:	68e1      	ldr	r1, [r4, #12]
 800b502:	6169      	str	r1, [r5, #20]
 800b504:	2a24      	cmp	r2, #36	; 0x24
 800b506:	d003      	beq.n	800b510 <_realloc_r+0x1c0>
 800b508:	1c28      	adds	r0, r5, #0
 800b50a:	3018      	adds	r0, #24
 800b50c:	3410      	adds	r4, #16
 800b50e:	e006      	b.n	800b51e <_realloc_r+0x1ce>
 800b510:	6922      	ldr	r2, [r4, #16]
 800b512:	1c28      	adds	r0, r5, #0
 800b514:	61aa      	str	r2, [r5, #24]
 800b516:	6963      	ldr	r3, [r4, #20]
 800b518:	3020      	adds	r0, #32
 800b51a:	61eb      	str	r3, [r5, #28]
 800b51c:	3418      	adds	r4, #24
 800b51e:	6826      	ldr	r6, [r4, #0]
 800b520:	6006      	str	r6, [r0, #0]
 800b522:	6861      	ldr	r1, [r4, #4]
 800b524:	6041      	str	r1, [r0, #4]
 800b526:	68a4      	ldr	r4, [r4, #8]
 800b528:	6084      	str	r4, [r0, #8]
 800b52a:	9c04      	ldr	r4, [sp, #16]
 800b52c:	9401      	str	r4, [sp, #4]
 800b52e:	e034      	b.n	800b59a <_realloc_r+0x24a>
 800b530:	1c21      	adds	r1, r4, #0
 800b532:	f7ff feeb 	bl	800b30c <memmove>
 800b536:	9e04      	ldr	r6, [sp, #16]
 800b538:	e02e      	b.n	800b598 <_realloc_r+0x248>
 800b53a:	9802      	ldr	r0, [sp, #8]
 800b53c:	4286      	cmp	r6, r0
 800b53e:	db32      	blt.n	800b5a6 <_realloc_r+0x256>
 800b540:	68aa      	ldr	r2, [r5, #8]
 800b542:	68eb      	ldr	r3, [r5, #12]
 800b544:	1c28      	adds	r0, r5, #0
 800b546:	60d3      	str	r3, [r2, #12]
 800b548:	609a      	str	r2, [r3, #8]
 800b54a:	9a01      	ldr	r2, [sp, #4]
 800b54c:	3008      	adds	r0, #8
 800b54e:	3a04      	subs	r2, #4
 800b550:	2a24      	cmp	r2, #36	; 0x24
 800b552:	d824      	bhi.n	800b59e <_realloc_r+0x24e>
 800b554:	2a13      	cmp	r2, #19
 800b556:	d919      	bls.n	800b58c <_realloc_r+0x23c>
 800b558:	6821      	ldr	r1, [r4, #0]
 800b55a:	60a9      	str	r1, [r5, #8]
 800b55c:	6863      	ldr	r3, [r4, #4]
 800b55e:	60eb      	str	r3, [r5, #12]
 800b560:	2a1b      	cmp	r2, #27
 800b562:	d802      	bhi.n	800b56a <_realloc_r+0x21a>
 800b564:	3008      	adds	r0, #8
 800b566:	3408      	adds	r4, #8
 800b568:	e010      	b.n	800b58c <_realloc_r+0x23c>
 800b56a:	68a0      	ldr	r0, [r4, #8]
 800b56c:	6128      	str	r0, [r5, #16]
 800b56e:	68e1      	ldr	r1, [r4, #12]
 800b570:	6169      	str	r1, [r5, #20]
 800b572:	2a24      	cmp	r2, #36	; 0x24
 800b574:	d003      	beq.n	800b57e <_realloc_r+0x22e>
 800b576:	1c28      	adds	r0, r5, #0
 800b578:	3018      	adds	r0, #24
 800b57a:	3410      	adds	r4, #16
 800b57c:	e006      	b.n	800b58c <_realloc_r+0x23c>
 800b57e:	6922      	ldr	r2, [r4, #16]
 800b580:	1c28      	adds	r0, r5, #0
 800b582:	61aa      	str	r2, [r5, #24]
 800b584:	6963      	ldr	r3, [r4, #20]
 800b586:	3020      	adds	r0, #32
 800b588:	61eb      	str	r3, [r5, #28]
 800b58a:	3418      	adds	r4, #24
 800b58c:	6821      	ldr	r1, [r4, #0]
 800b58e:	6001      	str	r1, [r0, #0]
 800b590:	6862      	ldr	r2, [r4, #4]
 800b592:	6042      	str	r2, [r0, #4]
 800b594:	68a4      	ldr	r4, [r4, #8]
 800b596:	6084      	str	r4, [r0, #8]
 800b598:	9601      	str	r6, [sp, #4]
 800b59a:	1c2f      	adds	r7, r5, #0
 800b59c:	e054      	b.n	800b648 <_realloc_r+0x2f8>
 800b59e:	1c21      	adds	r1, r4, #0
 800b5a0:	f7ff feb4 	bl	800b30c <memmove>
 800b5a4:	e7f8      	b.n	800b598 <_realloc_r+0x248>
 800b5a6:	9803      	ldr	r0, [sp, #12]
 800b5a8:	9905      	ldr	r1, [sp, #20]
 800b5aa:	f7fb fe05 	bl	80071b8 <_malloc_r>
 800b5ae:	1e06      	subs	r6, r0, #0
 800b5b0:	d045      	beq.n	800b63e <_realloc_r+0x2ee>
 800b5b2:	1c22      	adds	r2, r4, #0
 800b5b4:	3a08      	subs	r2, #8
 800b5b6:	6852      	ldr	r2, [r2, #4]
 800b5b8:	2101      	movs	r1, #1
 800b5ba:	1c03      	adds	r3, r0, #0
 800b5bc:	438a      	bics	r2, r1
 800b5be:	3b08      	subs	r3, #8
 800b5c0:	18ba      	adds	r2, r7, r2
 800b5c2:	4293      	cmp	r3, r2
 800b5c4:	d106      	bne.n	800b5d4 <_realloc_r+0x284>
 800b5c6:	685b      	ldr	r3, [r3, #4]
 800b5c8:	9c01      	ldr	r4, [sp, #4]
 800b5ca:	2203      	movs	r2, #3
 800b5cc:	4393      	bics	r3, r2
 800b5ce:	18e4      	adds	r4, r4, r3
 800b5d0:	9401      	str	r4, [sp, #4]
 800b5d2:	e039      	b.n	800b648 <_realloc_r+0x2f8>
 800b5d4:	9a01      	ldr	r2, [sp, #4]
 800b5d6:	3a04      	subs	r2, #4
 800b5d8:	2a24      	cmp	r2, #36	; 0x24
 800b5da:	d829      	bhi.n	800b630 <_realloc_r+0x2e0>
 800b5dc:	2a13      	cmp	r2, #19
 800b5de:	d91e      	bls.n	800b61e <_realloc_r+0x2ce>
 800b5e0:	6820      	ldr	r0, [r4, #0]
 800b5e2:	6030      	str	r0, [r6, #0]
 800b5e4:	6861      	ldr	r1, [r4, #4]
 800b5e6:	6071      	str	r1, [r6, #4]
 800b5e8:	2a1b      	cmp	r2, #27
 800b5ea:	d804      	bhi.n	800b5f6 <_realloc_r+0x2a6>
 800b5ec:	1c33      	adds	r3, r6, #0
 800b5ee:	1c22      	adds	r2, r4, #0
 800b5f0:	3308      	adds	r3, #8
 800b5f2:	3208      	adds	r2, #8
 800b5f4:	e015      	b.n	800b622 <_realloc_r+0x2d2>
 800b5f6:	68a3      	ldr	r3, [r4, #8]
 800b5f8:	60b3      	str	r3, [r6, #8]
 800b5fa:	68e0      	ldr	r0, [r4, #12]
 800b5fc:	60f0      	str	r0, [r6, #12]
 800b5fe:	2a24      	cmp	r2, #36	; 0x24
 800b600:	d004      	beq.n	800b60c <_realloc_r+0x2bc>
 800b602:	1c33      	adds	r3, r6, #0
 800b604:	1c22      	adds	r2, r4, #0
 800b606:	3310      	adds	r3, #16
 800b608:	3210      	adds	r2, #16
 800b60a:	e00a      	b.n	800b622 <_realloc_r+0x2d2>
 800b60c:	6921      	ldr	r1, [r4, #16]
 800b60e:	1c33      	adds	r3, r6, #0
 800b610:	6131      	str	r1, [r6, #16]
 800b612:	6960      	ldr	r0, [r4, #20]
 800b614:	1c22      	adds	r2, r4, #0
 800b616:	3318      	adds	r3, #24
 800b618:	3218      	adds	r2, #24
 800b61a:	6170      	str	r0, [r6, #20]
 800b61c:	e001      	b.n	800b622 <_realloc_r+0x2d2>
 800b61e:	1c03      	adds	r3, r0, #0
 800b620:	1c22      	adds	r2, r4, #0
 800b622:	6811      	ldr	r1, [r2, #0]
 800b624:	6019      	str	r1, [r3, #0]
 800b626:	6850      	ldr	r0, [r2, #4]
 800b628:	6058      	str	r0, [r3, #4]
 800b62a:	6892      	ldr	r2, [r2, #8]
 800b62c:	609a      	str	r2, [r3, #8]
 800b62e:	e002      	b.n	800b636 <_realloc_r+0x2e6>
 800b630:	1c21      	adds	r1, r4, #0
 800b632:	f7ff fe6b 	bl	800b30c <memmove>
 800b636:	9803      	ldr	r0, [sp, #12]
 800b638:	1c21      	adds	r1, r4, #0
 800b63a:	f7fe fd8d 	bl	800a158 <_free_r>
 800b63e:	9803      	ldr	r0, [sp, #12]
 800b640:	f7fb ffbe 	bl	80075c0 <__malloc_unlock>
 800b644:	1c30      	adds	r0, r6, #0
 800b646:	e023      	b.n	800b690 <_realloc_r+0x340>
 800b648:	9c01      	ldr	r4, [sp, #4]
 800b64a:	9e02      	ldr	r6, [sp, #8]
 800b64c:	2301      	movs	r3, #1
 800b64e:	1ba2      	subs	r2, r4, r6
 800b650:	6878      	ldr	r0, [r7, #4]
 800b652:	2a0f      	cmp	r2, #15
 800b654:	d90f      	bls.n	800b676 <_realloc_r+0x326>
 800b656:	4018      	ands	r0, r3
 800b658:	4330      	orrs	r0, r6
 800b65a:	6078      	str	r0, [r7, #4]
 800b65c:	1c18      	adds	r0, r3, #0
 800b65e:	19b9      	adds	r1, r7, r6
 800b660:	4310      	orrs	r0, r2
 800b662:	6048      	str	r0, [r1, #4]
 800b664:	188a      	adds	r2, r1, r2
 800b666:	6850      	ldr	r0, [r2, #4]
 800b668:	3108      	adds	r1, #8
 800b66a:	4303      	orrs	r3, r0
 800b66c:	6053      	str	r3, [r2, #4]
 800b66e:	9803      	ldr	r0, [sp, #12]
 800b670:	f7fe fd72 	bl	800a158 <_free_r>
 800b674:	e007      	b.n	800b686 <_realloc_r+0x336>
 800b676:	9c01      	ldr	r4, [sp, #4]
 800b678:	4018      	ands	r0, r3
 800b67a:	4320      	orrs	r0, r4
 800b67c:	6078      	str	r0, [r7, #4]
 800b67e:	193a      	adds	r2, r7, r4
 800b680:	6856      	ldr	r6, [r2, #4]
 800b682:	4333      	orrs	r3, r6
 800b684:	6053      	str	r3, [r2, #4]
 800b686:	9803      	ldr	r0, [sp, #12]
 800b688:	f7fb ff9a 	bl	80075c0 <__malloc_unlock>
 800b68c:	1c38      	adds	r0, r7, #0
 800b68e:	3008      	adds	r0, #8
 800b690:	b007      	add	sp, #28
 800b692:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b694:	20000004 	.word	0x20000004

0800b698 <round>:
 800b698:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b69a:	004e      	lsls	r6, r1, #1
 800b69c:	4f23      	ldr	r7, [pc, #140]	; (800b72c <round+0x94>)
 800b69e:	0d76      	lsrs	r6, r6, #21
 800b6a0:	1c02      	adds	r2, r0, #0
 800b6a2:	1c0b      	adds	r3, r1, #0
 800b6a4:	1c0d      	adds	r5, r1, #0
 800b6a6:	1c08      	adds	r0, r1, #0
 800b6a8:	19f1      	adds	r1, r6, r7
 800b6aa:	9201      	str	r2, [sp, #4]
 800b6ac:	2913      	cmp	r1, #19
 800b6ae:	dc16      	bgt.n	800b6de <round+0x46>
 800b6b0:	2900      	cmp	r1, #0
 800b6b2:	da07      	bge.n	800b6c4 <round+0x2c>
 800b6b4:	0fd8      	lsrs	r0, r3, #31
 800b6b6:	07c0      	lsls	r0, r0, #31
 800b6b8:	2600      	movs	r6, #0
 800b6ba:	3101      	adds	r1, #1
 800b6bc:	d12f      	bne.n	800b71e <round+0x86>
 800b6be:	4b1c      	ldr	r3, [pc, #112]	; (800b730 <round+0x98>)
 800b6c0:	4318      	orrs	r0, r3
 800b6c2:	e02c      	b.n	800b71e <round+0x86>
 800b6c4:	4e1b      	ldr	r6, [pc, #108]	; (800b734 <round+0x9c>)
 800b6c6:	410e      	asrs	r6, r1
 800b6c8:	1c30      	adds	r0, r6, #0
 800b6ca:	4018      	ands	r0, r3
 800b6cc:	4310      	orrs	r0, r2
 800b6ce:	d028      	beq.n	800b722 <round+0x8a>
 800b6d0:	2080      	movs	r0, #128	; 0x80
 800b6d2:	0300      	lsls	r0, r0, #12
 800b6d4:	4108      	asrs	r0, r1
 800b6d6:	18c0      	adds	r0, r0, r3
 800b6d8:	43b0      	bics	r0, r6
 800b6da:	2600      	movs	r6, #0
 800b6dc:	e01f      	b.n	800b71e <round+0x86>
 800b6de:	2933      	cmp	r1, #51	; 0x33
 800b6e0:	dd0a      	ble.n	800b6f8 <round+0x60>
 800b6e2:	2080      	movs	r0, #128	; 0x80
 800b6e4:	00c0      	lsls	r0, r0, #3
 800b6e6:	4281      	cmp	r1, r0
 800b6e8:	d11b      	bne.n	800b722 <round+0x8a>
 800b6ea:	1c10      	adds	r0, r2, #0
 800b6ec:	1c19      	adds	r1, r3, #0
 800b6ee:	f7f5 fc13 	bl	8000f18 <__aeabi_dadd>
 800b6f2:	1c02      	adds	r2, r0, #0
 800b6f4:	1c0b      	adds	r3, r1, #0
 800b6f6:	e014      	b.n	800b722 <round+0x8a>
 800b6f8:	4f0f      	ldr	r7, [pc, #60]	; (800b738 <round+0xa0>)
 800b6fa:	19f1      	adds	r1, r6, r7
 800b6fc:	2701      	movs	r7, #1
 800b6fe:	46bc      	mov	ip, r7
 800b700:	427f      	negs	r7, r7
 800b702:	40cf      	lsrs	r7, r1
 800b704:	1c39      	adds	r1, r7, #0
 800b706:	4217      	tst	r7, r2
 800b708:	d00b      	beq.n	800b722 <round+0x8a>
 800b70a:	4b0c      	ldr	r3, [pc, #48]	; (800b73c <round+0xa4>)
 800b70c:	1b9e      	subs	r6, r3, r6
 800b70e:	4663      	mov	r3, ip
 800b710:	40b3      	lsls	r3, r6
 800b712:	189e      	adds	r6, r3, r2
 800b714:	9b01      	ldr	r3, [sp, #4]
 800b716:	429e      	cmp	r6, r3
 800b718:	d200      	bcs.n	800b71c <round+0x84>
 800b71a:	1c68      	adds	r0, r5, #1
 800b71c:	438e      	bics	r6, r1
 800b71e:	1c03      	adds	r3, r0, #0
 800b720:	1c32      	adds	r2, r6, #0
 800b722:	1c10      	adds	r0, r2, #0
 800b724:	1c19      	adds	r1, r3, #0
 800b726:	b003      	add	sp, #12
 800b728:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b72a:	46c0      	nop			; (mov r8, r8)
 800b72c:	fffffc01 	.word	0xfffffc01
 800b730:	3ff00000 	.word	0x3ff00000
 800b734:	000fffff 	.word	0x000fffff
 800b738:	fffffbed 	.word	0xfffffbed
 800b73c:	00000432 	.word	0x00000432

0800b740 <log>:
 800b740:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b742:	b08b      	sub	sp, #44	; 0x2c
 800b744:	1c04      	adds	r4, r0, #0
 800b746:	1c0d      	adds	r5, r1, #0
 800b748:	f000 f87a 	bl	800b840 <__ieee754_log>
 800b74c:	4b38      	ldr	r3, [pc, #224]	; (800b830 <log+0xf0>)
 800b74e:	1c0f      	adds	r7, r1, #0
 800b750:	2100      	movs	r1, #0
 800b752:	5659      	ldrsb	r1, [r3, r1]
 800b754:	1c06      	adds	r6, r0, #0
 800b756:	1c32      	adds	r2, r6, #0
 800b758:	1c3b      	adds	r3, r7, #0
 800b75a:	3101      	adds	r1, #1
 800b75c:	d055      	beq.n	800b80a <log+0xca>
 800b75e:	1c20      	adds	r0, r4, #0
 800b760:	1c29      	adds	r1, r5, #0
 800b762:	f7ff fcd9 	bl	800b118 <__fpclassifyd>
 800b766:	1c32      	adds	r2, r6, #0
 800b768:	1c3b      	adds	r3, r7, #0
 800b76a:	2800      	cmp	r0, #0
 800b76c:	d04d      	beq.n	800b80a <log+0xca>
 800b76e:	4b2b      	ldr	r3, [pc, #172]	; (800b81c <log+0xdc>)
 800b770:	4a29      	ldr	r2, [pc, #164]	; (800b818 <log+0xd8>)
 800b772:	1c20      	adds	r0, r4, #0
 800b774:	1c29      	adds	r1, r5, #0
 800b776:	f7f4 fdbf 	bl	80002f8 <__aeabi_dcmpgt>
 800b77a:	1c32      	adds	r2, r6, #0
 800b77c:	1c3b      	adds	r3, r7, #0
 800b77e:	2800      	cmp	r0, #0
 800b780:	d143      	bne.n	800b80a <log+0xca>
 800b782:	4b2c      	ldr	r3, [pc, #176]	; (800b834 <log+0xf4>)
 800b784:	9008      	str	r0, [sp, #32]
 800b786:	9301      	str	r3, [sp, #4]
 800b788:	4b29      	ldr	r3, [pc, #164]	; (800b830 <log+0xf0>)
 800b78a:	9402      	str	r4, [sp, #8]
 800b78c:	9503      	str	r5, [sp, #12]
 800b78e:	781e      	ldrb	r6, [r3, #0]
 800b790:	9404      	str	r4, [sp, #16]
 800b792:	9505      	str	r5, [sp, #20]
 800b794:	2e00      	cmp	r6, #0
 800b796:	d102      	bne.n	800b79e <log+0x5e>
 800b798:	4a21      	ldr	r2, [pc, #132]	; (800b820 <log+0xe0>)
 800b79a:	4b22      	ldr	r3, [pc, #136]	; (800b824 <log+0xe4>)
 800b79c:	e001      	b.n	800b7a2 <log+0x62>
 800b79e:	4a22      	ldr	r2, [pc, #136]	; (800b828 <log+0xe8>)
 800b7a0:	4b22      	ldr	r3, [pc, #136]	; (800b82c <log+0xec>)
 800b7a2:	9206      	str	r2, [sp, #24]
 800b7a4:	9307      	str	r3, [sp, #28]
 800b7a6:	4b1d      	ldr	r3, [pc, #116]	; (800b81c <log+0xdc>)
 800b7a8:	4a1b      	ldr	r2, [pc, #108]	; (800b818 <log+0xd8>)
 800b7aa:	1c20      	adds	r0, r4, #0
 800b7ac:	1c29      	adds	r1, r5, #0
 800b7ae:	f7f4 fd89 	bl	80002c4 <__aeabi_dcmpeq>
 800b7b2:	b276      	sxtb	r6, r6
 800b7b4:	2800      	cmp	r0, #0
 800b7b6:	d00d      	beq.n	800b7d4 <log+0x94>
 800b7b8:	2302      	movs	r3, #2
 800b7ba:	9300      	str	r3, [sp, #0]
 800b7bc:	429e      	cmp	r6, r3
 800b7be:	d004      	beq.n	800b7ca <log+0x8a>
 800b7c0:	4668      	mov	r0, sp
 800b7c2:	f000 fa55 	bl	800bc70 <matherr>
 800b7c6:	2800      	cmp	r0, #0
 800b7c8:	d116      	bne.n	800b7f8 <log+0xb8>
 800b7ca:	f000 fa5d 	bl	800bc88 <__errno>
 800b7ce:	2322      	movs	r3, #34	; 0x22
 800b7d0:	6003      	str	r3, [r0, #0]
 800b7d2:	e011      	b.n	800b7f8 <log+0xb8>
 800b7d4:	2301      	movs	r3, #1
 800b7d6:	9300      	str	r3, [sp, #0]
 800b7d8:	2e02      	cmp	r6, #2
 800b7da:	d004      	beq.n	800b7e6 <log+0xa6>
 800b7dc:	4668      	mov	r0, sp
 800b7de:	f000 fa47 	bl	800bc70 <matherr>
 800b7e2:	2800      	cmp	r0, #0
 800b7e4:	d103      	bne.n	800b7ee <log+0xae>
 800b7e6:	f000 fa4f 	bl	800bc88 <__errno>
 800b7ea:	2321      	movs	r3, #33	; 0x21
 800b7ec:	6003      	str	r3, [r0, #0]
 800b7ee:	4812      	ldr	r0, [pc, #72]	; (800b838 <log+0xf8>)
 800b7f0:	f000 fa42 	bl	800bc78 <nan>
 800b7f4:	9006      	str	r0, [sp, #24]
 800b7f6:	9107      	str	r1, [sp, #28]
 800b7f8:	9b08      	ldr	r3, [sp, #32]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d003      	beq.n	800b806 <log+0xc6>
 800b7fe:	f000 fa43 	bl	800bc88 <__errno>
 800b802:	9b08      	ldr	r3, [sp, #32]
 800b804:	6003      	str	r3, [r0, #0]
 800b806:	9a06      	ldr	r2, [sp, #24]
 800b808:	9b07      	ldr	r3, [sp, #28]
 800b80a:	1c10      	adds	r0, r2, #0
 800b80c:	1c19      	adds	r1, r3, #0
 800b80e:	b00b      	add	sp, #44	; 0x2c
 800b810:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b812:	46c0      	nop			; (mov r8, r8)
 800b814:	46c0      	nop			; (mov r8, r8)
 800b816:	46c0      	nop			; (mov r8, r8)
	...
 800b820:	e0000000 	.word	0xe0000000
 800b824:	c7efffff 	.word	0xc7efffff
 800b828:	00000000 	.word	0x00000000
 800b82c:	fff00000 	.word	0xfff00000
 800b830:	20000544 	.word	0x20000544
 800b834:	0800c5e4 	.word	0x0800c5e4
 800b838:	0800beec 	.word	0x0800beec
 800b83c:	46c0      	nop			; (mov r8, r8)
 800b83e:	46c0      	nop			; (mov r8, r8)

0800b840 <__ieee754_log>:
 800b840:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b842:	4edb      	ldr	r6, [pc, #876]	; (800bbb0 <__ieee754_log+0x370>)
 800b844:	b08b      	sub	sp, #44	; 0x2c
 800b846:	1c02      	adds	r2, r0, #0
 800b848:	1c0b      	adds	r3, r1, #0
 800b84a:	1c0c      	adds	r4, r1, #0
 800b84c:	1c0d      	adds	r5, r1, #0
 800b84e:	42b1      	cmp	r1, r6
 800b850:	dc1b      	bgt.n	800b88a <__ieee754_log+0x4a>
 800b852:	0049      	lsls	r1, r1, #1
 800b854:	0849      	lsrs	r1, r1, #1
 800b856:	4308      	orrs	r0, r1
 800b858:	d102      	bne.n	800b860 <__ieee754_log+0x20>
 800b85a:	49b6      	ldr	r1, [pc, #728]	; (800bb34 <__ieee754_log+0x2f4>)
 800b85c:	48b4      	ldr	r0, [pc, #720]	; (800bb30 <__ieee754_log+0x2f0>)
 800b85e:	e005      	b.n	800b86c <__ieee754_log+0x2c>
 800b860:	1c10      	adds	r0, r2, #0
 800b862:	1c19      	adds	r1, r3, #0
 800b864:	2c00      	cmp	r4, #0
 800b866:	da06      	bge.n	800b876 <__ieee754_log+0x36>
 800b868:	f7f6 fd6c 	bl	8002344 <__aeabi_dsub>
 800b86c:	4ab2      	ldr	r2, [pc, #712]	; (800bb38 <__ieee754_log+0x2f8>)
 800b86e:	4bb3      	ldr	r3, [pc, #716]	; (800bb3c <__ieee754_log+0x2fc>)
 800b870:	f7f5 fe6e 	bl	8001550 <__aeabi_ddiv>
 800b874:	e1ed      	b.n	800bc52 <__ieee754_log+0x412>
 800b876:	4ab2      	ldr	r2, [pc, #712]	; (800bb40 <__ieee754_log+0x300>)
 800b878:	4bb2      	ldr	r3, [pc, #712]	; (800bb44 <__ieee754_log+0x304>)
 800b87a:	f7f6 fad3 	bl	8001e24 <__aeabi_dmul>
 800b87e:	1c0b      	adds	r3, r1, #0
 800b880:	1c0d      	adds	r5, r1, #0
 800b882:	2136      	movs	r1, #54	; 0x36
 800b884:	1c02      	adds	r2, r0, #0
 800b886:	4249      	negs	r1, r1
 800b888:	e000      	b.n	800b88c <__ieee754_log+0x4c>
 800b88a:	2100      	movs	r1, #0
 800b88c:	48c9      	ldr	r0, [pc, #804]	; (800bbb4 <__ieee754_log+0x374>)
 800b88e:	4285      	cmp	r5, r0
 800b890:	dd02      	ble.n	800b898 <__ieee754_log+0x58>
 800b892:	1c10      	adds	r0, r2, #0
 800b894:	1c19      	adds	r1, r3, #0
 800b896:	e03f      	b.n	800b918 <__ieee754_log+0xd8>
 800b898:	48c7      	ldr	r0, [pc, #796]	; (800bbb8 <__ieee754_log+0x378>)
 800b89a:	152e      	asrs	r6, r5, #20
 800b89c:	4cc7      	ldr	r4, [pc, #796]	; (800bbbc <__ieee754_log+0x37c>)
 800b89e:	032d      	lsls	r5, r5, #12
 800b8a0:	0b2d      	lsrs	r5, r5, #12
 800b8a2:	1836      	adds	r6, r6, r0
 800b8a4:	198e      	adds	r6, r1, r6
 800b8a6:	1929      	adds	r1, r5, r4
 800b8a8:	2480      	movs	r4, #128	; 0x80
 800b8aa:	0364      	lsls	r4, r4, #13
 800b8ac:	400c      	ands	r4, r1
 800b8ae:	49c4      	ldr	r1, [pc, #784]	; (800bbc0 <__ieee754_log+0x380>)
 800b8b0:	1c2b      	adds	r3, r5, #0
 800b8b2:	4061      	eors	r1, r4
 800b8b4:	430b      	orrs	r3, r1
 800b8b6:	1524      	asrs	r4, r4, #20
 800b8b8:	1c10      	adds	r0, r2, #0
 800b8ba:	1c19      	adds	r1, r3, #0
 800b8bc:	1934      	adds	r4, r6, r4
 800b8be:	4aa2      	ldr	r2, [pc, #648]	; (800bb48 <__ieee754_log+0x308>)
 800b8c0:	4ba2      	ldr	r3, [pc, #648]	; (800bb4c <__ieee754_log+0x30c>)
 800b8c2:	9508      	str	r5, [sp, #32]
 800b8c4:	9400      	str	r4, [sp, #0]
 800b8c6:	f7f6 fd3d 	bl	8002344 <__aeabi_dsub>
 800b8ca:	9b08      	ldr	r3, [sp, #32]
 800b8cc:	1c04      	adds	r4, r0, #0
 800b8ce:	3302      	adds	r3, #2
 800b8d0:	031b      	lsls	r3, r3, #12
 800b8d2:	1c0d      	adds	r5, r1, #0
 800b8d4:	0b1b      	lsrs	r3, r3, #12
 800b8d6:	2b02      	cmp	r3, #2
 800b8d8:	dc65      	bgt.n	800b9a6 <__ieee754_log+0x166>
 800b8da:	4a97      	ldr	r2, [pc, #604]	; (800bb38 <__ieee754_log+0x2f8>)
 800b8dc:	4b97      	ldr	r3, [pc, #604]	; (800bb3c <__ieee754_log+0x2fc>)
 800b8de:	f7f4 fcf1 	bl	80002c4 <__aeabi_dcmpeq>
 800b8e2:	2800      	cmp	r0, #0
 800b8e4:	d01b      	beq.n	800b91e <__ieee754_log+0xde>
 800b8e6:	9c00      	ldr	r4, [sp, #0]
 800b8e8:	2c00      	cmp	r4, #0
 800b8ea:	d100      	bne.n	800b8ee <__ieee754_log+0xae>
 800b8ec:	e1af      	b.n	800bc4e <__ieee754_log+0x40e>
 800b8ee:	1c20      	adds	r0, r4, #0
 800b8f0:	f7f7 f886 	bl	8002a00 <__aeabi_i2d>
 800b8f4:	4a96      	ldr	r2, [pc, #600]	; (800bb50 <__ieee754_log+0x310>)
 800b8f6:	4b97      	ldr	r3, [pc, #604]	; (800bb54 <__ieee754_log+0x314>)
 800b8f8:	1c04      	adds	r4, r0, #0
 800b8fa:	1c0d      	adds	r5, r1, #0
 800b8fc:	f7f6 fa92 	bl	8001e24 <__aeabi_dmul>
 800b900:	4a95      	ldr	r2, [pc, #596]	; (800bb58 <__ieee754_log+0x318>)
 800b902:	4b96      	ldr	r3, [pc, #600]	; (800bb5c <__ieee754_log+0x31c>)
 800b904:	1c06      	adds	r6, r0, #0
 800b906:	1c0f      	adds	r7, r1, #0
 800b908:	1c20      	adds	r0, r4, #0
 800b90a:	1c29      	adds	r1, r5, #0
 800b90c:	f7f6 fa8a 	bl	8001e24 <__aeabi_dmul>
 800b910:	1c02      	adds	r2, r0, #0
 800b912:	1c0b      	adds	r3, r1, #0
 800b914:	1c30      	adds	r0, r6, #0
 800b916:	1c39      	adds	r1, r7, #0
 800b918:	f7f5 fafe 	bl	8000f18 <__aeabi_dadd>
 800b91c:	e199      	b.n	800bc52 <__ieee754_log+0x412>
 800b91e:	1c22      	adds	r2, r4, #0
 800b920:	1c2b      	adds	r3, r5, #0
 800b922:	1c20      	adds	r0, r4, #0
 800b924:	1c29      	adds	r1, r5, #0
 800b926:	f7f6 fa7d 	bl	8001e24 <__aeabi_dmul>
 800b92a:	4a8d      	ldr	r2, [pc, #564]	; (800bb60 <__ieee754_log+0x320>)
 800b92c:	4b8d      	ldr	r3, [pc, #564]	; (800bb64 <__ieee754_log+0x324>)
 800b92e:	1c06      	adds	r6, r0, #0
 800b930:	1c0f      	adds	r7, r1, #0
 800b932:	1c20      	adds	r0, r4, #0
 800b934:	1c29      	adds	r1, r5, #0
 800b936:	f7f6 fa75 	bl	8001e24 <__aeabi_dmul>
 800b93a:	1c02      	adds	r2, r0, #0
 800b93c:	1c0b      	adds	r3, r1, #0
 800b93e:	488a      	ldr	r0, [pc, #552]	; (800bb68 <__ieee754_log+0x328>)
 800b940:	498a      	ldr	r1, [pc, #552]	; (800bb6c <__ieee754_log+0x32c>)
 800b942:	f7f6 fcff 	bl	8002344 <__aeabi_dsub>
 800b946:	1c02      	adds	r2, r0, #0
 800b948:	1c0b      	adds	r3, r1, #0
 800b94a:	1c30      	adds	r0, r6, #0
 800b94c:	1c39      	adds	r1, r7, #0
 800b94e:	f7f6 fa69 	bl	8001e24 <__aeabi_dmul>
 800b952:	1c06      	adds	r6, r0, #0
 800b954:	9800      	ldr	r0, [sp, #0]
 800b956:	1c0f      	adds	r7, r1, #0
 800b958:	2800      	cmp	r0, #0
 800b95a:	d104      	bne.n	800b966 <__ieee754_log+0x126>
 800b95c:	1c20      	adds	r0, r4, #0
 800b95e:	1c29      	adds	r1, r5, #0
 800b960:	1c32      	adds	r2, r6, #0
 800b962:	1c3b      	adds	r3, r7, #0
 800b964:	e170      	b.n	800bc48 <__ieee754_log+0x408>
 800b966:	9800      	ldr	r0, [sp, #0]
 800b968:	f7f7 f84a 	bl	8002a00 <__aeabi_i2d>
 800b96c:	4a78      	ldr	r2, [pc, #480]	; (800bb50 <__ieee754_log+0x310>)
 800b96e:	4b79      	ldr	r3, [pc, #484]	; (800bb54 <__ieee754_log+0x314>)
 800b970:	9000      	str	r0, [sp, #0]
 800b972:	9101      	str	r1, [sp, #4]
 800b974:	f7f6 fa56 	bl	8001e24 <__aeabi_dmul>
 800b978:	4a77      	ldr	r2, [pc, #476]	; (800bb58 <__ieee754_log+0x318>)
 800b97a:	4b78      	ldr	r3, [pc, #480]	; (800bb5c <__ieee754_log+0x31c>)
 800b97c:	9002      	str	r0, [sp, #8]
 800b97e:	9103      	str	r1, [sp, #12]
 800b980:	9800      	ldr	r0, [sp, #0]
 800b982:	9901      	ldr	r1, [sp, #4]
 800b984:	f7f6 fa4e 	bl	8001e24 <__aeabi_dmul>
 800b988:	1c02      	adds	r2, r0, #0
 800b98a:	1c0b      	adds	r3, r1, #0
 800b98c:	1c30      	adds	r0, r6, #0
 800b98e:	1c39      	adds	r1, r7, #0
 800b990:	f7f6 fcd8 	bl	8002344 <__aeabi_dsub>
 800b994:	1c22      	adds	r2, r4, #0
 800b996:	1c2b      	adds	r3, r5, #0
 800b998:	f7f6 fcd4 	bl	8002344 <__aeabi_dsub>
 800b99c:	1c02      	adds	r2, r0, #0
 800b99e:	1c0b      	adds	r3, r1, #0
 800b9a0:	9802      	ldr	r0, [sp, #8]
 800b9a2:	9903      	ldr	r1, [sp, #12]
 800b9a4:	e150      	b.n	800bc48 <__ieee754_log+0x408>
 800b9a6:	4a72      	ldr	r2, [pc, #456]	; (800bb70 <__ieee754_log+0x330>)
 800b9a8:	4b72      	ldr	r3, [pc, #456]	; (800bb74 <__ieee754_log+0x334>)
 800b9aa:	f7f5 fab5 	bl	8000f18 <__aeabi_dadd>
 800b9ae:	1c02      	adds	r2, r0, #0
 800b9b0:	1c0b      	adds	r3, r1, #0
 800b9b2:	1c20      	adds	r0, r4, #0
 800b9b4:	1c29      	adds	r1, r5, #0
 800b9b6:	f7f5 fdcb 	bl	8001550 <__aeabi_ddiv>
 800b9ba:	9002      	str	r0, [sp, #8]
 800b9bc:	9103      	str	r1, [sp, #12]
 800b9be:	9800      	ldr	r0, [sp, #0]
 800b9c0:	f7f7 f81e 	bl	8002a00 <__aeabi_i2d>
 800b9c4:	9006      	str	r0, [sp, #24]
 800b9c6:	9107      	str	r1, [sp, #28]
 800b9c8:	9802      	ldr	r0, [sp, #8]
 800b9ca:	9903      	ldr	r1, [sp, #12]
 800b9cc:	1c02      	adds	r2, r0, #0
 800b9ce:	1c0b      	adds	r3, r1, #0
 800b9d0:	f7f6 fa28 	bl	8001e24 <__aeabi_dmul>
 800b9d4:	9a08      	ldr	r2, [sp, #32]
 800b9d6:	4b7b      	ldr	r3, [pc, #492]	; (800bbc4 <__ieee754_log+0x384>)
 800b9d8:	9004      	str	r0, [sp, #16]
 800b9da:	9105      	str	r1, [sp, #20]
 800b9dc:	18d3      	adds	r3, r2, r3
 800b9de:	9309      	str	r3, [sp, #36]	; 0x24
 800b9e0:	1c02      	adds	r2, r0, #0
 800b9e2:	1c0b      	adds	r3, r1, #0
 800b9e4:	f7f6 fa1e 	bl	8001e24 <__aeabi_dmul>
 800b9e8:	4a63      	ldr	r2, [pc, #396]	; (800bb78 <__ieee754_log+0x338>)
 800b9ea:	4b64      	ldr	r3, [pc, #400]	; (800bb7c <__ieee754_log+0x33c>)
 800b9ec:	1c06      	adds	r6, r0, #0
 800b9ee:	1c0f      	adds	r7, r1, #0
 800b9f0:	f7f6 fa18 	bl	8001e24 <__aeabi_dmul>
 800b9f4:	4a62      	ldr	r2, [pc, #392]	; (800bb80 <__ieee754_log+0x340>)
 800b9f6:	4b63      	ldr	r3, [pc, #396]	; (800bb84 <__ieee754_log+0x344>)
 800b9f8:	f7f5 fa8e 	bl	8000f18 <__aeabi_dadd>
 800b9fc:	1c02      	adds	r2, r0, #0
 800b9fe:	1c0b      	adds	r3, r1, #0
 800ba00:	1c30      	adds	r0, r6, #0
 800ba02:	1c39      	adds	r1, r7, #0
 800ba04:	f7f6 fa0e 	bl	8001e24 <__aeabi_dmul>
 800ba08:	4a5f      	ldr	r2, [pc, #380]	; (800bb88 <__ieee754_log+0x348>)
 800ba0a:	4b60      	ldr	r3, [pc, #384]	; (800bb8c <__ieee754_log+0x34c>)
 800ba0c:	f7f5 fa84 	bl	8000f18 <__aeabi_dadd>
 800ba10:	1c02      	adds	r2, r0, #0
 800ba12:	1c0b      	adds	r3, r1, #0
 800ba14:	1c30      	adds	r0, r6, #0
 800ba16:	1c39      	adds	r1, r7, #0
 800ba18:	f7f6 fa04 	bl	8001e24 <__aeabi_dmul>
 800ba1c:	4a5c      	ldr	r2, [pc, #368]	; (800bb90 <__ieee754_log+0x350>)
 800ba1e:	4b5d      	ldr	r3, [pc, #372]	; (800bb94 <__ieee754_log+0x354>)
 800ba20:	f7f5 fa7a 	bl	8000f18 <__aeabi_dadd>
 800ba24:	1c02      	adds	r2, r0, #0
 800ba26:	1c0b      	adds	r3, r1, #0
 800ba28:	9804      	ldr	r0, [sp, #16]
 800ba2a:	9905      	ldr	r1, [sp, #20]
 800ba2c:	f7f6 f9fa 	bl	8001e24 <__aeabi_dmul>
 800ba30:	4a59      	ldr	r2, [pc, #356]	; (800bb98 <__ieee754_log+0x358>)
 800ba32:	4b5a      	ldr	r3, [pc, #360]	; (800bb9c <__ieee754_log+0x35c>)
 800ba34:	9004      	str	r0, [sp, #16]
 800ba36:	9105      	str	r1, [sp, #20]
 800ba38:	1c30      	adds	r0, r6, #0
 800ba3a:	1c39      	adds	r1, r7, #0
 800ba3c:	f7f6 f9f2 	bl	8001e24 <__aeabi_dmul>
 800ba40:	4a57      	ldr	r2, [pc, #348]	; (800bba0 <__ieee754_log+0x360>)
 800ba42:	4b58      	ldr	r3, [pc, #352]	; (800bba4 <__ieee754_log+0x364>)
 800ba44:	f7f5 fa68 	bl	8000f18 <__aeabi_dadd>
 800ba48:	1c02      	adds	r2, r0, #0
 800ba4a:	1c0b      	adds	r3, r1, #0
 800ba4c:	1c30      	adds	r0, r6, #0
 800ba4e:	1c39      	adds	r1, r7, #0
 800ba50:	f7f6 f9e8 	bl	8001e24 <__aeabi_dmul>
 800ba54:	4a54      	ldr	r2, [pc, #336]	; (800bba8 <__ieee754_log+0x368>)
 800ba56:	4b55      	ldr	r3, [pc, #340]	; (800bbac <__ieee754_log+0x36c>)
 800ba58:	f7f5 fa5e 	bl	8000f18 <__aeabi_dadd>
 800ba5c:	1c02      	adds	r2, r0, #0
 800ba5e:	1c0b      	adds	r3, r1, #0
 800ba60:	1c30      	adds	r0, r6, #0
 800ba62:	1c39      	adds	r1, r7, #0
 800ba64:	f7f6 f9de 	bl	8001e24 <__aeabi_dmul>
 800ba68:	1c02      	adds	r2, r0, #0
 800ba6a:	1c0b      	adds	r3, r1, #0
 800ba6c:	9804      	ldr	r0, [sp, #16]
 800ba6e:	9905      	ldr	r1, [sp, #20]
 800ba70:	f7f5 fa52 	bl	8000f18 <__aeabi_dadd>
 800ba74:	4b54      	ldr	r3, [pc, #336]	; (800bbc8 <__ieee754_log+0x388>)
 800ba76:	9004      	str	r0, [sp, #16]
 800ba78:	9105      	str	r1, [sp, #20]
 800ba7a:	9808      	ldr	r0, [sp, #32]
 800ba7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba7e:	1a1b      	subs	r3, r3, r0
 800ba80:	4313      	orrs	r3, r2
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	dc00      	bgt.n	800ba88 <__ieee754_log+0x248>
 800ba86:	e0a1      	b.n	800bbcc <__ieee754_log+0x38c>
 800ba88:	4a37      	ldr	r2, [pc, #220]	; (800bb68 <__ieee754_log+0x328>)
 800ba8a:	4b38      	ldr	r3, [pc, #224]	; (800bb6c <__ieee754_log+0x32c>)
 800ba8c:	1c20      	adds	r0, r4, #0
 800ba8e:	1c29      	adds	r1, r5, #0
 800ba90:	f7f6 f9c8 	bl	8001e24 <__aeabi_dmul>
 800ba94:	1c2b      	adds	r3, r5, #0
 800ba96:	1c22      	adds	r2, r4, #0
 800ba98:	f7f6 f9c4 	bl	8001e24 <__aeabi_dmul>
 800ba9c:	9b00      	ldr	r3, [sp, #0]
 800ba9e:	1c06      	adds	r6, r0, #0
 800baa0:	1c0f      	adds	r7, r1, #0
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d110      	bne.n	800bac8 <__ieee754_log+0x288>
 800baa6:	9a04      	ldr	r2, [sp, #16]
 800baa8:	9b05      	ldr	r3, [sp, #20]
 800baaa:	f7f5 fa35 	bl	8000f18 <__aeabi_dadd>
 800baae:	1c02      	adds	r2, r0, #0
 800bab0:	1c0b      	adds	r3, r1, #0
 800bab2:	9802      	ldr	r0, [sp, #8]
 800bab4:	9903      	ldr	r1, [sp, #12]
 800bab6:	f7f6 f9b5 	bl	8001e24 <__aeabi_dmul>
 800baba:	1c02      	adds	r2, r0, #0
 800babc:	1c0b      	adds	r3, r1, #0
 800babe:	1c30      	adds	r0, r6, #0
 800bac0:	1c39      	adds	r1, r7, #0
 800bac2:	f7f6 fc3f 	bl	8002344 <__aeabi_dsub>
 800bac6:	e090      	b.n	800bbea <__ieee754_log+0x3aa>
 800bac8:	4a21      	ldr	r2, [pc, #132]	; (800bb50 <__ieee754_log+0x310>)
 800baca:	4b22      	ldr	r3, [pc, #136]	; (800bb54 <__ieee754_log+0x314>)
 800bacc:	9806      	ldr	r0, [sp, #24]
 800bace:	9907      	ldr	r1, [sp, #28]
 800bad0:	f7f6 f9a8 	bl	8001e24 <__aeabi_dmul>
 800bad4:	9a04      	ldr	r2, [sp, #16]
 800bad6:	9b05      	ldr	r3, [sp, #20]
 800bad8:	9000      	str	r0, [sp, #0]
 800bada:	9101      	str	r1, [sp, #4]
 800badc:	1c30      	adds	r0, r6, #0
 800bade:	1c39      	adds	r1, r7, #0
 800bae0:	f7f5 fa1a 	bl	8000f18 <__aeabi_dadd>
 800bae4:	1c02      	adds	r2, r0, #0
 800bae6:	1c0b      	adds	r3, r1, #0
 800bae8:	9802      	ldr	r0, [sp, #8]
 800baea:	9903      	ldr	r1, [sp, #12]
 800baec:	f7f6 f99a 	bl	8001e24 <__aeabi_dmul>
 800baf0:	4a19      	ldr	r2, [pc, #100]	; (800bb58 <__ieee754_log+0x318>)
 800baf2:	4b1a      	ldr	r3, [pc, #104]	; (800bb5c <__ieee754_log+0x31c>)
 800baf4:	9002      	str	r0, [sp, #8]
 800baf6:	9103      	str	r1, [sp, #12]
 800baf8:	9806      	ldr	r0, [sp, #24]
 800bafa:	9907      	ldr	r1, [sp, #28]
 800bafc:	f7f6 f992 	bl	8001e24 <__aeabi_dmul>
 800bb00:	1c02      	adds	r2, r0, #0
 800bb02:	1c0b      	adds	r3, r1, #0
 800bb04:	9802      	ldr	r0, [sp, #8]
 800bb06:	9903      	ldr	r1, [sp, #12]
 800bb08:	f7f5 fa06 	bl	8000f18 <__aeabi_dadd>
 800bb0c:	1c02      	adds	r2, r0, #0
 800bb0e:	1c0b      	adds	r3, r1, #0
 800bb10:	1c30      	adds	r0, r6, #0
 800bb12:	1c39      	adds	r1, r7, #0
 800bb14:	f7f6 fc16 	bl	8002344 <__aeabi_dsub>
 800bb18:	1c22      	adds	r2, r4, #0
 800bb1a:	1c2b      	adds	r3, r5, #0
 800bb1c:	f7f6 fc12 	bl	8002344 <__aeabi_dsub>
 800bb20:	1c02      	adds	r2, r0, #0
 800bb22:	1c0b      	adds	r3, r1, #0
 800bb24:	9800      	ldr	r0, [sp, #0]
 800bb26:	9901      	ldr	r1, [sp, #4]
 800bb28:	e08e      	b.n	800bc48 <__ieee754_log+0x408>
 800bb2a:	46c0      	nop			; (mov r8, r8)
 800bb2c:	46c0      	nop			; (mov r8, r8)
 800bb2e:	46c0      	nop			; (mov r8, r8)
 800bb30:	00000000 	.word	0x00000000
 800bb34:	c3500000 	.word	0xc3500000
	...
 800bb44:	43500000 	.word	0x43500000
 800bb48:	00000000 	.word	0x00000000
 800bb4c:	3ff00000 	.word	0x3ff00000
 800bb50:	fee00000 	.word	0xfee00000
 800bb54:	3fe62e42 	.word	0x3fe62e42
 800bb58:	35793c76 	.word	0x35793c76
 800bb5c:	3dea39ef 	.word	0x3dea39ef
 800bb60:	55555555 	.word	0x55555555
 800bb64:	3fd55555 	.word	0x3fd55555
 800bb68:	00000000 	.word	0x00000000
 800bb6c:	3fe00000 	.word	0x3fe00000
 800bb70:	00000000 	.word	0x00000000
 800bb74:	40000000 	.word	0x40000000
 800bb78:	df3e5244 	.word	0xdf3e5244
 800bb7c:	3fc2f112 	.word	0x3fc2f112
 800bb80:	96cb03de 	.word	0x96cb03de
 800bb84:	3fc74664 	.word	0x3fc74664
 800bb88:	94229359 	.word	0x94229359
 800bb8c:	3fd24924 	.word	0x3fd24924
 800bb90:	55555593 	.word	0x55555593
 800bb94:	3fe55555 	.word	0x3fe55555
 800bb98:	d078c69f 	.word	0xd078c69f
 800bb9c:	3fc39a09 	.word	0x3fc39a09
 800bba0:	1d8e78af 	.word	0x1d8e78af
 800bba4:	3fcc71c5 	.word	0x3fcc71c5
 800bba8:	9997fa04 	.word	0x9997fa04
 800bbac:	3fd99999 	.word	0x3fd99999
 800bbb0:	000fffff 	.word	0x000fffff
 800bbb4:	7fefffff 	.word	0x7fefffff
 800bbb8:	fffffc01 	.word	0xfffffc01
 800bbbc:	00095f64 	.word	0x00095f64
 800bbc0:	3ff00000 	.word	0x3ff00000
 800bbc4:	fff9eb86 	.word	0xfff9eb86
 800bbc8:	0006b851 	.word	0x0006b851
 800bbcc:	9800      	ldr	r0, [sp, #0]
 800bbce:	2800      	cmp	r0, #0
 800bbd0:	d110      	bne.n	800bbf4 <__ieee754_log+0x3b4>
 800bbd2:	9a04      	ldr	r2, [sp, #16]
 800bbd4:	9b05      	ldr	r3, [sp, #20]
 800bbd6:	1c20      	adds	r0, r4, #0
 800bbd8:	1c29      	adds	r1, r5, #0
 800bbda:	f7f6 fbb3 	bl	8002344 <__aeabi_dsub>
 800bbde:	1c02      	adds	r2, r0, #0
 800bbe0:	1c0b      	adds	r3, r1, #0
 800bbe2:	9802      	ldr	r0, [sp, #8]
 800bbe4:	9903      	ldr	r1, [sp, #12]
 800bbe6:	f7f6 f91d 	bl	8001e24 <__aeabi_dmul>
 800bbea:	1c02      	adds	r2, r0, #0
 800bbec:	1c0b      	adds	r3, r1, #0
 800bbee:	1c20      	adds	r0, r4, #0
 800bbf0:	1c29      	adds	r1, r5, #0
 800bbf2:	e029      	b.n	800bc48 <__ieee754_log+0x408>
 800bbf4:	4b19      	ldr	r3, [pc, #100]	; (800bc5c <__ieee754_log+0x41c>)
 800bbf6:	4a18      	ldr	r2, [pc, #96]	; (800bc58 <__ieee754_log+0x418>)
 800bbf8:	9806      	ldr	r0, [sp, #24]
 800bbfa:	9907      	ldr	r1, [sp, #28]
 800bbfc:	f7f6 f912 	bl	8001e24 <__aeabi_dmul>
 800bc00:	9a04      	ldr	r2, [sp, #16]
 800bc02:	9b05      	ldr	r3, [sp, #20]
 800bc04:	1c06      	adds	r6, r0, #0
 800bc06:	1c0f      	adds	r7, r1, #0
 800bc08:	1c20      	adds	r0, r4, #0
 800bc0a:	1c29      	adds	r1, r5, #0
 800bc0c:	f7f6 fb9a 	bl	8002344 <__aeabi_dsub>
 800bc10:	1c02      	adds	r2, r0, #0
 800bc12:	1c0b      	adds	r3, r1, #0
 800bc14:	9802      	ldr	r0, [sp, #8]
 800bc16:	9903      	ldr	r1, [sp, #12]
 800bc18:	f7f6 f904 	bl	8001e24 <__aeabi_dmul>
 800bc1c:	4a10      	ldr	r2, [pc, #64]	; (800bc60 <__ieee754_log+0x420>)
 800bc1e:	4b11      	ldr	r3, [pc, #68]	; (800bc64 <__ieee754_log+0x424>)
 800bc20:	9000      	str	r0, [sp, #0]
 800bc22:	9101      	str	r1, [sp, #4]
 800bc24:	9806      	ldr	r0, [sp, #24]
 800bc26:	9907      	ldr	r1, [sp, #28]
 800bc28:	f7f6 f8fc 	bl	8001e24 <__aeabi_dmul>
 800bc2c:	1c02      	adds	r2, r0, #0
 800bc2e:	1c0b      	adds	r3, r1, #0
 800bc30:	9800      	ldr	r0, [sp, #0]
 800bc32:	9901      	ldr	r1, [sp, #4]
 800bc34:	f7f6 fb86 	bl	8002344 <__aeabi_dsub>
 800bc38:	1c22      	adds	r2, r4, #0
 800bc3a:	1c2b      	adds	r3, r5, #0
 800bc3c:	f7f6 fb82 	bl	8002344 <__aeabi_dsub>
 800bc40:	1c02      	adds	r2, r0, #0
 800bc42:	1c0b      	adds	r3, r1, #0
 800bc44:	1c30      	adds	r0, r6, #0
 800bc46:	1c39      	adds	r1, r7, #0
 800bc48:	f7f6 fb7c 	bl	8002344 <__aeabi_dsub>
 800bc4c:	e001      	b.n	800bc52 <__ieee754_log+0x412>
 800bc4e:	4806      	ldr	r0, [pc, #24]	; (800bc68 <__ieee754_log+0x428>)
 800bc50:	4906      	ldr	r1, [pc, #24]	; (800bc6c <__ieee754_log+0x42c>)
 800bc52:	b00b      	add	sp, #44	; 0x2c
 800bc54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc56:	46c0      	nop			; (mov r8, r8)
 800bc58:	fee00000 	.word	0xfee00000
 800bc5c:	3fe62e42 	.word	0x3fe62e42
 800bc60:	35793c76 	.word	0x35793c76
 800bc64:	3dea39ef 	.word	0x3dea39ef
	...

0800bc70 <matherr>:
 800bc70:	2000      	movs	r0, #0
 800bc72:	4770      	bx	lr
 800bc74:	0000      	movs	r0, r0
	...

0800bc78 <nan>:
 800bc78:	4902      	ldr	r1, [pc, #8]	; (800bc84 <nan+0xc>)
 800bc7a:	4801      	ldr	r0, [pc, #4]	; (800bc80 <nan+0x8>)
 800bc7c:	4770      	bx	lr
 800bc7e:	46c0      	nop			; (mov r8, r8)
 800bc80:	00000000 	.word	0x00000000
 800bc84:	7ff80000 	.word	0x7ff80000

0800bc88 <__errno>:
 800bc88:	4b01      	ldr	r3, [pc, #4]	; (800bc90 <__errno+0x8>)
 800bc8a:	6818      	ldr	r0, [r3, #0]
 800bc8c:	4770      	bx	lr
 800bc8e:	46c0      	nop			; (mov r8, r8)
 800bc90:	20000508 	.word	0x20000508

0800bc94 <_init>:
 800bc94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc96:	46c0      	nop			; (mov r8, r8)
 800bc98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc9a:	bc08      	pop	{r3}
 800bc9c:	469e      	mov	lr, r3
 800bc9e:	4770      	bx	lr

0800bca0 <_fini>:
 800bca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bca2:	46c0      	nop			; (mov r8, r8)
 800bca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bca6:	bc08      	pop	{r3}
 800bca8:	469e      	mov	lr, r3
 800bcaa:	4770      	bx	lr
